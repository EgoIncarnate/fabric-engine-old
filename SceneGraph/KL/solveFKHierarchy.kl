//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Xfo, Bone;

operator solveFKBone(
  io Xfo pose[],
  io Bone bones[],
  io PoseParameterBinding binding,
  io PoseParameters poseParameters
) {
  if (bones[binding.target].parent == - 1) {
    pose[binding.target] = poseParameters.xfoValues[binding.target];
  }
  else {
    pose[binding.target] = pose[bones[binding.target].parent] * poseParameters.xfoValues[binding.source];
  }
}

operator solveFKHierarchy(
  io Xfo pose[],
  io Bone bones[],
  io PoseParameterBinding bindings[],
  io PoseParameters poseParameters
) {
  for (var Integer i = 0; i < bindings.size(); i++) {
    report(bindings[i]);
    if (bones[bindings[i].target].parent == - 1) {
      pose[bindings[i].target] = poseParameters.xfoValues[i];
    }
    else {
      pose[bindings[i].target] = pose[bones[bindings[i].target].parent] * poseParameters.xfoValues[bindings[i].source];
    }
  }
}

operator solveInvParentList(
  io Xfo pose[],
  io Bone bones[],
  io PoseParameterBinding bindings[],
  io PoseParameters poseParameters
) {
  for (var Integer i = 0; i < bindings.size(); i++) {
    if (bones[bindings[i].target].parent == - 1)
      poseParameters.xfoValues[bindings[i].source] = pose[bindings[i].target];
    else
      poseParameters.xfoValues[bindings[i].source] = pose[bones[bindings[i].target].parent].inverse() * pose[bindings[i].target];
  }
}

