//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Mat44, Xfo;
use FabricOGL, OGLBuffer, OGLShaderProgram, OGLTexture2D;

operator loadSkinningMatrices(
  io OGLShaderProgram shaderProgram,
  io Xfo pose[],
  io Mat44 invMatrices[],
  io Integer boneMapping[]
) {
//  report("loadSkinningMatrices");
  Integer location = shaderProgram.getUniformLocation(SKINNING_MATRICES_ATTRIBUTE_ID);
  if(location!=-1){
    Mat44 skinningMatrices[];
    skinningMatrices.resize(invMatrices.size());
    for (var Integer i = 0; i < invMatrices.size(); i++) {
      if(boneMapping[i] < 0)
        continue;
      skinningMatrices[i] = (pose[boneMapping[i]].toMat44() * invMatrices[i]).transpose();
    }
    shaderProgram.loadMat44TransposedUniformArray(location, skinningMatrices);
  }
}

operator loadSkinningMatricesTexture(
  io OGLShaderProgram shaderProgram,
  io Xfo pose[],
  io Mat44 invMatrices[],
  io Integer boneMapping[],
  io OGLTexture2D oglSkinningMatriciesTexture2D,
  io Integer skinningMatriciesTextureUnit
) {
//  report("loadSkinningMatrices");

  Integer location = shaderProgram.getUniformLocation(SKINNIMATRICIES_TEXTUREUNIT_ATTRIBUTE_ID);
  if(location!=-1){
  
    Mat44 skinningMatrices[];
    skinningMatrices.resize(invMatrices.size());
    for (var Integer i = 0; i < invMatrices.size(); i++) {
      if(boneMapping[i] < 0)
        continue;
      skinningMatrices[i] = (pose[boneMapping[i]].toMat44() * invMatrices[i]).transpose();
    }
    
    shaderProgram.loadIntegerUniform(location, skinningMatriciesTextureUnit);
    oglSkinningMatriciesTexture2D.bindImageMatrixArray(skinningMatrices, skinningMatriciesTextureUnit);
  }
}
