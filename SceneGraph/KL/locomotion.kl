
use Math;
use Vec3, Quat, Xfo;
use LinearKeyframe;
use LinearKeyframeTrack;
use LinearKeyframeTrackSet;
use PoseVariables;
use CharacterControllerParams;
use DebugGeometry;

use FabricBULLET;
use BulletWorld;

function activateClip(
  io LocomotionMarker locomotionMarkers<>[][],
  io TrackSetController trackcontroller,
){
  LocomotionMarker markers[][] = locomotionMarkers[trackcontroller.activeTrackSet];
  LocomotionMarker marker = markers[trackcontroller.pivotFoot][trackcontroller.pivotStepId];
  trackcontroller.time = marker.time;
  trackcontroller.stepIds = marker.stepIds;
  
 // report("activateClip:"+trackcontroller.activeTrackSet+" foot:"+trackcontroller.pivotFoot+ " step:"+marker.stepIds[trackcontroller.pivotFoot] + " t:"+trackcontroller.time);
}

operator evaluateLocomotionPoseVariables(
  io Scalar timestep,
  /*
  io BulletWorld  bulletworld,
  */
  io LinearKeyframeTrackSet animationLibrary<>,
  io LocomotionMarker locomotionMarkers<>[][],
  io FootStepTrack footStepTracksLibrary<>[],
  io KeyframeTrackBindings bindingsLibrary<>,
  
  io Hub hubs[],
  io Limb legs[],
  io COM com,
  io LocomotionFoot locomotionFeet[],
  
  io Xfo controllerXfoSet<>,
  io CharacterControllerParams controllerparamsSet<>,
  
  io TrackSetController trackcontroller,
  io Boolean plantedFeet[],
  io Vec3 plantLocations[],
  io Vec3 hitPositions[],
  
  io PoseVariables poseVariables,
  io PoseVariables prevUpdatePose,
  io PoseVariables poseError,
  io Scalar clipActivationTime,
  in Size index,
  
  io DebugGeometry debugGeometry
) {
//  report("evaluateLocomotionPoseVariables:"+index);
  if(timestep==0){
    return;
  }
  debugGeometry.reset();
  
  Xfo controllerXfo = controllerXfoSet[index];
  CharacterControllerParams controllerparams = controllerparamsSet[index];
  
    /////////////////////////////////////////////////
    // Clip Activation
    if(trackcontroller.tick == 0){
      Scalar firstFootLift = 9999.0;
      for(Integer k=0; k < locomotionMarkers[trackcontroller.activeTrackSet].size; k++){
        if(locomotionMarkers[trackcontroller.activeTrackSet][k][0].time < firstFootLift){
          trackcontroller.pivotFoot = k;
          firstFootLift = locomotionMarkers[trackcontroller.activeTrackSet][k][0].time;
        }
      }
      activateClip(
        locomotionMarkers,
        trackcontroller,
      );
    }
    else if(trackcontroller.deactivate){
      activateClip(
        locomotionMarkers,
        trackcontroller,
      );
    }

    LinearKeyframeTrackSet trackSet = animationLibrary[trackcontroller.activeTrackSet];
    FootStepTrack footStepTracks[] = footStepTracksLibrary[trackcontroller.activeTrackSet];
    KeyframeTrackBindings bindings = bindingsLibrary[trackcontroller.activeTrackSet];
    
    /////////////////////////////////////////////////
    // Clip Frequency and Stride Length calculation
    Xfo invcontrollerXfo = controllerXfo.inverse();
    Vec2 timeRange = trackSet.timeRange;
    Scalar t = trackcontroller.time;
    
    Vec3 linearVelocity = controllerparams.displacement.tr / timestep;
    Scalar currSpeed = linearVelocity.length();
    Scalar clipSpeedRatio = 1.0;
    Scalar strideLengthModulationFactor = 0.2;
    Scalar clipFrequencyMultiplier = 1.0;
    Scalar strideLengthMultiplier = 1.0;
    Scalar strideLength = 0.0;
    if(trackcontroller.tick > 0){
      // Get the com params from the previous update.
      Scalar stepFrequency = trackcontroller.comParams[0];
      Scalar clipSpeed = trackcontroller.comParams[1];
      strideLength = stepFrequency * clipSpeed;
      
      if(clipSpeed > 0.001){
        clipSpeedRatio = (currSpeed / clipSpeed);

        strideLengthMultiplier = clipSpeedRatio + ((1.0 - clipSpeedRatio) * (1.0 - strideLengthModulationFactor));
        clipFrequencyMultiplier = clipSpeedRatio / strideLengthMultiplier;
        
        // When turning, speed up the playback a little to stop the legs getting tangled. 
        clipFrequencyMultiplier += abs(controllerparams.displacement.ori.getAngle()) * 10.0;
      }
    }
    
    /////////////////////////////////////////////////
    // Clip Evaluation
    t += timestep * clipFrequencyMultiplier;
    
    trackcontroller.time = t;
    
    poseVariables.evaluateKeyframeTracks(
      trackcontroller.time,
      trackSet,
      bindings,
      trackcontroller.currKeys
    );
    
    /////////////////////////////////////////////////
    // Error dissapation
    if(trackcontroller.tick > 0){
      if(trackcontroller.deactivate){
        poseError = prevUpdatePose.subtract(poseVariables);
        clipActivationTime = t-timestep;
      }
      if(clipActivationTime > 0.0){
        // Blend off the error across the first half a stride. 
        Scalar blendTime = (trackcontroller.comParams[0] * clipFrequencyMultiplier) * 0.5;
        if(t - clipActivationTime < blendTime){
          Scalar weight = 1.0 - ((t - clipActivationTime) / blendTime);
          poseVariables.addWeighted(poseError, weight);
        }
      }
    }
    prevUpdatePose = poseVariables;
    trackcontroller.deactivate = false;
    
    /////////////////////////////////////////////////
    
    trackcontroller.comParams.resize(com.parameterVarIds.size);
    for(Integer j=0; j < com.parameterVarIds.size; j++){
      trackcontroller.comParams[j] = poseVariables.scalarValues[com.parameterVarIds[j]];
    }
    /////////////////////////////////////////////////
  //  report(trackcontroller.tick);
    
    /////////////////////////////////////////////////
    Xfo rot90;
    rot90.setIdentity();
    rot90.ori.setFromAxisAndAngle(Vec3(0.0, 0.0, 1.0), HALF_PI);
    Vec3 upvector = Vec3(0.0, 1.0, 0.0);//controllerXfo.ori.rotateVector(Vec3(0.0, 1.0, 0.0));
    
    Xfo hubComs[];
    for(Integer j=0; j < hubs.size; j++){
      Hub hub = hubs[j];
      Xfo hubXfo = poseVariables.xfoValues[hub.xfoId];
      hubXfo.tr -= invcontrollerXfo.ori.rotateVector(controllerparams.balanceXfo.tr);
      hubXfo.ori = invcontrollerXfo.ori * controllerparams.balanceXfo.ori * controllerXfo.ori * hubXfo.ori;
      
      if(controllerparams.trail.size > 0){
        hubComs.resize(hubs.size);
        Xfo trailXfo1, trailXfo2;
        Integer id1, id2;
        Xfo lastTrailPoint = controllerparams.trail[controllerparams.trailCircularArrayIndex];
        Scalar trailSegmentDist = (controllerXfo.tr - lastTrailPoint.tr).length();
          
        Scalar trailDistance = hubXfo.tr.z;
      //  report("trailSegmentDist "+j+":"+trailDistance);
        if(trailDistance < 0.0 && hubs.size > 1){
          
          Scalar trailLookup = ((-trailDistance-trailSegmentDist)/controllerparams.trailLength) * Scalar(controllerparams.trail.size);
          Integer trailIndex = Integer(floor(trailLookup));
          Scalar trailInterp = 1.0 - (trailLookup - floor(trailLookup));
          
          id1 = (controllerparams.trailCircularArrayIndex - trailIndex);
          if(id1 < 0){
            id1 += controllerparams.trail.size;
          }
          if(trailIndex < 0){
            trailXfo1 = controllerXfo;
          }else{
            trailXfo1 = controllerparams.trail[id1];
          }
          id2 = (id1 - 1);
          if(id2 < 0){
            id2 += controllerparams.trail.size;
          }
          trailXfo2 = controllerparams.trail[id2];
          
          Xfo trailXfo;
          trailXfo.setIdentity();
          trailXfo.tr = trailXfo2.tr.linearInterpolate(trailXfo1.tr, trailInterp);
          trailXfo.ori = trailXfo2.ori.sphericalLinearInterpolate(trailXfo1.ori, trailInterp);
          
          hubComs[j] = trailXfo;
          hubXfo.tr.z = 0.0;
          hubXfo = invcontrollerXfo * trailXfo * hubXfo;
        }
      }
      
      poseVariables.xfoValues[hub.xfoId] = hubXfo;
    }
    
    /////////////////////////////////////////////////
    trackcontroller.stepIds.resize(locomotionFeet.size);
    plantedFeet.resize(locomotionFeet.size);
    plantLocations.resize(locomotionFeet.size);
    hitPositions.resize(locomotionFeet.size);
    
    Scalar appliedComRayDelta;
    Scalar appliedFeetRayDeltas[];
    appliedFeetRayDeltas.resize(locomotionFeet.size);
    
    Boolean displayRaycastingDebugging = false;
    Boolean displayFootPinningDebugging = true;
    Scalar numLegsScalar = Scalar(legs.size);
    
    
   //   report("stepIds:"+trackcontroller.stepIds);
      
    for(Integer j=0; j < locomotionFeet.size; j++){
      LocomotionFoot foot = locomotionFeet[j];
      Limb leg = legs[foot.limbId];
      
      FootStepTrack footStepTrack = footStepTracks[j];
      Integer stepId = trackcontroller.stepIds[j];
      FootStep currStep = footStepTrack.footSteps[stepId];
      Scalar stepRatio = (t - currStep.liftTime) / (currStep.plantTime - currStep.liftTime);
      
      Xfo footXfo, hubComXfo, hubXfo;
      Vec3 displacementDir;
      if(leg.hubId >= 0 && controllerparams.trail.size > 0){
        hubComXfo = hubComs[leg.hubId];
        hubXfo = controllerXfo * poseVariables.xfoValues[hubs[leg.hubId].xfoId];
        displacementDir = hubComXfo.ori.rotateVector(Vec3(0.0,0.0,1.0));
      }else{
        hubComXfo = hubXfo = controllerXfo;
        displacementDir = controllerparams.displacementDir;
      }
      footXfo = hubComXfo * poseVariables.xfoValues[leg.ikGoalXfoId];
      Scalar stepValue = poseVariables.scalarValues[foot.stepTimeVarId];
    //  debugGeometry.drawLine(footXfo.tr, hubComXfo.tr, Color(1.0, 0.0, 1.0, 1.0));
    //  debugGeometry.drawAxis(footXfo, 20.0, Color(1.0, 0.0, 1.0, 1.0));
      
      footXfo.tr -= controllerparams.balanceXfo.tr;
      
      // TODO: this is a bit hackey, and innacurate.
      // One day we should store the plant position
      // relative to the foot positison as an extra track.
      Xfo footPlantXfo = hubXfo * leg.ikGoalReferenceXfo;
      debugGeometry.drawLine(hubComXfo.tr, footPlantXfo.tr, Color(0.0, 0.0, 0.0, 1.0));
        
      Vec3 lift = footPlantXfo.tr - (displacementDir * (strideLength * 0.25 * strideLengthMultiplier));
      footPlantXfo.tr += displacementDir * (strideLength * 0.25 * strideLengthMultiplier);
      footXfo.tr += displacementDir * stepValue * strideLengthMultiplier;
      
      if(displayFootPinningDebugging){
        debugGeometry.drawLine(lift, footPlantXfo.tr, Color(0.0, 1.0, 1.0, 1.0));
      }
      //  report(j+" t:"+t+" stepId:"+stepId +" currStep:"+currStep + " stepRatio:"+stepRatio + " planted:"+plantedFeet[j]);
      /*
      /////////////////////////////////////////////////
      // Raycasting
      Vec3 rayStart, rayEnd, refPos, hitPosition;
      if(plantedFeet[j]){
        refPos = footXfo.tr;
      }else{
        refPos = footPlantXfo.tr;
      }
      rayStart = refPos + (upvector * 1.5);
      rayEnd = refPos - (upvector * 1.5);
      
      Boolean filterPassiveObjects = false;
      bulletworld.raycast(rayStart,rayEnd, filterPassiveObjects);
      if(bulletworld.hit) {
        hitPosition = bulletworld.hitPosition;
        Xfo tmp = footPlantXfo;
        tmp.tr = bulletworld.hitPosition;
        
        if(displayRaycastingDebugging){
          debugGeometry.drawCircle(tmp * rot90, 0.03, Color(0.0, 1.0, 1.0, 1.0));
          debugGeometry.drawLine(rayStart, bulletworld.hitPosition, Color(0.0, 1.0, 1.0, 1.0));
        }
        Scalar appliedDelta;
        if(plantedFeet[j]){
          appliedDelta = (bulletworld.hitPosition - controllerXfo.tr).dot(upvector);
        }
        else{
          if(displayRaycastingDebugging){
            debugGeometry.drawLine(hitPositions[j], bulletworld.hitPosition, Color(0.0, 1.0, 0.0, 1.0));
          }
          Scalar liftDelta = (hitPositions[j] - controllerXfo.tr).dot(upvector);
          Scalar plantDelta = (bulletworld.hitPosition - controllerXfo.tr).dot(upvector);
          appliedDelta = liftDelta + ((plantDelta - liftDelta) * stepRatio);
        }
        appliedFeetRayDeltas[j] = appliedDelta;
        appliedComRayDelta += appliedDelta /= numLegsScalar;
      }
      else{
        appliedFeetRayDeltas[j] = (hitPositions[j] - controllerXfo.tr).dot(upvector);
        appliedComRayDelta += appliedFeetRayDeltas[j] /= numLegsScalar;
      }
      if(plantedFeet[j] && stepRatio > 0.0){
        // at lift time, store the hit delta.
        hitPositions[j] = hitPosition;
      }
      */
      
      /////////////////////////////////////////////////
      // Foot Pinning
      if(displayFootPinningDebugging){
        debugGeometry.drawCircle(footXfo * rot90, 0.1, Color(0.0, 0.5, 0.5, 1.0));
      }
      Vec3 footError;
      if(stepRatio > 0.0 && stepRatio < 1.0){
        if(plantedFeet[j]){
          // Record the error at lift time.
          footError = invcontrollerXfo.ori.rotateVector(plantLocations[j] - footXfo.tr);
          plantLocations[j] = footError;
          plantedFeet[j] = false;
          
          /////////////////////////////////////////////////
          // Clip Deactivation
          if(animationLibrary.size > 1){
            Scalar buffer = 0.3;
            Scalar speedDelta = (currSpeed - trackcontroller.comParams[1]);
            if(abs(speedDelta) > buffer){
              report("speedDelta:"+trackcontroller.activeTrackSet+":"+j+":"+speedDelta);
              for(Integer clipId=0; clipId<locomotionMarkers.size; clipId++){
              // Note: here we block blending from a clip onto its self, but soon we will enable this.
                if(trackcontroller.activeTrackSet == clipId){
                  continue;
                }
                for(Integer l=0; l<locomotionMarkers[clipId][j].size; l++){
                  Scalar speedDelta2 = (currSpeed - locomotionMarkers[clipId][j][l].params[1]);
                //  report("speedDelta2 "+clipId+":"+l+":"+speedDelta2);
                  if(abs(speedDelta2) < abs(speedDelta)){
                  //  report("deactivate fromClip:" +trackcontroller.activeTrackSet + " toClip:"+ clipId + " foot:"+j+ " fromStep:"+stepId+ " toStep:"+l);
                    trackcontroller.deactivate = true;
                    trackcontroller.pivotFoot = j;
                    trackcontroller.pivotStepId = l;
                    trackcontroller.activeTrackSet = clipId;
                    
                    break;
                  }
                }
              }
            }
          }
          if(!trackcontroller.deactivate && currStep.liftTime >= timeRange.y){  
            // Deactivate the current clip if a foot reaches the last step.
          //  report("deactivate - end of clip foot:"+j+ " t:" + trackcontroller.time);
            trackcontroller.deactivate = true;
            trackcontroller.pivotFoot = j;
            trackcontroller.pivotStepId = 0;
          }
        }
        else{
          // Interpolate the error across the step.
          if(stepRatio < 0.5){
            Scalar errorDissipation = 1.0 - sin(stepRatio * 2.0 * HALF_PI);
            footError = plantLocations[j] * errorDissipation;
          }
        }
        if(displayFootPinningDebugging){
          debugGeometry.drawCircle(footPlantXfo * rot90, 0.1, Color(0.0, 1.0, 1.0, 1.0));
        }
      }
      else{
        if(!plantedFeet[j]){
          // Record the foot plant pos.
          plantLocations[j] = footXfo.tr;
          plantedFeet[j] = true;
          
          // Increment the step id if we havn't just activated. 
          if(trackcontroller.tick != 0 && footStepTrack.footSteps.size > 1){
            if(trackcontroller.stepIds[j] < footStepTrack.footSteps.size - 1){
              trackcontroller.stepIds[j]++;
            }
          }
        }
        else{
          // Calculate the error each update to hold the foot in place while planted.
          footError = invcontrollerXfo.ori.rotateVector(plantLocations[j] - footXfo.tr);
        }
        
        if(displayFootPinningDebugging){
          debugGeometry.drawCircle(footXfo * rot90, 0.1, Color(1.0, 1.0, 0.0, 1.0));
          debugGeometry.drawLine(footXfo.tr, plantLocations[j], Color(1.0, 1.0, 0.0, 1.0));
        }
      }
      footXfo = invcontrollerXfo * footXfo;
      // Apply the error in COM space. 
      footError.y = 0.0;
    //  footXfo.tr += footError;
      
      poseVariables.xfoValues[leg.ikGoalXfoId] = footXfo;
      
    }
    
    // Now apply the foot ray deltas now that we know how much will be
    // applied to the COM.
    controllerXfo.tr += upvector * appliedComRayDelta;
    for(Integer j=0; j < locomotionFeet.size; j++){
      LocomotionFoot foot = locomotionFeet[j];
      Limb leg = legs[foot.limbId];
      poseVariables.xfoValues[leg.ikGoalXfoId].tr += upvector * (appliedFeetRayDeltas[j] - appliedComRayDelta);
    }
    
    trackcontroller.tick++;
}


