
//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricOGL;
use FabricVIDEO;

operator videoLoadResource(
  io FabricResource resource,
  io VideoHandle handle
) {
  if(!handle.pointer){
    FabricVIDEOOpenResource(resource.data.data(), resource.data.dataSize(), handle);
    report("Loaded Video, Dimensions: "+handle.width+"x"+handle.height+", duration: "+handle.duration+", fps: "+handle.fps);
  }
}

operator videoSetTimeRange(
  io VideoHandle handle,
  io Vec2 timeRange
) {
  timeRange.x = 0.0;
  timeRange.y = handle.duration;
}

operator videoSeekTime(
  io VideoHandle handle,
  io Scalar time
) {
  FabricVIDEOSeekTime(handle, time);
}

operator videoGetPixels(
  io VideoHandle handle,
  io RGB pixels[]
) {
  FabricVIDEOGetAllPixels(handle, pixels);
}

operator videoLoadToGPU(
  io VideoHandle handle,
  io RGB pixels[],
  io Size bufferID,
  io Integer textureUnit
) {
  if (pixels.size() > 0) {
    if (bufferID == 0) {
      var Size buffers[];
      buffers.resize(1);
      glGenTextures(1, buffers);
      bufferID = buffers[0];
      
      glActiveTexture(GL_TEXTURE0 + textureUnit);
      glBindTexture(GL_TEXTURE_2D, bufferID);

      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    }else {
      glActiveTexture(GL_TEXTURE0 + textureUnit);
      glBindTexture(GL_TEXTURE_2D, bufferID);
    }

    //Generate the texture
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    if (pixels.size() == (handle.width * handle.height))
      glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, handle.width, handle.height, 0, GL_RGB, GL_UNSIGNED_BYTE, pixels.data());
  }
}