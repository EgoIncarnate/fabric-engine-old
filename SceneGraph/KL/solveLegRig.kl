//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//


use Xfo;
use Bone;
use BezierKeyframe;
use DebugGeometry;

#include 'FABRIC_ROOT/SceneGraph/KL/solveFishingRod.kl'
#include 'FABRIC_ROOT/SceneGraph/KL/solveNCFIK.kl'

operator solveLegRig(
  io Xfo pose[],
  io Bone bones[],

  io Limb limb,

  io PoseVariables poseVariables,
  io DebugGeometry debugGeometry
) {
  Scalar ikBlend = poseVariables.scalarValues[limb.ikblendId];
  if (ikBlend > 0.0) {
    Xfo fkPose[];
    fkPose.resize(limb.boneIds.size());
    for (Integer i = 0; i < limb.boneIds.size(); i++) {
      fkPose[i] = pose[limb.boneIds[i]];
    }

    Integer thighIndex = limb.boneIds[0];
    Integer calfIndex = limb.boneIds[1];
    Integer ankleIndex = limb.boneIds[2];
    
    debugGeometry.drawAxis(poseVariables.xfoValues[limb.ikGoalXfoId], 3.0, Color(0.0, 1.0, 1.0, 1.0));

    Xfo targetXfo;
    targetXfo = poseVariables.xfoValues[limb.ikGoalXfoId] * limb.ikGoalOffsetXfo;
    
    Scalar maxLineLength = bones[thighIndex].length + bones[calfIndex].length;
    Vec2 maxLineLengthSoftening(maxLineLength * 0.03, maxLineLength * 0.03);
    applyFishingRod(
      targetXfo,
      bones[ankleIndex].length,
      pose[thighIndex],
      Vec3(-1.0, 0.0, 0.0),

      0.0,
      Vec2(0.0, 0.0),
      maxLineLength,
      maxLineLengthSoftening
    );
    targetXfo.tr = targetXfo.transformVector(Vec3(-bones[ankleIndex].length, 0.0, 0.0));

    Integer ikboneIndices[];
    ikboneIndices.push(thighIndex);
    ikboneIndices.push(calfIndex);

    solveNCFIK(pose, bones, ikboneIndices, targetXfo, debugGeometry);

    pose[ankleIndex].tr = pose[calfIndex].transformVector(Vec3(bones[calfIndex].length, 0.0, 0.0));
    pose[ankleIndex].ori = targetXfo.ori;

    for (Integer i = 0; i < limb.boneIds.size(); i++) {
      pose[limb.boneIds[i]].ori = fkPose[i].ori.sphericalLinearInterpolate(pose[limb.boneIds[i]].ori, ikBlend);
      if (i > 0) {
        pose[limb.boneIds[i]].tr = pose[limb.boneIds[i - 1]].transformVector(bones[limb.boneIds[i]].referenceLocalPose.tr);
      }
    }
  }
}



operator invertLegRig(
  io Xfo pose[],
  io Bone bones[],

  io Limb limb,

  io PoseVariables poseVariables,
  io DebugGeometry debugGeometry
) {
  Integer ankleIndex = limb.boneIds[2];
  Xfo ankleTipXfo = pose[ankleIndex];
  ankleTipXfo.tr = ankleTipXfo.transformVector(Vec3(bones[ankleIndex].length, 0.0, 0.0));
  
  poseVariables.xfoValues[limb.ikGoalXfoId] = ankleTipXfo * limb.ikGoalOffsetXfo.inverse();
}