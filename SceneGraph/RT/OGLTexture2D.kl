//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricOGL, Vec2, Vec3, OGLShaderProgram;

function OGLTexture2D.configure(
  Size width,
  Size height,
  Data pixels,
  Size nbPixels,
  io Integer textureUnit
) {
  if(nbPixels > 0){
    if(this.bufferID == 0){
      var Size buffers[];
      buffers.resize(1);
      glGenTextures(1, buffers);
      this.bufferID = buffers[0];
    }
    glActiveTexture(GL_TEXTURE0 + textureUnit);
    glBindTexture(GL_TEXTURE_2D, this.bufferID);
    
    //Generate the texture
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    if (nbPixels == (width * height))
      glTexImage2D(GL_TEXTURE_2D, 0, this.glInternalFormat, width, height, 0, this.glFormat, this.glType, pixels);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, this.textureMinFilter);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, this.textureMaxFilter);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, this.wrapS);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, this.wrapT);

    this.nbPixels = nbPixels;
  }
}


function OGLTexture2D.bind(in Integer textureUnit){
//  report("OGLTexture2D.bind bufferID:"+this.bufferID + " textureUnit:"+textureUnit  + " nbPixels:"+ this.nbPixels );
  glActiveTexture(GL_TEXTURE0 + textureUnit);
  glBindTexture(GL_TEXTURE_2D, this.bufferID);
}


function OGLTexture2D.bindImageLDR(
  io Size width,
  io Size height,
  io RGBA bitmap[],
  io Integer textureUnit
) {
  if (this.bufferID == 0 || this.forceRefresh) {
    this.configure(width, height, bitmap.data(), bitmap.size(), textureUnit);
  }
  this.bind(textureUnit);
}


function OGLTexture2D.bindImageHDR(
  io Size width,
  io Size height,
  io Color bitmap[],
  io Integer textureUnit
) {
  if (this.bufferID == 0 || this.forceRefresh) {
    this.configure(width, height, bitmap.data(), bitmap.size(), textureUnit);
  }
  this.bind(textureUnit);
}

function OGLTexture2D.bindImageMatrix(
  io Mat44 matrices<>,
  io Integer textureUnit
) {
  if (this.bufferID == 0 || this.forceRefresh) {
    Mat44 matricesWithPadding[];
    if(this.glInternalFormat != GL_RGBA32F)
      report('bindImageMatrix: unexpected texture format');
    matricesWithPadding.resize((512*512)/4);
    for( Size i = 0; i < matrices.size(); ++i ) {
      matricesWithPadding[i] = matrices[i];
    }
    this.configure(Size(512), Size(512), matricesWithPadding.data(), Size(512 * 512), textureUnit);
  }
  this.bind(textureUnit);
}

function OGLTexture2D.genTexture(
  Size width,
  Size height
) {
//  report("OGLTexture2D.genTexture width:" + width + " height:" + height);
  
  var Data NULL;
  /////////////////////////////////////////////////////
  // Color Texture
  Size bufferIDs[];
  bufferIDs.push(Size(0));
  glGenTextures(1, bufferIDs);
  this.bufferID = bufferIDs[0];
  
  glBindTexture(GL_TEXTURE_2D, this.bufferID);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
  
  if(this.glInternalFormat == GL_DEPTH_COMPONENT){
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_R_TO_TEXTURE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);
    glTexParameteri(GL_TEXTURE_2D, GL_DEPTH_TEXTURE_MODE, GL_INTENSITY);
  }else{
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
  }
  
  //NULL means reserve texture memory, but texels are undefined
  glTexImage2D(GL_TEXTURE_2D, 0, this.glInternalFormat, width, height, 0, this.glFormat, this.glType, NULL);
  
  this.nbPixels = width * height;
}

function drawScreenQuad(
  io Integer program,
  Vec2 tl,
  Vec2 br,
  Boolean flipY
) {
  //report("drawTexture: textureUnit=" + textureUnit);

  var String name = 'a_position';
  var Integer posLocation = glGetAttribLocation(program, name);
  name = 'a_texCoord';
  var Integer texLocation = glGetAttribLocation(program, name);

  glPushAttrib(GL_TEXTURE_BIT | GL_ENABLE_BIT | GL_DEPTH_BUFFER_BIT);
  glPushClientAttrib(GL_CLIENT_VERTEX_ARRAY_BIT);

  glEnable(GL_TEXTURE_2D);
  glDisable(GL_DEPTH_TEST);
  glDepthMask(GL_TRUE);
  glDisable(GL_CULL_FACE); 
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_NONE);//Required to render properly depth textures

  // Draw a quad in the upper left with debugging info
  var Vec3 p[4];
  p[0] = Vec3(tl.x, tl.y, 0.0);
  p[1] = Vec3(br.x, tl.y, 0.0);
  p[2] = Vec3(br.x, br.y, 0.0);
  p[3] = Vec3(tl.x, br.y, 0.0);
  
  var Vec2 t[4];
  if(flipY){
    t[0] = Vec2(0.0, 0.0);
    t[1] = Vec2(1.0, 0.0);
    t[2] = Vec2(1.0, 1.0);
    t[3] = Vec2(0.0, 1.0);
  }else{
    t[0] = Vec2(0.0, 1.0);
    t[1] = Vec2(1.0, 1.0);
    t[2] = Vec2(1.0, 0.0);
    t[3] = Vec2(0.0, 0.0);
  }
  
  var Integer idx[4];
  idx[0] = 0; idx[1] = 1; idx[2] = 2; idx[3] = 3;

  var Data NULL;

  var Size bufferIDArray[];
  bufferIDArray.resize(1);

  glGenBuffers(1, bufferIDArray);
  var Size bufferID0 = bufferIDArray[0];
  glGenBuffers(1, bufferIDArray);
  var Size bufferID1 = bufferIDArray[0];
  glGenBuffers(1, bufferIDArray);
  var Size bufferID2 = bufferIDArray[0];
  
  glBindBuffer(GL_ARRAY_BUFFER, bufferID0);
  glBufferData(GL_ARRAY_BUFFER, p.dataSize(), p.data(), GL_STATIC_DRAW);
  glEnableVertexAttribArray(posLocation);
  glVertexAttribPointer(posLocation, 3, GL_FLOAT, GL_FALSE, 0, NULL);

  glBindBuffer(GL_ARRAY_BUFFER, bufferID1);
  glBufferData(GL_ARRAY_BUFFER, t.dataSize(), t.data(), GL_STATIC_DRAW);
  glEnableVertexAttribArray(texLocation);
  glVertexAttribPointer(texLocation, 2, GL_FLOAT, GL_FALSE, 0, NULL);

  glBindBuffer(GL_ARRAY_BUFFER, bufferID2);
  glBufferData(GL_ARRAY_BUFFER, idx.dataSize(), idx.data(), GL_STATIC_DRAW);
  glBindBuffer(GL_ARRAY_BUFFER, 0);


  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bufferID2);
  glDrawElements(GL_QUADS, idx.size(), GL_UNSIGNED_INT, NULL);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

  glPopClientAttrib();
  glPopAttrib();

  bufferIDArray[0] = bufferID0; glDeleteBuffers(1, bufferIDArray);
  bufferIDArray[0] = bufferID1; glDeleteBuffers(1, bufferIDArray);
  bufferIDArray[0] = bufferID2; glDeleteBuffers(1, bufferIDArray);
  
  glBindTexture( GL_TEXTURE_2D, 0 );
//  report("<<<drawTexture");
}

function drawTexture(
  Integer textureUnit,
  io Integer program,
  Vec2 tl,
  Vec2 br,
  Boolean flipY
) {
  //report("drawTexture: textureUnit=" + textureUnit);

  if (!program) {
    OGLShaderSource pixelShader;
    OGLShaderSource fragmentShader;
    pixelShader.type = GL_VERTEX_SHADER;
    pixelShader.code = '\
      attribute vec4 a_position; \
      attribute vec2 a_texCoord; \
      void main() { \
        gl_TexCoord[0].st = a_texCoord; \
        gl_Position = a_position; \
      }';

    fragmentShader.type = GL_FRAGMENT_SHADER;
    fragmentShader.code = '\
      uniform sampler2D u_rgbaImage; \
      void main() \
      { \
        gl_FragColor = texture2D( u_rgbaImage, gl_TexCoord[0].st ); \
      }';
    
    OGLShaderProgram shaderProgram('renderTextureToView');
    shaderProgram.debug = false;
    shaderProgram.shaderSources.push(pixelShader);
    shaderProgram.shaderSources.push(fragmentShader);
    shaderProgram.loadShader();
    if (!shaderProgram.programId) {
      report('Error in renderTextureToView');
      return;
    }
    program = shaderProgram.programId;
  }else{
    glUseProgram(program);
  }

  String name = 'u_rgbaImage';
  var Integer smpLocation = glGetUniformLocation(program, name);

  glUniform1i( smpLocation, textureUnit );

  drawScreenQuad( program, tl, br, flipY );
//  report("<<<drawTexture");
}


