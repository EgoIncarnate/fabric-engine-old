//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use Math, Vec3, Euler, Quat;
use LinearKeyframe;
use LinearKeyframeTrack;
use LinearKeyframeTrackSet;


function PoseVariables.evaluateKeyframeTracks(
  in LinearKeyframeTrackSet trackSet,
  in Scalar time,
  in KeyframeTrackBindings bindings,
  io Integer currKeys[]
) {
  Integer trackId = 0;
  if (currKeys.size < trackId + bindings.scalarBindings.size){
    currKeys.resize(trackId + bindings.scalarBindings.size);
  }
  for (Integer i = 0; i < bindings.scalarBindings.size; i++) {
    this.scalarValues[i] = trackSet.tracks[bindings.scalarBindings[i]].evaluate(time, currKeys[trackId++]);
  }
  for (Integer i = 0; i < bindings.quatBindings.size; i++) {
    Integer binding[] = bindings.quatBindings[i];
    if(binding.size != 3 && binding.size != 4){
      report('incorrect binding for Quat:' + binding);
      continue;
    }
    if(currKeys.size < trackId + binding.size){
      currKeys.resize(trackId + binding.size);
    }
    if(binding.size == 3){
      // Euler to Quat
      Euler euler(Vec3( trackSet.tracks[binding[0]].evaluate(time, currKeys[trackId++]),
                        trackSet.tracks[binding[1]].evaluate(time, currKeys[trackId++]),
                        trackSet.tracks[binding[2]].evaluate(time, currKeys[trackId++])));
      this.quatValues[i].setFromEuler(euler);
    }
    else if(binding.size == 4){
      this.quatValues[i].set( trackSet.tracks[binding[0]].evaluate(time, currKeys[trackId++]),
                              trackSet.tracks[binding[1]].evaluate(time, currKeys[trackId++]),
                              trackSet.tracks[binding[2]].evaluate(time, currKeys[trackId++]),
                              trackSet.tracks[binding[3]].evaluate(time, currKeys[trackId++]) );
    }
  }
  
  for (Integer i = 0; i < bindings.xfoBindings.size; i++) {
    Integer binding[] = bindings.xfoBindings[i];
    if(binding.size != 7){
      report('incorrect binding for Xfo:' + binding);
      continue;
    }
    if(currKeys.size < trackId + binding.size){
      currKeys.resize(trackId + binding.size);
    }
    
    this.xfoValues[i].tr.set(
      trackSet.tracks[binding[0]].evaluate(time, currKeys[trackId++]),
      trackSet.tracks[binding[1]].evaluate(time, currKeys[trackId++]),
      trackSet.tracks[binding[2]].evaluate(time, currKeys[trackId++])
    );
    if(binding.size == 6){
      Euler euler(Vec3( trackSet.tracks[binding[3]].evaluate(time, currKeys[trackId++]),
                        trackSet.tracks[binding[4]].evaluate(time, currKeys[trackId++]),
                        trackSet.tracks[binding[5]].evaluate(time, currKeys[trackId++])));
      this.xfoValues[i].ori.setFromEuler(euler);
    }else if(binding.size == 7){
      this.xfoValues[i].ori.set(
        trackSet.tracks[binding[3]].evaluate(time, currKeys[trackId++]),
        trackSet.tracks[binding[4]].evaluate(time, currKeys[trackId++]),
        trackSet.tracks[binding[5]].evaluate(time, currKeys[trackId++]),
        trackSet.tracks[binding[6]].evaluate(time, currKeys[trackId++])
      );
    }
  }
}

