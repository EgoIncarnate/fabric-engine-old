//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//
use Vec3, Quat, Xfo;
use KEYFRAMETYPETrackSet;

function PoseVariables.addScalarValue(){
  this.scalarValues.push(0.0);
}

/*
function PoseVariables.addXfoValue() {
  Xfo xfo;
  this.xfoValues.push(xfo);
}
*/

function PoseVariables PoseVariables.subtract(PoseVariables other) {
  PoseVariables result;
  Integer i=0;
  if(this.scalarValues.size != other.scalarValues.size
  || this.vec3Values.size != other.vec3Values.size
  || this.quatValues.size != other.quatValues.size
  || this.xfoValues.size != other.xfoValues.size
  ){
    report("ERROR in PoseVariables.subtract: 'other' PoseVariables must match in structure");
    return result;
  }
  result.scalarValues.resize(this.scalarValues.size);
  for(i=0; i<this.scalarValues.size; i++){
    result.scalarValues[i] = this.scalarValues[i] - other.scalarValues[i];
  }
  result.vec3Values.resize(this.vec3Values.size);
  for(i=0; i<this.vec3Values.size; i++){
    result.vec3Values[i] = this.vec3Values[i] - other.vec3Values[i];
  }
  result.quatValues.resize(this.quatValues.size);
  for(i=0; i<this.quatValues.size; i++){
    result.quatValues[i] = this.quatValues[i].inverse() * other.quatValues[i];
  }
  result.xfoValues.resize(this.xfoValues.size);
  for(i=0; i<this.xfoValues.size; i++){
  //  result.xfoValues[i] = other.xfoValues[i].inverse() * this.xfoValues[i];
    result.xfoValues[i].tr = this.xfoValues[i].tr - other.xfoValues[i].tr;
    result.xfoValues[i].ori = this.xfoValues[i].ori * other.xfoValues[i].ori.inverse();
  }
  return result;
}


function PoseVariables.addWeighted(PoseVariables other, Scalar weight) {
  if(this.scalarValues.size != other.scalarValues.size
  || this.vec3Values.size != other.vec3Values.size
  || this.quatValues.size != other.quatValues.size
  || this.xfoValues.size != other.xfoValues.size
  ){
    report("ERROR in PoseVariables.subtract: 'other' PoseVariables must match in structure");
    return;
  }
  Integer i=0;
  for(i=0; i<this.scalarValues.size; i++){
    this.scalarValues[i] += other.scalarValues[i] * weight;
  }
  this.vec3Values.resize(this.vec3Values.size);
  for(i=0; i<this.vec3Values.size; i++){
    this.vec3Values[i] += other.vec3Values[i] * weight;
  }
  for(i=0; i<this.quatValues.size; i++){
    this.quatValues[i] = this.quatValues[i].sphericalLinearInterpolate(other.quatValues[i] * this.quatValues[i], weight);
  }
  for(i=0; i<this.xfoValues.size; i++){
    this.xfoValues[i].tr += other.xfoValues[i].tr * weight;
    this.xfoValues[i].ori = this.xfoValues[i].ori.sphericalLinearInterpolate(other.xfoValues[i].ori * this.xfoValues[i].ori, weight);
  }
}



function PoseVariables.setTrackValues(
  in Scalar time,
  io KEYFRAMETYPETrackSet trackSet,
  in KeyframeTrackBindings bindings
) {
  for (Integer i = 0; i < bindings.scalarBindings.size; i++) {
    KeyframeTrackBinding binding = bindings.scalarBindings[i];
    if(binding.trackIds.size == 1){
      Scalar val = this.scalarValues[binding.varId];
      trackSet.tracks[binding.trackIds[0]].setValue(time, val);
    }
  }
  
  for (Integer i = 0; i < bindings.quatBindings.size; i++) {
    KeyframeTrackBinding binding = bindings.quatBindings[i];
    if(binding.trackIds.size == 3){
      //  Quat to Euler
      report("TODO:Euler.setFromQuat");
    //  Euler euler;
    //  euler.setFromQuat(this.quatValues[binding.varId]);
    //  trackSet.tracks[binding.trackIds[0]].setValue(time, euler.x),
    //  trackSet.tracks[binding.trackIds[1]].setValue(time, euler.y),
    //  trackSet.tracks[binding.trackIds[2]].setValue(time, euler.z)));
    }
    else if(binding.trackIds.size == 4){
      Quat q = this.quatValues[i];
      trackSet.tracks[binding.trackIds[0]].setValue(time, q.v.x );
      trackSet.tracks[binding.trackIds[1]].setValue(time, q.v.y );
      trackSet.tracks[binding.trackIds[2]].setValue(time, q.v.z );
      trackSet.tracks[binding.trackIds[3]].setValue(time, q.w );
    }
  }
  
  for (Integer i = 0; i < bindings.xfoBindings.size; i++) {
    KeyframeTrackBinding binding = bindings.xfoBindings[i];
    if(binding.trackIds.size != 7){
      report('incorrect binding for Xfo:' + binding);
      continue;
    }
    Xfo xfo = this.xfoValues[binding.varId];
    
    trackSet.tracks[binding.trackIds[0]].setValue(time, xfo.tr.x);
    trackSet.tracks[binding.trackIds[1]].setValue(time, xfo.tr.y);
    trackSet.tracks[binding.trackIds[2]].setValue(time, xfo.tr.z);
    
    if(binding.trackIds.size == 6){
      //  Quat to Euler
      report("TODO:Euler.setFromQuat");
    //  Euler euler;
    //  euler.setFromQuat(xfo.ori);
    //  trackSet.tracks[binding.trackIds[0]].setValue(time, euler.x),
    //  trackSet.tracks[binding.trackIds[1]].setValue(time, euler.y),
    //  trackSet.tracks[binding.trackIds[2]].setValue(time, euler.z)));
    }else if(binding.trackIds.size == 7){
      trackSet.tracks[binding.trackIds[3]].setValue(time, xfo.ori.v.x);
      trackSet.tracks[binding.trackIds[4]].setValue(time, xfo.ori.v.y);
      trackSet.tracks[binding.trackIds[5]].setValue(time, xfo.ori.v.z);
      trackSet.tracks[binding.trackIds[6]].setValue(time, xfo.ori.w);
    }
  }
}



