//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricFILESYSTEM;
use FabricFileHandle;
use FabricFILESTREAM;
use FabricFileStream;

operator initFileStreamFromString
(
  io String path,
  io FabricFileStream stream,
  io String names[],
  io Size seekOffsets[]
)
{
  FabricFileHandle handle;
  handle.setAbsolutePath(path);
  stream.open(handle,"w");
  if(names.size() > 0) {
    seekOffsets.resize(names.size());
    stream.writeStringArray(names);
    for(Size i=0;i<names.size();i++)
    {
      // store the seek offsets of these
      // size values, so that we can seek later
      seekOffsets[i] = stream.getSeek();
      stream.writeSize(0);
    }
  }
}

operator saveTrianglesToStream
(
  io FabricFileStream stream,
  io String names[],
  io Size seekOffsets[],
  io String name,
  io Vec3 positions<>,
  io Vec3 normals<>,
  io Integer indices[]
)
{
  if(stream.isWritable()) {
    stream.setSeekEnd();
    Size seekOffset = stream.getSeek();
    stream.writeSize(positions.size());
    stream.writeData(positions.data(),positions.dataSize());
    stream.writeData(normals.data(),normals.dataSize());
    stream.writeSize(indices.size());
    stream.writeData(indices.data(),indices.dataSize());
    for(Size i=0;i<names.size();i++) {
      if(name == names[i]) {
        stream.setSeek(seekOffsets[i]);
        stream.writeSize(seekOffset);
      }
    }
  }
}