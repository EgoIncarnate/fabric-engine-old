/*
 *
 *  Created by Peter Zion on 2010-08-03.
 *  Copyright 2010 Fabric 3D Inc. All rights reserved.
 *
 */

#include "OGL.h"
#include "Debug.h"
#include <Fabric/Core/CG/IntegerAdapter.h>
#include <Fabric/Core/CG/BooleanAdapter.h>
#include <Fabric/Core/CG/Manager.h>
#include <Fabric/Core/CG/Scope.h>
#include <Fabric/Core/CG/ModuleBuilder.h>
#include <Fabric/Core/CG/FunctionBuilder.h>
#include <Fabric/Core/MT/LogCollector.h>
#include <Fabric/Core/RT/BooleanDesc.h>
#include <Fabric/Core/RT/ByteDesc.h>
#include <Fabric/Core/RT/IntegerDesc.h>
#include <Fabric/Core/RT/ScalarDesc.h>
#include <Fabric/Core/RT/StringDesc.h>
#include <Fabric/Core/RT/StructDesc.h>
#include <Fabric/Core/RT/VariableArrayDesc.h>
#include <Fabric/Core/RT/StructMemberInfo.h>
#include <Fabric/Core/RT/Manager.h>
#include <Fabric/Core/Util/Log.h>
#include <Fabric/Core/Util/UnorderedMap.h>
#include <stdio.h>

namespace Fabric
{
  
  
  namespace OGL
  {
    static RC::Handle<RT::Manager> rtManager;

    typedef Util::UnorderedMap< std::string, void * > FuncTable;
    static FuncTable  llvmFuncTable;
    
    static RC::ConstHandle<RT::StringDesc> stringDesc;

    class ErrorReporter
    {
    public:
    
      ErrorReporter( char const *desc )
        : m_desc( desc )
      {
        //FABRIC_OGL_TRACE( "ErrorReporter::ErrorReporter( '%s' )", desc );
#if defined(FABRIC_OS_LINUX) || defined(FABRIC_OS_WINDOWS)
        if( !s_glewInitialized )
        {
          GLenum err = glewInit();
          FABRIC_ASSERT( err == GLEW_OK );
          //FABRIC_OGL_TRACE_NOTE( "OpenGL 2.0 is %s", GLEW_VERSION_2_0? "supported": "NOT SUPPORTED" );
          s_glewInitialized = true;
        }
#endif
        
        if ( s_bracketCount == 0 )
          glGetError(); // Throw away last error
      }
      
      ~ErrorReporter()
      {
        //FABRIC_OGL_TRACE( "ErrorReporter::~ErrorReporter()" );
        if ( s_bracketCount == 0 )
        {
          GLenum error = glGetError();
          if ( error != GL_NO_ERROR )
          {
            const char *errorStr;
            switch ( error )
            {
              case GL_INVALID_ENUM: errorStr = "GL_INVALID_ENUM"; break;
              case GL_INVALID_VALUE: errorStr = "GL_INVALID_VALUE"; break;
              case GL_INVALID_OPERATION: errorStr = "GL_INVALID_OPERATION"; break;
              case GL_STACK_OVERFLOW: errorStr = "GL_STACK_OVERFLOW"; break;
              case GL_STACK_UNDERFLOW: errorStr = "GL_STACK_UNDERFLOW"; break;
              case GL_OUT_OF_MEMORY: errorStr = "GL_OUT_OF_MEMORY"; break;
              case GL_TABLE_TOO_LARGE: errorStr = "GL_TABLE_TOO_LARGE"; break;
              default: errorStr = "(unknown error)"; break;
            }
#if defined( FABRIC_OS_WINDOWS )
            ::OutputDebugStringA( "*** The OpenGL error '" );
            ::OutputDebugStringA( errorStr );
            ::OutputDebugStringA( "' (0x%04X) occurred calling " );
            ::OutputDebugStringA( m_desc );
            ::OutputDebugStringA( "()\n" );
#else
            FABRIC_DEBUG_LOG( "The OpenGL error '%s' (0x%04X) occurred calling %s()", errorStr, (unsigned)error, m_desc );
#endif
          }
        }
      }
    
      void incBracket()
      {
        ++s_bracketCount;
      }
      
      void decBracket()
      {
        --s_bracketCount;
      }
    
    private:
    
      char const *m_desc;
      static size_t s_bracketCount;
#if defined(FABRIC_OS_LINUX) || defined(FABRIC_OS_WINDOWS)
      static bool s_glewInitialized;
#endif
    };
    size_t ErrorReporter::s_bracketCount = 0;

#if defined(FABRIC_OS_LINUX) || defined(FABRIC_OS_WINDOWS)
    bool ErrorReporter::s_glewInitialized = false;
#endif
    
    static void Accum(
      GLenum op,
      GLfloat value
    ){
      FABRIC_OGL_TRACE( "glAccum( %d, %f )",
        (int)op,
        (float)value
      );
      ErrorReporter errorReporter( "glAccum" );
      glAccum( op, value );
    }
    static void AlphaFunc(
      GLenum func,
      GLclampf ref
    ){
      FABRIC_OGL_TRACE( "glAlphaFunc( %d, %f )",
        (int)func,
        (float)ref
      );
      ErrorReporter errorReporter( "glAlphaFunc" );
      glAlphaFunc( func, ref );
    }
    static GLboolean AreTexturesResident(
      GLsizei n,
      const GLuint* textures,
      GLboolean* residences
    ){
      FABRIC_OGL_TRACE( "glAreTexturesResident( %d, GLuint*, GLboolean* )",
        (int)n
      );
      ErrorReporter errorReporter( "glAreTexturesResident" );
      GLboolean result = glAreTexturesResident( n, textures, residences );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void ArrayElement(
      GLint i
    ){
      FABRIC_OGL_TRACE( "glArrayElement( %d )",
        (int)i
      );
      ErrorReporter errorReporter( "glArrayElement" );
      glArrayElement( i );
    }
    static void Begin(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glBegin( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glBegin" );
      glBegin( mode );
    }
    static void BindTexture(
      GLenum target,
      GLuint texture
    ){
      FABRIC_OGL_TRACE( "glBindTexture( %d, 0x%04X )",
        (int)target,
        (unsigned)texture
      );
      ErrorReporter errorReporter( "glBindTexture" );
      glBindTexture( target, texture );
    }
    static void Bitmap(
      GLsizei width,
      GLsizei height,
      GLfloat xorig,
      GLfloat yorig,
      GLfloat xmove,
      GLfloat ymove,
      const GLubyte* bitmap
    ){
      FABRIC_OGL_TRACE( "glBitmap( %d, %d, %f, %f, %f, %f, GLubyte* )",
        (int)width,
        (int)height,
        (float)xorig,
        (float)yorig,
        (float)xmove,
        (float)ymove
      );
      ErrorReporter errorReporter( "glBitmap" );
      glBitmap( width, height, xorig, yorig, xmove, ymove, bitmap );
    }
    static void BlendFunc(
      GLenum sfactor,
      GLenum dfactor
    ){
      FABRIC_OGL_TRACE( "glBlendFunc( %d, %d )",
        (int)sfactor,
        (int)dfactor
      );
      ErrorReporter errorReporter( "glBlendFunc" );
      glBlendFunc( sfactor, dfactor );
    }
    static void CallList(
      GLuint list
    ){
      FABRIC_OGL_TRACE( "glCallList( 0x%04X )",
        (unsigned)list
      );
      ErrorReporter errorReporter( "glCallList" );
      glCallList( list );
    }
    static void CallLists(
      GLsizei n,
      GLenum type,
      const GLvoid* lists
    ){
      FABRIC_OGL_TRACE( "glCallLists( %d, %d, GLvoid* )",
        (int)n,
        (int)type
      );
      ErrorReporter errorReporter( "glCallLists" );
      glCallLists( n, type, lists );
    }
    static void Clear(
      GLbitfield mask
    ){
      FABRIC_OGL_TRACE( "glClear( 0x%04X )",
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glClear" );
      glClear( mask );
    }
    static void ClearAccum(
      GLfloat red,
      GLfloat green,
      GLfloat blue,
      GLfloat alpha
    ){
      FABRIC_OGL_TRACE( "glClearAccum( %f, %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue,
        (float)alpha
      );
      ErrorReporter errorReporter( "glClearAccum" );
      glClearAccum( red, green, blue, alpha );
    }
    static void ClearColor(
      GLclampf red,
      GLclampf green,
      GLclampf blue,
      GLclampf alpha
    ){
      FABRIC_OGL_TRACE( "glClearColor( %f, %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue,
        (float)alpha
      );
      ErrorReporter errorReporter( "glClearColor" );
      glClearColor( red, green, blue, alpha );
    }
    static void ClearDepth(
      GLclampd depth
    ){
      FABRIC_OGL_TRACE( "glClearDepth( %f )",
        (float)depth
      );
      ErrorReporter errorReporter( "glClearDepth" );
      glClearDepth( depth );
    }
    static void ClearIndex(
      GLfloat c
    ){
      FABRIC_OGL_TRACE( "glClearIndex( %f )",
        (float)c
      );
      ErrorReporter errorReporter( "glClearIndex" );
      glClearIndex( c );
    }
    static void ClearStencil(
      GLint s
    ){
      FABRIC_OGL_TRACE( "glClearStencil( %d )",
        (int)s
      );
      ErrorReporter errorReporter( "glClearStencil" );
      glClearStencil( s );
    }
    static void ClipPlane(
      GLenum plane,
      const GLdouble* equation
    ){
      FABRIC_OGL_TRACE( "glClipPlane( %d, GLdouble* )",
        (int)plane
      );
      ErrorReporter errorReporter( "glClipPlane" );
      glClipPlane( plane, equation );
    }
    static void Color3b(
      GLbyte red,
      GLbyte green,
      GLbyte blue
    ){
      FABRIC_OGL_TRACE( "glColor3b( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glColor3b" );
      glColor3b( red, green, blue );
    }
    static void Color3bv(
      const GLbyte* v
    ){
      FABRIC_OGL_TRACE( "glColor3bv( GLbyte* )" );
      ErrorReporter errorReporter( "glColor3bv" );
      glColor3bv( v );
    }
    static void Color3d(
      GLdouble red,
      GLdouble green,
      GLdouble blue
    ){
      FABRIC_OGL_TRACE( "glColor3d( %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue
      );
      ErrorReporter errorReporter( "glColor3d" );
      glColor3d( red, green, blue );
    }
    static void Color3dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glColor3dv( GLdouble* )" );
      ErrorReporter errorReporter( "glColor3dv" );
      glColor3dv( v );
    }
    static void Color3f(
      GLfloat red,
      GLfloat green,
      GLfloat blue
    ){
      FABRIC_OGL_TRACE( "glColor3f( %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue
      );
      ErrorReporter errorReporter( "glColor3f" );
      glColor3f( red, green, blue );
    }
    static void Color3fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glColor3fv( GLfloat* )" );
      ErrorReporter errorReporter( "glColor3fv" );
      glColor3fv( v );
    }
    static void Color3i(
      GLint red,
      GLint green,
      GLint blue
    ){
      FABRIC_OGL_TRACE( "glColor3i( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glColor3i" );
      glColor3i( red, green, blue );
    }
    static void Color3iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glColor3iv( GLint* )" );
      ErrorReporter errorReporter( "glColor3iv" );
      glColor3iv( v );
    }
    static void Color3s(
      GLshort red,
      GLshort green,
      GLshort blue
    ){
      FABRIC_OGL_TRACE( "glColor3s( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glColor3s" );
      glColor3s( red, green, blue );
    }
    static void Color3sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glColor3sv( GLshort* )" );
      ErrorReporter errorReporter( "glColor3sv" );
      glColor3sv( v );
    }
    static void Color3ub(
      GLubyte red,
      GLubyte green,
      GLubyte blue
    ){
      FABRIC_OGL_TRACE( "glColor3ub( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glColor3ub" );
      glColor3ub( red, green, blue );
    }
    static void Color3ubv(
      const GLubyte* v
    ){
      FABRIC_OGL_TRACE( "glColor3ubv( GLubyte* )" );
      ErrorReporter errorReporter( "glColor3ubv" );
      glColor3ubv( v );
    }
    static void Color3ui(
      GLuint red,
      GLuint green,
      GLuint blue
    ){
      FABRIC_OGL_TRACE( "glColor3ui( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glColor3ui" );
      glColor3ui( red, green, blue );
    }
    static void Color3uiv(
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glColor3uiv( GLuint* )" );
      ErrorReporter errorReporter( "glColor3uiv" );
      glColor3uiv( v );
    }
    static void Color3us(
      GLushort red,
      GLushort green,
      GLushort blue
    ){
      FABRIC_OGL_TRACE( "glColor3us( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glColor3us" );
      glColor3us( red, green, blue );
    }
    static void Color3usv(
      const GLushort* v
    ){
      FABRIC_OGL_TRACE( "glColor3usv( GLushort* )" );
      ErrorReporter errorReporter( "glColor3usv" );
      glColor3usv( v );
    }
    static void Color4b(
      GLbyte red,
      GLbyte green,
      GLbyte blue,
      GLbyte alpha
    ){
      FABRIC_OGL_TRACE( "glColor4b( %d, %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue,
        (int)alpha
      );
      ErrorReporter errorReporter( "glColor4b" );
      glColor4b( red, green, blue, alpha );
    }
    static void Color4bv(
      const GLbyte* v
    ){
      FABRIC_OGL_TRACE( "glColor4bv( GLbyte* )" );
      ErrorReporter errorReporter( "glColor4bv" );
      glColor4bv( v );
    }
    static void Color4d(
      GLdouble red,
      GLdouble green,
      GLdouble blue,
      GLdouble alpha
    ){
      FABRIC_OGL_TRACE( "glColor4d( %f, %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue,
        (float)alpha
      );
      ErrorReporter errorReporter( "glColor4d" );
      glColor4d( red, green, blue, alpha );
    }
    static void Color4dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glColor4dv( GLdouble* )" );
      ErrorReporter errorReporter( "glColor4dv" );
      glColor4dv( v );
    }
    static void Color4f(
      GLfloat red,
      GLfloat green,
      GLfloat blue,
      GLfloat alpha
    ){
      FABRIC_OGL_TRACE( "glColor4f( %f, %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue,
        (float)alpha
      );
      ErrorReporter errorReporter( "glColor4f" );
      glColor4f( red, green, blue, alpha );
    }
    static void Color4fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glColor4fv( GLfloat* )" );
      ErrorReporter errorReporter( "glColor4fv" );
      glColor4fv( v );
    }
    static void Color4i(
      GLint red,
      GLint green,
      GLint blue,
      GLint alpha
    ){
      FABRIC_OGL_TRACE( "glColor4i( %d, %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue,
        (int)alpha
      );
      ErrorReporter errorReporter( "glColor4i" );
      glColor4i( red, green, blue, alpha );
    }
    static void Color4iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glColor4iv( GLint* )" );
      ErrorReporter errorReporter( "glColor4iv" );
      glColor4iv( v );
    }
    static void Color4s(
      GLshort red,
      GLshort green,
      GLshort blue,
      GLshort alpha
    ){
      FABRIC_OGL_TRACE( "glColor4s( %d, %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue,
        (int)alpha
      );
      ErrorReporter errorReporter( "glColor4s" );
      glColor4s( red, green, blue, alpha );
    }
    static void Color4sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glColor4sv( GLshort* )" );
      ErrorReporter errorReporter( "glColor4sv" );
      glColor4sv( v );
    }
    static void Color4ub(
      GLubyte red,
      GLubyte green,
      GLubyte blue,
      GLubyte alpha
    ){
      FABRIC_OGL_TRACE( "glColor4ub( 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue,
        (unsigned)alpha
      );
      ErrorReporter errorReporter( "glColor4ub" );
      glColor4ub( red, green, blue, alpha );
    }
    static void Color4ubv(
      const GLubyte* v
    ){
      FABRIC_OGL_TRACE( "glColor4ubv( GLubyte* )" );
      ErrorReporter errorReporter( "glColor4ubv" );
      glColor4ubv( v );
    }
    static void Color4ui(
      GLuint red,
      GLuint green,
      GLuint blue,
      GLuint alpha
    ){
      FABRIC_OGL_TRACE( "glColor4ui( 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue,
        (unsigned)alpha
      );
      ErrorReporter errorReporter( "glColor4ui" );
      glColor4ui( red, green, blue, alpha );
    }
    static void Color4uiv(
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glColor4uiv( GLuint* )" );
      ErrorReporter errorReporter( "glColor4uiv" );
      glColor4uiv( v );
    }
    static void Color4us(
      GLushort red,
      GLushort green,
      GLushort blue,
      GLushort alpha
    ){
      FABRIC_OGL_TRACE( "glColor4us( 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue,
        (unsigned)alpha
      );
      ErrorReporter errorReporter( "glColor4us" );
      glColor4us( red, green, blue, alpha );
    }
    static void Color4usv(
      const GLushort* v
    ){
      FABRIC_OGL_TRACE( "glColor4usv( GLushort* )" );
      ErrorReporter errorReporter( "glColor4usv" );
      glColor4usv( v );
    }
    static void ColorMask(
      GLboolean red,
      GLboolean green,
      GLboolean blue,
      GLboolean alpha
    ){
      FABRIC_OGL_TRACE( "glColorMask( %b, %b, %b, %b )",
        (bool)red,
        (bool)green,
        (bool)blue,
        (bool)alpha
      );
      ErrorReporter errorReporter( "glColorMask" );
      glColorMask( red, green, blue, alpha );
    }
    static void ColorMaterial(
      GLenum face,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glColorMaterial( %d, %d )",
        (int)face,
        (int)mode
      );
      ErrorReporter errorReporter( "glColorMaterial" );
      glColorMaterial( face, mode );
    }
    static void ColorPointer(
      GLint size,
      GLenum type,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glColorPointer( %d, %d, %d, GLvoid* )",
        (int)size,
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glColorPointer" );
      glColorPointer( size, type, stride, pointer );
    }
    static void CopyPixels(
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height,
      GLenum type
    ){
      FABRIC_OGL_TRACE( "glCopyPixels( %d, %d, %d, %d, %d )",
        (int)x,
        (int)y,
        (int)width,
        (int)height,
        (int)type
      );
      ErrorReporter errorReporter( "glCopyPixels" );
      glCopyPixels( x, y, width, height, type );
    }
    static void CopyTexImage1D(
      GLenum target,
      GLint level,
      GLenum internalFormat,
      GLint x,
      GLint y,
      GLsizei width,
      GLint border
    ){
      FABRIC_OGL_TRACE( "glCopyTexImage1D( %d, %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)internalFormat,
        (int)x,
        (int)y,
        (int)width,
        (int)border
      );
      ErrorReporter errorReporter( "glCopyTexImage1D" );
      glCopyTexImage1D( target, level, internalFormat, x, y, width, border );
    }
    static void CopyTexImage2D(
      GLenum target,
      GLint level,
      GLenum internalFormat,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height,
      GLint border
    ){
      FABRIC_OGL_TRACE( "glCopyTexImage2D( %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)internalFormat,
        (int)x,
        (int)y,
        (int)width,
        (int)height,
        (int)border
      );
      ErrorReporter errorReporter( "glCopyTexImage2D" );
      glCopyTexImage2D( target, level, internalFormat, x, y, width, height, border );
    }
    static void CopyTexSubImage1D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyTexSubImage1D( %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyTexSubImage1D" );
      glCopyTexSubImage1D( target, level, xoffset, x, y, width );
    }
    static void CopyTexSubImage2D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyTexSubImage2D( %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyTexSubImage2D" );
      glCopyTexSubImage2D( target, level, xoffset, yoffset, x, y, width, height );
    }
    static void CullFace(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glCullFace( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glCullFace" );
      glCullFace( mode );
    }
    static void DeleteLists(
      GLuint list,
      GLsizei range
    ){
      FABRIC_OGL_TRACE( "glDeleteLists( 0x%04X, %d )",
        (unsigned)list,
        (int)range
      );
      ErrorReporter errorReporter( "glDeleteLists" );
      glDeleteLists( list, range );
    }
    static void DeleteTextures(
      GLsizei n,
      const GLuint* textures
    ){
      FABRIC_OGL_TRACE( "glDeleteTextures( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteTextures" );
      glDeleteTextures( n, textures );
    }
    static void DepthFunc(
      GLenum func
    ){
      FABRIC_OGL_TRACE( "glDepthFunc( %d )",
        (int)func
      );
      ErrorReporter errorReporter( "glDepthFunc" );
      glDepthFunc( func );
    }
    static void DepthMask(
      GLboolean flag
    ){
      FABRIC_OGL_TRACE( "glDepthMask( %b )",
        (bool)flag
      );
      ErrorReporter errorReporter( "glDepthMask" );
      glDepthMask( flag );
    }
    static void DepthRange(
      GLclampd zNear,
      GLclampd zFar
    ){
      FABRIC_OGL_TRACE( "glDepthRange( %f, %f )",
        (float)zNear,
        (float)zFar
      );
      ErrorReporter errorReporter( "glDepthRange" );
      glDepthRange( zNear, zFar );
    }
    static void Disable(
      GLenum cap
    ){
      FABRIC_OGL_TRACE( "glDisable( %d )",
        (int)cap
      );
      ErrorReporter errorReporter( "glDisable" );
      glDisable( cap );
    }
    static void DisableClientState(
      GLenum array
    ){
      FABRIC_OGL_TRACE( "glDisableClientState( %d )",
        (int)array
      );
      ErrorReporter errorReporter( "glDisableClientState" );
      glDisableClientState( array );
    }
    static void DrawArrays(
      GLenum mode,
      GLint first,
      GLsizei count
    ){
      FABRIC_OGL_TRACE( "glDrawArrays( %d, %d, %d )",
        (int)mode,
        (int)first,
        (int)count
      );
      ErrorReporter errorReporter( "glDrawArrays" );
      glDrawArrays( mode, first, count );
    }
    static void DrawBuffer(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glDrawBuffer( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glDrawBuffer" );
      glDrawBuffer( mode );
    }
    static void DrawElements(
      GLenum mode,
      GLsizei count,
      GLenum type,
      const GLvoid* indices
    ){
      FABRIC_OGL_TRACE( "glDrawElements( %d, %d, %d, GLvoid* )",
        (int)mode,
        (int)count,
        (int)type
      );
      ErrorReporter errorReporter( "glDrawElements" );
      glDrawElements( mode, count, type, indices );
    }
    static void DrawPixels(
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glDrawPixels( %d, %d, %d, %d, GLvoid* )",
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glDrawPixels" );
      glDrawPixels( width, height, format, type, pixels );
    }
    static void EdgeFlag(
      GLboolean flag
    ){
      FABRIC_OGL_TRACE( "glEdgeFlag( %b )",
        (bool)flag
      );
      ErrorReporter errorReporter( "glEdgeFlag" );
      glEdgeFlag( flag );
    }
    static void EdgeFlagPointer(
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glEdgeFlagPointer( %d, GLvoid* )",
        (int)stride
      );
      ErrorReporter errorReporter( "glEdgeFlagPointer" );
      glEdgeFlagPointer( stride, pointer );
    }
    static void EdgeFlagv(
      const GLboolean* flag
    ){
      FABRIC_OGL_TRACE( "glEdgeFlagv( GLboolean* )" );
      ErrorReporter errorReporter( "glEdgeFlagv" );
      glEdgeFlagv( flag );
    }
    static void Enable(
      GLenum cap
    ){
      FABRIC_OGL_TRACE( "glEnable( %d )",
        (int)cap
      );
      ErrorReporter errorReporter( "glEnable" );
      glEnable( cap );
    }
    static void EnableClientState(
      GLenum array
    ){
      FABRIC_OGL_TRACE( "glEnableClientState( %d )",
        (int)array
      );
      ErrorReporter errorReporter( "glEnableClientState" );
      glEnableClientState( array );
    }
    static void End()
    {
      FABRIC_OGL_TRACE( "glEnd()" );
      ErrorReporter errorReporter( "glEnd" );
      glEnd();
    }
    static void EndList()
    {
      FABRIC_OGL_TRACE( "glEndList()" );
      ErrorReporter errorReporter( "glEndList" );
      glEndList();
    }
    static void EvalCoord1d(
      GLdouble u
    ){
      FABRIC_OGL_TRACE( "glEvalCoord1d( %f )",
        (float)u
      );
      ErrorReporter errorReporter( "glEvalCoord1d" );
      glEvalCoord1d( u );
    }
    static void EvalCoord1dv(
      const GLdouble* u
    ){
      FABRIC_OGL_TRACE( "glEvalCoord1dv( GLdouble* )" );
      ErrorReporter errorReporter( "glEvalCoord1dv" );
      glEvalCoord1dv( u );
    }
    static void EvalCoord1f(
      GLfloat u
    ){
      FABRIC_OGL_TRACE( "glEvalCoord1f( %f )",
        (float)u
      );
      ErrorReporter errorReporter( "glEvalCoord1f" );
      glEvalCoord1f( u );
    }
    static void EvalCoord1fv(
      const GLfloat* u
    ){
      FABRIC_OGL_TRACE( "glEvalCoord1fv( GLfloat* )" );
      ErrorReporter errorReporter( "glEvalCoord1fv" );
      glEvalCoord1fv( u );
    }
    static void EvalCoord2d(
      GLdouble u,
      GLdouble v
    ){
      FABRIC_OGL_TRACE( "glEvalCoord2d( %f, %f )",
        (float)u,
        (float)v
      );
      ErrorReporter errorReporter( "glEvalCoord2d" );
      glEvalCoord2d( u, v );
    }
    static void EvalCoord2dv(
      const GLdouble* u
    ){
      FABRIC_OGL_TRACE( "glEvalCoord2dv( GLdouble* )" );
      ErrorReporter errorReporter( "glEvalCoord2dv" );
      glEvalCoord2dv( u );
    }
    static void EvalCoord2f(
      GLfloat u,
      GLfloat v
    ){
      FABRIC_OGL_TRACE( "glEvalCoord2f( %f, %f )",
        (float)u,
        (float)v
      );
      ErrorReporter errorReporter( "glEvalCoord2f" );
      glEvalCoord2f( u, v );
    }
    static void EvalCoord2fv(
      const GLfloat* u
    ){
      FABRIC_OGL_TRACE( "glEvalCoord2fv( GLfloat* )" );
      ErrorReporter errorReporter( "glEvalCoord2fv" );
      glEvalCoord2fv( u );
    }
    static void EvalMesh1(
      GLenum mode,
      GLint i1,
      GLint i2
    ){
      FABRIC_OGL_TRACE( "glEvalMesh1( %d, %d, %d )",
        (int)mode,
        (int)i1,
        (int)i2
      );
      ErrorReporter errorReporter( "glEvalMesh1" );
      glEvalMesh1( mode, i1, i2 );
    }
    static void EvalMesh2(
      GLenum mode,
      GLint i1,
      GLint i2,
      GLint j1,
      GLint j2
    ){
      FABRIC_OGL_TRACE( "glEvalMesh2( %d, %d, %d, %d, %d )",
        (int)mode,
        (int)i1,
        (int)i2,
        (int)j1,
        (int)j2
      );
      ErrorReporter errorReporter( "glEvalMesh2" );
      glEvalMesh2( mode, i1, i2, j1, j2 );
    }
    static void EvalPoint1(
      GLint i
    ){
      FABRIC_OGL_TRACE( "glEvalPoint1( %d )",
        (int)i
      );
      ErrorReporter errorReporter( "glEvalPoint1" );
      glEvalPoint1( i );
    }
    static void EvalPoint2(
      GLint i,
      GLint j
    ){
      FABRIC_OGL_TRACE( "glEvalPoint2( %d, %d )",
        (int)i,
        (int)j
      );
      ErrorReporter errorReporter( "glEvalPoint2" );
      glEvalPoint2( i, j );
    }
    static void FeedbackBuffer(
      GLsizei size,
      GLenum type,
      GLfloat* buffer
    ){
      FABRIC_OGL_TRACE( "glFeedbackBuffer( %d, %d, GLfloat* )",
        (int)size,
        (int)type
      );
      ErrorReporter errorReporter( "glFeedbackBuffer" );
      glFeedbackBuffer( size, type, buffer );
    }
    static void Finish()
    {
      FABRIC_OGL_TRACE( "glFinish()" );
      ErrorReporter errorReporter( "glFinish" );
      glFinish();
    }
    static void Flush()
    {
      FABRIC_OGL_TRACE( "glFlush()" );
      ErrorReporter errorReporter( "glFlush" );
      glFlush();
    }
    static void Fogf(
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glFogf( %d, %f )",
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glFogf" );
      glFogf( pname, param );
    }
    static void Fogfv(
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glFogfv( %d, GLfloat* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glFogfv" );
      glFogfv( pname, params );
    }
    static void Fogi(
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glFogi( %d, %d )",
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glFogi" );
      glFogi( pname, param );
    }
    static void Fogiv(
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glFogiv( %d, GLint* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glFogiv" );
      glFogiv( pname, params );
    }
    static void FrontFace(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glFrontFace( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glFrontFace" );
      glFrontFace( mode );
    }
    static void Frustum(
      GLdouble left,
      GLdouble right,
      GLdouble bottom,
      GLdouble top,
      GLdouble zNear,
      GLdouble zFar
    ){
      FABRIC_OGL_TRACE( "glFrustum( %f, %f, %f, %f, %f, %f )",
        (float)left,
        (float)right,
        (float)bottom,
        (float)top,
        (float)zNear,
        (float)zFar
      );
      ErrorReporter errorReporter( "glFrustum" );
      glFrustum( left, right, bottom, top, zNear, zFar );
    }
    static GLuint GenLists(
      GLsizei range
    ){
      FABRIC_OGL_TRACE( "glGenLists( %d )",
        (int)range
      );
      ErrorReporter errorReporter( "glGenLists" );
      GLuint result = glGenLists( range );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static void GenTextures(
      GLsizei n,
      GLuint* textures
    ){
      FABRIC_OGL_TRACE( "glGenTextures( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenTextures" );
      glGenTextures( n, textures );
    }
    static void GetBooleanv(
      GLenum pname,
      GLboolean* params
    ){
      FABRIC_OGL_TRACE( "glGetBooleanv( %d, GLboolean* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glGetBooleanv" );
      glGetBooleanv( pname, params );
    }
    static void GetClipPlane(
      GLenum plane,
      GLdouble* equation
    ){
      FABRIC_OGL_TRACE( "glGetClipPlane( %d, GLdouble* )",
        (int)plane
      );
      ErrorReporter errorReporter( "glGetClipPlane" );
      glGetClipPlane( plane, equation );
    }
    static void GetDoublev(
      GLenum pname,
      GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glGetDoublev( %d, GLdouble* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glGetDoublev" );
      glGetDoublev( pname, params );
    }
    static GLenum GetError()
    {
      FABRIC_OGL_TRACE( "glGetError()" );
      ErrorReporter errorReporter( "glGetError" );
      GLenum result = glGetError();
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void GetFloatv(
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetFloatv( %d, GLfloat* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glGetFloatv" );
      glGetFloatv( pname, params );
    }
    static void GetIntegerv(
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetIntegerv( %d, GLint* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glGetIntegerv" );
      glGetIntegerv( pname, params );
    }
    static void GetLightfv(
      GLenum light,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetLightfv( %d, %d, GLfloat* )",
        (int)light,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetLightfv" );
      glGetLightfv( light, pname, params );
    }
    static void GetLightiv(
      GLenum light,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetLightiv( %d, %d, GLint* )",
        (int)light,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetLightiv" );
      glGetLightiv( light, pname, params );
    }
    static void GetMapdv(
      GLenum target,
      GLenum query,
      GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glGetMapdv( %d, %d, GLdouble* )",
        (int)target,
        (int)query
      );
      ErrorReporter errorReporter( "glGetMapdv" );
      glGetMapdv( target, query, v );
    }
    static void GetMapfv(
      GLenum target,
      GLenum query,
      GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glGetMapfv( %d, %d, GLfloat* )",
        (int)target,
        (int)query
      );
      ErrorReporter errorReporter( "glGetMapfv" );
      glGetMapfv( target, query, v );
    }
    static void GetMapiv(
      GLenum target,
      GLenum query,
      GLint* v
    ){
      FABRIC_OGL_TRACE( "glGetMapiv( %d, %d, GLint* )",
        (int)target,
        (int)query
      );
      ErrorReporter errorReporter( "glGetMapiv" );
      glGetMapiv( target, query, v );
    }
    static void GetMaterialfv(
      GLenum face,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetMaterialfv( %d, %d, GLfloat* )",
        (int)face,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMaterialfv" );
      glGetMaterialfv( face, pname, params );
    }
    static void GetMaterialiv(
      GLenum face,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetMaterialiv( %d, %d, GLint* )",
        (int)face,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMaterialiv" );
      glGetMaterialiv( face, pname, params );
    }
    static void GetPixelMapfv(
      GLenum map,
      GLfloat* values
    ){
      FABRIC_OGL_TRACE( "glGetPixelMapfv( %d, GLfloat* )",
        (int)map
      );
      ErrorReporter errorReporter( "glGetPixelMapfv" );
      glGetPixelMapfv( map, values );
    }
    static void GetPixelMapuiv(
      GLenum map,
      GLuint* values
    ){
      FABRIC_OGL_TRACE( "glGetPixelMapuiv( %d, GLuint* )",
        (int)map
      );
      ErrorReporter errorReporter( "glGetPixelMapuiv" );
      glGetPixelMapuiv( map, values );
    }
    static void GetPixelMapusv(
      GLenum map,
      GLushort* values
    ){
      FABRIC_OGL_TRACE( "glGetPixelMapusv( %d, GLushort* )",
        (int)map
      );
      ErrorReporter errorReporter( "glGetPixelMapusv" );
      glGetPixelMapusv( map, values );
    }
    static void GetPolygonStipple(
      GLubyte* mask
    ){
      FABRIC_OGL_TRACE( "glGetPolygonStipple( GLubyte* )" );
      ErrorReporter errorReporter( "glGetPolygonStipple" );
      glGetPolygonStipple( mask );
    }
    static const GLubyte* GetString(
      GLenum name
    ){
      FABRIC_OGL_TRACE( "glGetString( %d )",
        (int)name
      );
      ErrorReporter errorReporter( "glGetString" );
      const GLubyte* result = glGetString( name );
      return result;
    }
    static void GetTexEnvfv(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetTexEnvfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexEnvfv" );
      glGetTexEnvfv( target, pname, params );
    }
    static void GetTexEnviv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetTexEnviv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexEnviv" );
      glGetTexEnviv( target, pname, params );
    }
    static void GetTexGendv(
      GLenum coord,
      GLenum pname,
      GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glGetTexGendv( %d, %d, GLdouble* )",
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexGendv" );
      glGetTexGendv( coord, pname, params );
    }
    static void GetTexGenfv(
      GLenum coord,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetTexGenfv( %d, %d, GLfloat* )",
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexGenfv" );
      glGetTexGenfv( coord, pname, params );
    }
    static void GetTexGeniv(
      GLenum coord,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetTexGeniv( %d, %d, GLint* )",
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexGeniv" );
      glGetTexGeniv( coord, pname, params );
    }
    static void GetTexImage(
      GLenum target,
      GLint level,
      GLenum format,
      GLenum type,
      GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glGetTexImage( %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetTexImage" );
      glGetTexImage( target, level, format, type, pixels );
    }
    static void GetTexLevelParameterfv(
      GLenum target,
      GLint level,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetTexLevelParameterfv( %d, %d, %d, GLfloat* )",
        (int)target,
        (int)level,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexLevelParameterfv" );
      glGetTexLevelParameterfv( target, level, pname, params );
    }
    static void GetTexLevelParameteriv(
      GLenum target,
      GLint level,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetTexLevelParameteriv( %d, %d, %d, GLint* )",
        (int)target,
        (int)level,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexLevelParameteriv" );
      glGetTexLevelParameteriv( target, level, pname, params );
    }
    static void GetTexParameterfv(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetTexParameterfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexParameterfv" );
      glGetTexParameterfv( target, pname, params );
    }
    static void GetTexParameteriv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetTexParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexParameteriv" );
      glGetTexParameteriv( target, pname, params );
    }
    static void Hint(
      GLenum target,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glHint( %d, %d )",
        (int)target,
        (int)mode
      );
      ErrorReporter errorReporter( "glHint" );
      glHint( target, mode );
    }
    static void IndexMask(
      GLuint mask
    ){
      FABRIC_OGL_TRACE( "glIndexMask( 0x%04X )",
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glIndexMask" );
      glIndexMask( mask );
    }
    static void IndexPointer(
      GLenum type,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glIndexPointer( %d, %d, GLvoid* )",
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glIndexPointer" );
      glIndexPointer( type, stride, pointer );
    }
    static void Indexd(
      GLdouble c
    ){
      FABRIC_OGL_TRACE( "glIndexd( %f )",
        (float)c
      );
      ErrorReporter errorReporter( "glIndexd" );
      glIndexd( c );
    }
    static void Indexdv(
      const GLdouble* c
    ){
      FABRIC_OGL_TRACE( "glIndexdv( GLdouble* )" );
      ErrorReporter errorReporter( "glIndexdv" );
      glIndexdv( c );
    }
    static void Indexf(
      GLfloat c
    ){
      FABRIC_OGL_TRACE( "glIndexf( %f )",
        (float)c
      );
      ErrorReporter errorReporter( "glIndexf" );
      glIndexf( c );
    }
    static void Indexfv(
      const GLfloat* c
    ){
      FABRIC_OGL_TRACE( "glIndexfv( GLfloat* )" );
      ErrorReporter errorReporter( "glIndexfv" );
      glIndexfv( c );
    }
    static void Indexi(
      GLint c
    ){
      FABRIC_OGL_TRACE( "glIndexi( %d )",
        (int)c
      );
      ErrorReporter errorReporter( "glIndexi" );
      glIndexi( c );
    }
    static void Indexiv(
      const GLint* c
    ){
      FABRIC_OGL_TRACE( "glIndexiv( GLint* )" );
      ErrorReporter errorReporter( "glIndexiv" );
      glIndexiv( c );
    }
    static void Indexs(
      GLshort c
    ){
      FABRIC_OGL_TRACE( "glIndexs( %d )",
        (int)c
      );
      ErrorReporter errorReporter( "glIndexs" );
      glIndexs( c );
    }
    static void Indexsv(
      const GLshort* c
    ){
      FABRIC_OGL_TRACE( "glIndexsv( GLshort* )" );
      ErrorReporter errorReporter( "glIndexsv" );
      glIndexsv( c );
    }
    static void Indexub(
      GLubyte c
    ){
      FABRIC_OGL_TRACE( "glIndexub( 0x%04X )",
        (unsigned)c
      );
      ErrorReporter errorReporter( "glIndexub" );
      glIndexub( c );
    }
    static void Indexubv(
      const GLubyte* c
    ){
      FABRIC_OGL_TRACE( "glIndexubv( GLubyte* )" );
      ErrorReporter errorReporter( "glIndexubv" );
      glIndexubv( c );
    }
    static void InitNames()
    {
      FABRIC_OGL_TRACE( "glInitNames()" );
      ErrorReporter errorReporter( "glInitNames" );
      glInitNames();
    }
    static void InterleavedArrays(
      GLenum format,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glInterleavedArrays( %d, %d, GLvoid* )",
        (int)format,
        (int)stride
      );
      ErrorReporter errorReporter( "glInterleavedArrays" );
      glInterleavedArrays( format, stride, pointer );
    }
    static GLboolean IsEnabled(
      GLenum cap
    ){
      FABRIC_OGL_TRACE( "glIsEnabled( %d )",
        (int)cap
      );
      ErrorReporter errorReporter( "glIsEnabled" );
      GLboolean result = glIsEnabled( cap );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLboolean IsList(
      GLuint list
    ){
      FABRIC_OGL_TRACE( "glIsList( 0x%04X )",
        (unsigned)list
      );
      ErrorReporter errorReporter( "glIsList" );
      GLboolean result = glIsList( list );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLboolean IsTexture(
      GLuint texture
    ){
      FABRIC_OGL_TRACE( "glIsTexture( 0x%04X )",
        (unsigned)texture
      );
      ErrorReporter errorReporter( "glIsTexture" );
      GLboolean result = glIsTexture( texture );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void LightModelf(
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glLightModelf( %d, %f )",
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glLightModelf" );
      glLightModelf( pname, param );
    }
    static void LightModelfv(
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glLightModelfv( %d, GLfloat* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glLightModelfv" );
      glLightModelfv( pname, params );
    }
    static void LightModeli(
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glLightModeli( %d, %d )",
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glLightModeli" );
      glLightModeli( pname, param );
    }
    static void LightModeliv(
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glLightModeliv( %d, GLint* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glLightModeliv" );
      glLightModeliv( pname, params );
    }
    static void Lightf(
      GLenum light,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glLightf( %d, %d, %f )",
        (int)light,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glLightf" );
      glLightf( light, pname, param );
    }
    static void Lightfv(
      GLenum light,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glLightfv( %d, %d, GLfloat* )",
        (int)light,
        (int)pname
      );
      ErrorReporter errorReporter( "glLightfv" );
      glLightfv( light, pname, params );
    }
    static void Lighti(
      GLenum light,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glLighti( %d, %d, %d )",
        (int)light,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glLighti" );
      glLighti( light, pname, param );
    }
    static void Lightiv(
      GLenum light,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glLightiv( %d, %d, GLint* )",
        (int)light,
        (int)pname
      );
      ErrorReporter errorReporter( "glLightiv" );
      glLightiv( light, pname, params );
    }
    static void LineStipple(
      GLint factor,
      GLushort pattern
    ){
      FABRIC_OGL_TRACE( "glLineStipple( %d, 0x%04X )",
        (int)factor,
        (unsigned)pattern
      );
      ErrorReporter errorReporter( "glLineStipple" );
      glLineStipple( factor, pattern );
    }
    static void LineWidth(
      GLfloat width
    ){
      FABRIC_OGL_TRACE( "glLineWidth( %f )",
        (float)width
      );
      ErrorReporter errorReporter( "glLineWidth" );
      glLineWidth( width );
    }
    static void ListBase(
      GLuint base
    ){
      FABRIC_OGL_TRACE( "glListBase( 0x%04X )",
        (unsigned)base
      );
      ErrorReporter errorReporter( "glListBase" );
      glListBase( base );
    }
    static void LoadIdentity()
    {
      FABRIC_OGL_TRACE( "glLoadIdentity()" );
      ErrorReporter errorReporter( "glLoadIdentity" );
      glLoadIdentity();
    }
    static void LoadMatrixd(
      const GLdouble* m
    ){
      FABRIC_OGL_TRACE( "glLoadMatrixd( GLdouble* )" );
      ErrorReporter errorReporter( "glLoadMatrixd" );
      glLoadMatrixd( m );
    }
    static void LoadMatrixf(
      const GLfloat* m
    ){
      FABRIC_OGL_TRACE( "glLoadMatrixf( GLfloat* )" );
      ErrorReporter errorReporter( "glLoadMatrixf" );
      glLoadMatrixf( m );
    }
    static void LoadName(
      GLuint name
    ){
      FABRIC_OGL_TRACE( "glLoadName( 0x%04X )",
        (unsigned)name
      );
      ErrorReporter errorReporter( "glLoadName" );
      glLoadName( name );
    }
    static void LogicOp(
      GLenum opcode
    ){
      FABRIC_OGL_TRACE( "glLogicOp( %d )",
        (int)opcode
      );
      ErrorReporter errorReporter( "glLogicOp" );
      glLogicOp( opcode );
    }
    static void Map1d(
      GLenum target,
      GLdouble u1,
      GLdouble u2,
      GLint stride,
      GLint order,
      const GLdouble* points
    ){
      FABRIC_OGL_TRACE( "glMap1d( %d, %f, %f, %d, %d, GLdouble* )",
        (int)target,
        (float)u1,
        (float)u2,
        (int)stride,
        (int)order
      );
      ErrorReporter errorReporter( "glMap1d" );
      glMap1d( target, u1, u2, stride, order, points );
    }
    static void Map1f(
      GLenum target,
      GLfloat u1,
      GLfloat u2,
      GLint stride,
      GLint order,
      const GLfloat* points
    ){
      FABRIC_OGL_TRACE( "glMap1f( %d, %f, %f, %d, %d, GLfloat* )",
        (int)target,
        (float)u1,
        (float)u2,
        (int)stride,
        (int)order
      );
      ErrorReporter errorReporter( "glMap1f" );
      glMap1f( target, u1, u2, stride, order, points );
    }
    static void Map2d(
      GLenum target,
      GLdouble u1,
      GLdouble u2,
      GLint ustride,
      GLint uorder,
      GLdouble v1,
      GLdouble v2,
      GLint vstride,
      GLint vorder,
      const GLdouble* points
    ){
      FABRIC_OGL_TRACE( "glMap2d( %d, %f, %f, %d, %d, %f, %f, %d, %d, GLdouble* )",
        (int)target,
        (float)u1,
        (float)u2,
        (int)ustride,
        (int)uorder,
        (float)v1,
        (float)v2,
        (int)vstride,
        (int)vorder
      );
      ErrorReporter errorReporter( "glMap2d" );
      glMap2d( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
    }
    static void Map2f(
      GLenum target,
      GLfloat u1,
      GLfloat u2,
      GLint ustride,
      GLint uorder,
      GLfloat v1,
      GLfloat v2,
      GLint vstride,
      GLint vorder,
      const GLfloat* points
    ){
      FABRIC_OGL_TRACE( "glMap2f( %d, %f, %f, %d, %d, %f, %f, %d, %d, GLfloat* )",
        (int)target,
        (float)u1,
        (float)u2,
        (int)ustride,
        (int)uorder,
        (float)v1,
        (float)v2,
        (int)vstride,
        (int)vorder
      );
      ErrorReporter errorReporter( "glMap2f" );
      glMap2f( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
    }
    static void MapGrid1d(
      GLint un,
      GLdouble u1,
      GLdouble u2
    ){
      FABRIC_OGL_TRACE( "glMapGrid1d( %d, %f, %f )",
        (int)un,
        (float)u1,
        (float)u2
      );
      ErrorReporter errorReporter( "glMapGrid1d" );
      glMapGrid1d( un, u1, u2 );
    }
    static void MapGrid1f(
      GLint un,
      GLfloat u1,
      GLfloat u2
    ){
      FABRIC_OGL_TRACE( "glMapGrid1f( %d, %f, %f )",
        (int)un,
        (float)u1,
        (float)u2
      );
      ErrorReporter errorReporter( "glMapGrid1f" );
      glMapGrid1f( un, u1, u2 );
    }
    static void MapGrid2d(
      GLint un,
      GLdouble u1,
      GLdouble u2,
      GLint vn,
      GLdouble v1,
      GLdouble v2
    ){
      FABRIC_OGL_TRACE( "glMapGrid2d( %d, %f, %f, %d, %f, %f )",
        (int)un,
        (float)u1,
        (float)u2,
        (int)vn,
        (float)v1,
        (float)v2
      );
      ErrorReporter errorReporter( "glMapGrid2d" );
      glMapGrid2d( un, u1, u2, vn, v1, v2 );
    }
    static void MapGrid2f(
      GLint un,
      GLfloat u1,
      GLfloat u2,
      GLint vn,
      GLfloat v1,
      GLfloat v2
    ){
      FABRIC_OGL_TRACE( "glMapGrid2f( %d, %f, %f, %d, %f, %f )",
        (int)un,
        (float)u1,
        (float)u2,
        (int)vn,
        (float)v1,
        (float)v2
      );
      ErrorReporter errorReporter( "glMapGrid2f" );
      glMapGrid2f( un, u1, u2, vn, v1, v2 );
    }
    static void Materialf(
      GLenum face,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glMaterialf( %d, %d, %f )",
        (int)face,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glMaterialf" );
      glMaterialf( face, pname, param );
    }
    static void Materialfv(
      GLenum face,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glMaterialfv( %d, %d, GLfloat* )",
        (int)face,
        (int)pname
      );
      ErrorReporter errorReporter( "glMaterialfv" );
      glMaterialfv( face, pname, params );
    }
    static void Materiali(
      GLenum face,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glMateriali( %d, %d, %d )",
        (int)face,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glMateriali" );
      glMateriali( face, pname, param );
    }
    static void Materialiv(
      GLenum face,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glMaterialiv( %d, %d, GLint* )",
        (int)face,
        (int)pname
      );
      ErrorReporter errorReporter( "glMaterialiv" );
      glMaterialiv( face, pname, params );
    }
    static void MatrixMode(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glMatrixMode( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glMatrixMode" );
      glMatrixMode( mode );
    }
    static void MultMatrixd(
      const GLdouble* m
    ){
      FABRIC_OGL_TRACE( "glMultMatrixd( GLdouble* )" );
      ErrorReporter errorReporter( "glMultMatrixd" );
      glMultMatrixd( m );
    }
    static void MultMatrixf(
      const GLfloat* m
    ){
      FABRIC_OGL_TRACE( "glMultMatrixf( GLfloat* )" );
      ErrorReporter errorReporter( "glMultMatrixf" );
      glMultMatrixf( m );
    }
    static void NewList(
      GLuint list,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glNewList( 0x%04X, %d )",
        (unsigned)list,
        (int)mode
      );
      ErrorReporter errorReporter( "glNewList" );
      glNewList( list, mode );
    }
    static void Normal3b(
      GLbyte nx,
      GLbyte ny,
      GLbyte nz
    ){
      FABRIC_OGL_TRACE( "glNormal3b( %d, %d, %d )",
        (int)nx,
        (int)ny,
        (int)nz
      );
      ErrorReporter errorReporter( "glNormal3b" );
      glNormal3b( nx, ny, nz );
    }
    static void Normal3bv(
      const GLbyte* v
    ){
      FABRIC_OGL_TRACE( "glNormal3bv( GLbyte* )" );
      ErrorReporter errorReporter( "glNormal3bv" );
      glNormal3bv( v );
    }
    static void Normal3d(
      GLdouble nx,
      GLdouble ny,
      GLdouble nz
    ){
      FABRIC_OGL_TRACE( "glNormal3d( %f, %f, %f )",
        (float)nx,
        (float)ny,
        (float)nz
      );
      ErrorReporter errorReporter( "glNormal3d" );
      glNormal3d( nx, ny, nz );
    }
    static void Normal3dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glNormal3dv( GLdouble* )" );
      ErrorReporter errorReporter( "glNormal3dv" );
      glNormal3dv( v );
    }
    static void Normal3f(
      GLfloat nx,
      GLfloat ny,
      GLfloat nz
    ){
      FABRIC_OGL_TRACE( "glNormal3f( %f, %f, %f )",
        (float)nx,
        (float)ny,
        (float)nz
      );
      ErrorReporter errorReporter( "glNormal3f" );
      glNormal3f( nx, ny, nz );
    }
    static void Normal3fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glNormal3fv( GLfloat* )" );
      ErrorReporter errorReporter( "glNormal3fv" );
      glNormal3fv( v );
    }
    static void Normal3i(
      GLint nx,
      GLint ny,
      GLint nz
    ){
      FABRIC_OGL_TRACE( "glNormal3i( %d, %d, %d )",
        (int)nx,
        (int)ny,
        (int)nz
      );
      ErrorReporter errorReporter( "glNormal3i" );
      glNormal3i( nx, ny, nz );
    }
    static void Normal3iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glNormal3iv( GLint* )" );
      ErrorReporter errorReporter( "glNormal3iv" );
      glNormal3iv( v );
    }
    static void Normal3s(
      GLshort nx,
      GLshort ny,
      GLshort nz
    ){
      FABRIC_OGL_TRACE( "glNormal3s( %d, %d, %d )",
        (int)nx,
        (int)ny,
        (int)nz
      );
      ErrorReporter errorReporter( "glNormal3s" );
      glNormal3s( nx, ny, nz );
    }
    static void Normal3sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glNormal3sv( GLshort* )" );
      ErrorReporter errorReporter( "glNormal3sv" );
      glNormal3sv( v );
    }
    static void NormalPointer(
      GLenum type,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glNormalPointer( %d, %d, GLvoid* )",
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glNormalPointer" );
      glNormalPointer( type, stride, pointer );
    }
    static void Ortho(
      GLdouble left,
      GLdouble right,
      GLdouble bottom,
      GLdouble top,
      GLdouble zNear,
      GLdouble zFar
    ){
      FABRIC_OGL_TRACE( "glOrtho( %f, %f, %f, %f, %f, %f )",
        (float)left,
        (float)right,
        (float)bottom,
        (float)top,
        (float)zNear,
        (float)zFar
      );
      ErrorReporter errorReporter( "glOrtho" );
      glOrtho( left, right, bottom, top, zNear, zFar );
    }
    static void PassThrough(
      GLfloat token
    ){
      FABRIC_OGL_TRACE( "glPassThrough( %f )",
        (float)token
      );
      ErrorReporter errorReporter( "glPassThrough" );
      glPassThrough( token );
    }
    static void PixelMapfv(
      GLenum map,
      GLsizei mapsize,
      const GLfloat* values
    ){
      FABRIC_OGL_TRACE( "glPixelMapfv( %d, %d, GLfloat* )",
        (int)map,
        (int)mapsize
      );
      ErrorReporter errorReporter( "glPixelMapfv" );
      glPixelMapfv( map, mapsize, values );
    }
    static void PixelMapuiv(
      GLenum map,
      GLsizei mapsize,
      const GLuint* values
    ){
      FABRIC_OGL_TRACE( "glPixelMapuiv( %d, %d, GLuint* )",
        (int)map,
        (int)mapsize
      );
      ErrorReporter errorReporter( "glPixelMapuiv" );
      glPixelMapuiv( map, mapsize, values );
    }
    static void PixelMapusv(
      GLenum map,
      GLsizei mapsize,
      const GLushort* values
    ){
      FABRIC_OGL_TRACE( "glPixelMapusv( %d, %d, GLushort* )",
        (int)map,
        (int)mapsize
      );
      ErrorReporter errorReporter( "glPixelMapusv" );
      glPixelMapusv( map, mapsize, values );
    }
    static void PixelStoref(
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glPixelStoref( %d, %f )",
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glPixelStoref" );
      glPixelStoref( pname, param );
    }
    static void PixelStorei(
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glPixelStorei( %d, %d )",
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glPixelStorei" );
      glPixelStorei( pname, param );
    }
    static void PixelTransferf(
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glPixelTransferf( %d, %f )",
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glPixelTransferf" );
      glPixelTransferf( pname, param );
    }
    static void PixelTransferi(
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glPixelTransferi( %d, %d )",
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glPixelTransferi" );
      glPixelTransferi( pname, param );
    }
    static void PixelZoom(
      GLfloat xfactor,
      GLfloat yfactor
    ){
      FABRIC_OGL_TRACE( "glPixelZoom( %f, %f )",
        (float)xfactor,
        (float)yfactor
      );
      ErrorReporter errorReporter( "glPixelZoom" );
      glPixelZoom( xfactor, yfactor );
    }
    static void PointSize(
      GLfloat size
    ){
      FABRIC_OGL_TRACE( "glPointSize( %f )",
        (float)size
      );
      ErrorReporter errorReporter( "glPointSize" );
      glPointSize( size );
    }
    static void PolygonMode(
      GLenum face,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glPolygonMode( %d, %d )",
        (int)face,
        (int)mode
      );
      ErrorReporter errorReporter( "glPolygonMode" );
      glPolygonMode( face, mode );
    }
    static void PolygonOffset(
      GLfloat factor,
      GLfloat units
    ){
      FABRIC_OGL_TRACE( "glPolygonOffset( %f, %f )",
        (float)factor,
        (float)units
      );
      ErrorReporter errorReporter( "glPolygonOffset" );
      glPolygonOffset( factor, units );
    }
    static void PolygonStipple(
      const GLubyte* mask
    ){
      FABRIC_OGL_TRACE( "glPolygonStipple( GLubyte* )" );
      ErrorReporter errorReporter( "glPolygonStipple" );
      glPolygonStipple( mask );
    }
    static void PopAttrib()
    {
      FABRIC_OGL_TRACE( "glPopAttrib()" );
      ErrorReporter errorReporter( "glPopAttrib" );
      glPopAttrib();
    }
    static void PopClientAttrib()
    {
      FABRIC_OGL_TRACE( "glPopClientAttrib()" );
      ErrorReporter errorReporter( "glPopClientAttrib" );
      glPopClientAttrib();
    }
    static void PopMatrix()
    {
      FABRIC_OGL_TRACE( "glPopMatrix()" );
      ErrorReporter errorReporter( "glPopMatrix" );
      glPopMatrix();
    }
    static void PopName()
    {
      FABRIC_OGL_TRACE( "glPopName()" );
      ErrorReporter errorReporter( "glPopName" );
      glPopName();
    }
    static void PrioritizeTextures(
      GLsizei n,
      const GLuint* textures,
      const GLclampf* priorities
    ){
      FABRIC_OGL_TRACE( "glPrioritizeTextures( %d, GLuint*, GLclampf* )",
        (int)n
      );
      ErrorReporter errorReporter( "glPrioritizeTextures" );
      glPrioritizeTextures( n, textures, priorities );
    }
    static void PushAttrib(
      GLbitfield mask
    ){
      FABRIC_OGL_TRACE( "glPushAttrib( 0x%04X )",
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glPushAttrib" );
      glPushAttrib( mask );
    }
    static void PushClientAttrib(
      GLbitfield mask
    ){
      FABRIC_OGL_TRACE( "glPushClientAttrib( 0x%04X )",
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glPushClientAttrib" );
      glPushClientAttrib( mask );
    }
    static void PushMatrix()
    {
      FABRIC_OGL_TRACE( "glPushMatrix()" );
      ErrorReporter errorReporter( "glPushMatrix" );
      glPushMatrix();
    }
    static void PushName(
      GLuint name
    ){
      FABRIC_OGL_TRACE( "glPushName( 0x%04X )",
        (unsigned)name
      );
      ErrorReporter errorReporter( "glPushName" );
      glPushName( name );
    }
    static void RasterPos2d(
      GLdouble x,
      GLdouble y
    ){
      FABRIC_OGL_TRACE( "glRasterPos2d( %f, %f )",
        (float)x,
        (float)y
      );
      ErrorReporter errorReporter( "glRasterPos2d" );
      glRasterPos2d( x, y );
    }
    static void RasterPos2dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos2dv( GLdouble* )" );
      ErrorReporter errorReporter( "glRasterPos2dv" );
      glRasterPos2dv( v );
    }
    static void RasterPos2f(
      GLfloat x,
      GLfloat y
    ){
      FABRIC_OGL_TRACE( "glRasterPos2f( %f, %f )",
        (float)x,
        (float)y
      );
      ErrorReporter errorReporter( "glRasterPos2f" );
      glRasterPos2f( x, y );
    }
    static void RasterPos2fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos2fv( GLfloat* )" );
      ErrorReporter errorReporter( "glRasterPos2fv" );
      glRasterPos2fv( v );
    }
    static void RasterPos2i(
      GLint x,
      GLint y
    ){
      FABRIC_OGL_TRACE( "glRasterPos2i( %d, %d )",
        (int)x,
        (int)y
      );
      ErrorReporter errorReporter( "glRasterPos2i" );
      glRasterPos2i( x, y );
    }
    static void RasterPos2iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos2iv( GLint* )" );
      ErrorReporter errorReporter( "glRasterPos2iv" );
      glRasterPos2iv( v );
    }
    static void RasterPos2s(
      GLshort x,
      GLshort y
    ){
      FABRIC_OGL_TRACE( "glRasterPos2s( %d, %d )",
        (int)x,
        (int)y
      );
      ErrorReporter errorReporter( "glRasterPos2s" );
      glRasterPos2s( x, y );
    }
    static void RasterPos2sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos2sv( GLshort* )" );
      ErrorReporter errorReporter( "glRasterPos2sv" );
      glRasterPos2sv( v );
    }
    static void RasterPos3d(
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glRasterPos3d( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glRasterPos3d" );
      glRasterPos3d( x, y, z );
    }
    static void RasterPos3dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos3dv( GLdouble* )" );
      ErrorReporter errorReporter( "glRasterPos3dv" );
      glRasterPos3dv( v );
    }
    static void RasterPos3f(
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glRasterPos3f( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glRasterPos3f" );
      glRasterPos3f( x, y, z );
    }
    static void RasterPos3fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos3fv( GLfloat* )" );
      ErrorReporter errorReporter( "glRasterPos3fv" );
      glRasterPos3fv( v );
    }
    static void RasterPos3i(
      GLint x,
      GLint y,
      GLint z
    ){
      FABRIC_OGL_TRACE( "glRasterPos3i( %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z
      );
      ErrorReporter errorReporter( "glRasterPos3i" );
      glRasterPos3i( x, y, z );
    }
    static void RasterPos3iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos3iv( GLint* )" );
      ErrorReporter errorReporter( "glRasterPos3iv" );
      glRasterPos3iv( v );
    }
    static void RasterPos3s(
      GLshort x,
      GLshort y,
      GLshort z
    ){
      FABRIC_OGL_TRACE( "glRasterPos3s( %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z
      );
      ErrorReporter errorReporter( "glRasterPos3s" );
      glRasterPos3s( x, y, z );
    }
    static void RasterPos3sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos3sv( GLshort* )" );
      ErrorReporter errorReporter( "glRasterPos3sv" );
      glRasterPos3sv( v );
    }
    static void RasterPos4d(
      GLdouble x,
      GLdouble y,
      GLdouble z,
      GLdouble w
    ){
      FABRIC_OGL_TRACE( "glRasterPos4d( %f, %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z,
        (float)w
      );
      ErrorReporter errorReporter( "glRasterPos4d" );
      glRasterPos4d( x, y, z, w );
    }
    static void RasterPos4dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos4dv( GLdouble* )" );
      ErrorReporter errorReporter( "glRasterPos4dv" );
      glRasterPos4dv( v );
    }
    static void RasterPos4f(
      GLfloat x,
      GLfloat y,
      GLfloat z,
      GLfloat w
    ){
      FABRIC_OGL_TRACE( "glRasterPos4f( %f, %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z,
        (float)w
      );
      ErrorReporter errorReporter( "glRasterPos4f" );
      glRasterPos4f( x, y, z, w );
    }
    static void RasterPos4fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos4fv( GLfloat* )" );
      ErrorReporter errorReporter( "glRasterPos4fv" );
      glRasterPos4fv( v );
    }
    static void RasterPos4i(
      GLint x,
      GLint y,
      GLint z,
      GLint w
    ){
      FABRIC_OGL_TRACE( "glRasterPos4i( %d, %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z,
        (int)w
      );
      ErrorReporter errorReporter( "glRasterPos4i" );
      glRasterPos4i( x, y, z, w );
    }
    static void RasterPos4iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos4iv( GLint* )" );
      ErrorReporter errorReporter( "glRasterPos4iv" );
      glRasterPos4iv( v );
    }
    static void RasterPos4s(
      GLshort x,
      GLshort y,
      GLshort z,
      GLshort w
    ){
      FABRIC_OGL_TRACE( "glRasterPos4s( %d, %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z,
        (int)w
      );
      ErrorReporter errorReporter( "glRasterPos4s" );
      glRasterPos4s( x, y, z, w );
    }
    static void RasterPos4sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glRasterPos4sv( GLshort* )" );
      ErrorReporter errorReporter( "glRasterPos4sv" );
      glRasterPos4sv( v );
    }
    static void ReadBuffer(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glReadBuffer( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glReadBuffer" );
      glReadBuffer( mode );
    }
    static void ReadPixels(
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glReadPixels( %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)x,
        (int)y,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glReadPixels" );
      glReadPixels( x, y, width, height, format, type, pixels );
    }
    static void Rectd(
      GLdouble x1,
      GLdouble y1,
      GLdouble x2,
      GLdouble y2
    ){
      FABRIC_OGL_TRACE( "glRectd( %f, %f, %f, %f )",
        (float)x1,
        (float)y1,
        (float)x2,
        (float)y2
      );
      ErrorReporter errorReporter( "glRectd" );
      glRectd( x1, y1, x2, y2 );
    }
    static void Rectdv(
      const GLdouble* v1,
      const GLdouble* v2
    ){
      FABRIC_OGL_TRACE( "glRectdv( GLdouble*, GLdouble* )" );
      ErrorReporter errorReporter( "glRectdv" );
      glRectdv( v1, v2 );
    }
    static void Rectf(
      GLfloat x1,
      GLfloat y1,
      GLfloat x2,
      GLfloat y2
    ){
      FABRIC_OGL_TRACE( "glRectf( %f, %f, %f, %f )",
        (float)x1,
        (float)y1,
        (float)x2,
        (float)y2
      );
      ErrorReporter errorReporter( "glRectf" );
      glRectf( x1, y1, x2, y2 );
    }
    static void Rectfv(
      const GLfloat* v1,
      const GLfloat* v2
    ){
      FABRIC_OGL_TRACE( "glRectfv( GLfloat*, GLfloat* )" );
      ErrorReporter errorReporter( "glRectfv" );
      glRectfv( v1, v2 );
    }
    static void Recti(
      GLint x1,
      GLint y1,
      GLint x2,
      GLint y2
    ){
      FABRIC_OGL_TRACE( "glRecti( %d, %d, %d, %d )",
        (int)x1,
        (int)y1,
        (int)x2,
        (int)y2
      );
      ErrorReporter errorReporter( "glRecti" );
      glRecti( x1, y1, x2, y2 );
    }
    static void Rectiv(
      const GLint* v1,
      const GLint* v2
    ){
      FABRIC_OGL_TRACE( "glRectiv( GLint*, GLint* )" );
      ErrorReporter errorReporter( "glRectiv" );
      glRectiv( v1, v2 );
    }
    static void Rects(
      GLshort x1,
      GLshort y1,
      GLshort x2,
      GLshort y2
    ){
      FABRIC_OGL_TRACE( "glRects( %d, %d, %d, %d )",
        (int)x1,
        (int)y1,
        (int)x2,
        (int)y2
      );
      ErrorReporter errorReporter( "glRects" );
      glRects( x1, y1, x2, y2 );
    }
    static void Rectsv(
      const GLshort* v1,
      const GLshort* v2
    ){
      FABRIC_OGL_TRACE( "glRectsv( GLshort*, GLshort* )" );
      ErrorReporter errorReporter( "glRectsv" );
      glRectsv( v1, v2 );
    }
    static GLint RenderMode(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glRenderMode( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glRenderMode" );
      GLint result = glRenderMode( mode );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void Rotated(
      GLdouble angle,
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glRotated( %f, %f, %f, %f )",
        (float)angle,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glRotated" );
      glRotated( angle, x, y, z );
    }
    static void Rotatef(
      GLfloat angle,
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glRotatef( %f, %f, %f, %f )",
        (float)angle,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glRotatef" );
      glRotatef( angle, x, y, z );
    }
    static void Scaled(
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glScaled( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glScaled" );
      glScaled( x, y, z );
    }
    static void Scalef(
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glScalef( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glScalef" );
      glScalef( x, y, z );
    }
    static void Scissor(
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glScissor( %d, %d, %d, %d )",
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glScissor" );
      glScissor( x, y, width, height );
    }
    static void SelectBuffer(
      GLsizei size,
      GLuint* buffer
    ){
      FABRIC_OGL_TRACE( "glSelectBuffer( %d, GLuint* )",
        (int)size
      );
      ErrorReporter errorReporter( "glSelectBuffer" );
      glSelectBuffer( size, buffer );
    }
    static void ShadeModel(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glShadeModel( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glShadeModel" );
      glShadeModel( mode );
    }
    static void StencilFunc(
      GLenum func,
      GLint ref,
      GLuint mask
    ){
      FABRIC_OGL_TRACE( "glStencilFunc( %d, %d, 0x%04X )",
        (int)func,
        (int)ref,
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glStencilFunc" );
      glStencilFunc( func, ref, mask );
    }
    static void StencilMask(
      GLuint mask
    ){
      FABRIC_OGL_TRACE( "glStencilMask( 0x%04X )",
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glStencilMask" );
      glStencilMask( mask );
    }
    static void StencilOp(
      GLenum fail,
      GLenum zfail,
      GLenum zpass
    ){
      FABRIC_OGL_TRACE( "glStencilOp( %d, %d, %d )",
        (int)fail,
        (int)zfail,
        (int)zpass
      );
      ErrorReporter errorReporter( "glStencilOp" );
      glStencilOp( fail, zfail, zpass );
    }
    static void TexCoord1d(
      GLdouble s
    ){
      FABRIC_OGL_TRACE( "glTexCoord1d( %f )",
        (float)s
      );
      ErrorReporter errorReporter( "glTexCoord1d" );
      glTexCoord1d( s );
    }
    static void TexCoord1dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord1dv( GLdouble* )" );
      ErrorReporter errorReporter( "glTexCoord1dv" );
      glTexCoord1dv( v );
    }
    static void TexCoord1f(
      GLfloat s
    ){
      FABRIC_OGL_TRACE( "glTexCoord1f( %f )",
        (float)s
      );
      ErrorReporter errorReporter( "glTexCoord1f" );
      glTexCoord1f( s );
    }
    static void TexCoord1fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord1fv( GLfloat* )" );
      ErrorReporter errorReporter( "glTexCoord1fv" );
      glTexCoord1fv( v );
    }
    static void TexCoord1i(
      GLint s
    ){
      FABRIC_OGL_TRACE( "glTexCoord1i( %d )",
        (int)s
      );
      ErrorReporter errorReporter( "glTexCoord1i" );
      glTexCoord1i( s );
    }
    static void TexCoord1iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord1iv( GLint* )" );
      ErrorReporter errorReporter( "glTexCoord1iv" );
      glTexCoord1iv( v );
    }
    static void TexCoord1s(
      GLshort s
    ){
      FABRIC_OGL_TRACE( "glTexCoord1s( %d )",
        (int)s
      );
      ErrorReporter errorReporter( "glTexCoord1s" );
      glTexCoord1s( s );
    }
    static void TexCoord1sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord1sv( GLshort* )" );
      ErrorReporter errorReporter( "glTexCoord1sv" );
      glTexCoord1sv( v );
    }
    static void TexCoord2d(
      GLdouble s,
      GLdouble t
    ){
      FABRIC_OGL_TRACE( "glTexCoord2d( %f, %f )",
        (float)s,
        (float)t
      );
      ErrorReporter errorReporter( "glTexCoord2d" );
      glTexCoord2d( s, t );
    }
    static void TexCoord2dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord2dv( GLdouble* )" );
      ErrorReporter errorReporter( "glTexCoord2dv" );
      glTexCoord2dv( v );
    }
    static void TexCoord2f(
      GLfloat s,
      GLfloat t
    ){
      FABRIC_OGL_TRACE( "glTexCoord2f( %f, %f )",
        (float)s,
        (float)t
      );
      ErrorReporter errorReporter( "glTexCoord2f" );
      glTexCoord2f( s, t );
    }
    static void TexCoord2fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord2fv( GLfloat* )" );
      ErrorReporter errorReporter( "glTexCoord2fv" );
      glTexCoord2fv( v );
    }
    static void TexCoord2i(
      GLint s,
      GLint t
    ){
      FABRIC_OGL_TRACE( "glTexCoord2i( %d, %d )",
        (int)s,
        (int)t
      );
      ErrorReporter errorReporter( "glTexCoord2i" );
      glTexCoord2i( s, t );
    }
    static void TexCoord2iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord2iv( GLint* )" );
      ErrorReporter errorReporter( "glTexCoord2iv" );
      glTexCoord2iv( v );
    }
    static void TexCoord2s(
      GLshort s,
      GLshort t
    ){
      FABRIC_OGL_TRACE( "glTexCoord2s( %d, %d )",
        (int)s,
        (int)t
      );
      ErrorReporter errorReporter( "glTexCoord2s" );
      glTexCoord2s( s, t );
    }
    static void TexCoord2sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord2sv( GLshort* )" );
      ErrorReporter errorReporter( "glTexCoord2sv" );
      glTexCoord2sv( v );
    }
    static void TexCoord3d(
      GLdouble s,
      GLdouble t,
      GLdouble r
    ){
      FABRIC_OGL_TRACE( "glTexCoord3d( %f, %f, %f )",
        (float)s,
        (float)t,
        (float)r
      );
      ErrorReporter errorReporter( "glTexCoord3d" );
      glTexCoord3d( s, t, r );
    }
    static void TexCoord3dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord3dv( GLdouble* )" );
      ErrorReporter errorReporter( "glTexCoord3dv" );
      glTexCoord3dv( v );
    }
    static void TexCoord3f(
      GLfloat s,
      GLfloat t,
      GLfloat r
    ){
      FABRIC_OGL_TRACE( "glTexCoord3f( %f, %f, %f )",
        (float)s,
        (float)t,
        (float)r
      );
      ErrorReporter errorReporter( "glTexCoord3f" );
      glTexCoord3f( s, t, r );
    }
    static void TexCoord3fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord3fv( GLfloat* )" );
      ErrorReporter errorReporter( "glTexCoord3fv" );
      glTexCoord3fv( v );
    }
    static void TexCoord3i(
      GLint s,
      GLint t,
      GLint r
    ){
      FABRIC_OGL_TRACE( "glTexCoord3i( %d, %d, %d )",
        (int)s,
        (int)t,
        (int)r
      );
      ErrorReporter errorReporter( "glTexCoord3i" );
      glTexCoord3i( s, t, r );
    }
    static void TexCoord3iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord3iv( GLint* )" );
      ErrorReporter errorReporter( "glTexCoord3iv" );
      glTexCoord3iv( v );
    }
    static void TexCoord3s(
      GLshort s,
      GLshort t,
      GLshort r
    ){
      FABRIC_OGL_TRACE( "glTexCoord3s( %d, %d, %d )",
        (int)s,
        (int)t,
        (int)r
      );
      ErrorReporter errorReporter( "glTexCoord3s" );
      glTexCoord3s( s, t, r );
    }
    static void TexCoord3sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord3sv( GLshort* )" );
      ErrorReporter errorReporter( "glTexCoord3sv" );
      glTexCoord3sv( v );
    }
    static void TexCoord4d(
      GLdouble s,
      GLdouble t,
      GLdouble r,
      GLdouble q
    ){
      FABRIC_OGL_TRACE( "glTexCoord4d( %f, %f, %f, %f )",
        (float)s,
        (float)t,
        (float)r,
        (float)q
      );
      ErrorReporter errorReporter( "glTexCoord4d" );
      glTexCoord4d( s, t, r, q );
    }
    static void TexCoord4dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord4dv( GLdouble* )" );
      ErrorReporter errorReporter( "glTexCoord4dv" );
      glTexCoord4dv( v );
    }
    static void TexCoord4f(
      GLfloat s,
      GLfloat t,
      GLfloat r,
      GLfloat q
    ){
      FABRIC_OGL_TRACE( "glTexCoord4f( %f, %f, %f, %f )",
        (float)s,
        (float)t,
        (float)r,
        (float)q
      );
      ErrorReporter errorReporter( "glTexCoord4f" );
      glTexCoord4f( s, t, r, q );
    }
    static void TexCoord4fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord4fv( GLfloat* )" );
      ErrorReporter errorReporter( "glTexCoord4fv" );
      glTexCoord4fv( v );
    }
    static void TexCoord4i(
      GLint s,
      GLint t,
      GLint r,
      GLint q
    ){
      FABRIC_OGL_TRACE( "glTexCoord4i( %d, %d, %d, %d )",
        (int)s,
        (int)t,
        (int)r,
        (int)q
      );
      ErrorReporter errorReporter( "glTexCoord4i" );
      glTexCoord4i( s, t, r, q );
    }
    static void TexCoord4iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord4iv( GLint* )" );
      ErrorReporter errorReporter( "glTexCoord4iv" );
      glTexCoord4iv( v );
    }
    static void TexCoord4s(
      GLshort s,
      GLshort t,
      GLshort r,
      GLshort q
    ){
      FABRIC_OGL_TRACE( "glTexCoord4s( %d, %d, %d, %d )",
        (int)s,
        (int)t,
        (int)r,
        (int)q
      );
      ErrorReporter errorReporter( "glTexCoord4s" );
      glTexCoord4s( s, t, r, q );
    }
    static void TexCoord4sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glTexCoord4sv( GLshort* )" );
      ErrorReporter errorReporter( "glTexCoord4sv" );
      glTexCoord4sv( v );
    }
    static void TexCoordPointer(
      GLint size,
      GLenum type,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glTexCoordPointer( %d, %d, %d, GLvoid* )",
        (int)size,
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glTexCoordPointer" );
      glTexCoordPointer( size, type, stride, pointer );
    }
    static void TexEnvf(
      GLenum target,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glTexEnvf( %d, %d, %f )",
        (int)target,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glTexEnvf" );
      glTexEnvf( target, pname, param );
    }
    static void TexEnvfv(
      GLenum target,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glTexEnvfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexEnvfv" );
      glTexEnvfv( target, pname, params );
    }
    static void TexEnvi(
      GLenum target,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glTexEnvi( %d, %d, %d )",
        (int)target,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glTexEnvi" );
      glTexEnvi( target, pname, param );
    }
    static void TexEnviv(
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glTexEnviv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexEnviv" );
      glTexEnviv( target, pname, params );
    }
    static void TexGend(
      GLenum coord,
      GLenum pname,
      GLdouble param
    ){
      FABRIC_OGL_TRACE( "glTexGend( %d, %d, %f )",
        (int)coord,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glTexGend" );
      glTexGend( coord, pname, param );
    }
    static void TexGendv(
      GLenum coord,
      GLenum pname,
      const GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glTexGendv( %d, %d, GLdouble* )",
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexGendv" );
      glTexGendv( coord, pname, params );
    }
    static void TexGenf(
      GLenum coord,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glTexGenf( %d, %d, %f )",
        (int)coord,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glTexGenf" );
      glTexGenf( coord, pname, param );
    }
    static void TexGenfv(
      GLenum coord,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glTexGenfv( %d, %d, GLfloat* )",
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexGenfv" );
      glTexGenfv( coord, pname, params );
    }
    static void TexGeni(
      GLenum coord,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glTexGeni( %d, %d, %d )",
        (int)coord,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glTexGeni" );
      glTexGeni( coord, pname, param );
    }
    static void TexGeniv(
      GLenum coord,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glTexGeniv( %d, %d, GLint* )",
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexGeniv" );
      glTexGeniv( coord, pname, params );
    }
    static void TexImage1D(
      GLenum target,
      GLint level,
      GLint internalformat,
      GLsizei width,
      GLint border,
      GLenum format,
      GLenum type,
      const GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glTexImage1D( %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexImage1D" );
      glTexImage1D( target, level, internalformat, width, border, format, type, pixels );
    }
    static void TexImage2D(
      GLenum target,
      GLint level,
      GLint internalformat,
      GLsizei width,
      GLsizei height,
      GLint border,
      GLenum format,
      GLenum type,
      const GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glTexImage2D( %d, %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexImage2D" );
      glTexImage2D( target, level, internalformat, width, height, border, format, type, pixels );
    }
    static void TexParameterf(
      GLenum target,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glTexParameterf( %d, %d, %f )",
        (int)target,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glTexParameterf" );
      glTexParameterf( target, pname, param );
    }
    static void TexParameterfv(
      GLenum target,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glTexParameterfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexParameterfv" );
      glTexParameterfv( target, pname, params );
    }
    static void TexParameteri(
      GLenum target,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glTexParameteri( %d, %d, %d )",
        (int)target,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glTexParameteri" );
      glTexParameteri( target, pname, param );
    }
    static void TexParameteriv(
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glTexParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexParameteriv" );
      glTexParameteriv( target, pname, params );
    }
    static void TexSubImage1D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLsizei width,
      GLenum format,
      GLenum type,
      const GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glTexSubImage1D( %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexSubImage1D" );
      glTexSubImage1D( target, level, xoffset, width, format, type, pixels );
    }
    static void TexSubImage2D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glTexSubImage2D( %d, %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexSubImage2D" );
      glTexSubImage2D( target, level, xoffset, yoffset, width, height, format, type, pixels );
    }
    static void Translated(
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glTranslated( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glTranslated" );
      glTranslated( x, y, z );
    }
    static void Translatef(
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glTranslatef( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glTranslatef" );
      glTranslatef( x, y, z );
    }
    static void Vertex2d(
      GLdouble x,
      GLdouble y
    ){
      FABRIC_OGL_TRACE( "glVertex2d( %f, %f )",
        (float)x,
        (float)y
      );
      ErrorReporter errorReporter( "glVertex2d" );
      glVertex2d( x, y );
    }
    static void Vertex2dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glVertex2dv( GLdouble* )" );
      ErrorReporter errorReporter( "glVertex2dv" );
      glVertex2dv( v );
    }
    static void Vertex2f(
      GLfloat x,
      GLfloat y
    ){
      FABRIC_OGL_TRACE( "glVertex2f( %f, %f )",
        (float)x,
        (float)y
      );
      ErrorReporter errorReporter( "glVertex2f" );
      glVertex2f( x, y );
    }
    static void Vertex2fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glVertex2fv( GLfloat* )" );
      ErrorReporter errorReporter( "glVertex2fv" );
      glVertex2fv( v );
    }
    static void Vertex2i(
      GLint x,
      GLint y
    ){
      FABRIC_OGL_TRACE( "glVertex2i( %d, %d )",
        (int)x,
        (int)y
      );
      ErrorReporter errorReporter( "glVertex2i" );
      glVertex2i( x, y );
    }
    static void Vertex2iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertex2iv( GLint* )" );
      ErrorReporter errorReporter( "glVertex2iv" );
      glVertex2iv( v );
    }
    static void Vertex2s(
      GLshort x,
      GLshort y
    ){
      FABRIC_OGL_TRACE( "glVertex2s( %d, %d )",
        (int)x,
        (int)y
      );
      ErrorReporter errorReporter( "glVertex2s" );
      glVertex2s( x, y );
    }
    static void Vertex2sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertex2sv( GLshort* )" );
      ErrorReporter errorReporter( "glVertex2sv" );
      glVertex2sv( v );
    }
    static void Vertex3d(
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glVertex3d( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glVertex3d" );
      glVertex3d( x, y, z );
    }
    static void Vertex3dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glVertex3dv( GLdouble* )" );
      ErrorReporter errorReporter( "glVertex3dv" );
      glVertex3dv( v );
    }
    static void Vertex3f(
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glVertex3f( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glVertex3f" );
      glVertex3f( x, y, z );
    }
    static void Vertex3fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glVertex3fv( GLfloat* )" );
      ErrorReporter errorReporter( "glVertex3fv" );
      glVertex3fv( v );
    }
    static void Vertex3i(
      GLint x,
      GLint y,
      GLint z
    ){
      FABRIC_OGL_TRACE( "glVertex3i( %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z
      );
      ErrorReporter errorReporter( "glVertex3i" );
      glVertex3i( x, y, z );
    }
    static void Vertex3iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertex3iv( GLint* )" );
      ErrorReporter errorReporter( "glVertex3iv" );
      glVertex3iv( v );
    }
    static void Vertex3s(
      GLshort x,
      GLshort y,
      GLshort z
    ){
      FABRIC_OGL_TRACE( "glVertex3s( %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z
      );
      ErrorReporter errorReporter( "glVertex3s" );
      glVertex3s( x, y, z );
    }
    static void Vertex3sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertex3sv( GLshort* )" );
      ErrorReporter errorReporter( "glVertex3sv" );
      glVertex3sv( v );
    }
    static void Vertex4d(
      GLdouble x,
      GLdouble y,
      GLdouble z,
      GLdouble w
    ){
      FABRIC_OGL_TRACE( "glVertex4d( %f, %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z,
        (float)w
      );
      ErrorReporter errorReporter( "glVertex4d" );
      glVertex4d( x, y, z, w );
    }
    static void Vertex4dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glVertex4dv( GLdouble* )" );
      ErrorReporter errorReporter( "glVertex4dv" );
      glVertex4dv( v );
    }
    static void Vertex4f(
      GLfloat x,
      GLfloat y,
      GLfloat z,
      GLfloat w
    ){
      FABRIC_OGL_TRACE( "glVertex4f( %f, %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z,
        (float)w
      );
      ErrorReporter errorReporter( "glVertex4f" );
      glVertex4f( x, y, z, w );
    }
    static void Vertex4fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glVertex4fv( GLfloat* )" );
      ErrorReporter errorReporter( "glVertex4fv" );
      glVertex4fv( v );
    }
    static void Vertex4i(
      GLint x,
      GLint y,
      GLint z,
      GLint w
    ){
      FABRIC_OGL_TRACE( "glVertex4i( %d, %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z,
        (int)w
      );
      ErrorReporter errorReporter( "glVertex4i" );
      glVertex4i( x, y, z, w );
    }
    static void Vertex4iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertex4iv( GLint* )" );
      ErrorReporter errorReporter( "glVertex4iv" );
      glVertex4iv( v );
    }
    static void Vertex4s(
      GLshort x,
      GLshort y,
      GLshort z,
      GLshort w
    ){
      FABRIC_OGL_TRACE( "glVertex4s( %d, %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z,
        (int)w
      );
      ErrorReporter errorReporter( "glVertex4s" );
      glVertex4s( x, y, z, w );
    }
    static void Vertex4sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertex4sv( GLshort* )" );
      ErrorReporter errorReporter( "glVertex4sv" );
      glVertex4sv( v );
    }
    static void VertexPointer(
      GLint size,
      GLenum type,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glVertexPointer( %d, %d, %d, GLvoid* )",
        (int)size,
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glVertexPointer" );
      glVertexPointer( size, type, stride, pointer );
    }
    static void Viewport(
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glViewport( %d, %d, %d, %d )",
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glViewport" );
      glViewport( x, y, width, height );
    }
    static void CopyTexSubImage3D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyTexSubImage3D( %d, %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyTexSubImage3D" );
      glCopyTexSubImage3D( target, level, xoffset, yoffset, zoffset, x, y, width, height );
    }
    static void DrawRangeElements(
      GLenum mode,
      GLuint start,
      GLuint end,
      GLsizei count,
      GLenum type,
      const GLvoid* indices
    ){
      FABRIC_OGL_TRACE( "glDrawRangeElements( %d, 0x%04X, 0x%04X, %d, %d, GLvoid* )",
        (int)mode,
        (unsigned)start,
        (unsigned)end,
        (int)count,
        (int)type
      );
      ErrorReporter errorReporter( "glDrawRangeElements" );
      glDrawRangeElements( mode, start, end, count, type, indices );
    }
    static void TexImage3D(
      GLenum target,
      GLint level,
      GLint internalFormat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLint border,
      GLenum format,
      GLenum type,
      const GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glTexImage3D( %d, %d, %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)internalFormat,
        (int)width,
        (int)height,
        (int)depth,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexImage3D" );
      glTexImage3D( target, level, internalFormat, width, height, depth, border, format, type, pixels );
    }
    static void TexSubImage3D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLenum type,
      const GLvoid* pixels
    ){
      FABRIC_OGL_TRACE( "glTexSubImage3D( %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexSubImage3D" );
      glTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
    }
    static void ActiveTexture(
      GLenum texture
    ){
      FABRIC_OGL_TRACE( "glActiveTexture( %d )",
        (int)texture
      );
      ErrorReporter errorReporter( "glActiveTexture" );
      glActiveTexture( texture );
    }
    static void ClientActiveTexture(
      GLenum texture
    ){
      FABRIC_OGL_TRACE( "glClientActiveTexture( %d )",
        (int)texture
      );
      ErrorReporter errorReporter( "glClientActiveTexture" );
      glClientActiveTexture( texture );
    }
    static void CompressedTexImage1D(
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLint border,
      GLsizei imageSize,
      const GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTexImage1D( %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTexImage1D" );
      glCompressedTexImage1D( target, level, internalformat, width, border, imageSize, data );
    }
    static void CompressedTexImage2D(
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLint border,
      GLsizei imageSize,
      const GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTexImage2D( %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTexImage2D" );
      glCompressedTexImage2D( target, level, internalformat, width, height, border, imageSize, data );
    }
    static void CompressedTexImage3D(
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLint border,
      GLsizei imageSize,
      const GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTexImage3D( %d, %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)depth,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTexImage3D" );
      glCompressedTexImage3D( target, level, internalformat, width, height, depth, border, imageSize, data );
    }
    static void CompressedTexSubImage1D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLsizei width,
      GLenum format,
      GLsizei imageSize,
      const GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTexSubImage1D( %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)width,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTexSubImage1D" );
      glCompressedTexSubImage1D( target, level, xoffset, width, format, imageSize, data );
    }
    static void CompressedTexSubImage2D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLsizei imageSize,
      const GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTexSubImage2D( %d, %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)width,
        (int)height,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTexSubImage2D" );
      glCompressedTexSubImage2D( target, level, xoffset, yoffset, width, height, format, imageSize, data );
    }
    static void CompressedTexSubImage3D(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLsizei imageSize,
      const GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTexSubImage3D( %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTexSubImage3D" );
      glCompressedTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
    }
    static void GetCompressedTexImage(
      GLenum target,
      GLint lod,
      GLvoid* img
    ){
      FABRIC_OGL_TRACE( "glGetCompressedTexImage( %d, %d, GLvoid* )",
        (int)target,
        (int)lod
      );
      ErrorReporter errorReporter( "glGetCompressedTexImage" );
      glGetCompressedTexImage( target, lod, img );
    }
    static void MultiTexCoord1d(
      GLenum target,
      GLdouble s
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord1d( %d, %f )",
        (int)target,
        (float)s
      );
      ErrorReporter errorReporter( "glMultiTexCoord1d" );
      glMultiTexCoord1d( target, s );
    }
    static void MultiTexCoord1dv(
      GLenum target,
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord1dv( %d, GLdouble* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord1dv" );
      glMultiTexCoord1dv( target, v );
    }
    static void MultiTexCoord1f(
      GLenum target,
      GLfloat s
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord1f( %d, %f )",
        (int)target,
        (float)s
      );
      ErrorReporter errorReporter( "glMultiTexCoord1f" );
      glMultiTexCoord1f( target, s );
    }
    static void MultiTexCoord1fv(
      GLenum target,
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord1fv( %d, GLfloat* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord1fv" );
      glMultiTexCoord1fv( target, v );
    }
    static void MultiTexCoord1i(
      GLenum target,
      GLint s
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord1i( %d, %d )",
        (int)target,
        (int)s
      );
      ErrorReporter errorReporter( "glMultiTexCoord1i" );
      glMultiTexCoord1i( target, s );
    }
    static void MultiTexCoord1iv(
      GLenum target,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord1iv( %d, GLint* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord1iv" );
      glMultiTexCoord1iv( target, v );
    }
    static void MultiTexCoord1s(
      GLenum target,
      GLshort s
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord1s( %d, %d )",
        (int)target,
        (int)s
      );
      ErrorReporter errorReporter( "glMultiTexCoord1s" );
      glMultiTexCoord1s( target, s );
    }
    static void MultiTexCoord1sv(
      GLenum target,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord1sv( %d, GLshort* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord1sv" );
      glMultiTexCoord1sv( target, v );
    }
    static void MultiTexCoord2d(
      GLenum target,
      GLdouble s,
      GLdouble t
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord2d( %d, %f, %f )",
        (int)target,
        (float)s,
        (float)t
      );
      ErrorReporter errorReporter( "glMultiTexCoord2d" );
      glMultiTexCoord2d( target, s, t );
    }
    static void MultiTexCoord2dv(
      GLenum target,
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord2dv( %d, GLdouble* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord2dv" );
      glMultiTexCoord2dv( target, v );
    }
    static void MultiTexCoord2f(
      GLenum target,
      GLfloat s,
      GLfloat t
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord2f( %d, %f, %f )",
        (int)target,
        (float)s,
        (float)t
      );
      ErrorReporter errorReporter( "glMultiTexCoord2f" );
      glMultiTexCoord2f( target, s, t );
    }
    static void MultiTexCoord2fv(
      GLenum target,
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord2fv( %d, GLfloat* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord2fv" );
      glMultiTexCoord2fv( target, v );
    }
    static void MultiTexCoord2i(
      GLenum target,
      GLint s,
      GLint t
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord2i( %d, %d, %d )",
        (int)target,
        (int)s,
        (int)t
      );
      ErrorReporter errorReporter( "glMultiTexCoord2i" );
      glMultiTexCoord2i( target, s, t );
    }
    static void MultiTexCoord2iv(
      GLenum target,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord2iv( %d, GLint* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord2iv" );
      glMultiTexCoord2iv( target, v );
    }
    static void MultiTexCoord2s(
      GLenum target,
      GLshort s,
      GLshort t
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord2s( %d, %d, %d )",
        (int)target,
        (int)s,
        (int)t
      );
      ErrorReporter errorReporter( "glMultiTexCoord2s" );
      glMultiTexCoord2s( target, s, t );
    }
    static void MultiTexCoord2sv(
      GLenum target,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord2sv( %d, GLshort* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord2sv" );
      glMultiTexCoord2sv( target, v );
    }
    static void MultiTexCoord3d(
      GLenum target,
      GLdouble s,
      GLdouble t,
      GLdouble r
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord3d( %d, %f, %f, %f )",
        (int)target,
        (float)s,
        (float)t,
        (float)r
      );
      ErrorReporter errorReporter( "glMultiTexCoord3d" );
      glMultiTexCoord3d( target, s, t, r );
    }
    static void MultiTexCoord3dv(
      GLenum target,
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord3dv( %d, GLdouble* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord3dv" );
      glMultiTexCoord3dv( target, v );
    }
    static void MultiTexCoord3f(
      GLenum target,
      GLfloat s,
      GLfloat t,
      GLfloat r
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord3f( %d, %f, %f, %f )",
        (int)target,
        (float)s,
        (float)t,
        (float)r
      );
      ErrorReporter errorReporter( "glMultiTexCoord3f" );
      glMultiTexCoord3f( target, s, t, r );
    }
    static void MultiTexCoord3fv(
      GLenum target,
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord3fv( %d, GLfloat* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord3fv" );
      glMultiTexCoord3fv( target, v );
    }
    static void MultiTexCoord3i(
      GLenum target,
      GLint s,
      GLint t,
      GLint r
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord3i( %d, %d, %d, %d )",
        (int)target,
        (int)s,
        (int)t,
        (int)r
      );
      ErrorReporter errorReporter( "glMultiTexCoord3i" );
      glMultiTexCoord3i( target, s, t, r );
    }
    static void MultiTexCoord3iv(
      GLenum target,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord3iv( %d, GLint* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord3iv" );
      glMultiTexCoord3iv( target, v );
    }
    static void MultiTexCoord3s(
      GLenum target,
      GLshort s,
      GLshort t,
      GLshort r
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord3s( %d, %d, %d, %d )",
        (int)target,
        (int)s,
        (int)t,
        (int)r
      );
      ErrorReporter errorReporter( "glMultiTexCoord3s" );
      glMultiTexCoord3s( target, s, t, r );
    }
    static void MultiTexCoord3sv(
      GLenum target,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord3sv( %d, GLshort* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord3sv" );
      glMultiTexCoord3sv( target, v );
    }
    static void MultiTexCoord4d(
      GLenum target,
      GLdouble s,
      GLdouble t,
      GLdouble r,
      GLdouble q
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord4d( %d, %f, %f, %f, %f )",
        (int)target,
        (float)s,
        (float)t,
        (float)r,
        (float)q
      );
      ErrorReporter errorReporter( "glMultiTexCoord4d" );
      glMultiTexCoord4d( target, s, t, r, q );
    }
    static void MultiTexCoord4dv(
      GLenum target,
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord4dv( %d, GLdouble* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord4dv" );
      glMultiTexCoord4dv( target, v );
    }
    static void MultiTexCoord4f(
      GLenum target,
      GLfloat s,
      GLfloat t,
      GLfloat r,
      GLfloat q
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord4f( %d, %f, %f, %f, %f )",
        (int)target,
        (float)s,
        (float)t,
        (float)r,
        (float)q
      );
      ErrorReporter errorReporter( "glMultiTexCoord4f" );
      glMultiTexCoord4f( target, s, t, r, q );
    }
    static void MultiTexCoord4fv(
      GLenum target,
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord4fv( %d, GLfloat* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord4fv" );
      glMultiTexCoord4fv( target, v );
    }
    static void MultiTexCoord4i(
      GLenum target,
      GLint s,
      GLint t,
      GLint r,
      GLint q
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord4i( %d, %d, %d, %d, %d )",
        (int)target,
        (int)s,
        (int)t,
        (int)r,
        (int)q
      );
      ErrorReporter errorReporter( "glMultiTexCoord4i" );
      glMultiTexCoord4i( target, s, t, r, q );
    }
    static void MultiTexCoord4iv(
      GLenum target,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord4iv( %d, GLint* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord4iv" );
      glMultiTexCoord4iv( target, v );
    }
    static void MultiTexCoord4s(
      GLenum target,
      GLshort s,
      GLshort t,
      GLshort r,
      GLshort q
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord4s( %d, %d, %d, %d, %d )",
        (int)target,
        (int)s,
        (int)t,
        (int)r,
        (int)q
      );
      ErrorReporter errorReporter( "glMultiTexCoord4s" );
      glMultiTexCoord4s( target, s, t, r, q );
    }
    static void MultiTexCoord4sv(
      GLenum target,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoord4sv( %d, GLshort* )",
        (int)target
      );
      ErrorReporter errorReporter( "glMultiTexCoord4sv" );
      glMultiTexCoord4sv( target, v );
    }
    static void SampleCoverage(
      GLclampf value,
      GLboolean invert
    ){
      FABRIC_OGL_TRACE( "glSampleCoverage( %f, %b )",
        (float)value,
        (bool)invert
      );
      ErrorReporter errorReporter( "glSampleCoverage" );
      glSampleCoverage( value, invert );
    }
    static void BlendColor(
      GLclampf red,
      GLclampf green,
      GLclampf blue,
      GLclampf alpha
    ){
      FABRIC_OGL_TRACE( "glBlendColor( %f, %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue,
        (float)alpha
      );
      ErrorReporter errorReporter( "glBlendColor" );
      glBlendColor( red, green, blue, alpha );
    }
    static void BlendEquation(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glBlendEquation( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glBlendEquation" );
      glBlendEquation( mode );
    }
    static void BlendFuncSeparate(
      GLenum sfactorRGB,
      GLenum dfactorRGB,
      GLenum sfactorAlpha,
      GLenum dfactorAlpha
    ){
      FABRIC_OGL_TRACE( "glBlendFuncSeparate( %d, %d, %d, %d )",
        (int)sfactorRGB,
        (int)dfactorRGB,
        (int)sfactorAlpha,
        (int)dfactorAlpha
      );
      ErrorReporter errorReporter( "glBlendFuncSeparate" );
      glBlendFuncSeparate( sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha );
    }
    static void FogCoordPointer(
      GLenum type,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glFogCoordPointer( %d, %d, GLvoid* )",
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glFogCoordPointer" );
      glFogCoordPointer( type, stride, pointer );
    }
    static void FogCoordd(
      GLdouble coord
    ){
      FABRIC_OGL_TRACE( "glFogCoordd( %f )",
        (float)coord
      );
      ErrorReporter errorReporter( "glFogCoordd" );
      glFogCoordd( coord );
    }
    static void FogCoorddv(
      const GLdouble* coord
    ){
      FABRIC_OGL_TRACE( "glFogCoorddv( GLdouble* )" );
      ErrorReporter errorReporter( "glFogCoorddv" );
      glFogCoorddv( coord );
    }
    static void FogCoordf(
      GLfloat coord
    ){
      FABRIC_OGL_TRACE( "glFogCoordf( %f )",
        (float)coord
      );
      ErrorReporter errorReporter( "glFogCoordf" );
      glFogCoordf( coord );
    }
    static void FogCoordfv(
      const GLfloat* coord
    ){
      FABRIC_OGL_TRACE( "glFogCoordfv( GLfloat* )" );
      ErrorReporter errorReporter( "glFogCoordfv" );
      glFogCoordfv( coord );
    }
    static void MultiDrawArrays(
      GLenum mode,
      GLint* first,
      GLsizei* count,
      GLsizei primcount
    ){
      FABRIC_OGL_TRACE( "glMultiDrawArrays( %d, GLint*, GLsizei*, %d )",
        (int)mode,
        (int)primcount
      );
      ErrorReporter errorReporter( "glMultiDrawArrays" );
      glMultiDrawArrays( mode, first, count, primcount );
    }
    static void PointParameterf(
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glPointParameterf( %d, %f )",
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glPointParameterf" );
      glPointParameterf( pname, param );
    }
    static void PointParameterfv(
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glPointParameterfv( %d, GLfloat* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glPointParameterfv" );
      glPointParameterfv( pname, params );
    }
    static void PointParameteri(
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glPointParameteri( %d, %d )",
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glPointParameteri" );
      glPointParameteri( pname, param );
    }
    static void PointParameteriv(
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glPointParameteriv( %d, GLint* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glPointParameteriv" );
      glPointParameteriv( pname, params );
    }
    static void SecondaryColor3b(
      GLbyte red,
      GLbyte green,
      GLbyte blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3b( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3b" );
      glSecondaryColor3b( red, green, blue );
    }
    static void SecondaryColor3bv(
      const GLbyte* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3bv( GLbyte* )" );
      ErrorReporter errorReporter( "glSecondaryColor3bv" );
      glSecondaryColor3bv( v );
    }
    static void SecondaryColor3d(
      GLdouble red,
      GLdouble green,
      GLdouble blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3d( %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3d" );
      glSecondaryColor3d( red, green, blue );
    }
    static void SecondaryColor3dv(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3dv( GLdouble* )" );
      ErrorReporter errorReporter( "glSecondaryColor3dv" );
      glSecondaryColor3dv( v );
    }
    static void SecondaryColor3f(
      GLfloat red,
      GLfloat green,
      GLfloat blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3f( %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3f" );
      glSecondaryColor3f( red, green, blue );
    }
    static void SecondaryColor3fv(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3fv( GLfloat* )" );
      ErrorReporter errorReporter( "glSecondaryColor3fv" );
      glSecondaryColor3fv( v );
    }
    static void SecondaryColor3i(
      GLint red,
      GLint green,
      GLint blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3i( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3i" );
      glSecondaryColor3i( red, green, blue );
    }
    static void SecondaryColor3iv(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3iv( GLint* )" );
      ErrorReporter errorReporter( "glSecondaryColor3iv" );
      glSecondaryColor3iv( v );
    }
    static void SecondaryColor3s(
      GLshort red,
      GLshort green,
      GLshort blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3s( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3s" );
      glSecondaryColor3s( red, green, blue );
    }
    static void SecondaryColor3sv(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3sv( GLshort* )" );
      ErrorReporter errorReporter( "glSecondaryColor3sv" );
      glSecondaryColor3sv( v );
    }
    static void SecondaryColor3ub(
      GLubyte red,
      GLubyte green,
      GLubyte blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3ub( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3ub" );
      glSecondaryColor3ub( red, green, blue );
    }
    static void SecondaryColor3ubv(
      const GLubyte* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3ubv( GLubyte* )" );
      ErrorReporter errorReporter( "glSecondaryColor3ubv" );
      glSecondaryColor3ubv( v );
    }
    static void SecondaryColor3ui(
      GLuint red,
      GLuint green,
      GLuint blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3ui( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3ui" );
      glSecondaryColor3ui( red, green, blue );
    }
    static void SecondaryColor3uiv(
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3uiv( GLuint* )" );
      ErrorReporter errorReporter( "glSecondaryColor3uiv" );
      glSecondaryColor3uiv( v );
    }
    static void SecondaryColor3us(
      GLushort red,
      GLushort green,
      GLushort blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3us( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3us" );
      glSecondaryColor3us( red, green, blue );
    }
    static void SecondaryColor3usv(
      const GLushort* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3usv( GLushort* )" );
      ErrorReporter errorReporter( "glSecondaryColor3usv" );
      glSecondaryColor3usv( v );
    }
    static void SecondaryColorPointer(
      GLint size,
      GLenum type,
      GLsizei stride,
      GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glSecondaryColorPointer( %d, %d, %d, GLvoid* )",
        (int)size,
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glSecondaryColorPointer" );
      glSecondaryColorPointer( size, type, stride, pointer );
    }
    static void WindowPos2d(
      GLdouble x,
      GLdouble y
    ){
      FABRIC_OGL_TRACE( "glWindowPos2d( %f, %f )",
        (float)x,
        (float)y
      );
      ErrorReporter errorReporter( "glWindowPos2d" );
      glWindowPos2d( x, y );
    }
    static void WindowPos2dv(
      const GLdouble* p
    ){
      FABRIC_OGL_TRACE( "glWindowPos2dv( GLdouble* )" );
      ErrorReporter errorReporter( "glWindowPos2dv" );
      glWindowPos2dv( p );
    }
    static void WindowPos2f(
      GLfloat x,
      GLfloat y
    ){
      FABRIC_OGL_TRACE( "glWindowPos2f( %f, %f )",
        (float)x,
        (float)y
      );
      ErrorReporter errorReporter( "glWindowPos2f" );
      glWindowPos2f( x, y );
    }
    static void WindowPos2fv(
      const GLfloat* p
    ){
      FABRIC_OGL_TRACE( "glWindowPos2fv( GLfloat* )" );
      ErrorReporter errorReporter( "glWindowPos2fv" );
      glWindowPos2fv( p );
    }
    static void WindowPos2i(
      GLint x,
      GLint y
    ){
      FABRIC_OGL_TRACE( "glWindowPos2i( %d, %d )",
        (int)x,
        (int)y
      );
      ErrorReporter errorReporter( "glWindowPos2i" );
      glWindowPos2i( x, y );
    }
    static void WindowPos2iv(
      const GLint* p
    ){
      FABRIC_OGL_TRACE( "glWindowPos2iv( GLint* )" );
      ErrorReporter errorReporter( "glWindowPos2iv" );
      glWindowPos2iv( p );
    }
    static void WindowPos2s(
      GLshort x,
      GLshort y
    ){
      FABRIC_OGL_TRACE( "glWindowPos2s( %d, %d )",
        (int)x,
        (int)y
      );
      ErrorReporter errorReporter( "glWindowPos2s" );
      glWindowPos2s( x, y );
    }
    static void WindowPos2sv(
      const GLshort* p
    ){
      FABRIC_OGL_TRACE( "glWindowPos2sv( GLshort* )" );
      ErrorReporter errorReporter( "glWindowPos2sv" );
      glWindowPos2sv( p );
    }
    static void WindowPos3d(
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glWindowPos3d( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glWindowPos3d" );
      glWindowPos3d( x, y, z );
    }
    static void WindowPos3dv(
      const GLdouble* p
    ){
      FABRIC_OGL_TRACE( "glWindowPos3dv( GLdouble* )" );
      ErrorReporter errorReporter( "glWindowPos3dv" );
      glWindowPos3dv( p );
    }
    static void WindowPos3f(
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glWindowPos3f( %f, %f, %f )",
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glWindowPos3f" );
      glWindowPos3f( x, y, z );
    }
    static void WindowPos3fv(
      const GLfloat* p
    ){
      FABRIC_OGL_TRACE( "glWindowPos3fv( GLfloat* )" );
      ErrorReporter errorReporter( "glWindowPos3fv" );
      glWindowPos3fv( p );
    }
    static void WindowPos3i(
      GLint x,
      GLint y,
      GLint z
    ){
      FABRIC_OGL_TRACE( "glWindowPos3i( %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z
      );
      ErrorReporter errorReporter( "glWindowPos3i" );
      glWindowPos3i( x, y, z );
    }
    static void WindowPos3iv(
      const GLint* p
    ){
      FABRIC_OGL_TRACE( "glWindowPos3iv( GLint* )" );
      ErrorReporter errorReporter( "glWindowPos3iv" );
      glWindowPos3iv( p );
    }
    static void WindowPos3s(
      GLshort x,
      GLshort y,
      GLshort z
    ){
      FABRIC_OGL_TRACE( "glWindowPos3s( %d, %d, %d )",
        (int)x,
        (int)y,
        (int)z
      );
      ErrorReporter errorReporter( "glWindowPos3s" );
      glWindowPos3s( x, y, z );
    }
    static void WindowPos3sv(
      const GLshort* p
    ){
      FABRIC_OGL_TRACE( "glWindowPos3sv( GLshort* )" );
      ErrorReporter errorReporter( "glWindowPos3sv" );
      glWindowPos3sv( p );
    }
    static void BeginQuery(
      GLenum target,
      GLuint id
    ){
      FABRIC_OGL_TRACE( "glBeginQuery( %d, 0x%04X )",
        (int)target,
        (unsigned)id
      );
      ErrorReporter errorReporter( "glBeginQuery" );
      glBeginQuery( target, id );
    }
    static void BindBuffer(
      GLenum target,
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glBindBuffer( %d, 0x%04X )",
        (int)target,
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glBindBuffer" );
      glBindBuffer( target, buffer );
    }
    static void BufferData(
      GLenum target,
      GLsizeiptr size,
      const GLvoid* data,
      GLenum usage
    ){
      FABRIC_OGL_TRACE( "glBufferData( %d, %d, GLvoid*, %d )",
        (int)target,
        (int)size,
        (int)usage
      );
      ErrorReporter errorReporter( "glBufferData" );
      glBufferData( target, size, data, usage );
    }
    static void BufferSubData(
      GLenum target,
      GLintptr offset,
      GLsizeiptr size,
      const GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glBufferSubData( %d, %d, %d, GLvoid* )",
        (int)target,
        (int)offset,
        (int)size
      );
      ErrorReporter errorReporter( "glBufferSubData" );
      glBufferSubData( target, offset, size, data );
    }
    static void DeleteBuffers(
      GLsizei n,
      const GLuint* buffers
    ){
      FABRIC_OGL_TRACE( "glDeleteBuffers( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteBuffers" );
      glDeleteBuffers( n, buffers );
    }
    static void DeleteQueries(
      GLsizei n,
      const GLuint* ids
    ){
      FABRIC_OGL_TRACE( "glDeleteQueries( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteQueries" );
      glDeleteQueries( n, ids );
    }
    static void EndQuery(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glEndQuery( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glEndQuery" );
      glEndQuery( target );
    }
    static void GenBuffers(
      GLsizei n,
      GLuint* buffers
    ){
      FABRIC_OGL_TRACE( "glGenBuffers( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenBuffers" );
      glGenBuffers( n, buffers );
    }
    static void GenQueries(
      GLsizei n,
      GLuint* ids
    ){
      FABRIC_OGL_TRACE( "glGenQueries( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenQueries" );
      glGenQueries( n, ids );
    }
    static void GetBufferParameteriv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetBufferParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetBufferParameteriv" );
      glGetBufferParameteriv( target, pname, params );
    }
    static void GetBufferSubData(
      GLenum target,
      GLintptr offset,
      GLsizeiptr size,
      GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glGetBufferSubData( %d, %d, %d, GLvoid* )",
        (int)target,
        (int)offset,
        (int)size
      );
      ErrorReporter errorReporter( "glGetBufferSubData" );
      glGetBufferSubData( target, offset, size, data );
    }
    static void GetQueryObjectiv(
      GLuint id,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetQueryObjectiv( 0x%04X, %d, GLint* )",
        (unsigned)id,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetQueryObjectiv" );
      glGetQueryObjectiv( id, pname, params );
    }
    static void GetQueryObjectuiv(
      GLuint id,
      GLenum pname,
      GLuint* params
    ){
      FABRIC_OGL_TRACE( "glGetQueryObjectuiv( 0x%04X, %d, GLuint* )",
        (unsigned)id,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetQueryObjectuiv" );
      glGetQueryObjectuiv( id, pname, params );
    }
    static void GetQueryiv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetQueryiv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetQueryiv" );
      glGetQueryiv( target, pname, params );
    }
    static GLboolean IsBuffer(
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glIsBuffer( 0x%04X )",
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glIsBuffer" );
      GLboolean result = glIsBuffer( buffer );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLboolean IsQuery(
      GLuint id
    ){
      FABRIC_OGL_TRACE( "glIsQuery( 0x%04X )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glIsQuery" );
      GLboolean result = glIsQuery( id );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLvoid* MapBuffer(
      GLenum target,
      GLenum access
    ){
      FABRIC_OGL_TRACE( "glMapBuffer( %d, %d )",
        (int)target,
        (int)access
      );
      ErrorReporter errorReporter( "glMapBuffer" );
      glMapBuffer( target, access );
    }
    static GLboolean UnmapBuffer(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glUnmapBuffer( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glUnmapBuffer" );
      GLboolean result = glUnmapBuffer( target );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void AttachShader(
      GLuint program,
      GLuint shader
    ){
      FABRIC_OGL_TRACE( "glAttachShader( 0x%04X, 0x%04X )",
        (unsigned)program,
        (unsigned)shader
      );
      ErrorReporter errorReporter( "glAttachShader" );
      glAttachShader( program, shader );
    }
    static void BindAttribLocation(
      GLuint program,
      GLuint index,
      void* name
    ){
      FABRIC_OGL_TRACE( "glBindAttribLocation( 0x%04X, 0x%04X, char* )",
        (unsigned)program,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glBindAttribLocation" );
      const GLchar* nameStr = (const GLchar*)stringDesc->getValueData( &name );
      glBindAttribLocation( program, index, nameStr );
    }
    static void BlendEquationSeparate(
      GLenum var0,
      GLenum var1
    ){
      FABRIC_OGL_TRACE( "glBlendEquationSeparate( %d, %d )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glBlendEquationSeparate" );
      glBlendEquationSeparate( var0, var1 );
    }
    static void CompileShader(
      GLuint shader
    ){
      FABRIC_OGL_TRACE( "glCompileShader( 0x%04X )",
        (unsigned)shader
      );
      ErrorReporter errorReporter( "glCompileShader" );
      glCompileShader( shader );
    }
    static GLuint CreateProgram()
    {
      FABRIC_OGL_TRACE( "glCreateProgram()" );
      ErrorReporter errorReporter( "glCreateProgram" );
      GLuint result = glCreateProgram();
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static GLuint CreateShader(
      GLenum type
    ){
      FABRIC_OGL_TRACE( "glCreateShader( %d )",
        (int)type
      );
      ErrorReporter errorReporter( "glCreateShader" );
      GLuint result = glCreateShader( type );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static void DeleteProgram(
      GLuint program
    ){
      FABRIC_OGL_TRACE( "glDeleteProgram( 0x%04X )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glDeleteProgram" );
      glDeleteProgram( program );
    }
    static void DeleteShader(
      GLuint shader
    ){
      FABRIC_OGL_TRACE( "glDeleteShader( 0x%04X )",
        (unsigned)shader
      );
      ErrorReporter errorReporter( "glDeleteShader" );
      glDeleteShader( shader );
    }
    static void DetachShader(
      GLuint program,
      GLuint shader
    ){
      FABRIC_OGL_TRACE( "glDetachShader( 0x%04X, 0x%04X )",
        (unsigned)program,
        (unsigned)shader
      );
      ErrorReporter errorReporter( "glDetachShader" );
      glDetachShader( program, shader );
    }
    static void DisableVertexAttribArray(
      GLuint var0
    ){
      FABRIC_OGL_TRACE( "glDisableVertexAttribArray( 0x%04X )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glDisableVertexAttribArray" );
      glDisableVertexAttribArray( var0 );
    }
    static void DrawBuffers(
      GLsizei n,
      const GLenum* bufs
    ){
      FABRIC_OGL_TRACE( "glDrawBuffers( %d, GLenum* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDrawBuffers" );
      glDrawBuffers( n, bufs );
    }
    static void EnableVertexAttribArray(
      GLuint var0
    ){
      FABRIC_OGL_TRACE( "glEnableVertexAttribArray( 0x%04X )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glEnableVertexAttribArray" );
      glEnableVertexAttribArray( var0 );
    }
    static void GetActiveAttrib(
      GLuint program,
      GLuint index,
      GLsizei maxLength,
      GLsizei* length,
      GLint* size,
      GLenum* type,
      void* name
    ){
      FABRIC_OGL_TRACE( "glGetActiveAttrib( 0x%04X, 0x%04X, %d, GLsizei*, GLint*, GLenum*, char* )",
        (unsigned)program,
        (unsigned)index,
        (int)maxLength
      );
      ErrorReporter errorReporter( "glGetActiveAttrib" );
      char * nameStr = new char[1024];
      glGetActiveAttrib( program, index, maxLength, length, size, type, nameStr );
      stringDesc->setValue( nameStr, strlen(nameStr), name );
      delete( nameStr );
    }
    static void GetActiveUniform(
      GLuint program,
      GLuint index,
      GLsizei maxLength,
      GLsizei* length,
      GLint* size,
      GLenum* type,
      void* name
    ){
      FABRIC_OGL_TRACE( "glGetActiveUniform( 0x%04X, 0x%04X, %d, GLsizei*, GLint*, GLenum*, char* )",
        (unsigned)program,
        (unsigned)index,
        (int)maxLength
      );
      ErrorReporter errorReporter( "glGetActiveUniform" );
      char * nameStr = new char[1024];
      glGetActiveUniform( program, index, maxLength, length, size, type, nameStr );
      stringDesc->setValue( nameStr, strlen(nameStr), name );
      delete( nameStr );
    }
    static void GetAttachedShaders(
      GLuint program,
      GLsizei maxCount,
      GLsizei* count,
      GLuint* shaders
    ){
      FABRIC_OGL_TRACE( "glGetAttachedShaders( 0x%04X, %d, GLsizei*, GLuint* )",
        (unsigned)program,
        (int)maxCount
      );
      ErrorReporter errorReporter( "glGetAttachedShaders" );
      glGetAttachedShaders( program, maxCount, count, shaders );
    }
    static GLint GetAttribLocation(
      GLuint program,
      void* name
    ){
      FABRIC_OGL_TRACE( "glGetAttribLocation( 0x%04X, char* )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glGetAttribLocation" );
      const GLchar* nameStr = (const GLchar*)stringDesc->getValueData( &name );
      GLint result = glGetAttribLocation( program, nameStr );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void GetProgramInfoLog(
      GLuint program,
      GLsizei bufSize,
      GLsizei* length,
      void* infoLog
    ){
      FABRIC_OGL_TRACE( "glGetProgramInfoLog( 0x%04X, %d, GLsizei*, char* )",
        (unsigned)program,
        (int)bufSize
      );
      ErrorReporter errorReporter( "glGetProgramInfoLog" );
      char * infoLogStr = new char[1024];
      glGetProgramInfoLog( program, bufSize, length, infoLogStr );
      stringDesc->setValue( infoLogStr, strlen(infoLogStr), infoLog );
      delete( infoLogStr );
    }
    static void GetProgramiv(
      GLuint program,
      GLenum pname,
      GLint* param
    ){
      FABRIC_OGL_TRACE( "glGetProgramiv( 0x%04X, %d, GLint* )",
        (unsigned)program,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetProgramiv" );
      glGetProgramiv( program, pname, param );
    }
    static void GetShaderInfoLog(
      GLuint shader,
      GLsizei bufSize,
      GLsizei* length,
      void* infoLog
    ){
      FABRIC_OGL_TRACE( "glGetShaderInfoLog( 0x%04X, %d, GLsizei*, char* )",
        (unsigned)shader,
        (int)bufSize
      );
      ErrorReporter errorReporter( "glGetShaderInfoLog" );
      char * infoLogStr = new char[1024];
      glGetShaderInfoLog( shader, bufSize, length, infoLogStr );
      stringDesc->setValue( infoLogStr, strlen(infoLogStr), infoLog );
      delete( infoLogStr );
    }
    static void GetShaderSource(
      GLint obj,
      GLsizei maxLength,
      GLsizei* length,
      void* source
    ){
      FABRIC_OGL_TRACE( "glGetShaderSource( %d, %d, GLsizei*, char* )",
        (int)obj,
        (int)maxLength
      );
      ErrorReporter errorReporter( "glGetShaderSource" );
      char * sourceStr = new char[1024];
      glGetShaderSource( obj, maxLength, length, sourceStr );
      stringDesc->setValue( sourceStr, strlen(sourceStr), source );
      delete( sourceStr );
    }
    static void GetShaderiv(
      GLuint shader,
      GLenum pname,
      GLint* param
    ){
      FABRIC_OGL_TRACE( "glGetShaderiv( 0x%04X, %d, GLint* )",
        (unsigned)shader,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetShaderiv" );
      glGetShaderiv( shader, pname, param );
    }
    static GLint GetUniformLocation(
      GLuint program,
      void* name
    ){
      FABRIC_OGL_TRACE( "glGetUniformLocation( 0x%04X, char* )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glGetUniformLocation" );
      const GLchar* nameStr = (const GLchar*)stringDesc->getValueData( &name );
      GLint result = glGetUniformLocation( program, nameStr );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void GetUniformfv(
      GLuint program,
      GLint location,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetUniformfv( 0x%04X, %d, GLfloat* )",
        (unsigned)program,
        (int)location
      );
      ErrorReporter errorReporter( "glGetUniformfv" );
      glGetUniformfv( program, location, params );
    }
    static void GetUniformiv(
      GLuint program,
      GLint location,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetUniformiv( 0x%04X, %d, GLint* )",
        (unsigned)program,
        (int)location
      );
      ErrorReporter errorReporter( "glGetUniformiv" );
      glGetUniformiv( program, location, params );
    }
    static void GetVertexAttribPointerv(
      GLuint var0,
      GLenum var1,
      GLvoid* var2
    ){
      FABRIC_OGL_TRACE( "glGetVertexAttribPointerv( 0x%04X, %d, GLvoid* )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetVertexAttribPointerv" );
      glGetVertexAttribPointerv( var0, var1, var2 );
    }
    static void GetVertexAttribdv(
      GLuint var0,
      GLenum var1,
      GLdouble* var2
    ){
      FABRIC_OGL_TRACE( "glGetVertexAttribdv( 0x%04X, %d, GLdouble* )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetVertexAttribdv" );
      glGetVertexAttribdv( var0, var1, var2 );
    }
    static void GetVertexAttribfv(
      GLuint var0,
      GLenum var1,
      GLfloat* var2
    ){
      FABRIC_OGL_TRACE( "glGetVertexAttribfv( 0x%04X, %d, GLfloat* )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetVertexAttribfv" );
      glGetVertexAttribfv( var0, var1, var2 );
    }
    static void GetVertexAttribiv(
      GLuint var0,
      GLenum var1,
      GLint* var2
    ){
      FABRIC_OGL_TRACE( "glGetVertexAttribiv( 0x%04X, %d, GLint* )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetVertexAttribiv" );
      glGetVertexAttribiv( var0, var1, var2 );
    }
    static GLboolean IsProgram(
      GLuint program
    ){
      FABRIC_OGL_TRACE( "glIsProgram( 0x%04X )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glIsProgram" );
      GLboolean result = glIsProgram( program );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLboolean IsShader(
      GLuint shader
    ){
      FABRIC_OGL_TRACE( "glIsShader( 0x%04X )",
        (unsigned)shader
      );
      ErrorReporter errorReporter( "glIsShader" );
      GLboolean result = glIsShader( shader );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void LinkProgram(
      GLuint program
    ){
      FABRIC_OGL_TRACE( "glLinkProgram( 0x%04X )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glLinkProgram" );
      glLinkProgram( program );
    }
    static void ShaderSource(
      GLuint shader,
      GLsizei count,
      void* strings,
      const GLint* lengths
    ){
      FABRIC_OGL_TRACE( "glShaderSource( 0x%04X, %d, char*, GLint* )",
        (unsigned)shader,
        (int)count
      );
      ErrorReporter errorReporter( "glShaderSource" );
      const GLchar* stringsStr = (const GLchar*)stringDesc->getValueData( &strings );
      glShaderSource( shader, count, &stringsStr, lengths );
    }
    static void StencilFuncSeparate(
      GLenum frontfunc,
      GLenum backfunc,
      GLint ref,
      GLuint mask
    ){
      FABRIC_OGL_TRACE( "glStencilFuncSeparate( %d, %d, %d, 0x%04X )",
        (int)frontfunc,
        (int)backfunc,
        (int)ref,
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glStencilFuncSeparate" );
      glStencilFuncSeparate( frontfunc, backfunc, ref, mask );
    }
    static void StencilMaskSeparate(
      GLenum var0,
      GLuint var1
    ){
      FABRIC_OGL_TRACE( "glStencilMaskSeparate( %d, 0x%04X )",
        (int)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glStencilMaskSeparate" );
      glStencilMaskSeparate( var0, var1 );
    }
    static void StencilOpSeparate(
      GLenum face,
      GLenum sfail,
      GLenum dpfail,
      GLenum dppass
    ){
      FABRIC_OGL_TRACE( "glStencilOpSeparate( %d, %d, %d, %d )",
        (int)face,
        (int)sfail,
        (int)dpfail,
        (int)dppass
      );
      ErrorReporter errorReporter( "glStencilOpSeparate" );
      glStencilOpSeparate( face, sfail, dpfail, dppass );
    }
    static void Uniform1f(
      GLint location,
      GLfloat v0
    ){
      FABRIC_OGL_TRACE( "glUniform1f( %d, %f )",
        (int)location,
        (float)v0
      );
      ErrorReporter errorReporter( "glUniform1f" );
      glUniform1f( location, v0 );
    }
    static void Uniform1fv(
      GLint location,
      GLsizei count,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniform1fv( %d, %d, GLfloat* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform1fv" );
      glUniform1fv( location, count, value );
    }
    static void Uniform1i(
      GLint location,
      GLint v0
    ){
      FABRIC_OGL_TRACE( "glUniform1i( %d, %d )",
        (int)location,
        (int)v0
      );
      ErrorReporter errorReporter( "glUniform1i" );
      glUniform1i( location, v0 );
    }
    static void Uniform1iv(
      GLint location,
      GLsizei count,
      const GLint* value
    ){
      FABRIC_OGL_TRACE( "glUniform1iv( %d, %d, GLint* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform1iv" );
      glUniform1iv( location, count, value );
    }
    static void Uniform2f(
      GLint location,
      GLfloat v0,
      GLfloat v1
    ){
      FABRIC_OGL_TRACE( "glUniform2f( %d, %f, %f )",
        (int)location,
        (float)v0,
        (float)v1
      );
      ErrorReporter errorReporter( "glUniform2f" );
      glUniform2f( location, v0, v1 );
    }
    static void Uniform2fv(
      GLint location,
      GLsizei count,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniform2fv( %d, %d, GLfloat* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform2fv" );
      glUniform2fv( location, count, value );
    }
    static void Uniform2i(
      GLint location,
      GLint v0,
      GLint v1
    ){
      FABRIC_OGL_TRACE( "glUniform2i( %d, %d, %d )",
        (int)location,
        (int)v0,
        (int)v1
      );
      ErrorReporter errorReporter( "glUniform2i" );
      glUniform2i( location, v0, v1 );
    }
    static void Uniform2iv(
      GLint location,
      GLsizei count,
      const GLint* value
    ){
      FABRIC_OGL_TRACE( "glUniform2iv( %d, %d, GLint* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform2iv" );
      glUniform2iv( location, count, value );
    }
    static void Uniform3f(
      GLint location,
      GLfloat v0,
      GLfloat v1,
      GLfloat v2
    ){
      FABRIC_OGL_TRACE( "glUniform3f( %d, %f, %f, %f )",
        (int)location,
        (float)v0,
        (float)v1,
        (float)v2
      );
      ErrorReporter errorReporter( "glUniform3f" );
      glUniform3f( location, v0, v1, v2 );
    }
    static void Uniform3fv(
      GLint location,
      GLsizei count,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniform3fv( %d, %d, GLfloat* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform3fv" );
      glUniform3fv( location, count, value );
    }
    static void Uniform3i(
      GLint location,
      GLint v0,
      GLint v1,
      GLint v2
    ){
      FABRIC_OGL_TRACE( "glUniform3i( %d, %d, %d, %d )",
        (int)location,
        (int)v0,
        (int)v1,
        (int)v2
      );
      ErrorReporter errorReporter( "glUniform3i" );
      glUniform3i( location, v0, v1, v2 );
    }
    static void Uniform3iv(
      GLint location,
      GLsizei count,
      const GLint* value
    ){
      FABRIC_OGL_TRACE( "glUniform3iv( %d, %d, GLint* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform3iv" );
      glUniform3iv( location, count, value );
    }
    static void Uniform4f(
      GLint location,
      GLfloat v0,
      GLfloat v1,
      GLfloat v2,
      GLfloat v3
    ){
      FABRIC_OGL_TRACE( "glUniform4f( %d, %f, %f, %f, %f )",
        (int)location,
        (float)v0,
        (float)v1,
        (float)v2,
        (float)v3
      );
      ErrorReporter errorReporter( "glUniform4f" );
      glUniform4f( location, v0, v1, v2, v3 );
    }
    static void Uniform4fv(
      GLint location,
      GLsizei count,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniform4fv( %d, %d, GLfloat* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform4fv" );
      glUniform4fv( location, count, value );
    }
    static void Uniform4i(
      GLint location,
      GLint v0,
      GLint v1,
      GLint v2,
      GLint v3
    ){
      FABRIC_OGL_TRACE( "glUniform4i( %d, %d, %d, %d, %d )",
        (int)location,
        (int)v0,
        (int)v1,
        (int)v2,
        (int)v3
      );
      ErrorReporter errorReporter( "glUniform4i" );
      glUniform4i( location, v0, v1, v2, v3 );
    }
    static void Uniform4iv(
      GLint location,
      GLsizei count,
      const GLint* value
    ){
      FABRIC_OGL_TRACE( "glUniform4iv( %d, %d, GLint* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform4iv" );
      glUniform4iv( location, count, value );
    }
    static void UniformMatrix2fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix2fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix2fv" );
      glUniformMatrix2fv( location, count, transpose, value );
    }
    static void UniformMatrix3fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix3fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix3fv" );
      glUniformMatrix3fv( location, count, transpose, value );
    }
    static void UniformMatrix4fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix4fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix4fv" );
      glUniformMatrix4fv( location, count, transpose, value );
    }
    static void UseProgram(
      GLuint program
    ){
      FABRIC_OGL_TRACE( "glUseProgram( 0x%04X )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glUseProgram" );
      glUseProgram( program );
    }
    static void ValidateProgram(
      GLuint program
    ){
      FABRIC_OGL_TRACE( "glValidateProgram( 0x%04X )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glValidateProgram" );
      glValidateProgram( program );
    }
    static void VertexAttrib1d(
      GLuint index,
      GLdouble x
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib1d( 0x%04X, %f )",
        (unsigned)index,
        (float)x
      );
      ErrorReporter errorReporter( "glVertexAttrib1d" );
      glVertexAttrib1d( index, x );
    }
    static void VertexAttrib1dv(
      GLuint index,
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib1dv( 0x%04X, GLdouble* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib1dv" );
      glVertexAttrib1dv( index, v );
    }
    static void VertexAttrib1f(
      GLuint index,
      GLfloat x
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib1f( 0x%04X, %f )",
        (unsigned)index,
        (float)x
      );
      ErrorReporter errorReporter( "glVertexAttrib1f" );
      glVertexAttrib1f( index, x );
    }
    static void VertexAttrib1fv(
      GLuint index,
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib1fv( 0x%04X, GLfloat* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib1fv" );
      glVertexAttrib1fv( index, v );
    }
    static void VertexAttrib1s(
      GLuint index,
      GLshort x
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib1s( 0x%04X, %d )",
        (unsigned)index,
        (int)x
      );
      ErrorReporter errorReporter( "glVertexAttrib1s" );
      glVertexAttrib1s( index, x );
    }
    static void VertexAttrib1sv(
      GLuint index,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib1sv( 0x%04X, GLshort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib1sv" );
      glVertexAttrib1sv( index, v );
    }
    static void VertexAttrib2d(
      GLuint index,
      GLdouble x,
      GLdouble y
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib2d( 0x%04X, %f, %f )",
        (unsigned)index,
        (float)x,
        (float)y
      );
      ErrorReporter errorReporter( "glVertexAttrib2d" );
      glVertexAttrib2d( index, x, y );
    }
    static void VertexAttrib2dv(
      GLuint index,
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib2dv( 0x%04X, GLdouble* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib2dv" );
      glVertexAttrib2dv( index, v );
    }
    static void VertexAttrib2f(
      GLuint index,
      GLfloat x,
      GLfloat y
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib2f( 0x%04X, %f, %f )",
        (unsigned)index,
        (float)x,
        (float)y
      );
      ErrorReporter errorReporter( "glVertexAttrib2f" );
      glVertexAttrib2f( index, x, y );
    }
    static void VertexAttrib2fv(
      GLuint index,
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib2fv( 0x%04X, GLfloat* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib2fv" );
      glVertexAttrib2fv( index, v );
    }
    static void VertexAttrib2s(
      GLuint index,
      GLshort x,
      GLshort y
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib2s( 0x%04X, %d, %d )",
        (unsigned)index,
        (int)x,
        (int)y
      );
      ErrorReporter errorReporter( "glVertexAttrib2s" );
      glVertexAttrib2s( index, x, y );
    }
    static void VertexAttrib2sv(
      GLuint index,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib2sv( 0x%04X, GLshort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib2sv" );
      glVertexAttrib2sv( index, v );
    }
    static void VertexAttrib3d(
      GLuint index,
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib3d( 0x%04X, %f, %f, %f )",
        (unsigned)index,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glVertexAttrib3d" );
      glVertexAttrib3d( index, x, y, z );
    }
    static void VertexAttrib3dv(
      GLuint index,
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib3dv( 0x%04X, GLdouble* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib3dv" );
      glVertexAttrib3dv( index, v );
    }
    static void VertexAttrib3f(
      GLuint index,
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib3f( 0x%04X, %f, %f, %f )",
        (unsigned)index,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glVertexAttrib3f" );
      glVertexAttrib3f( index, x, y, z );
    }
    static void VertexAttrib3fv(
      GLuint index,
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib3fv( 0x%04X, GLfloat* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib3fv" );
      glVertexAttrib3fv( index, v );
    }
    static void VertexAttrib3s(
      GLuint index,
      GLshort x,
      GLshort y,
      GLshort z
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib3s( 0x%04X, %d, %d, %d )",
        (unsigned)index,
        (int)x,
        (int)y,
        (int)z
      );
      ErrorReporter errorReporter( "glVertexAttrib3s" );
      glVertexAttrib3s( index, x, y, z );
    }
    static void VertexAttrib3sv(
      GLuint index,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib3sv( 0x%04X, GLshort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib3sv" );
      glVertexAttrib3sv( index, v );
    }
    static void VertexAttrib4Nbv(
      GLuint index,
      const GLbyte* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4Nbv( 0x%04X, GLbyte* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4Nbv" );
      glVertexAttrib4Nbv( index, v );
    }
    static void VertexAttrib4Niv(
      GLuint index,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4Niv( 0x%04X, GLint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4Niv" );
      glVertexAttrib4Niv( index, v );
    }
    static void VertexAttrib4Nsv(
      GLuint index,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4Nsv( 0x%04X, GLshort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4Nsv" );
      glVertexAttrib4Nsv( index, v );
    }
    static void VertexAttrib4Nub(
      GLuint index,
      GLubyte x,
      GLubyte y,
      GLubyte z,
      GLubyte w
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4Nub( 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)index,
        (unsigned)x,
        (unsigned)y,
        (unsigned)z,
        (unsigned)w
      );
      ErrorReporter errorReporter( "glVertexAttrib4Nub" );
      glVertexAttrib4Nub( index, x, y, z, w );
    }
    static void VertexAttrib4Nubv(
      GLuint index,
      const GLubyte* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4Nubv( 0x%04X, GLubyte* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4Nubv" );
      glVertexAttrib4Nubv( index, v );
    }
    static void VertexAttrib4Nuiv(
      GLuint index,
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4Nuiv( 0x%04X, GLuint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4Nuiv" );
      glVertexAttrib4Nuiv( index, v );
    }
    static void VertexAttrib4Nusv(
      GLuint index,
      const GLushort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4Nusv( 0x%04X, GLushort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4Nusv" );
      glVertexAttrib4Nusv( index, v );
    }
    static void VertexAttrib4bv(
      GLuint index,
      const GLbyte* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4bv( 0x%04X, GLbyte* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4bv" );
      glVertexAttrib4bv( index, v );
    }
    static void VertexAttrib4d(
      GLuint index,
      GLdouble x,
      GLdouble y,
      GLdouble z,
      GLdouble w
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4d( 0x%04X, %f, %f, %f, %f )",
        (unsigned)index,
        (float)x,
        (float)y,
        (float)z,
        (float)w
      );
      ErrorReporter errorReporter( "glVertexAttrib4d" );
      glVertexAttrib4d( index, x, y, z, w );
    }
    static void VertexAttrib4dv(
      GLuint index,
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4dv( 0x%04X, GLdouble* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4dv" );
      glVertexAttrib4dv( index, v );
    }
    static void VertexAttrib4f(
      GLuint index,
      GLfloat x,
      GLfloat y,
      GLfloat z,
      GLfloat w
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4f( 0x%04X, %f, %f, %f, %f )",
        (unsigned)index,
        (float)x,
        (float)y,
        (float)z,
        (float)w
      );
      ErrorReporter errorReporter( "glVertexAttrib4f" );
      glVertexAttrib4f( index, x, y, z, w );
    }
    static void VertexAttrib4fv(
      GLuint index,
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4fv( 0x%04X, GLfloat* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4fv" );
      glVertexAttrib4fv( index, v );
    }
    static void VertexAttrib4iv(
      GLuint index,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4iv( 0x%04X, GLint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4iv" );
      glVertexAttrib4iv( index, v );
    }
    static void VertexAttrib4s(
      GLuint index,
      GLshort x,
      GLshort y,
      GLshort z,
      GLshort w
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4s( 0x%04X, %d, %d, %d, %d )",
        (unsigned)index,
        (int)x,
        (int)y,
        (int)z,
        (int)w
      );
      ErrorReporter errorReporter( "glVertexAttrib4s" );
      glVertexAttrib4s( index, x, y, z, w );
    }
    static void VertexAttrib4sv(
      GLuint index,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4sv( 0x%04X, GLshort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4sv" );
      glVertexAttrib4sv( index, v );
    }
    static void VertexAttrib4ubv(
      GLuint index,
      const GLubyte* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4ubv( 0x%04X, GLubyte* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4ubv" );
      glVertexAttrib4ubv( index, v );
    }
    static void VertexAttrib4uiv(
      GLuint index,
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4uiv( 0x%04X, GLuint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4uiv" );
      glVertexAttrib4uiv( index, v );
    }
    static void VertexAttrib4usv(
      GLuint index,
      const GLushort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttrib4usv( 0x%04X, GLushort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttrib4usv" );
      glVertexAttrib4usv( index, v );
    }
    static void VertexAttribPointer(
      GLuint index,
      GLint size,
      GLenum type,
      GLboolean normalized,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glVertexAttribPointer( 0x%04X, %d, %d, %b, %d, GLvoid* )",
        (unsigned)index,
        (int)size,
        (int)type,
        (bool)normalized,
        (int)stride
      );
      ErrorReporter errorReporter( "glVertexAttribPointer" );
      glVertexAttribPointer( index, size, type, normalized, stride, pointer );
    }
    static void UniformMatrix2x3fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix2x3fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix2x3fv" );
      glUniformMatrix2x3fv( location, count, transpose, value );
    }
    static void UniformMatrix2x4fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix2x4fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix2x4fv" );
      glUniformMatrix2x4fv( location, count, transpose, value );
    }
    static void UniformMatrix3x2fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix3x2fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix3x2fv" );
      glUniformMatrix3x2fv( location, count, transpose, value );
    }
    static void UniformMatrix3x4fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix3x4fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix3x4fv" );
      glUniformMatrix3x4fv( location, count, transpose, value );
    }
    static void UniformMatrix4x2fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix4x2fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix4x2fv" );
      glUniformMatrix4x2fv( location, count, transpose, value );
    }
    static void UniformMatrix4x3fv(
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glUniformMatrix4x3fv( %d, %d, %b, GLfloat* )",
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glUniformMatrix4x3fv" );
      glUniformMatrix4x3fv( location, count, transpose, value );
    }
    static void BeginConditionalRender(
      GLuint var0,
      GLenum var1
    ){
      FABRIC_OGL_TRACE( "glBeginConditionalRender( 0x%04X, %d )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glBeginConditionalRender" );
      glBeginConditionalRender( var0, var1 );
    }
    static void BeginTransformFeedback(
      GLenum var0
    ){
      FABRIC_OGL_TRACE( "glBeginTransformFeedback( %d )",
        (int)var0
      );
      ErrorReporter errorReporter( "glBeginTransformFeedback" );
      glBeginTransformFeedback( var0 );
    }
    static void BindFragDataLocation(
      GLuint var0,
      GLuint var1,
      void* var2
    ){
      FABRIC_OGL_TRACE( "glBindFragDataLocation( 0x%04X, 0x%04X, char* )",
        (unsigned)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glBindFragDataLocation" );
      const GLchar* var2Str = (const GLchar*)stringDesc->getValueData( &var2 );
      glBindFragDataLocation( var0, var1, var2Str );
    }
    static void ClampColor(
      GLenum var0,
      GLenum var1
    ){
      FABRIC_OGL_TRACE( "glClampColor( %d, %d )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glClampColor" );
      glClampColor( var0, var1 );
    }
    static void ClearBufferfi(
      GLenum var0,
      GLint var1,
      GLfloat var2,
      GLint var3
    ){
      FABRIC_OGL_TRACE( "glClearBufferfi( %d, %d, %f, %d )",
        (int)var0,
        (int)var1,
        (float)var2,
        (int)var3
      );
      ErrorReporter errorReporter( "glClearBufferfi" );
      glClearBufferfi( var0, var1, var2, var3 );
    }
    static void ClearBufferfv(
      GLenum var0,
      GLint var1,
      const GLfloat* var2
    ){
      FABRIC_OGL_TRACE( "glClearBufferfv( %d, %d, GLfloat* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glClearBufferfv" );
      glClearBufferfv( var0, var1, var2 );
    }
    static void ClearBufferiv(
      GLenum var0,
      GLint var1,
      const GLint* var2
    ){
      FABRIC_OGL_TRACE( "glClearBufferiv( %d, %d, GLint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glClearBufferiv" );
      glClearBufferiv( var0, var1, var2 );
    }
    static void ClearBufferuiv(
      GLenum var0,
      GLint var1,
      const GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glClearBufferuiv( %d, %d, GLuint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glClearBufferuiv" );
      glClearBufferuiv( var0, var1, var2 );
    }
    static void ColorMaski(
      GLuint var0,
      GLboolean var1,
      GLboolean var2,
      GLboolean var3,
      GLboolean var4
    ){
      FABRIC_OGL_TRACE( "glColorMaski( 0x%04X, %b, %b, %b, %b )",
        (unsigned)var0,
        (bool)var1,
        (bool)var2,
        (bool)var3,
        (bool)var4
      );
      ErrorReporter errorReporter( "glColorMaski" );
      glColorMaski( var0, var1, var2, var3, var4 );
    }
    static void Disablei(
      GLenum var0,
      GLuint var1
    ){
      FABRIC_OGL_TRACE( "glDisablei( %d, 0x%04X )",
        (int)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glDisablei" );
      glDisablei( var0, var1 );
    }
    static void Enablei(
      GLenum var0,
      GLuint var1
    ){
      FABRIC_OGL_TRACE( "glEnablei( %d, 0x%04X )",
        (int)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glEnablei" );
      glEnablei( var0, var1 );
    }
    static void EndConditionalRender()
    {
      FABRIC_OGL_TRACE( "glEndConditionalRender()" );
      ErrorReporter errorReporter( "glEndConditionalRender" );
      glEndConditionalRender();
    }
    static void EndTransformFeedback()
    {
      FABRIC_OGL_TRACE( "glEndTransformFeedback()" );
      ErrorReporter errorReporter( "glEndTransformFeedback" );
      glEndTransformFeedback();
    }
    static void GetBooleani_v(
      GLenum var0,
      GLuint var1,
      GLboolean* var2
    ){
      FABRIC_OGL_TRACE( "glGetBooleani_v( %d, 0x%04X, GLboolean* )",
        (int)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glGetBooleani_v" );
      glGetBooleani_v( var0, var1, var2 );
    }
    static GLint GetFragDataLocation(
      GLuint var0,
      void* var1
    ){
      FABRIC_OGL_TRACE( "glGetFragDataLocation( 0x%04X, char* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glGetFragDataLocation" );
      const GLchar* var1Str = (const GLchar*)stringDesc->getValueData( &var1 );
      GLint result = glGetFragDataLocation( var0, var1Str );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void GetTexParameterIiv(
      GLenum var0,
      GLenum var1,
      GLint* var2
    ){
      FABRIC_OGL_TRACE( "glGetTexParameterIiv( %d, %d, GLint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetTexParameterIiv" );
      glGetTexParameterIiv( var0, var1, var2 );
    }
    static void GetTexParameterIuiv(
      GLenum var0,
      GLenum var1,
      GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glGetTexParameterIuiv( %d, %d, GLuint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetTexParameterIuiv" );
      glGetTexParameterIuiv( var0, var1, var2 );
    }
    static void GetTransformFeedbackVarying(
      GLuint var0,
      GLuint var1,
      GLint* var2
    ){
      FABRIC_OGL_TRACE( "glGetTransformFeedbackVarying( 0x%04X, 0x%04X, GLint* )",
        (unsigned)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glGetTransformFeedbackVarying" );
      glGetTransformFeedbackVarying( var0, var1, var2 );
    }
    static void GetUniformuiv(
      GLuint var0,
      GLint var1,
      GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glGetUniformuiv( 0x%04X, %d, GLuint* )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetUniformuiv" );
      glGetUniformuiv( var0, var1, var2 );
    }
    static void GetVertexAttribIiv(
      GLuint var0,
      GLenum var1,
      GLint* var2
    ){
      FABRIC_OGL_TRACE( "glGetVertexAttribIiv( 0x%04X, %d, GLint* )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetVertexAttribIiv" );
      glGetVertexAttribIiv( var0, var1, var2 );
    }
    static void GetVertexAttribIuiv(
      GLuint var0,
      GLenum var1,
      GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glGetVertexAttribIuiv( 0x%04X, %d, GLuint* )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glGetVertexAttribIuiv" );
      glGetVertexAttribIuiv( var0, var1, var2 );
    }
    static GLboolean IsEnabledi(
      GLenum var0,
      GLuint var1
    ){
      FABRIC_OGL_TRACE( "glIsEnabledi( %d, 0x%04X )",
        (int)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glIsEnabledi" );
      GLboolean result = glIsEnabledi( var0, var1 );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void TexParameterIiv(
      GLenum var0,
      GLenum var1,
      const GLint* var2
    ){
      FABRIC_OGL_TRACE( "glTexParameterIiv( %d, %d, GLint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glTexParameterIiv" );
      glTexParameterIiv( var0, var1, var2 );
    }
    static void TexParameterIuiv(
      GLenum var0,
      GLenum var1,
      const GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glTexParameterIuiv( %d, %d, GLuint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glTexParameterIuiv" );
      glTexParameterIuiv( var0, var1, var2 );
    }
    static void TransformFeedbackVaryings(
      GLuint var0,
      GLsizei var1,
      void* var2,
      GLenum var3
    ){
      FABRIC_OGL_TRACE( "glTransformFeedbackVaryings( 0x%04X, %d, char*, %d )",
        (unsigned)var0,
        (int)var1,
        (int)var3
      );
      ErrorReporter errorReporter( "glTransformFeedbackVaryings" );
      const GLchar* var2Str = (const GLchar*)stringDesc->getValueData( &var2 );
      glTransformFeedbackVaryings( var0, var1, &var2Str, var3 );
    }
    static void Uniform1ui(
      GLint var0,
      GLuint var1
    ){
      FABRIC_OGL_TRACE( "glUniform1ui( %d, 0x%04X )",
        (int)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glUniform1ui" );
      glUniform1ui( var0, var1 );
    }
    static void Uniform1uiv(
      GLint var0,
      GLsizei var1,
      const GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glUniform1uiv( %d, %d, GLuint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glUniform1uiv" );
      glUniform1uiv( var0, var1, var2 );
    }
    static void Uniform2ui(
      GLint var0,
      GLuint var1,
      GLuint var2
    ){
      FABRIC_OGL_TRACE( "glUniform2ui( %d, 0x%04X, 0x%04X )",
        (int)var0,
        (unsigned)var1,
        (unsigned)var2
      );
      ErrorReporter errorReporter( "glUniform2ui" );
      glUniform2ui( var0, var1, var2 );
    }
    static void Uniform2uiv(
      GLint var0,
      GLsizei var1,
      const GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glUniform2uiv( %d, %d, GLuint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glUniform2uiv" );
      glUniform2uiv( var0, var1, var2 );
    }
    static void Uniform3ui(
      GLint var0,
      GLuint var1,
      GLuint var2,
      GLuint var3
    ){
      FABRIC_OGL_TRACE( "glUniform3ui( %d, 0x%04X, 0x%04X, 0x%04X )",
        (int)var0,
        (unsigned)var1,
        (unsigned)var2,
        (unsigned)var3
      );
      ErrorReporter errorReporter( "glUniform3ui" );
      glUniform3ui( var0, var1, var2, var3 );
    }
    static void Uniform3uiv(
      GLint var0,
      GLsizei var1,
      const GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glUniform3uiv( %d, %d, GLuint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glUniform3uiv" );
      glUniform3uiv( var0, var1, var2 );
    }
    static void Uniform4ui(
      GLint var0,
      GLuint var1,
      GLuint var2,
      GLuint var3,
      GLuint var4
    ){
      FABRIC_OGL_TRACE( "glUniform4ui( %d, 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (int)var0,
        (unsigned)var1,
        (unsigned)var2,
        (unsigned)var3,
        (unsigned)var4
      );
      ErrorReporter errorReporter( "glUniform4ui" );
      glUniform4ui( var0, var1, var2, var3, var4 );
    }
    static void Uniform4uiv(
      GLint var0,
      GLsizei var1,
      const GLuint* var2
    ){
      FABRIC_OGL_TRACE( "glUniform4uiv( %d, %d, GLuint* )",
        (int)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glUniform4uiv" );
      glUniform4uiv( var0, var1, var2 );
    }
    static void VertexAttribI1i(
      GLuint var0,
      GLint var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI1i( 0x%04X, %d )",
        (unsigned)var0,
        (int)var1
      );
      ErrorReporter errorReporter( "glVertexAttribI1i" );
      glVertexAttribI1i( var0, var1 );
    }
    static void VertexAttribI1iv(
      GLuint var0,
      const GLint* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI1iv( 0x%04X, GLint* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI1iv" );
      glVertexAttribI1iv( var0, var1 );
    }
    static void VertexAttribI1ui(
      GLuint var0,
      GLuint var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI1ui( 0x%04X, 0x%04X )",
        (unsigned)var0,
        (unsigned)var1
      );
      ErrorReporter errorReporter( "glVertexAttribI1ui" );
      glVertexAttribI1ui( var0, var1 );
    }
    static void VertexAttribI1uiv(
      GLuint var0,
      const GLuint* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI1uiv( 0x%04X, GLuint* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI1uiv" );
      glVertexAttribI1uiv( var0, var1 );
    }
    static void VertexAttribI2i(
      GLuint var0,
      GLint var1,
      GLint var2
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI2i( 0x%04X, %d, %d )",
        (unsigned)var0,
        (int)var1,
        (int)var2
      );
      ErrorReporter errorReporter( "glVertexAttribI2i" );
      glVertexAttribI2i( var0, var1, var2 );
    }
    static void VertexAttribI2iv(
      GLuint var0,
      const GLint* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI2iv( 0x%04X, GLint* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI2iv" );
      glVertexAttribI2iv( var0, var1 );
    }
    static void VertexAttribI2ui(
      GLuint var0,
      GLuint var1,
      GLuint var2
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI2ui( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)var0,
        (unsigned)var1,
        (unsigned)var2
      );
      ErrorReporter errorReporter( "glVertexAttribI2ui" );
      glVertexAttribI2ui( var0, var1, var2 );
    }
    static void VertexAttribI2uiv(
      GLuint var0,
      const GLuint* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI2uiv( 0x%04X, GLuint* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI2uiv" );
      glVertexAttribI2uiv( var0, var1 );
    }
    static void VertexAttribI3i(
      GLuint var0,
      GLint var1,
      GLint var2,
      GLint var3
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI3i( 0x%04X, %d, %d, %d )",
        (unsigned)var0,
        (int)var1,
        (int)var2,
        (int)var3
      );
      ErrorReporter errorReporter( "glVertexAttribI3i" );
      glVertexAttribI3i( var0, var1, var2, var3 );
    }
    static void VertexAttribI3iv(
      GLuint var0,
      const GLint* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI3iv( 0x%04X, GLint* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI3iv" );
      glVertexAttribI3iv( var0, var1 );
    }
    static void VertexAttribI3ui(
      GLuint var0,
      GLuint var1,
      GLuint var2,
      GLuint var3
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI3ui( 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)var0,
        (unsigned)var1,
        (unsigned)var2,
        (unsigned)var3
      );
      ErrorReporter errorReporter( "glVertexAttribI3ui" );
      glVertexAttribI3ui( var0, var1, var2, var3 );
    }
    static void VertexAttribI3uiv(
      GLuint var0,
      const GLuint* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI3uiv( 0x%04X, GLuint* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI3uiv" );
      glVertexAttribI3uiv( var0, var1 );
    }
    static void VertexAttribI4bv(
      GLuint var0,
      const GLbyte* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4bv( 0x%04X, GLbyte* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI4bv" );
      glVertexAttribI4bv( var0, var1 );
    }
    static void VertexAttribI4i(
      GLuint var0,
      GLint var1,
      GLint var2,
      GLint var3,
      GLint var4
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4i( 0x%04X, %d, %d, %d, %d )",
        (unsigned)var0,
        (int)var1,
        (int)var2,
        (int)var3,
        (int)var4
      );
      ErrorReporter errorReporter( "glVertexAttribI4i" );
      glVertexAttribI4i( var0, var1, var2, var3, var4 );
    }
    static void VertexAttribI4iv(
      GLuint var0,
      const GLint* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4iv( 0x%04X, GLint* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI4iv" );
      glVertexAttribI4iv( var0, var1 );
    }
    static void VertexAttribI4sv(
      GLuint var0,
      const GLshort* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4sv( 0x%04X, GLshort* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI4sv" );
      glVertexAttribI4sv( var0, var1 );
    }
    static void VertexAttribI4ubv(
      GLuint var0,
      const GLubyte* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4ubv( 0x%04X, GLubyte* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI4ubv" );
      glVertexAttribI4ubv( var0, var1 );
    }
    static void VertexAttribI4ui(
      GLuint var0,
      GLuint var1,
      GLuint var2,
      GLuint var3,
      GLuint var4
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4ui( 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)var0,
        (unsigned)var1,
        (unsigned)var2,
        (unsigned)var3,
        (unsigned)var4
      );
      ErrorReporter errorReporter( "glVertexAttribI4ui" );
      glVertexAttribI4ui( var0, var1, var2, var3, var4 );
    }
    static void VertexAttribI4uiv(
      GLuint var0,
      const GLuint* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4uiv( 0x%04X, GLuint* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI4uiv" );
      glVertexAttribI4uiv( var0, var1 );
    }
    static void VertexAttribI4usv(
      GLuint var0,
      const GLushort* var1
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4usv( 0x%04X, GLushort* )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glVertexAttribI4usv" );
      glVertexAttribI4usv( var0, var1 );
    }
    static void VertexAttribIPointer(
      GLuint var0,
      GLint var1,
      GLenum var2,
      GLsizei var3,
      const GLvoid* var4
    ){
      FABRIC_OGL_TRACE( "glVertexAttribIPointer( 0x%04X, %d, %d, %d, GLvoid* )",
        (unsigned)var0,
        (int)var1,
        (int)var2,
        (int)var3
      );
      ErrorReporter errorReporter( "glVertexAttribIPointer" );
      glVertexAttribIPointer( var0, var1, var2, var3, var4 );
    }
    static void DrawArraysInstanced(
      GLenum var0,
      GLint var1,
      GLsizei var2,
      GLsizei var3
    ){
      FABRIC_OGL_TRACE( "glDrawArraysInstanced( %d, %d, %d, %d )",
        (int)var0,
        (int)var1,
        (int)var2,
        (int)var3
      );
      ErrorReporter errorReporter( "glDrawArraysInstanced" );
      glDrawArraysInstanced( var0, var1, var2, var3 );
    }
    static void DrawElementsInstanced(
      GLenum var0,
      GLsizei var1,
      GLenum var2,
      const GLvoid* var3,
      GLsizei var4
    ){
      FABRIC_OGL_TRACE( "glDrawElementsInstanced( %d, %d, %d, GLvoid*, %d )",
        (int)var0,
        (int)var1,
        (int)var2,
        (int)var4
      );
      ErrorReporter errorReporter( "glDrawElementsInstanced" );
      glDrawElementsInstanced( var0, var1, var2, var3, var4 );
    }
    static void PrimitiveRestartIndex(
      GLuint var0
    ){
      FABRIC_OGL_TRACE( "glPrimitiveRestartIndex( 0x%04X )",
        (unsigned)var0
      );
      ErrorReporter errorReporter( "glPrimitiveRestartIndex" );
      glPrimitiveRestartIndex( var0 );
    }
    static void TexBuffer(
      GLenum var0,
      GLenum var1,
      GLuint var2
    ){
      FABRIC_OGL_TRACE( "glTexBuffer( %d, %d, 0x%04X )",
        (int)var0,
        (int)var1,
        (unsigned)var2
      );
      ErrorReporter errorReporter( "glTexBuffer" );
      glTexBuffer( var0, var1, var2 );
    }
    static void FramebufferTexture(
      GLenum var0,
      GLenum var1,
      GLuint var2,
      GLint var3
    ){
      FABRIC_OGL_TRACE( "glFramebufferTexture( %d, %d, 0x%04X, %d )",
        (int)var0,
        (int)var1,
        (unsigned)var2,
        (int)var3
      );
      ErrorReporter errorReporter( "glFramebufferTexture" );
      glFramebufferTexture( var0, var1, var2, var3 );
    }
    static void TbufferMask3DFX(
      GLuint mask
    ){
      FABRIC_OGL_TRACE( "glTbufferMask3DFX( 0x%04X )",
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glTbufferMask3DFX" );
      glTbufferMask3DFX( mask );
    }
    static void CopyBufferSubData(
      GLenum readtarget,
      GLenum writetarget,
      GLintptr readoffset,
      GLintptr writeoffset,
      GLsizeiptr size
    ){
      FABRIC_OGL_TRACE( "glCopyBufferSubData( %d, %d, %d, %d, %d )",
        (int)readtarget,
        (int)writetarget,
        (int)readoffset,
        (int)writeoffset,
        (int)size
      );
      ErrorReporter errorReporter( "glCopyBufferSubData" );
      glCopyBufferSubData( readtarget, writetarget, readoffset, writeoffset, size );
    }
    static void DrawElementsBaseVertex(
      GLenum mode,
      GLsizei count,
      GLenum type,
      void* indices,
      GLint basevertex
    ){
      FABRIC_OGL_TRACE( "glDrawElementsBaseVertex( %d, %d, %d, void*, %d )",
        (int)mode,
        (int)count,
        (int)type,
        (int)basevertex
      );
      ErrorReporter errorReporter( "glDrawElementsBaseVertex" );
      glDrawElementsBaseVertex( mode, count, type, indices, basevertex );
    }
    static void DrawElementsInstancedBaseVertex(
      GLenum mode,
      GLsizei count,
      GLenum type,
      const void* indices,
      GLsizei primcount,
      GLint basevertex
    ){
      FABRIC_OGL_TRACE( "glDrawElementsInstancedBaseVertex( %d, %d, %d, void*, %d, %d )",
        (int)mode,
        (int)count,
        (int)type,
        (int)primcount,
        (int)basevertex
      );
      ErrorReporter errorReporter( "glDrawElementsInstancedBaseVertex" );
      glDrawElementsInstancedBaseVertex( mode, count, type, indices, primcount, basevertex );
    }
    static void DrawRangeElementsBaseVertex(
      GLenum mode,
      GLuint start,
      GLuint end,
      GLsizei count,
      GLenum type,
      void* indices,
      GLint basevertex
    ){
      FABRIC_OGL_TRACE( "glDrawRangeElementsBaseVertex( %d, 0x%04X, 0x%04X, %d, %d, void*, %d )",
        (int)mode,
        (unsigned)start,
        (unsigned)end,
        (int)count,
        (int)type,
        (int)basevertex
      );
      ErrorReporter errorReporter( "glDrawRangeElementsBaseVertex" );
      glDrawRangeElementsBaseVertex( mode, start, end, count, type, indices, basevertex );
    }
    static void BindFramebuffer(
      GLenum target,
      GLuint framebuffer
    ){
      FABRIC_OGL_TRACE( "glBindFramebuffer( %d, 0x%04X )",
        (int)target,
        (unsigned)framebuffer
      );
      ErrorReporter errorReporter( "glBindFramebuffer" );
      glBindFramebuffer( target, framebuffer );
    }
    static void BindRenderbuffer(
      GLenum target,
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glBindRenderbuffer( %d, 0x%04X )",
        (int)target,
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glBindRenderbuffer" );
      glBindRenderbuffer( target, renderbuffer );
    }
    static void BlitFramebuffer(
      GLint srcX0,
      GLint srcY0,
      GLint srcX1,
      GLint srcY1,
      GLint dstX0,
      GLint dstY0,
      GLint dstX1,
      GLint dstY1,
      GLbitfield mask,
      GLenum filter
    ){
      FABRIC_OGL_TRACE( "glBlitFramebuffer( %d, %d, %d, %d, %d, %d, %d, %d, 0x%04X, %d )",
        (int)srcX0,
        (int)srcY0,
        (int)srcX1,
        (int)srcY1,
        (int)dstX0,
        (int)dstY0,
        (int)dstX1,
        (int)dstY1,
        (unsigned)mask,
        (int)filter
      );
      ErrorReporter errorReporter( "glBlitFramebuffer" );
      glBlitFramebuffer( srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter );
    }
    static GLenum CheckFramebufferStatus(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glCheckFramebufferStatus( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glCheckFramebufferStatus" );
      GLenum result = glCheckFramebufferStatus( target );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void DeleteFramebuffers(
      GLsizei n,
      const GLuint* framebuffers
    ){
      FABRIC_OGL_TRACE( "glDeleteFramebuffers( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteFramebuffers" );
      glDeleteFramebuffers( n, framebuffers );
    }
    static void DeleteRenderbuffers(
      GLsizei n,
      const GLuint* renderbuffers
    ){
      FABRIC_OGL_TRACE( "glDeleteRenderbuffers( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteRenderbuffers" );
      glDeleteRenderbuffers( n, renderbuffers );
    }
    static void FramebufferRenderbuffer(
      GLenum target,
      GLenum attachment,
      GLenum renderbuffertarget,
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glFramebufferRenderbuffer( %d, %d, %d, 0x%04X )",
        (int)target,
        (int)attachment,
        (int)renderbuffertarget,
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glFramebufferRenderbuffer" );
      glFramebufferRenderbuffer( target, attachment, renderbuffertarget, renderbuffer );
    }
    static void FramebufferTexture1D(
      GLenum target,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level
    ){
      FABRIC_OGL_TRACE( "glFramebufferTexture1D( %d, %d, %d, 0x%04X, %d )",
        (int)target,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level
      );
      ErrorReporter errorReporter( "glFramebufferTexture1D" );
      glFramebufferTexture1D( target, attachment, textarget, texture, level );
    }
    static void FramebufferTexture2D(
      GLenum target,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level
    ){
      FABRIC_OGL_TRACE( "glFramebufferTexture2D( %d, %d, %d, 0x%04X, %d )",
        (int)target,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level
      );
      ErrorReporter errorReporter( "glFramebufferTexture2D" );
      glFramebufferTexture2D( target, attachment, textarget, texture, level );
    }
    static void FramebufferTexture3D(
      GLenum target,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level,
      GLint layer
    ){
      FABRIC_OGL_TRACE( "glFramebufferTexture3D( %d, %d, %d, 0x%04X, %d, %d )",
        (int)target,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level,
        (int)layer
      );
      ErrorReporter errorReporter( "glFramebufferTexture3D" );
      glFramebufferTexture3D( target, attachment, textarget, texture, level, layer );
    }
    static void FramebufferTextureLayer(
      GLenum target,
      GLenum attachment,
      GLuint texture,
      GLint level,
      GLint layer
    ){
      FABRIC_OGL_TRACE( "glFramebufferTextureLayer( %d, %d, 0x%04X, %d, %d )",
        (int)target,
        (int)attachment,
        (unsigned)texture,
        (int)level,
        (int)layer
      );
      ErrorReporter errorReporter( "glFramebufferTextureLayer" );
      glFramebufferTextureLayer( target, attachment, texture, level, layer );
    }
    static void GenFramebuffers(
      GLsizei n,
      GLuint* framebuffers
    ){
      FABRIC_OGL_TRACE( "glGenFramebuffers( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenFramebuffers" );
      glGenFramebuffers( n, framebuffers );
    }
    static void GenRenderbuffers(
      GLsizei n,
      GLuint* renderbuffers
    ){
      FABRIC_OGL_TRACE( "glGenRenderbuffers( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenRenderbuffers" );
      glGenRenderbuffers( n, renderbuffers );
    }
    static void GenerateMipmap(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glGenerateMipmap( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glGenerateMipmap" );
      glGenerateMipmap( target );
    }
    static void GetFramebufferAttachmentParameteriv(
      GLenum target,
      GLenum attachment,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetFramebufferAttachmentParameteriv( %d, %d, %d, GLint* )",
        (int)target,
        (int)attachment,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetFramebufferAttachmentParameteriv" );
      glGetFramebufferAttachmentParameteriv( target, attachment, pname, params );
    }
    static void GetRenderbufferParameteriv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetRenderbufferParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetRenderbufferParameteriv" );
      glGetRenderbufferParameteriv( target, pname, params );
    }
    static GLboolean IsFramebuffer(
      GLuint framebuffer
    ){
      FABRIC_OGL_TRACE( "glIsFramebuffer( 0x%04X )",
        (unsigned)framebuffer
      );
      ErrorReporter errorReporter( "glIsFramebuffer" );
      GLboolean result = glIsFramebuffer( framebuffer );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLboolean IsRenderbuffer(
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glIsRenderbuffer( 0x%04X )",
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glIsRenderbuffer" );
      GLboolean result = glIsRenderbuffer( renderbuffer );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void RenderbufferStorage(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glRenderbufferStorage( %d, %d, %d, %d )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glRenderbufferStorage" );
      glRenderbufferStorage( target, internalformat, width, height );
    }
    static void RenderbufferStorageMultisample(
      GLenum target,
      GLsizei samples,
      GLenum internalformat,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glRenderbufferStorageMultisample( %d, %d, %d, %d, %d )",
        (int)target,
        (int)samples,
        (int)internalformat,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glRenderbufferStorageMultisample" );
      glRenderbufferStorageMultisample( target, samples, internalformat, width, height );
    }
    static void ColorSubTable(
      GLenum target,
      GLsizei start,
      GLsizei count,
      GLenum format,
      GLenum type,
      const GLvoid* data
    ){
      FABRIC_OGL_TRACE( "glColorSubTable( %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)start,
        (int)count,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glColorSubTable" );
      glColorSubTable( target, start, count, format, type, data );
    }
    static void ColorTable(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLenum format,
      GLenum type,
      const GLvoid* table
    ){
      FABRIC_OGL_TRACE( "glColorTable( %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glColorTable" );
      glColorTable( target, internalformat, width, format, type, table );
    }
    static void ColorTableParameterfv(
      GLenum target,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glColorTableParameterfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glColorTableParameterfv" );
      glColorTableParameterfv( target, pname, params );
    }
    static void ColorTableParameteriv(
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glColorTableParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glColorTableParameteriv" );
      glColorTableParameteriv( target, pname, params );
    }
    static void ConvolutionFilter1D(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLenum format,
      GLenum type,
      const GLvoid* image
    ){
      FABRIC_OGL_TRACE( "glConvolutionFilter1D( %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glConvolutionFilter1D" );
      glConvolutionFilter1D( target, internalformat, width, format, type, image );
    }
    static void ConvolutionFilter2D(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const GLvoid* image
    ){
      FABRIC_OGL_TRACE( "glConvolutionFilter2D( %d, %d, %d, %d, %d, %d, GLvoid* )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glConvolutionFilter2D" );
      glConvolutionFilter2D( target, internalformat, width, height, format, type, image );
    }
    static void ConvolutionParameterf(
      GLenum target,
      GLenum pname,
      GLfloat params
    ){
      FABRIC_OGL_TRACE( "glConvolutionParameterf( %d, %d, %f )",
        (int)target,
        (int)pname,
        (float)params
      );
      ErrorReporter errorReporter( "glConvolutionParameterf" );
      glConvolutionParameterf( target, pname, params );
    }
    static void ConvolutionParameterfv(
      GLenum target,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glConvolutionParameterfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glConvolutionParameterfv" );
      glConvolutionParameterfv( target, pname, params );
    }
    static void ConvolutionParameteri(
      GLenum target,
      GLenum pname,
      GLint params
    ){
      FABRIC_OGL_TRACE( "glConvolutionParameteri( %d, %d, %d )",
        (int)target,
        (int)pname,
        (int)params
      );
      ErrorReporter errorReporter( "glConvolutionParameteri" );
      glConvolutionParameteri( target, pname, params );
    }
    static void ConvolutionParameteriv(
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glConvolutionParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glConvolutionParameteriv" );
      glConvolutionParameteriv( target, pname, params );
    }
    static void CopyColorSubTable(
      GLenum target,
      GLsizei start,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyColorSubTable( %d, %d, %d, %d, %d )",
        (int)target,
        (int)start,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyColorSubTable" );
      glCopyColorSubTable( target, start, x, y, width );
    }
    static void CopyColorTable(
      GLenum target,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyColorTable( %d, %d, %d, %d, %d )",
        (int)target,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyColorTable" );
      glCopyColorTable( target, internalformat, x, y, width );
    }
    static void CopyConvolutionFilter1D(
      GLenum target,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyConvolutionFilter1D( %d, %d, %d, %d, %d )",
        (int)target,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyConvolutionFilter1D" );
      glCopyConvolutionFilter1D( target, internalformat, x, y, width );
    }
    static void CopyConvolutionFilter2D(
      GLenum target,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyConvolutionFilter2D( %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyConvolutionFilter2D" );
      glCopyConvolutionFilter2D( target, internalformat, x, y, width, height );
    }
    static void GetColorTable(
      GLenum target,
      GLenum format,
      GLenum type,
      GLvoid* table
    ){
      FABRIC_OGL_TRACE( "glGetColorTable( %d, %d, %d, GLvoid* )",
        (int)target,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetColorTable" );
      glGetColorTable( target, format, type, table );
    }
    static void GetColorTableParameterfv(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetColorTableParameterfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetColorTableParameterfv" );
      glGetColorTableParameterfv( target, pname, params );
    }
    static void GetColorTableParameteriv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetColorTableParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetColorTableParameteriv" );
      glGetColorTableParameteriv( target, pname, params );
    }
    static void GetConvolutionFilter(
      GLenum target,
      GLenum format,
      GLenum type,
      GLvoid* image
    ){
      FABRIC_OGL_TRACE( "glGetConvolutionFilter( %d, %d, %d, GLvoid* )",
        (int)target,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetConvolutionFilter" );
      glGetConvolutionFilter( target, format, type, image );
    }
    static void GetConvolutionParameterfv(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetConvolutionParameterfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetConvolutionParameterfv" );
      glGetConvolutionParameterfv( target, pname, params );
    }
    static void GetConvolutionParameteriv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetConvolutionParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetConvolutionParameteriv" );
      glGetConvolutionParameteriv( target, pname, params );
    }
    static void GetHistogram(
      GLenum target,
      GLboolean reset,
      GLenum format,
      GLenum type,
      GLvoid* values
    ){
      FABRIC_OGL_TRACE( "glGetHistogram( %d, %b, %d, %d, GLvoid* )",
        (int)target,
        (bool)reset,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetHistogram" );
      glGetHistogram( target, reset, format, type, values );
    }
    static void GetHistogramParameterfv(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetHistogramParameterfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetHistogramParameterfv" );
      glGetHistogramParameterfv( target, pname, params );
    }
    static void GetHistogramParameteriv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetHistogramParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetHistogramParameteriv" );
      glGetHistogramParameteriv( target, pname, params );
    }
    static void GetMinmax(
      GLenum target,
      GLboolean reset,
      GLenum format,
      GLenum types,
      GLvoid* values
    ){
      FABRIC_OGL_TRACE( "glGetMinmax( %d, %b, %d, %d, GLvoid* )",
        (int)target,
        (bool)reset,
        (int)format,
        (int)types
      );
      ErrorReporter errorReporter( "glGetMinmax" );
      glGetMinmax( target, reset, format, types, values );
    }
    static void GetMinmaxParameterfv(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetMinmaxParameterfv( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMinmaxParameterfv" );
      glGetMinmaxParameterfv( target, pname, params );
    }
    static void GetMinmaxParameteriv(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetMinmaxParameteriv( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMinmaxParameteriv" );
      glGetMinmaxParameteriv( target, pname, params );
    }
    static void GetSeparableFilter(
      GLenum target,
      GLenum format,
      GLenum type,
      GLvoid* row,
      GLvoid* column,
      GLvoid* span
    ){
      FABRIC_OGL_TRACE( "glGetSeparableFilter( %d, %d, %d, GLvoid*, GLvoid*, GLvoid* )",
        (int)target,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetSeparableFilter" );
      glGetSeparableFilter( target, format, type, row, column, span );
    }
    static void Histogram(
      GLenum target,
      GLsizei width,
      GLenum internalformat,
      GLboolean sink
    ){
      FABRIC_OGL_TRACE( "glHistogram( %d, %d, %d, %b )",
        (int)target,
        (int)width,
        (int)internalformat,
        (bool)sink
      );
      ErrorReporter errorReporter( "glHistogram" );
      glHistogram( target, width, internalformat, sink );
    }
    static void Minmax(
      GLenum target,
      GLenum internalformat,
      GLboolean sink
    ){
      FABRIC_OGL_TRACE( "glMinmax( %d, %d, %b )",
        (int)target,
        (int)internalformat,
        (bool)sink
      );
      ErrorReporter errorReporter( "glMinmax" );
      glMinmax( target, internalformat, sink );
    }
    static void ResetHistogram(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glResetHistogram( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glResetHistogram" );
      glResetHistogram( target );
    }
    static void ResetMinmax(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glResetMinmax( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glResetMinmax" );
      glResetMinmax( target );
    }
    static void SeparableFilter2D(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const GLvoid* row,
      const GLvoid* column
    ){
      FABRIC_OGL_TRACE( "glSeparableFilter2D( %d, %d, %d, %d, %d, %d, GLvoid*, GLvoid* )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glSeparableFilter2D" );
      glSeparableFilter2D( target, internalformat, width, height, format, type, row, column );
    }
    static void FlushMappedBufferRange(
      GLenum target,
      GLintptr offset,
      GLsizeiptr length
    ){
      FABRIC_OGL_TRACE( "glFlushMappedBufferRange( %d, %d, %d )",
        (int)target,
        (int)offset,
        (int)length
      );
      ErrorReporter errorReporter( "glFlushMappedBufferRange" );
      glFlushMappedBufferRange( target, offset, length );
    }
    static GLvoid MapBufferRange(
      GLenum target,
      GLintptr offset,
      GLsizeiptr length,
      GLbitfield access
    ){
      FABRIC_OGL_TRACE( "glMapBufferRange( %d, %d, %d, 0x%04X )",
        (int)target,
        (int)offset,
        (int)length,
        (unsigned)access
      );
      ErrorReporter errorReporter( "glMapBufferRange" );
      glMapBufferRange( target, offset, length, access );
    }
    static void ProvokingVertex(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glProvokingVertex( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glProvokingVertex" );
      glProvokingVertex( mode );
    }
    static void GetMultisamplefv(
      GLenum pname,
      GLuint index,
      GLfloat* val
    ){
      FABRIC_OGL_TRACE( "glGetMultisamplefv( %d, 0x%04X, GLfloat* )",
        (int)pname,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetMultisamplefv" );
      glGetMultisamplefv( pname, index, val );
    }
    static void SampleMaski(
      GLuint index,
      GLbitfield mask
    ){
      FABRIC_OGL_TRACE( "glSampleMaski( 0x%04X, 0x%04X )",
        (unsigned)index,
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glSampleMaski" );
      glSampleMaski( index, mask );
    }
    static void TexImage2DMultisample(
      GLenum target,
      GLsizei samples,
      GLint internalformat,
      GLsizei width,
      GLsizei height,
      GLboolean fixedsamplelocations
    ){
      FABRIC_OGL_TRACE( "glTexImage2DMultisample( %d, %d, %d, %d, %d, %b )",
        (int)target,
        (int)samples,
        (int)internalformat,
        (int)width,
        (int)height,
        (bool)fixedsamplelocations
      );
      ErrorReporter errorReporter( "glTexImage2DMultisample" );
      glTexImage2DMultisample( target, samples, internalformat, width, height, fixedsamplelocations );
    }
    static void TexImage3DMultisample(
      GLenum target,
      GLsizei samples,
      GLint internalformat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLboolean fixedsamplelocations
    ){
      FABRIC_OGL_TRACE( "glTexImage3DMultisample( %d, %d, %d, %d, %d, %d, %b )",
        (int)target,
        (int)samples,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)depth,
        (bool)fixedsamplelocations
      );
      ErrorReporter errorReporter( "glTexImage3DMultisample" );
      glTexImage3DMultisample( target, samples, internalformat, width, height, depth, fixedsamplelocations );
    }
    static void BindBufferBase(
      GLenum target,
      GLuint index,
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glBindBufferBase( %d, 0x%04X, 0x%04X )",
        (int)target,
        (unsigned)index,
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glBindBufferBase" );
      glBindBufferBase( target, index, buffer );
    }
    static void BindBufferRange(
      GLenum target,
      GLuint index,
      GLuint buffer,
      GLintptr offset,
      GLsizeiptr size
    ){
      FABRIC_OGL_TRACE( "glBindBufferRange( %d, 0x%04X, 0x%04X, %d, %d )",
        (int)target,
        (unsigned)index,
        (unsigned)buffer,
        (int)offset,
        (int)size
      );
      ErrorReporter errorReporter( "glBindBufferRange" );
      glBindBufferRange( target, index, buffer, offset, size );
    }
    static void GetActiveUniformBlockName(
      GLuint program,
      GLuint uniformBlockIndex,
      GLsizei bufSize,
      GLsizei* length,
      void* uniformBlockName
    ){
      FABRIC_OGL_TRACE( "glGetActiveUniformBlockName( 0x%04X, 0x%04X, %d, GLsizei*, char* )",
        (unsigned)program,
        (unsigned)uniformBlockIndex,
        (int)bufSize
      );
      ErrorReporter errorReporter( "glGetActiveUniformBlockName" );
      char * uniformBlockNameStr = new char[1024];
      glGetActiveUniformBlockName( program, uniformBlockIndex, bufSize, length, uniformBlockNameStr );
      stringDesc->setValue( uniformBlockNameStr, strlen(uniformBlockNameStr), uniformBlockName );
      delete( uniformBlockNameStr );
    }
    static void GetActiveUniformBlockiv(
      GLuint program,
      GLuint uniformBlockIndex,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetActiveUniformBlockiv( 0x%04X, 0x%04X, %d, GLint* )",
        (unsigned)program,
        (unsigned)uniformBlockIndex,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetActiveUniformBlockiv" );
      glGetActiveUniformBlockiv( program, uniformBlockIndex, pname, params );
    }
    static void GetActiveUniformName(
      GLuint program,
      GLuint uniformIndex,
      GLsizei bufSize,
      GLsizei* length,
      void* uniformName
    ){
      FABRIC_OGL_TRACE( "glGetActiveUniformName( 0x%04X, 0x%04X, %d, GLsizei*, char* )",
        (unsigned)program,
        (unsigned)uniformIndex,
        (int)bufSize
      );
      ErrorReporter errorReporter( "glGetActiveUniformName" );
      char * uniformNameStr = new char[1024];
      glGetActiveUniformName( program, uniformIndex, bufSize, length, uniformNameStr );
      stringDesc->setValue( uniformNameStr, strlen(uniformNameStr), uniformName );
      delete( uniformNameStr );
    }
    static void GetActiveUniformsiv(
      GLuint program,
      GLsizei uniformCount,
      const GLuint* uniformIndices,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetActiveUniformsiv( 0x%04X, %d, GLuint*, %d, GLint* )",
        (unsigned)program,
        (int)uniformCount,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetActiveUniformsiv" );
      glGetActiveUniformsiv( program, uniformCount, uniformIndices, pname, params );
    }
    static void GetIntegeri_v(
      GLenum target,
      GLuint index,
      GLint* data
    ){
      FABRIC_OGL_TRACE( "glGetIntegeri_v( %d, 0x%04X, GLint* )",
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetIntegeri_v" );
      glGetIntegeri_v( target, index, data );
    }
    static GLuint GetUniformBlockIndex(
      GLuint program,
      void* uniformBlockName
    ){
      FABRIC_OGL_TRACE( "glGetUniformBlockIndex( 0x%04X, char* )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glGetUniformBlockIndex" );
      const char* uniformBlockNameStr = (const char*)stringDesc->getValueData( &uniformBlockName );
      GLuint result = glGetUniformBlockIndex( program, uniformBlockNameStr );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static void GetUniformIndices(
      GLuint program,
      GLsizei uniformCount,
      void* uniformNames,
      GLuint* uniformIndices
    ){
      FABRIC_OGL_TRACE( "glGetUniformIndices( 0x%04X, %d, char*, GLuint* )",
        (unsigned)program,
        (int)uniformCount
      );
      ErrorReporter errorReporter( "glGetUniformIndices" );
      const char* uniformNamesStr = (const char*)stringDesc->getValueData( &uniformNames );
      glGetUniformIndices( program, uniformCount, &uniformNamesStr, uniformIndices );
    }
    static void UniformBlockBinding(
      GLuint program,
      GLuint uniformBlockIndex,
      GLuint uniformBlockBinding
    ){
      FABRIC_OGL_TRACE( "glUniformBlockBinding( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)program,
        (unsigned)uniformBlockIndex,
        (unsigned)uniformBlockBinding
      );
      ErrorReporter errorReporter( "glUniformBlockBinding" );
      glUniformBlockBinding( program, uniformBlockIndex, uniformBlockBinding );
    }
    static void BindVertexArray(
      GLuint array
    ){
      FABRIC_OGL_TRACE( "glBindVertexArray( 0x%04X )",
        (unsigned)array
      );
      ErrorReporter errorReporter( "glBindVertexArray" );
      glBindVertexArray( array );
    }
    static void DeleteVertexArrays(
      GLsizei n,
      const GLuint* arrays
    ){
      FABRIC_OGL_TRACE( "glDeleteVertexArrays( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteVertexArrays" );
      glDeleteVertexArrays( n, arrays );
    }
    static void GenVertexArrays(
      GLsizei n,
      GLuint* arrays
    ){
      FABRIC_OGL_TRACE( "glGenVertexArrays( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenVertexArrays" );
      glGenVertexArrays( n, arrays );
    }
    static GLboolean IsVertexArray(
      GLuint array
    ){
      FABRIC_OGL_TRACE( "glIsVertexArray( 0x%04X )",
        (unsigned)array
      );
      ErrorReporter errorReporter( "glIsVertexArray" );
      GLboolean result = glIsVertexArray( array );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLint GetUniformBufferSizeEXT(
      GLuint program,
      GLint location
    ){
      FABRIC_OGL_TRACE( "glGetUniformBufferSizeEXT( 0x%04X, %d )",
        (unsigned)program,
        (int)location
      );
      ErrorReporter errorReporter( "glGetUniformBufferSizeEXT" );
      GLint result = glGetUniformBufferSizeEXT( program, location );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLintptr GetUniformOffsetEXT(
      GLuint program,
      GLint location
    ){
      FABRIC_OGL_TRACE( "glGetUniformOffsetEXT( 0x%04X, %d )",
        (unsigned)program,
        (int)location
      );
      ErrorReporter errorReporter( "glGetUniformOffsetEXT" );
      GLintptr result = glGetUniformOffsetEXT( program, location );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void UniformBufferEXT(
      GLuint program,
      GLint location,
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glUniformBufferEXT( 0x%04X, %d, 0x%04X )",
        (unsigned)program,
        (int)location,
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glUniformBufferEXT" );
      glUniformBufferEXT( program, location, buffer );
    }
    static void BlendColorEXT(
      GLclampf red,
      GLclampf green,
      GLclampf blue,
      GLclampf alpha
    ){
      FABRIC_OGL_TRACE( "glBlendColorEXT( %f, %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue,
        (float)alpha
      );
      ErrorReporter errorReporter( "glBlendColorEXT" );
      glBlendColorEXT( red, green, blue, alpha );
    }
    static void BlendEquationSeparateEXT(
      GLenum modeRGB,
      GLenum modeAlpha
    ){
      FABRIC_OGL_TRACE( "glBlendEquationSeparateEXT( %d, %d )",
        (int)modeRGB,
        (int)modeAlpha
      );
      ErrorReporter errorReporter( "glBlendEquationSeparateEXT" );
      glBlendEquationSeparateEXT( modeRGB, modeAlpha );
    }
    static void BlendFuncSeparateEXT(
      GLenum sfactorRGB,
      GLenum dfactorRGB,
      GLenum sfactorAlpha,
      GLenum dfactorAlpha
    ){
      FABRIC_OGL_TRACE( "glBlendFuncSeparateEXT( %d, %d, %d, %d )",
        (int)sfactorRGB,
        (int)dfactorRGB,
        (int)sfactorAlpha,
        (int)dfactorAlpha
      );
      ErrorReporter errorReporter( "glBlendFuncSeparateEXT" );
      glBlendFuncSeparateEXT( sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha );
    }
    static void BlendEquationEXT(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glBlendEquationEXT( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glBlendEquationEXT" );
      glBlendEquationEXT( mode );
    }
    static void ColorSubTableEXT(
      GLenum target,
      GLsizei start,
      GLsizei count,
      GLenum format,
      GLenum type,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glColorSubTableEXT( %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)start,
        (int)count,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glColorSubTableEXT" );
      glColorSubTableEXT( target, start, count, format, type, data );
    }
    static void CopyColorSubTableEXT(
      GLenum target,
      GLsizei start,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyColorSubTableEXT( %d, %d, %d, %d, %d )",
        (int)target,
        (int)start,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyColorSubTableEXT" );
      glCopyColorSubTableEXT( target, start, x, y, width );
    }
    static void LockArraysEXT(
      GLint first,
      GLsizei count
    ){
      FABRIC_OGL_TRACE( "glLockArraysEXT( %d, %d )",
        (int)first,
        (int)count
      );
      ErrorReporter errorReporter( "glLockArraysEXT" );
      glLockArraysEXT( first, count );
    }
    static void UnlockArraysEXT()
    {
      FABRIC_OGL_TRACE( "glUnlockArraysEXT()" );
      ErrorReporter errorReporter( "glUnlockArraysEXT" );
      glUnlockArraysEXT();
    }
    static void ConvolutionFilter1DEXT(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLenum format,
      GLenum type,
      const void* image
    ){
      FABRIC_OGL_TRACE( "glConvolutionFilter1DEXT( %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glConvolutionFilter1DEXT" );
      glConvolutionFilter1DEXT( target, internalformat, width, format, type, image );
    }
    static void ConvolutionFilter2DEXT(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const void* image
    ){
      FABRIC_OGL_TRACE( "glConvolutionFilter2DEXT( %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glConvolutionFilter2DEXT" );
      glConvolutionFilter2DEXT( target, internalformat, width, height, format, type, image );
    }
    static void ConvolutionParameterfEXT(
      GLenum target,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glConvolutionParameterfEXT( %d, %d, %f )",
        (int)target,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glConvolutionParameterfEXT" );
      glConvolutionParameterfEXT( target, pname, param );
    }
    static void ConvolutionParameterfvEXT(
      GLenum target,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glConvolutionParameterfvEXT( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glConvolutionParameterfvEXT" );
      glConvolutionParameterfvEXT( target, pname, params );
    }
    static void ConvolutionParameteriEXT(
      GLenum target,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glConvolutionParameteriEXT( %d, %d, %d )",
        (int)target,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glConvolutionParameteriEXT" );
      glConvolutionParameteriEXT( target, pname, param );
    }
    static void ConvolutionParameterivEXT(
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glConvolutionParameterivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glConvolutionParameterivEXT" );
      glConvolutionParameterivEXT( target, pname, params );
    }
    static void CopyConvolutionFilter1DEXT(
      GLenum target,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyConvolutionFilter1DEXT( %d, %d, %d, %d, %d )",
        (int)target,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyConvolutionFilter1DEXT" );
      glCopyConvolutionFilter1DEXT( target, internalformat, x, y, width );
    }
    static void CopyConvolutionFilter2DEXT(
      GLenum target,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyConvolutionFilter2DEXT( %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyConvolutionFilter2DEXT" );
      glCopyConvolutionFilter2DEXT( target, internalformat, x, y, width, height );
    }
    static void GetConvolutionFilterEXT(
      GLenum target,
      GLenum format,
      GLenum type,
      void* image
    ){
      FABRIC_OGL_TRACE( "glGetConvolutionFilterEXT( %d, %d, %d, void* )",
        (int)target,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetConvolutionFilterEXT" );
      glGetConvolutionFilterEXT( target, format, type, image );
    }
    static void GetConvolutionParameterfvEXT(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetConvolutionParameterfvEXT( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetConvolutionParameterfvEXT" );
      glGetConvolutionParameterfvEXT( target, pname, params );
    }
    static void GetConvolutionParameterivEXT(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetConvolutionParameterivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetConvolutionParameterivEXT" );
      glGetConvolutionParameterivEXT( target, pname, params );
    }
    static void GetSeparableFilterEXT(
      GLenum target,
      GLenum format,
      GLenum type,
      void* row,
      void* column,
      void* span
    ){
      FABRIC_OGL_TRACE( "glGetSeparableFilterEXT( %d, %d, %d, void*, void*, void* )",
        (int)target,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetSeparableFilterEXT" );
      glGetSeparableFilterEXT( target, format, type, row, column, span );
    }
    static void SeparableFilter2DEXT(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const void* row,
      const void* column
    ){
      FABRIC_OGL_TRACE( "glSeparableFilter2DEXT( %d, %d, %d, %d, %d, %d, void*, void* )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glSeparableFilter2DEXT" );
      glSeparableFilter2DEXT( target, internalformat, width, height, format, type, row, column );
    }
    static void BinormalPointerEXT(
      GLenum type,
      GLsizei stride,
      void* pointer
    ){
      FABRIC_OGL_TRACE( "glBinormalPointerEXT( %d, %d, void* )",
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glBinormalPointerEXT" );
      glBinormalPointerEXT( type, stride, pointer );
    }
    static void TangentPointerEXT(
      GLenum type,
      GLsizei stride,
      void* pointer
    ){
      FABRIC_OGL_TRACE( "glTangentPointerEXT( %d, %d, void* )",
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glTangentPointerEXT" );
      glTangentPointerEXT( type, stride, pointer );
    }
    static void CopyTexImage1DEXT(
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width,
      GLint border
    ){
      FABRIC_OGL_TRACE( "glCopyTexImage1DEXT( %d, %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width,
        (int)border
      );
      ErrorReporter errorReporter( "glCopyTexImage1DEXT" );
      glCopyTexImage1DEXT( target, level, internalformat, x, y, width, border );
    }
    static void CopyTexImage2DEXT(
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height,
      GLint border
    ){
      FABRIC_OGL_TRACE( "glCopyTexImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width,
        (int)height,
        (int)border
      );
      ErrorReporter errorReporter( "glCopyTexImage2DEXT" );
      glCopyTexImage2DEXT( target, level, internalformat, x, y, width, height, border );
    }
    static void CopyTexSubImage1DEXT(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyTexSubImage1DEXT( %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyTexSubImage1DEXT" );
      glCopyTexSubImage1DEXT( target, level, xoffset, x, y, width );
    }
    static void CopyTexSubImage2DEXT(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyTexSubImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyTexSubImage2DEXT" );
      glCopyTexSubImage2DEXT( target, level, xoffset, yoffset, x, y, width, height );
    }
    static void CopyTexSubImage3DEXT(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyTexSubImage3DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyTexSubImage3DEXT" );
      glCopyTexSubImage3DEXT( target, level, xoffset, yoffset, zoffset, x, y, width, height );
    }
    static void CullParameterdvEXT(
      GLenum pname,
      GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glCullParameterdvEXT( %d, GLdouble* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glCullParameterdvEXT" );
      glCullParameterdvEXT( pname, params );
    }
    static void CullParameterfvEXT(
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glCullParameterfvEXT( %d, GLfloat* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glCullParameterfvEXT" );
      glCullParameterfvEXT( pname, params );
    }
    static void DepthBoundsEXT(
      GLclampd zmin,
      GLclampd zmax
    ){
      FABRIC_OGL_TRACE( "glDepthBoundsEXT( %f, %f )",
        (float)zmin,
        (float)zmax
      );
      ErrorReporter errorReporter( "glDepthBoundsEXT" );
      glDepthBoundsEXT( zmin, zmax );
    }
    static void BindMultiTextureEXT(
      GLenum texunit,
      GLenum target,
      GLuint texture
    ){
      FABRIC_OGL_TRACE( "glBindMultiTextureEXT( %d, %d, 0x%04X )",
        (int)texunit,
        (int)target,
        (unsigned)texture
      );
      ErrorReporter errorReporter( "glBindMultiTextureEXT" );
      glBindMultiTextureEXT( texunit, target, texture );
    }
    static GLenum CheckNamedFramebufferStatusEXT(
      GLuint framebuffer,
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glCheckNamedFramebufferStatusEXT( 0x%04X, %d )",
        (unsigned)framebuffer,
        (int)target
      );
      ErrorReporter errorReporter( "glCheckNamedFramebufferStatusEXT" );
      GLenum result = glCheckNamedFramebufferStatusEXT( framebuffer, target );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void ClientAttribDefaultEXT(
      GLbitfield mask
    ){
      FABRIC_OGL_TRACE( "glClientAttribDefaultEXT( 0x%04X )",
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glClientAttribDefaultEXT" );
      glClientAttribDefaultEXT( mask );
    }
    static void CompressedMultiTexImage1DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLint border,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedMultiTexImage1DEXT( %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedMultiTexImage1DEXT" );
      glCompressedMultiTexImage1DEXT( texunit, target, level, internalformat, width, border, imageSize, data );
    }
    static void CompressedMultiTexImage2DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLint border,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedMultiTexImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedMultiTexImage2DEXT" );
      glCompressedMultiTexImage2DEXT( texunit, target, level, internalformat, width, height, border, imageSize, data );
    }
    static void CompressedMultiTexImage3DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLint border,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedMultiTexImage3DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)depth,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedMultiTexImage3DEXT" );
      glCompressedMultiTexImage3DEXT( texunit, target, level, internalformat, width, height, depth, border, imageSize, data );
    }
    static void CompressedMultiTexSubImage1DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLsizei width,
      GLenum format,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedMultiTexSubImage1DEXT( %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)width,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedMultiTexSubImage1DEXT" );
      glCompressedMultiTexSubImage1DEXT( texunit, target, level, xoffset, width, format, imageSize, data );
    }
    static void CompressedMultiTexSubImage2DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedMultiTexSubImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)width,
        (int)height,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedMultiTexSubImage2DEXT" );
      glCompressedMultiTexSubImage2DEXT( texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data );
    }
    static void CompressedMultiTexSubImage3DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedMultiTexSubImage3DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedMultiTexSubImage3DEXT" );
      glCompressedMultiTexSubImage3DEXT( texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
    }
    static void CompressedTextureImage1DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLint border,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTextureImage1DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTextureImage1DEXT" );
      glCompressedTextureImage1DEXT( texture, target, level, internalformat, width, border, imageSize, data );
    }
    static void CompressedTextureImage2DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLint border,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTextureImage2DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTextureImage2DEXT" );
      glCompressedTextureImage2DEXT( texture, target, level, internalformat, width, height, border, imageSize, data );
    }
    static void CompressedTextureImage3DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLint border,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTextureImage3DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)depth,
        (int)border,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTextureImage3DEXT" );
      glCompressedTextureImage3DEXT( texture, target, level, internalformat, width, height, depth, border, imageSize, data );
    }
    static void CompressedTextureSubImage1DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLsizei width,
      GLenum format,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTextureSubImage1DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)width,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTextureSubImage1DEXT" );
      glCompressedTextureSubImage1DEXT( texture, target, level, xoffset, width, format, imageSize, data );
    }
    static void CompressedTextureSubImage2DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTextureSubImage2DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)width,
        (int)height,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTextureSubImage2DEXT" );
      glCompressedTextureSubImage2DEXT( texture, target, level, xoffset, yoffset, width, height, format, imageSize, data );
    }
    static void CompressedTextureSubImage3DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLsizei imageSize,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glCompressedTextureSubImage3DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)imageSize
      );
      ErrorReporter errorReporter( "glCompressedTextureSubImage3DEXT" );
      glCompressedTextureSubImage3DEXT( texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
    }
    static void CopyMultiTexImage1DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width,
      GLint border
    ){
      FABRIC_OGL_TRACE( "glCopyMultiTexImage1DEXT( %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width,
        (int)border
      );
      ErrorReporter errorReporter( "glCopyMultiTexImage1DEXT" );
      glCopyMultiTexImage1DEXT( texunit, target, level, internalformat, x, y, width, border );
    }
    static void CopyMultiTexImage2DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height,
      GLint border
    ){
      FABRIC_OGL_TRACE( "glCopyMultiTexImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width,
        (int)height,
        (int)border
      );
      ErrorReporter errorReporter( "glCopyMultiTexImage2DEXT" );
      glCopyMultiTexImage2DEXT( texunit, target, level, internalformat, x, y, width, height, border );
    }
    static void CopyMultiTexSubImage1DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyMultiTexSubImage1DEXT( %d, %d, %d, %d, %d, %d, %d )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyMultiTexSubImage1DEXT" );
      glCopyMultiTexSubImage1DEXT( texunit, target, level, xoffset, x, y, width );
    }
    static void CopyMultiTexSubImage2DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyMultiTexSubImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyMultiTexSubImage2DEXT" );
      glCopyMultiTexSubImage2DEXT( texunit, target, level, xoffset, yoffset, x, y, width, height );
    }
    static void CopyMultiTexSubImage3DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyMultiTexSubImage3DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, %d )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyMultiTexSubImage3DEXT" );
      glCopyMultiTexSubImage3DEXT( texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height );
    }
    static void CopyTextureImage1DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width,
      GLint border
    ){
      FABRIC_OGL_TRACE( "glCopyTextureImage1DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width,
        (int)border
      );
      ErrorReporter errorReporter( "glCopyTextureImage1DEXT" );
      glCopyTextureImage1DEXT( texture, target, level, internalformat, x, y, width, border );
    }
    static void CopyTextureImage2DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height,
      GLint border
    ){
      FABRIC_OGL_TRACE( "glCopyTextureImage2DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)x,
        (int)y,
        (int)width,
        (int)height,
        (int)border
      );
      ErrorReporter errorReporter( "glCopyTextureImage2DEXT" );
      glCopyTextureImage2DEXT( texture, target, level, internalformat, x, y, width, height, border );
    }
    static void CopyTextureSubImage1DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint x,
      GLint y,
      GLsizei width
    ){
      FABRIC_OGL_TRACE( "glCopyTextureSubImage1DEXT( 0x%04X, %d, %d, %d, %d, %d, %d )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)x,
        (int)y,
        (int)width
      );
      ErrorReporter errorReporter( "glCopyTextureSubImage1DEXT" );
      glCopyTextureSubImage1DEXT( texture, target, level, xoffset, x, y, width );
    }
    static void CopyTextureSubImage2DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyTextureSubImage2DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyTextureSubImage2DEXT" );
      glCopyTextureSubImage2DEXT( texture, target, level, xoffset, yoffset, x, y, width, height );
    }
    static void CopyTextureSubImage3DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glCopyTextureSubImage3DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d, %d )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glCopyTextureSubImage3DEXT" );
      glCopyTextureSubImage3DEXT( texture, target, level, xoffset, yoffset, zoffset, x, y, width, height );
    }
    static void DisableClientStateIndexedEXT(
      GLenum array,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glDisableClientStateIndexedEXT( %d, 0x%04X )",
        (int)array,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glDisableClientStateIndexedEXT" );
      glDisableClientStateIndexedEXT( array, index );
    }
    static void DisableClientStateiEXT(
      GLenum array,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glDisableClientStateiEXT( %d, 0x%04X )",
        (int)array,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glDisableClientStateiEXT" );
      glDisableClientStateiEXT( array, index );
    }
    static void DisableVertexArrayAttribEXT(
      GLuint vaobj,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glDisableVertexArrayAttribEXT( 0x%04X, 0x%04X )",
        (unsigned)vaobj,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glDisableVertexArrayAttribEXT" );
      glDisableVertexArrayAttribEXT( vaobj, index );
    }
    static void DisableVertexArrayEXT(
      GLuint vaobj,
      GLenum array
    ){
      FABRIC_OGL_TRACE( "glDisableVertexArrayEXT( 0x%04X, %d )",
        (unsigned)vaobj,
        (int)array
      );
      ErrorReporter errorReporter( "glDisableVertexArrayEXT" );
      glDisableVertexArrayEXT( vaobj, array );
    }
    static void EnableClientStateIndexedEXT(
      GLenum array,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glEnableClientStateIndexedEXT( %d, 0x%04X )",
        (int)array,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glEnableClientStateIndexedEXT" );
      glEnableClientStateIndexedEXT( array, index );
    }
    static void EnableClientStateiEXT(
      GLenum array,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glEnableClientStateiEXT( %d, 0x%04X )",
        (int)array,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glEnableClientStateiEXT" );
      glEnableClientStateiEXT( array, index );
    }
    static void EnableVertexArrayAttribEXT(
      GLuint vaobj,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glEnableVertexArrayAttribEXT( 0x%04X, 0x%04X )",
        (unsigned)vaobj,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glEnableVertexArrayAttribEXT" );
      glEnableVertexArrayAttribEXT( vaobj, index );
    }
    static void EnableVertexArrayEXT(
      GLuint vaobj,
      GLenum array
    ){
      FABRIC_OGL_TRACE( "glEnableVertexArrayEXT( 0x%04X, %d )",
        (unsigned)vaobj,
        (int)array
      );
      ErrorReporter errorReporter( "glEnableVertexArrayEXT" );
      glEnableVertexArrayEXT( vaobj, array );
    }
    static void FlushMappedNamedBufferRangeEXT(
      GLuint buffer,
      GLintptr offset,
      GLsizeiptr length
    ){
      FABRIC_OGL_TRACE( "glFlushMappedNamedBufferRangeEXT( 0x%04X, %d, %d )",
        (unsigned)buffer,
        (int)offset,
        (int)length
      );
      ErrorReporter errorReporter( "glFlushMappedNamedBufferRangeEXT" );
      glFlushMappedNamedBufferRangeEXT( buffer, offset, length );
    }
    static void FramebufferDrawBufferEXT(
      GLuint framebuffer,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glFramebufferDrawBufferEXT( 0x%04X, %d )",
        (unsigned)framebuffer,
        (int)mode
      );
      ErrorReporter errorReporter( "glFramebufferDrawBufferEXT" );
      glFramebufferDrawBufferEXT( framebuffer, mode );
    }
    static void FramebufferDrawBuffersEXT(
      GLuint framebuffer,
      GLsizei n,
      const GLenum* bufs
    ){
      FABRIC_OGL_TRACE( "glFramebufferDrawBuffersEXT( 0x%04X, %d, GLenum* )",
        (unsigned)framebuffer,
        (int)n
      );
      ErrorReporter errorReporter( "glFramebufferDrawBuffersEXT" );
      glFramebufferDrawBuffersEXT( framebuffer, n, bufs );
    }
    static void FramebufferReadBufferEXT(
      GLuint framebuffer,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glFramebufferReadBufferEXT( 0x%04X, %d )",
        (unsigned)framebuffer,
        (int)mode
      );
      ErrorReporter errorReporter( "glFramebufferReadBufferEXT" );
      glFramebufferReadBufferEXT( framebuffer, mode );
    }
    static void GenerateMultiTexMipmapEXT(
      GLenum texunit,
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glGenerateMultiTexMipmapEXT( %d, %d )",
        (int)texunit,
        (int)target
      );
      ErrorReporter errorReporter( "glGenerateMultiTexMipmapEXT" );
      glGenerateMultiTexMipmapEXT( texunit, target );
    }
    static void GenerateTextureMipmapEXT(
      GLuint texture,
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glGenerateTextureMipmapEXT( 0x%04X, %d )",
        (unsigned)texture,
        (int)target
      );
      ErrorReporter errorReporter( "glGenerateTextureMipmapEXT" );
      glGenerateTextureMipmapEXT( texture, target );
    }
    static void GetCompressedMultiTexImageEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      void* img
    ){
      FABRIC_OGL_TRACE( "glGetCompressedMultiTexImageEXT( %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level
      );
      ErrorReporter errorReporter( "glGetCompressedMultiTexImageEXT" );
      glGetCompressedMultiTexImageEXT( texunit, target, level, img );
    }
    static void GetCompressedTextureImageEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      void* img
    ){
      FABRIC_OGL_TRACE( "glGetCompressedTextureImageEXT( 0x%04X, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level
      );
      ErrorReporter errorReporter( "glGetCompressedTextureImageEXT" );
      glGetCompressedTextureImageEXT( texture, target, level, img );
    }
    static void GetDoubleIndexedvEXT(
      GLenum target,
      GLuint index,
      GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glGetDoubleIndexedvEXT( %d, 0x%04X, GLdouble* )",
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetDoubleIndexedvEXT" );
      glGetDoubleIndexedvEXT( target, index, params );
    }
    static void GetDoublei_vEXT(
      GLenum pname,
      GLuint index,
      GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glGetDoublei_vEXT( %d, 0x%04X, GLdouble* )",
        (int)pname,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetDoublei_vEXT" );
      glGetDoublei_vEXT( pname, index, params );
    }
    static void GetFloatIndexedvEXT(
      GLenum target,
      GLuint index,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetFloatIndexedvEXT( %d, 0x%04X, GLfloat* )",
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetFloatIndexedvEXT" );
      glGetFloatIndexedvEXT( target, index, params );
    }
    static void GetFloati_vEXT(
      GLenum pname,
      GLuint index,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetFloati_vEXT( %d, 0x%04X, GLfloat* )",
        (int)pname,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetFloati_vEXT" );
      glGetFloati_vEXT( pname, index, params );
    }
    static void GetFramebufferParameterivEXT(
      GLuint framebuffer,
      GLenum pname,
      GLint* param
    ){
      FABRIC_OGL_TRACE( "glGetFramebufferParameterivEXT( 0x%04X, %d, GLint* )",
        (unsigned)framebuffer,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetFramebufferParameterivEXT" );
      glGetFramebufferParameterivEXT( framebuffer, pname, param );
    }
    static void GetMultiTexEnvfvEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexEnvfvEXT( %d, %d, %d, GLfloat* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexEnvfvEXT" );
      glGetMultiTexEnvfvEXT( texunit, target, pname, params );
    }
    static void GetMultiTexEnvivEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexEnvivEXT( %d, %d, %d, GLint* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexEnvivEXT" );
      glGetMultiTexEnvivEXT( texunit, target, pname, params );
    }
    static void GetMultiTexGendvEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexGendvEXT( %d, %d, %d, GLdouble* )",
        (int)texunit,
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexGendvEXT" );
      glGetMultiTexGendvEXT( texunit, coord, pname, params );
    }
    static void GetMultiTexGenfvEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexGenfvEXT( %d, %d, %d, GLfloat* )",
        (int)texunit,
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexGenfvEXT" );
      glGetMultiTexGenfvEXT( texunit, coord, pname, params );
    }
    static void GetMultiTexGenivEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexGenivEXT( %d, %d, %d, GLint* )",
        (int)texunit,
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexGenivEXT" );
      glGetMultiTexGenivEXT( texunit, coord, pname, params );
    }
    static void GetMultiTexImageEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLenum format,
      GLenum type,
      void* pixels
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexImageEXT( %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetMultiTexImageEXT" );
      glGetMultiTexImageEXT( texunit, target, level, format, type, pixels );
    }
    static void GetMultiTexLevelParameterfvEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexLevelParameterfvEXT( %d, %d, %d, %d, GLfloat* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexLevelParameterfvEXT" );
      glGetMultiTexLevelParameterfvEXT( texunit, target, level, pname, params );
    }
    static void GetMultiTexLevelParameterivEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexLevelParameterivEXT( %d, %d, %d, %d, GLint* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexLevelParameterivEXT" );
      glGetMultiTexLevelParameterivEXT( texunit, target, level, pname, params );
    }
    static void GetMultiTexParameterIivEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexParameterIivEXT( %d, %d, %d, GLint* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexParameterIivEXT" );
      glGetMultiTexParameterIivEXT( texunit, target, pname, params );
    }
    static void GetMultiTexParameterIuivEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLuint* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexParameterIuivEXT( %d, %d, %d, GLuint* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexParameterIuivEXT" );
      glGetMultiTexParameterIuivEXT( texunit, target, pname, params );
    }
    static void GetMultiTexParameterfvEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexParameterfvEXT( %d, %d, %d, GLfloat* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexParameterfvEXT" );
      glGetMultiTexParameterfvEXT( texunit, target, pname, params );
    }
    static void GetMultiTexParameterivEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetMultiTexParameterivEXT( %d, %d, %d, GLint* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMultiTexParameterivEXT" );
      glGetMultiTexParameterivEXT( texunit, target, pname, params );
    }
    static void GetNamedBufferParameterivEXT(
      GLuint buffer,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetNamedBufferParameterivEXT( 0x%04X, %d, GLint* )",
        (unsigned)buffer,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetNamedBufferParameterivEXT" );
      glGetNamedBufferParameterivEXT( buffer, pname, params );
    }
    static void GetNamedBufferSubDataEXT(
      GLuint buffer,
      GLintptr offset,
      GLsizeiptr size,
      void* data
    ){
      FABRIC_OGL_TRACE( "glGetNamedBufferSubDataEXT( 0x%04X, %d, %d, void* )",
        (unsigned)buffer,
        (int)offset,
        (int)size
      );
      ErrorReporter errorReporter( "glGetNamedBufferSubDataEXT" );
      glGetNamedBufferSubDataEXT( buffer, offset, size, data );
    }
    static void GetNamedFramebufferAttachmentParameterivEXT(
      GLuint framebuffer,
      GLenum attachment,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetNamedFramebufferAttachmentParameterivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)framebuffer,
        (int)attachment,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetNamedFramebufferAttachmentParameterivEXT" );
      glGetNamedFramebufferAttachmentParameterivEXT( framebuffer, attachment, pname, params );
    }
    static void GetNamedProgramLocalParameterIivEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetNamedProgramLocalParameterIivEXT( 0x%04X, %d, 0x%04X, GLint* )",
        (unsigned)program,
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetNamedProgramLocalParameterIivEXT" );
      glGetNamedProgramLocalParameterIivEXT( program, target, index, params );
    }
    static void GetNamedProgramLocalParameterIuivEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLuint* params
    ){
      FABRIC_OGL_TRACE( "glGetNamedProgramLocalParameterIuivEXT( 0x%04X, %d, 0x%04X, GLuint* )",
        (unsigned)program,
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetNamedProgramLocalParameterIuivEXT" );
      glGetNamedProgramLocalParameterIuivEXT( program, target, index, params );
    }
    static void GetNamedProgramLocalParameterdvEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glGetNamedProgramLocalParameterdvEXT( 0x%04X, %d, 0x%04X, GLdouble* )",
        (unsigned)program,
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetNamedProgramLocalParameterdvEXT" );
      glGetNamedProgramLocalParameterdvEXT( program, target, index, params );
    }
    static void GetNamedProgramLocalParameterfvEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetNamedProgramLocalParameterfvEXT( 0x%04X, %d, 0x%04X, GLfloat* )",
        (unsigned)program,
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetNamedProgramLocalParameterfvEXT" );
      glGetNamedProgramLocalParameterfvEXT( program, target, index, params );
    }
    static void GetNamedProgramStringEXT(
      GLuint program,
      GLenum target,
      GLenum pname,
      void* string
    ){
      FABRIC_OGL_TRACE( "glGetNamedProgramStringEXT( 0x%04X, %d, %d, void* )",
        (unsigned)program,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetNamedProgramStringEXT" );
      glGetNamedProgramStringEXT( program, target, pname, string );
    }
    static void GetNamedProgramivEXT(
      GLuint program,
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetNamedProgramivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)program,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetNamedProgramivEXT" );
      glGetNamedProgramivEXT( program, target, pname, params );
    }
    static void GetNamedRenderbufferParameterivEXT(
      GLuint renderbuffer,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetNamedRenderbufferParameterivEXT( 0x%04X, %d, GLint* )",
        (unsigned)renderbuffer,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetNamedRenderbufferParameterivEXT" );
      glGetNamedRenderbufferParameterivEXT( renderbuffer, pname, params );
    }
    static void GetTextureImageEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLenum format,
      GLenum type,
      void* pixels
    ){
      FABRIC_OGL_TRACE( "glGetTextureImageEXT( 0x%04X, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetTextureImageEXT" );
      glGetTextureImageEXT( texture, target, level, format, type, pixels );
    }
    static void GetTextureLevelParameterfvEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetTextureLevelParameterfvEXT( 0x%04X, %d, %d, %d, GLfloat* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTextureLevelParameterfvEXT" );
      glGetTextureLevelParameterfvEXT( texture, target, level, pname, params );
    }
    static void GetTextureLevelParameterivEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetTextureLevelParameterivEXT( 0x%04X, %d, %d, %d, GLint* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTextureLevelParameterivEXT" );
      glGetTextureLevelParameterivEXT( texture, target, level, pname, params );
    }
    static void GetTextureParameterIivEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetTextureParameterIivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)texture,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTextureParameterIivEXT" );
      glGetTextureParameterIivEXT( texture, target, pname, params );
    }
    static void GetTextureParameterIuivEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      GLuint* params
    ){
      FABRIC_OGL_TRACE( "glGetTextureParameterIuivEXT( 0x%04X, %d, %d, GLuint* )",
        (unsigned)texture,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTextureParameterIuivEXT" );
      glGetTextureParameterIuivEXT( texture, target, pname, params );
    }
    static void GetTextureParameterfvEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetTextureParameterfvEXT( 0x%04X, %d, %d, GLfloat* )",
        (unsigned)texture,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTextureParameterfvEXT" );
      glGetTextureParameterfvEXT( texture, target, pname, params );
    }
    static void GetTextureParameterivEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetTextureParameterivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)texture,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTextureParameterivEXT" );
      glGetTextureParameterivEXT( texture, target, pname, params );
    }
    static void GetVertexArrayIntegeri_vEXT(
      GLuint vaobj,
      GLuint index,
      GLenum pname,
      GLint* param
    ){
      FABRIC_OGL_TRACE( "glGetVertexArrayIntegeri_vEXT( 0x%04X, 0x%04X, %d, GLint* )",
        (unsigned)vaobj,
        (unsigned)index,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetVertexArrayIntegeri_vEXT" );
      glGetVertexArrayIntegeri_vEXT( vaobj, index, pname, param );
    }
    static void GetVertexArrayIntegervEXT(
      GLuint vaobj,
      GLenum pname,
      GLint* param
    ){
      FABRIC_OGL_TRACE( "glGetVertexArrayIntegervEXT( 0x%04X, %d, GLint* )",
        (unsigned)vaobj,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetVertexArrayIntegervEXT" );
      glGetVertexArrayIntegervEXT( vaobj, pname, param );
    }
    static GLvoid MapNamedBufferEXT(
      GLuint buffer,
      GLenum access
    ){
      FABRIC_OGL_TRACE( "glMapNamedBufferEXT( 0x%04X, %d )",
        (unsigned)buffer,
        (int)access
      );
      ErrorReporter errorReporter( "glMapNamedBufferEXT" );
      glMapNamedBufferEXT( buffer, access );
    }
    static GLvoid MapNamedBufferRangeEXT(
      GLuint buffer,
      GLintptr offset,
      GLsizeiptr length,
      GLbitfield access
    ){
      FABRIC_OGL_TRACE( "glMapNamedBufferRangeEXT( 0x%04X, %d, %d, 0x%04X )",
        (unsigned)buffer,
        (int)offset,
        (int)length,
        (unsigned)access
      );
      ErrorReporter errorReporter( "glMapNamedBufferRangeEXT" );
      glMapNamedBufferRangeEXT( buffer, offset, length, access );
    }
    static void MatrixFrustumEXT(
      GLenum matrixMode,
      GLdouble l,
      GLdouble r,
      GLdouble b,
      GLdouble t,
      GLdouble n,
      GLdouble f
    ){
      FABRIC_OGL_TRACE( "glMatrixFrustumEXT( %d, %f, %f, %f, %f, %f, %f )",
        (int)matrixMode,
        (float)l,
        (float)r,
        (float)b,
        (float)t,
        (float)n,
        (float)f
      );
      ErrorReporter errorReporter( "glMatrixFrustumEXT" );
      glMatrixFrustumEXT( matrixMode, l, r, b, t, n, f );
    }
    static void MatrixLoadIdentityEXT(
      GLenum matrixMode
    ){
      FABRIC_OGL_TRACE( "glMatrixLoadIdentityEXT( %d )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixLoadIdentityEXT" );
      glMatrixLoadIdentityEXT( matrixMode );
    }
    static void MatrixLoadTransposedEXT(
      GLenum matrixMode,
      const GLdouble* m
    ){
      FABRIC_OGL_TRACE( "glMatrixLoadTransposedEXT( %d, GLdouble* )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixLoadTransposedEXT" );
      glMatrixLoadTransposedEXT( matrixMode, m );
    }
    static void MatrixLoadTransposefEXT(
      GLenum matrixMode,
      const GLfloat* m
    ){
      FABRIC_OGL_TRACE( "glMatrixLoadTransposefEXT( %d, GLfloat* )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixLoadTransposefEXT" );
      glMatrixLoadTransposefEXT( matrixMode, m );
    }
    static void MatrixLoaddEXT(
      GLenum matrixMode,
      const GLdouble* m
    ){
      FABRIC_OGL_TRACE( "glMatrixLoaddEXT( %d, GLdouble* )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixLoaddEXT" );
      glMatrixLoaddEXT( matrixMode, m );
    }
    static void MatrixLoadfEXT(
      GLenum matrixMode,
      const GLfloat* m
    ){
      FABRIC_OGL_TRACE( "glMatrixLoadfEXT( %d, GLfloat* )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixLoadfEXT" );
      glMatrixLoadfEXT( matrixMode, m );
    }
    static void MatrixMultTransposedEXT(
      GLenum matrixMode,
      const GLdouble* m
    ){
      FABRIC_OGL_TRACE( "glMatrixMultTransposedEXT( %d, GLdouble* )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixMultTransposedEXT" );
      glMatrixMultTransposedEXT( matrixMode, m );
    }
    static void MatrixMultTransposefEXT(
      GLenum matrixMode,
      const GLfloat* m
    ){
      FABRIC_OGL_TRACE( "glMatrixMultTransposefEXT( %d, GLfloat* )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixMultTransposefEXT" );
      glMatrixMultTransposefEXT( matrixMode, m );
    }
    static void MatrixMultdEXT(
      GLenum matrixMode,
      const GLdouble* m
    ){
      FABRIC_OGL_TRACE( "glMatrixMultdEXT( %d, GLdouble* )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixMultdEXT" );
      glMatrixMultdEXT( matrixMode, m );
    }
    static void MatrixMultfEXT(
      GLenum matrixMode,
      const GLfloat* m
    ){
      FABRIC_OGL_TRACE( "glMatrixMultfEXT( %d, GLfloat* )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixMultfEXT" );
      glMatrixMultfEXT( matrixMode, m );
    }
    static void MatrixOrthoEXT(
      GLenum matrixMode,
      GLdouble l,
      GLdouble r,
      GLdouble b,
      GLdouble t,
      GLdouble n,
      GLdouble f
    ){
      FABRIC_OGL_TRACE( "glMatrixOrthoEXT( %d, %f, %f, %f, %f, %f, %f )",
        (int)matrixMode,
        (float)l,
        (float)r,
        (float)b,
        (float)t,
        (float)n,
        (float)f
      );
      ErrorReporter errorReporter( "glMatrixOrthoEXT" );
      glMatrixOrthoEXT( matrixMode, l, r, b, t, n, f );
    }
    static void MatrixPopEXT(
      GLenum matrixMode
    ){
      FABRIC_OGL_TRACE( "glMatrixPopEXT( %d )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixPopEXT" );
      glMatrixPopEXT( matrixMode );
    }
    static void MatrixPushEXT(
      GLenum matrixMode
    ){
      FABRIC_OGL_TRACE( "glMatrixPushEXT( %d )",
        (int)matrixMode
      );
      ErrorReporter errorReporter( "glMatrixPushEXT" );
      glMatrixPushEXT( matrixMode );
    }
    static void MatrixRotatedEXT(
      GLenum matrixMode,
      GLdouble angle,
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glMatrixRotatedEXT( %d, %f, %f, %f, %f )",
        (int)matrixMode,
        (float)angle,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glMatrixRotatedEXT" );
      glMatrixRotatedEXT( matrixMode, angle, x, y, z );
    }
    static void MatrixRotatefEXT(
      GLenum matrixMode,
      GLfloat angle,
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glMatrixRotatefEXT( %d, %f, %f, %f, %f )",
        (int)matrixMode,
        (float)angle,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glMatrixRotatefEXT" );
      glMatrixRotatefEXT( matrixMode, angle, x, y, z );
    }
    static void MatrixScaledEXT(
      GLenum matrixMode,
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glMatrixScaledEXT( %d, %f, %f, %f )",
        (int)matrixMode,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glMatrixScaledEXT" );
      glMatrixScaledEXT( matrixMode, x, y, z );
    }
    static void MatrixScalefEXT(
      GLenum matrixMode,
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glMatrixScalefEXT( %d, %f, %f, %f )",
        (int)matrixMode,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glMatrixScalefEXT" );
      glMatrixScalefEXT( matrixMode, x, y, z );
    }
    static void MatrixTranslatedEXT(
      GLenum matrixMode,
      GLdouble x,
      GLdouble y,
      GLdouble z
    ){
      FABRIC_OGL_TRACE( "glMatrixTranslatedEXT( %d, %f, %f, %f )",
        (int)matrixMode,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glMatrixTranslatedEXT" );
      glMatrixTranslatedEXT( matrixMode, x, y, z );
    }
    static void MatrixTranslatefEXT(
      GLenum matrixMode,
      GLfloat x,
      GLfloat y,
      GLfloat z
    ){
      FABRIC_OGL_TRACE( "glMatrixTranslatefEXT( %d, %f, %f, %f )",
        (int)matrixMode,
        (float)x,
        (float)y,
        (float)z
      );
      ErrorReporter errorReporter( "glMatrixTranslatefEXT" );
      glMatrixTranslatefEXT( matrixMode, x, y, z );
    }
    static void MultiTexBufferEXT(
      GLenum texunit,
      GLenum target,
      GLenum internalformat,
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glMultiTexBufferEXT( %d, %d, %d, 0x%04X )",
        (int)texunit,
        (int)target,
        (int)internalformat,
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glMultiTexBufferEXT" );
      glMultiTexBufferEXT( texunit, target, internalformat, buffer );
    }
    static void MultiTexCoordPointerEXT(
      GLenum texunit,
      GLint size,
      GLenum type,
      GLsizei stride,
      const void* pointer
    ){
      FABRIC_OGL_TRACE( "glMultiTexCoordPointerEXT( %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)size,
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glMultiTexCoordPointerEXT" );
      glMultiTexCoordPointerEXT( texunit, size, type, stride, pointer );
    }
    static void MultiTexEnvfEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glMultiTexEnvfEXT( %d, %d, %d, %f )",
        (int)texunit,
        (int)target,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glMultiTexEnvfEXT" );
      glMultiTexEnvfEXT( texunit, target, pname, param );
    }
    static void MultiTexEnvfvEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glMultiTexEnvfvEXT( %d, %d, %d, GLfloat* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexEnvfvEXT" );
      glMultiTexEnvfvEXT( texunit, target, pname, params );
    }
    static void MultiTexEnviEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glMultiTexEnviEXT( %d, %d, %d, %d )",
        (int)texunit,
        (int)target,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glMultiTexEnviEXT" );
      glMultiTexEnviEXT( texunit, target, pname, param );
    }
    static void MultiTexEnvivEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glMultiTexEnvivEXT( %d, %d, %d, GLint* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexEnvivEXT" );
      glMultiTexEnvivEXT( texunit, target, pname, params );
    }
    static void MultiTexGendEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      GLdouble param
    ){
      FABRIC_OGL_TRACE( "glMultiTexGendEXT( %d, %d, %d, %f )",
        (int)texunit,
        (int)coord,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glMultiTexGendEXT" );
      glMultiTexGendEXT( texunit, coord, pname, param );
    }
    static void MultiTexGendvEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      const GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glMultiTexGendvEXT( %d, %d, %d, GLdouble* )",
        (int)texunit,
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexGendvEXT" );
      glMultiTexGendvEXT( texunit, coord, pname, params );
    }
    static void MultiTexGenfEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glMultiTexGenfEXT( %d, %d, %d, %f )",
        (int)texunit,
        (int)coord,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glMultiTexGenfEXT" );
      glMultiTexGenfEXT( texunit, coord, pname, param );
    }
    static void MultiTexGenfvEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glMultiTexGenfvEXT( %d, %d, %d, GLfloat* )",
        (int)texunit,
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexGenfvEXT" );
      glMultiTexGenfvEXT( texunit, coord, pname, params );
    }
    static void MultiTexGeniEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glMultiTexGeniEXT( %d, %d, %d, %d )",
        (int)texunit,
        (int)coord,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glMultiTexGeniEXT" );
      glMultiTexGeniEXT( texunit, coord, pname, param );
    }
    static void MultiTexGenivEXT(
      GLenum texunit,
      GLenum coord,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glMultiTexGenivEXT( %d, %d, %d, GLint* )",
        (int)texunit,
        (int)coord,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexGenivEXT" );
      glMultiTexGenivEXT( texunit, coord, pname, params );
    }
    static void MultiTexImage1DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint internalformat,
      GLsizei width,
      GLint border,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glMultiTexImage1DEXT( %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glMultiTexImage1DEXT" );
      glMultiTexImage1DEXT( texunit, target, level, internalformat, width, border, format, type, pixels );
    }
    static void MultiTexImage2DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint internalformat,
      GLsizei width,
      GLsizei height,
      GLint border,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glMultiTexImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glMultiTexImage2DEXT" );
      glMultiTexImage2DEXT( texunit, target, level, internalformat, width, height, border, format, type, pixels );
    }
    static void MultiTexImage3DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint internalformat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLint border,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glMultiTexImage3DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)depth,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glMultiTexImage3DEXT" );
      glMultiTexImage3DEXT( texunit, target, level, internalformat, width, height, depth, border, format, type, pixels );
    }
    static void MultiTexParameterIivEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glMultiTexParameterIivEXT( %d, %d, %d, GLint* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexParameterIivEXT" );
      glMultiTexParameterIivEXT( texunit, target, pname, params );
    }
    static void MultiTexParameterIuivEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      const GLuint* params
    ){
      FABRIC_OGL_TRACE( "glMultiTexParameterIuivEXT( %d, %d, %d, GLuint* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexParameterIuivEXT" );
      glMultiTexParameterIuivEXT( texunit, target, pname, params );
    }
    static void MultiTexParameterfEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glMultiTexParameterfEXT( %d, %d, %d, %f )",
        (int)texunit,
        (int)target,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glMultiTexParameterfEXT" );
      glMultiTexParameterfEXT( texunit, target, pname, param );
    }
    static void MultiTexParameterfvEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      const GLfloat* param
    ){
      FABRIC_OGL_TRACE( "glMultiTexParameterfvEXT( %d, %d, %d, GLfloat* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexParameterfvEXT" );
      glMultiTexParameterfvEXT( texunit, target, pname, param );
    }
    static void MultiTexParameteriEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glMultiTexParameteriEXT( %d, %d, %d, %d )",
        (int)texunit,
        (int)target,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glMultiTexParameteriEXT" );
      glMultiTexParameteriEXT( texunit, target, pname, param );
    }
    static void MultiTexParameterivEXT(
      GLenum texunit,
      GLenum target,
      GLenum pname,
      const GLint* param
    ){
      FABRIC_OGL_TRACE( "glMultiTexParameterivEXT( %d, %d, %d, GLint* )",
        (int)texunit,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glMultiTexParameterivEXT" );
      glMultiTexParameterivEXT( texunit, target, pname, param );
    }
    static void MultiTexRenderbufferEXT(
      GLenum texunit,
      GLenum target,
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glMultiTexRenderbufferEXT( %d, %d, 0x%04X )",
        (int)texunit,
        (int)target,
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glMultiTexRenderbufferEXT" );
      glMultiTexRenderbufferEXT( texunit, target, renderbuffer );
    }
    static void MultiTexSubImage1DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLsizei width,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glMultiTexSubImage1DEXT( %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glMultiTexSubImage1DEXT" );
      glMultiTexSubImage1DEXT( texunit, target, level, xoffset, width, format, type, pixels );
    }
    static void MultiTexSubImage2DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glMultiTexSubImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glMultiTexSubImage2DEXT" );
      glMultiTexSubImage2DEXT( texunit, target, level, xoffset, yoffset, width, height, format, type, pixels );
    }
    static void MultiTexSubImage3DEXT(
      GLenum texunit,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glMultiTexSubImage3DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)texunit,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glMultiTexSubImage3DEXT" );
      glMultiTexSubImage3DEXT( texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
    }
    static void NamedBufferDataEXT(
      GLuint buffer,
      GLsizeiptr size,
      const void* data,
      GLenum usage
    ){
      FABRIC_OGL_TRACE( "glNamedBufferDataEXT( 0x%04X, %d, void*, %d )",
        (unsigned)buffer,
        (int)size,
        (int)usage
      );
      ErrorReporter errorReporter( "glNamedBufferDataEXT" );
      glNamedBufferDataEXT( buffer, size, data, usage );
    }
    static void NamedBufferSubDataEXT(
      GLuint buffer,
      GLintptr offset,
      GLsizeiptr size,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glNamedBufferSubDataEXT( 0x%04X, %d, %d, void* )",
        (unsigned)buffer,
        (int)offset,
        (int)size
      );
      ErrorReporter errorReporter( "glNamedBufferSubDataEXT" );
      glNamedBufferSubDataEXT( buffer, offset, size, data );
    }
    static void NamedCopyBufferSubDataEXT(
      GLuint readBuffer,
      GLuint writeBuffer,
      GLintptr readOffset,
      GLintptr writeOffset,
      GLsizeiptr size
    ){
      FABRIC_OGL_TRACE( "glNamedCopyBufferSubDataEXT( 0x%04X, 0x%04X, %d, %d, %d )",
        (unsigned)readBuffer,
        (unsigned)writeBuffer,
        (int)readOffset,
        (int)writeOffset,
        (int)size
      );
      ErrorReporter errorReporter( "glNamedCopyBufferSubDataEXT" );
      glNamedCopyBufferSubDataEXT( readBuffer, writeBuffer, readOffset, writeOffset, size );
    }
    static void NamedFramebufferRenderbufferEXT(
      GLuint framebuffer,
      GLenum attachment,
      GLenum renderbuffertarget,
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glNamedFramebufferRenderbufferEXT( 0x%04X, %d, %d, 0x%04X )",
        (unsigned)framebuffer,
        (int)attachment,
        (int)renderbuffertarget,
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glNamedFramebufferRenderbufferEXT" );
      glNamedFramebufferRenderbufferEXT( framebuffer, attachment, renderbuffertarget, renderbuffer );
    }
    static void NamedFramebufferTexture1DEXT(
      GLuint framebuffer,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level
    ){
      FABRIC_OGL_TRACE( "glNamedFramebufferTexture1DEXT( 0x%04X, %d, %d, 0x%04X, %d )",
        (unsigned)framebuffer,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level
      );
      ErrorReporter errorReporter( "glNamedFramebufferTexture1DEXT" );
      glNamedFramebufferTexture1DEXT( framebuffer, attachment, textarget, texture, level );
    }
    static void NamedFramebufferTexture2DEXT(
      GLuint framebuffer,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level
    ){
      FABRIC_OGL_TRACE( "glNamedFramebufferTexture2DEXT( 0x%04X, %d, %d, 0x%04X, %d )",
        (unsigned)framebuffer,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level
      );
      ErrorReporter errorReporter( "glNamedFramebufferTexture2DEXT" );
      glNamedFramebufferTexture2DEXT( framebuffer, attachment, textarget, texture, level );
    }
    static void NamedFramebufferTexture3DEXT(
      GLuint framebuffer,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level,
      GLint zoffset
    ){
      FABRIC_OGL_TRACE( "glNamedFramebufferTexture3DEXT( 0x%04X, %d, %d, 0x%04X, %d, %d )",
        (unsigned)framebuffer,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level,
        (int)zoffset
      );
      ErrorReporter errorReporter( "glNamedFramebufferTexture3DEXT" );
      glNamedFramebufferTexture3DEXT( framebuffer, attachment, textarget, texture, level, zoffset );
    }
    static void NamedFramebufferTextureEXT(
      GLuint framebuffer,
      GLenum attachment,
      GLuint texture,
      GLint level
    ){
      FABRIC_OGL_TRACE( "glNamedFramebufferTextureEXT( 0x%04X, %d, 0x%04X, %d )",
        (unsigned)framebuffer,
        (int)attachment,
        (unsigned)texture,
        (int)level
      );
      ErrorReporter errorReporter( "glNamedFramebufferTextureEXT" );
      glNamedFramebufferTextureEXT( framebuffer, attachment, texture, level );
    }
    static void NamedFramebufferTextureFaceEXT(
      GLuint framebuffer,
      GLenum attachment,
      GLuint texture,
      GLint level,
      GLenum face
    ){
      FABRIC_OGL_TRACE( "glNamedFramebufferTextureFaceEXT( 0x%04X, %d, 0x%04X, %d, %d )",
        (unsigned)framebuffer,
        (int)attachment,
        (unsigned)texture,
        (int)level,
        (int)face
      );
      ErrorReporter errorReporter( "glNamedFramebufferTextureFaceEXT" );
      glNamedFramebufferTextureFaceEXT( framebuffer, attachment, texture, level, face );
    }
    static void NamedFramebufferTextureLayerEXT(
      GLuint framebuffer,
      GLenum attachment,
      GLuint texture,
      GLint level,
      GLint layer
    ){
      FABRIC_OGL_TRACE( "glNamedFramebufferTextureLayerEXT( 0x%04X, %d, 0x%04X, %d, %d )",
        (unsigned)framebuffer,
        (int)attachment,
        (unsigned)texture,
        (int)level,
        (int)layer
      );
      ErrorReporter errorReporter( "glNamedFramebufferTextureLayerEXT" );
      glNamedFramebufferTextureLayerEXT( framebuffer, attachment, texture, level, layer );
    }
    static void NamedProgramLocalParameter4dEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLdouble x,
      GLdouble y,
      GLdouble z,
      GLdouble w
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameter4dEXT( 0x%04X, %d, 0x%04X, %f, %f, %f, %f )",
        (unsigned)program,
        (int)target,
        (unsigned)index,
        (float)x,
        (float)y,
        (float)z,
        (float)w
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameter4dEXT" );
      glNamedProgramLocalParameter4dEXT( program, target, index, x, y, z, w );
    }
    static void NamedProgramLocalParameter4dvEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      const GLdouble* params
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameter4dvEXT( 0x%04X, %d, 0x%04X, GLdouble* )",
        (unsigned)program,
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameter4dvEXT" );
      glNamedProgramLocalParameter4dvEXT( program, target, index, params );
    }
    static void NamedProgramLocalParameter4fEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLfloat x,
      GLfloat y,
      GLfloat z,
      GLfloat w
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameter4fEXT( 0x%04X, %d, 0x%04X, %f, %f, %f, %f )",
        (unsigned)program,
        (int)target,
        (unsigned)index,
        (float)x,
        (float)y,
        (float)z,
        (float)w
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameter4fEXT" );
      glNamedProgramLocalParameter4fEXT( program, target, index, x, y, z, w );
    }
    static void NamedProgramLocalParameter4fvEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameter4fvEXT( 0x%04X, %d, 0x%04X, GLfloat* )",
        (unsigned)program,
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameter4fvEXT" );
      glNamedProgramLocalParameter4fvEXT( program, target, index, params );
    }
    static void NamedProgramLocalParameterI4iEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLint x,
      GLint y,
      GLint z,
      GLint w
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameterI4iEXT( 0x%04X, %d, 0x%04X, %d, %d, %d, %d )",
        (unsigned)program,
        (int)target,
        (unsigned)index,
        (int)x,
        (int)y,
        (int)z,
        (int)w
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameterI4iEXT" );
      glNamedProgramLocalParameterI4iEXT( program, target, index, x, y, z, w );
    }
    static void NamedProgramLocalParameterI4ivEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameterI4ivEXT( 0x%04X, %d, 0x%04X, GLint* )",
        (unsigned)program,
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameterI4ivEXT" );
      glNamedProgramLocalParameterI4ivEXT( program, target, index, params );
    }
    static void NamedProgramLocalParameterI4uiEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLuint x,
      GLuint y,
      GLuint z,
      GLuint w
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameterI4uiEXT( 0x%04X, %d, 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)program,
        (int)target,
        (unsigned)index,
        (unsigned)x,
        (unsigned)y,
        (unsigned)z,
        (unsigned)w
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameterI4uiEXT" );
      glNamedProgramLocalParameterI4uiEXT( program, target, index, x, y, z, w );
    }
    static void NamedProgramLocalParameterI4uivEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      const GLuint* params
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameterI4uivEXT( 0x%04X, %d, 0x%04X, GLuint* )",
        (unsigned)program,
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameterI4uivEXT" );
      glNamedProgramLocalParameterI4uivEXT( program, target, index, params );
    }
    static void NamedProgramLocalParameters4fvEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLsizei count,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParameters4fvEXT( 0x%04X, %d, 0x%04X, %d, GLfloat* )",
        (unsigned)program,
        (int)target,
        (unsigned)index,
        (int)count
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParameters4fvEXT" );
      glNamedProgramLocalParameters4fvEXT( program, target, index, count, params );
    }
    static void NamedProgramLocalParametersI4ivEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLsizei count,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParametersI4ivEXT( 0x%04X, %d, 0x%04X, %d, GLint* )",
        (unsigned)program,
        (int)target,
        (unsigned)index,
        (int)count
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParametersI4ivEXT" );
      glNamedProgramLocalParametersI4ivEXT( program, target, index, count, params );
    }
    static void NamedProgramLocalParametersI4uivEXT(
      GLuint program,
      GLenum target,
      GLuint index,
      GLsizei count,
      const GLuint* params
    ){
      FABRIC_OGL_TRACE( "glNamedProgramLocalParametersI4uivEXT( 0x%04X, %d, 0x%04X, %d, GLuint* )",
        (unsigned)program,
        (int)target,
        (unsigned)index,
        (int)count
      );
      ErrorReporter errorReporter( "glNamedProgramLocalParametersI4uivEXT" );
      glNamedProgramLocalParametersI4uivEXT( program, target, index, count, params );
    }
    static void NamedProgramStringEXT(
      GLuint program,
      GLenum target,
      GLenum format,
      GLsizei len,
      const void* string
    ){
      FABRIC_OGL_TRACE( "glNamedProgramStringEXT( 0x%04X, %d, %d, %d, void* )",
        (unsigned)program,
        (int)target,
        (int)format,
        (int)len
      );
      ErrorReporter errorReporter( "glNamedProgramStringEXT" );
      glNamedProgramStringEXT( program, target, format, len, string );
    }
    static void NamedRenderbufferStorageEXT(
      GLuint renderbuffer,
      GLenum internalformat,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glNamedRenderbufferStorageEXT( 0x%04X, %d, %d, %d )",
        (unsigned)renderbuffer,
        (int)internalformat,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glNamedRenderbufferStorageEXT" );
      glNamedRenderbufferStorageEXT( renderbuffer, internalformat, width, height );
    }
    static void NamedRenderbufferStorageMultisampleCoverageEXT(
      GLuint renderbuffer,
      GLsizei coverageSamples,
      GLsizei colorSamples,
      GLenum internalformat,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glNamedRenderbufferStorageMultisampleCoverageEXT( 0x%04X, %d, %d, %d, %d, %d )",
        (unsigned)renderbuffer,
        (int)coverageSamples,
        (int)colorSamples,
        (int)internalformat,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glNamedRenderbufferStorageMultisampleCoverageEXT" );
      glNamedRenderbufferStorageMultisampleCoverageEXT( renderbuffer, coverageSamples, colorSamples, internalformat, width, height );
    }
    static void NamedRenderbufferStorageMultisampleEXT(
      GLuint renderbuffer,
      GLsizei samples,
      GLenum internalformat,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glNamedRenderbufferStorageMultisampleEXT( 0x%04X, %d, %d, %d, %d )",
        (unsigned)renderbuffer,
        (int)samples,
        (int)internalformat,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glNamedRenderbufferStorageMultisampleEXT" );
      glNamedRenderbufferStorageMultisampleEXT( renderbuffer, samples, internalformat, width, height );
    }
    static void ProgramUniform1fEXT(
      GLuint program,
      GLint location,
      GLfloat v0
    ){
      FABRIC_OGL_TRACE( "glProgramUniform1fEXT( 0x%04X, %d, %f )",
        (unsigned)program,
        (int)location,
        (float)v0
      );
      ErrorReporter errorReporter( "glProgramUniform1fEXT" );
      glProgramUniform1fEXT( program, location, v0 );
    }
    static void ProgramUniform1fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform1fvEXT( 0x%04X, %d, %d, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform1fvEXT" );
      glProgramUniform1fvEXT( program, location, count, value );
    }
    static void ProgramUniform1iEXT(
      GLuint program,
      GLint location,
      GLint v0
    ){
      FABRIC_OGL_TRACE( "glProgramUniform1iEXT( 0x%04X, %d, %d )",
        (unsigned)program,
        (int)location,
        (int)v0
      );
      ErrorReporter errorReporter( "glProgramUniform1iEXT" );
      glProgramUniform1iEXT( program, location, v0 );
    }
    static void ProgramUniform1ivEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLint* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform1ivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform1ivEXT" );
      glProgramUniform1ivEXT( program, location, count, value );
    }
    static void ProgramUniform1uiEXT(
      GLuint program,
      GLint location,
      GLuint v0
    ){
      FABRIC_OGL_TRACE( "glProgramUniform1uiEXT( 0x%04X, %d, 0x%04X )",
        (unsigned)program,
        (int)location,
        (unsigned)v0
      );
      ErrorReporter errorReporter( "glProgramUniform1uiEXT" );
      glProgramUniform1uiEXT( program, location, v0 );
    }
    static void ProgramUniform1uivEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLuint* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform1uivEXT( 0x%04X, %d, %d, GLuint* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform1uivEXT" );
      glProgramUniform1uivEXT( program, location, count, value );
    }
    static void ProgramUniform2fEXT(
      GLuint program,
      GLint location,
      GLfloat v0,
      GLfloat v1
    ){
      FABRIC_OGL_TRACE( "glProgramUniform2fEXT( 0x%04X, %d, %f, %f )",
        (unsigned)program,
        (int)location,
        (float)v0,
        (float)v1
      );
      ErrorReporter errorReporter( "glProgramUniform2fEXT" );
      glProgramUniform2fEXT( program, location, v0, v1 );
    }
    static void ProgramUniform2fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform2fvEXT( 0x%04X, %d, %d, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform2fvEXT" );
      glProgramUniform2fvEXT( program, location, count, value );
    }
    static void ProgramUniform2iEXT(
      GLuint program,
      GLint location,
      GLint v0,
      GLint v1
    ){
      FABRIC_OGL_TRACE( "glProgramUniform2iEXT( 0x%04X, %d, %d, %d )",
        (unsigned)program,
        (int)location,
        (int)v0,
        (int)v1
      );
      ErrorReporter errorReporter( "glProgramUniform2iEXT" );
      glProgramUniform2iEXT( program, location, v0, v1 );
    }
    static void ProgramUniform2ivEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLint* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform2ivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform2ivEXT" );
      glProgramUniform2ivEXT( program, location, count, value );
    }
    static void ProgramUniform2uiEXT(
      GLuint program,
      GLint location,
      GLuint v0,
      GLuint v1
    ){
      FABRIC_OGL_TRACE( "glProgramUniform2uiEXT( 0x%04X, %d, 0x%04X, 0x%04X )",
        (unsigned)program,
        (int)location,
        (unsigned)v0,
        (unsigned)v1
      );
      ErrorReporter errorReporter( "glProgramUniform2uiEXT" );
      glProgramUniform2uiEXT( program, location, v0, v1 );
    }
    static void ProgramUniform2uivEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLuint* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform2uivEXT( 0x%04X, %d, %d, GLuint* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform2uivEXT" );
      glProgramUniform2uivEXT( program, location, count, value );
    }
    static void ProgramUniform3fEXT(
      GLuint program,
      GLint location,
      GLfloat v0,
      GLfloat v1,
      GLfloat v2
    ){
      FABRIC_OGL_TRACE( "glProgramUniform3fEXT( 0x%04X, %d, %f, %f, %f )",
        (unsigned)program,
        (int)location,
        (float)v0,
        (float)v1,
        (float)v2
      );
      ErrorReporter errorReporter( "glProgramUniform3fEXT" );
      glProgramUniform3fEXT( program, location, v0, v1, v2 );
    }
    static void ProgramUniform3fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform3fvEXT( 0x%04X, %d, %d, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform3fvEXT" );
      glProgramUniform3fvEXT( program, location, count, value );
    }
    static void ProgramUniform3iEXT(
      GLuint program,
      GLint location,
      GLint v0,
      GLint v1,
      GLint v2
    ){
      FABRIC_OGL_TRACE( "glProgramUniform3iEXT( 0x%04X, %d, %d, %d, %d )",
        (unsigned)program,
        (int)location,
        (int)v0,
        (int)v1,
        (int)v2
      );
      ErrorReporter errorReporter( "glProgramUniform3iEXT" );
      glProgramUniform3iEXT( program, location, v0, v1, v2 );
    }
    static void ProgramUniform3ivEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLint* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform3ivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform3ivEXT" );
      glProgramUniform3ivEXT( program, location, count, value );
    }
    static void ProgramUniform3uiEXT(
      GLuint program,
      GLint location,
      GLuint v0,
      GLuint v1,
      GLuint v2
    ){
      FABRIC_OGL_TRACE( "glProgramUniform3uiEXT( 0x%04X, %d, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)program,
        (int)location,
        (unsigned)v0,
        (unsigned)v1,
        (unsigned)v2
      );
      ErrorReporter errorReporter( "glProgramUniform3uiEXT" );
      glProgramUniform3uiEXT( program, location, v0, v1, v2 );
    }
    static void ProgramUniform3uivEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLuint* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform3uivEXT( 0x%04X, %d, %d, GLuint* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform3uivEXT" );
      glProgramUniform3uivEXT( program, location, count, value );
    }
    static void ProgramUniform4fEXT(
      GLuint program,
      GLint location,
      GLfloat v0,
      GLfloat v1,
      GLfloat v2,
      GLfloat v3
    ){
      FABRIC_OGL_TRACE( "glProgramUniform4fEXT( 0x%04X, %d, %f, %f, %f, %f )",
        (unsigned)program,
        (int)location,
        (float)v0,
        (float)v1,
        (float)v2,
        (float)v3
      );
      ErrorReporter errorReporter( "glProgramUniform4fEXT" );
      glProgramUniform4fEXT( program, location, v0, v1, v2, v3 );
    }
    static void ProgramUniform4fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform4fvEXT( 0x%04X, %d, %d, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform4fvEXT" );
      glProgramUniform4fvEXT( program, location, count, value );
    }
    static void ProgramUniform4iEXT(
      GLuint program,
      GLint location,
      GLint v0,
      GLint v1,
      GLint v2,
      GLint v3
    ){
      FABRIC_OGL_TRACE( "glProgramUniform4iEXT( 0x%04X, %d, %d, %d, %d, %d )",
        (unsigned)program,
        (int)location,
        (int)v0,
        (int)v1,
        (int)v2,
        (int)v3
      );
      ErrorReporter errorReporter( "glProgramUniform4iEXT" );
      glProgramUniform4iEXT( program, location, v0, v1, v2, v3 );
    }
    static void ProgramUniform4ivEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLint* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform4ivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform4ivEXT" );
      glProgramUniform4ivEXT( program, location, count, value );
    }
    static void ProgramUniform4uiEXT(
      GLuint program,
      GLint location,
      GLuint v0,
      GLuint v1,
      GLuint v2,
      GLuint v3
    ){
      FABRIC_OGL_TRACE( "glProgramUniform4uiEXT( 0x%04X, %d, 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)program,
        (int)location,
        (unsigned)v0,
        (unsigned)v1,
        (unsigned)v2,
        (unsigned)v3
      );
      ErrorReporter errorReporter( "glProgramUniform4uiEXT" );
      glProgramUniform4uiEXT( program, location, v0, v1, v2, v3 );
    }
    static void ProgramUniform4uivEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      const GLuint* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniform4uivEXT( 0x%04X, %d, %d, GLuint* )",
        (unsigned)program,
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramUniform4uivEXT" );
      glProgramUniform4uivEXT( program, location, count, value );
    }
    static void ProgramUniformMatrix2fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix2fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix2fvEXT" );
      glProgramUniformMatrix2fvEXT( program, location, count, transpose, value );
    }
    static void ProgramUniformMatrix2x3fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix2x3fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix2x3fvEXT" );
      glProgramUniformMatrix2x3fvEXT( program, location, count, transpose, value );
    }
    static void ProgramUniformMatrix2x4fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix2x4fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix2x4fvEXT" );
      glProgramUniformMatrix2x4fvEXT( program, location, count, transpose, value );
    }
    static void ProgramUniformMatrix3fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix3fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix3fvEXT" );
      glProgramUniformMatrix3fvEXT( program, location, count, transpose, value );
    }
    static void ProgramUniformMatrix3x2fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix3x2fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix3x2fvEXT" );
      glProgramUniformMatrix3x2fvEXT( program, location, count, transpose, value );
    }
    static void ProgramUniformMatrix3x4fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix3x4fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix3x4fvEXT" );
      glProgramUniformMatrix3x4fvEXT( program, location, count, transpose, value );
    }
    static void ProgramUniformMatrix4fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix4fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix4fvEXT" );
      glProgramUniformMatrix4fvEXT( program, location, count, transpose, value );
    }
    static void ProgramUniformMatrix4x2fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix4x2fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix4x2fvEXT" );
      glProgramUniformMatrix4x2fvEXT( program, location, count, transpose, value );
    }
    static void ProgramUniformMatrix4x3fvEXT(
      GLuint program,
      GLint location,
      GLsizei count,
      GLboolean transpose,
      const GLfloat* value
    ){
      FABRIC_OGL_TRACE( "glProgramUniformMatrix4x3fvEXT( 0x%04X, %d, %d, %b, GLfloat* )",
        (unsigned)program,
        (int)location,
        (int)count,
        (bool)transpose
      );
      ErrorReporter errorReporter( "glProgramUniformMatrix4x3fvEXT" );
      glProgramUniformMatrix4x3fvEXT( program, location, count, transpose, value );
    }
    static void PushClientAttribDefaultEXT(
      GLbitfield mask
    ){
      FABRIC_OGL_TRACE( "glPushClientAttribDefaultEXT( 0x%04X )",
        (unsigned)mask
      );
      ErrorReporter errorReporter( "glPushClientAttribDefaultEXT" );
      glPushClientAttribDefaultEXT( mask );
    }
    static void TextureBufferEXT(
      GLuint texture,
      GLenum target,
      GLenum internalformat,
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glTextureBufferEXT( 0x%04X, %d, %d, 0x%04X )",
        (unsigned)texture,
        (int)target,
        (int)internalformat,
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glTextureBufferEXT" );
      glTextureBufferEXT( texture, target, internalformat, buffer );
    }
    static void TextureImage1DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint internalformat,
      GLsizei width,
      GLint border,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTextureImage1DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTextureImage1DEXT" );
      glTextureImage1DEXT( texture, target, level, internalformat, width, border, format, type, pixels );
    }
    static void TextureImage2DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint internalformat,
      GLsizei width,
      GLsizei height,
      GLint border,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTextureImage2DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTextureImage2DEXT" );
      glTextureImage2DEXT( texture, target, level, internalformat, width, height, border, format, type, pixels );
    }
    static void TextureImage3DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint internalformat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLint border,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTextureImage3DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)depth,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTextureImage3DEXT" );
      glTextureImage3DEXT( texture, target, level, internalformat, width, height, depth, border, format, type, pixels );
    }
    static void TextureParameterIivEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glTextureParameterIivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)texture,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTextureParameterIivEXT" );
      glTextureParameterIivEXT( texture, target, pname, params );
    }
    static void TextureParameterIuivEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      const GLuint* params
    ){
      FABRIC_OGL_TRACE( "glTextureParameterIuivEXT( 0x%04X, %d, %d, GLuint* )",
        (unsigned)texture,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTextureParameterIuivEXT" );
      glTextureParameterIuivEXT( texture, target, pname, params );
    }
    static void TextureParameterfEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glTextureParameterfEXT( 0x%04X, %d, %d, %f )",
        (unsigned)texture,
        (int)target,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glTextureParameterfEXT" );
      glTextureParameterfEXT( texture, target, pname, param );
    }
    static void TextureParameterfvEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      const GLfloat* param
    ){
      FABRIC_OGL_TRACE( "glTextureParameterfvEXT( 0x%04X, %d, %d, GLfloat* )",
        (unsigned)texture,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTextureParameterfvEXT" );
      glTextureParameterfvEXT( texture, target, pname, param );
    }
    static void TextureParameteriEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glTextureParameteriEXT( 0x%04X, %d, %d, %d )",
        (unsigned)texture,
        (int)target,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glTextureParameteriEXT" );
      glTextureParameteriEXT( texture, target, pname, param );
    }
    static void TextureParameterivEXT(
      GLuint texture,
      GLenum target,
      GLenum pname,
      const GLint* param
    ){
      FABRIC_OGL_TRACE( "glTextureParameterivEXT( 0x%04X, %d, %d, GLint* )",
        (unsigned)texture,
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTextureParameterivEXT" );
      glTextureParameterivEXT( texture, target, pname, param );
    }
    static void TextureRenderbufferEXT(
      GLuint texture,
      GLenum target,
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glTextureRenderbufferEXT( 0x%04X, %d, 0x%04X )",
        (unsigned)texture,
        (int)target,
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glTextureRenderbufferEXT" );
      glTextureRenderbufferEXT( texture, target, renderbuffer );
    }
    static void TextureSubImage1DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLsizei width,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTextureSubImage1DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTextureSubImage1DEXT" );
      glTextureSubImage1DEXT( texture, target, level, xoffset, width, format, type, pixels );
    }
    static void TextureSubImage2DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTextureSubImage2DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTextureSubImage2DEXT" );
      glTextureSubImage2DEXT( texture, target, level, xoffset, yoffset, width, height, format, type, pixels );
    }
    static void TextureSubImage3DEXT(
      GLuint texture,
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTextureSubImage3DEXT( 0x%04X, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (unsigned)texture,
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTextureSubImage3DEXT" );
      glTextureSubImage3DEXT( texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
    }
    static GLboolean UnmapNamedBufferEXT(
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glUnmapNamedBufferEXT( 0x%04X )",
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glUnmapNamedBufferEXT" );
      GLboolean result = glUnmapNamedBufferEXT( buffer );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void VertexArrayColorOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLint size,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayColorOffsetEXT( 0x%04X, 0x%04X, %d, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)size,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayColorOffsetEXT" );
      glVertexArrayColorOffsetEXT( vaobj, buffer, size, type, stride, offset );
    }
    static void VertexArrayEdgeFlagOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayEdgeFlagOffsetEXT( 0x%04X, 0x%04X, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayEdgeFlagOffsetEXT" );
      glVertexArrayEdgeFlagOffsetEXT( vaobj, buffer, stride, offset );
    }
    static void VertexArrayFogCoordOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayFogCoordOffsetEXT( 0x%04X, 0x%04X, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayFogCoordOffsetEXT" );
      glVertexArrayFogCoordOffsetEXT( vaobj, buffer, type, stride, offset );
    }
    static void VertexArrayIndexOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayIndexOffsetEXT( 0x%04X, 0x%04X, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayIndexOffsetEXT" );
      glVertexArrayIndexOffsetEXT( vaobj, buffer, type, stride, offset );
    }
    static void VertexArrayMultiTexCoordOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLenum texunit,
      GLint size,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayMultiTexCoordOffsetEXT( 0x%04X, 0x%04X, %d, %d, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)texunit,
        (int)size,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayMultiTexCoordOffsetEXT" );
      glVertexArrayMultiTexCoordOffsetEXT( vaobj, buffer, texunit, size, type, stride, offset );
    }
    static void VertexArrayNormalOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayNormalOffsetEXT( 0x%04X, 0x%04X, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayNormalOffsetEXT" );
      glVertexArrayNormalOffsetEXT( vaobj, buffer, type, stride, offset );
    }
    static void VertexArraySecondaryColorOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLint size,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArraySecondaryColorOffsetEXT( 0x%04X, 0x%04X, %d, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)size,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArraySecondaryColorOffsetEXT" );
      glVertexArraySecondaryColorOffsetEXT( vaobj, buffer, size, type, stride, offset );
    }
    static void VertexArrayTexCoordOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLint size,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayTexCoordOffsetEXT( 0x%04X, 0x%04X, %d, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)size,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayTexCoordOffsetEXT" );
      glVertexArrayTexCoordOffsetEXT( vaobj, buffer, size, type, stride, offset );
    }
    static void VertexArrayVertexAttribIOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLuint index,
      GLint size,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayVertexAttribIOffsetEXT( 0x%04X, 0x%04X, 0x%04X, %d, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (unsigned)index,
        (int)size,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayVertexAttribIOffsetEXT" );
      glVertexArrayVertexAttribIOffsetEXT( vaobj, buffer, index, size, type, stride, offset );
    }
    static void VertexArrayVertexAttribOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLuint index,
      GLint size,
      GLenum type,
      GLboolean normalized,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayVertexAttribOffsetEXT( 0x%04X, 0x%04X, 0x%04X, %d, %d, %b, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (unsigned)index,
        (int)size,
        (int)type,
        (bool)normalized,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayVertexAttribOffsetEXT" );
      glVertexArrayVertexAttribOffsetEXT( vaobj, buffer, index, size, type, normalized, stride, offset );
    }
    static void VertexArrayVertexOffsetEXT(
      GLuint vaobj,
      GLuint buffer,
      GLint size,
      GLenum type,
      GLsizei stride,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glVertexArrayVertexOffsetEXT( 0x%04X, 0x%04X, %d, %d, %d, %d )",
        (unsigned)vaobj,
        (unsigned)buffer,
        (int)size,
        (int)type,
        (int)stride,
        (int)offset
      );
      ErrorReporter errorReporter( "glVertexArrayVertexOffsetEXT" );
      glVertexArrayVertexOffsetEXT( vaobj, buffer, size, type, stride, offset );
    }
    static void ColorMaskIndexedEXT(
      GLuint buf,
      GLboolean r,
      GLboolean g,
      GLboolean b,
      GLboolean a
    ){
      FABRIC_OGL_TRACE( "glColorMaskIndexedEXT( 0x%04X, %b, %b, %b, %b )",
        (unsigned)buf,
        (bool)r,
        (bool)g,
        (bool)b,
        (bool)a
      );
      ErrorReporter errorReporter( "glColorMaskIndexedEXT" );
      glColorMaskIndexedEXT( buf, r, g, b, a );
    }
    static void DisableIndexedEXT(
      GLenum target,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glDisableIndexedEXT( %d, 0x%04X )",
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glDisableIndexedEXT" );
      glDisableIndexedEXT( target, index );
    }
    static void EnableIndexedEXT(
      GLenum target,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glEnableIndexedEXT( %d, 0x%04X )",
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glEnableIndexedEXT" );
      glEnableIndexedEXT( target, index );
    }
    static void GetBooleanIndexedvEXT(
      GLenum value,
      GLuint index,
      GLboolean* data
    ){
      FABRIC_OGL_TRACE( "glGetBooleanIndexedvEXT( %d, 0x%04X, GLboolean* )",
        (int)value,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetBooleanIndexedvEXT" );
      glGetBooleanIndexedvEXT( value, index, data );
    }
    static void GetIntegerIndexedvEXT(
      GLenum value,
      GLuint index,
      GLint* data
    ){
      FABRIC_OGL_TRACE( "glGetIntegerIndexedvEXT( %d, 0x%04X, GLint* )",
        (int)value,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glGetIntegerIndexedvEXT" );
      glGetIntegerIndexedvEXT( value, index, data );
    }
    static GLboolean IsEnabledIndexedEXT(
      GLenum target,
      GLuint index
    ){
      FABRIC_OGL_TRACE( "glIsEnabledIndexedEXT( %d, 0x%04X )",
        (int)target,
        (unsigned)index
      );
      ErrorReporter errorReporter( "glIsEnabledIndexedEXT" );
      GLboolean result = glIsEnabledIndexedEXT( target, index );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void DrawArraysInstancedEXT(
      GLenum mode,
      GLint start,
      GLsizei count,
      GLsizei primcount
    ){
      FABRIC_OGL_TRACE( "glDrawArraysInstancedEXT( %d, %d, %d, %d )",
        (int)mode,
        (int)start,
        (int)count,
        (int)primcount
      );
      ErrorReporter errorReporter( "glDrawArraysInstancedEXT" );
      glDrawArraysInstancedEXT( mode, start, count, primcount );
    }
    static void DrawElementsInstancedEXT(
      GLenum mode,
      GLsizei count,
      GLenum type,
      const GLvoid* indices,
      GLsizei primcount
    ){
      FABRIC_OGL_TRACE( "glDrawElementsInstancedEXT( %d, %d, %d, GLvoid*, %d )",
        (int)mode,
        (int)count,
        (int)type,
        (int)primcount
      );
      ErrorReporter errorReporter( "glDrawElementsInstancedEXT" );
      glDrawElementsInstancedEXT( mode, count, type, indices, primcount );
    }
    static void DrawRangeElementsEXT(
      GLenum mode,
      GLuint start,
      GLuint end,
      GLsizei count,
      GLenum type,
      const GLvoid* indices
    ){
      FABRIC_OGL_TRACE( "glDrawRangeElementsEXT( %d, 0x%04X, 0x%04X, %d, %d, GLvoid* )",
        (int)mode,
        (unsigned)start,
        (unsigned)end,
        (int)count,
        (int)type
      );
      ErrorReporter errorReporter( "glDrawRangeElementsEXT" );
      glDrawRangeElementsEXT( mode, start, end, count, type, indices );
    }
    static void FogCoordPointerEXT(
      GLenum type,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glFogCoordPointerEXT( %d, %d, GLvoid* )",
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glFogCoordPointerEXT" );
      glFogCoordPointerEXT( type, stride, pointer );
    }
    static void FogCoorddEXT(
      GLdouble coord
    ){
      FABRIC_OGL_TRACE( "glFogCoorddEXT( %f )",
        (float)coord
      );
      ErrorReporter errorReporter( "glFogCoorddEXT" );
      glFogCoorddEXT( coord );
    }
    static void FogCoorddvEXT(
      const GLdouble* coord
    ){
      FABRIC_OGL_TRACE( "glFogCoorddvEXT( GLdouble* )" );
      ErrorReporter errorReporter( "glFogCoorddvEXT" );
      glFogCoorddvEXT( coord );
    }
    static void FogCoordfEXT(
      GLfloat coord
    ){
      FABRIC_OGL_TRACE( "glFogCoordfEXT( %f )",
        (float)coord
      );
      ErrorReporter errorReporter( "glFogCoordfEXT" );
      glFogCoordfEXT( coord );
    }
    static void FogCoordfvEXT(
      const GLfloat* coord
    ){
      FABRIC_OGL_TRACE( "glFogCoordfvEXT( GLfloat* )" );
      ErrorReporter errorReporter( "glFogCoordfvEXT" );
      glFogCoordfvEXT( coord );
    }
    static void FragmentColorMaterialEXT(
      GLenum face,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glFragmentColorMaterialEXT( %d, %d )",
        (int)face,
        (int)mode
      );
      ErrorReporter errorReporter( "glFragmentColorMaterialEXT" );
      glFragmentColorMaterialEXT( face, mode );
    }
    static void FragmentLightModelfEXT(
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glFragmentLightModelfEXT( %d, %f )",
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glFragmentLightModelfEXT" );
      glFragmentLightModelfEXT( pname, param );
    }
    static void FragmentLightModelfvEXT(
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glFragmentLightModelfvEXT( %d, GLfloat* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glFragmentLightModelfvEXT" );
      glFragmentLightModelfvEXT( pname, params );
    }
    static void FragmentLightModeliEXT(
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glFragmentLightModeliEXT( %d, %d )",
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glFragmentLightModeliEXT" );
      glFragmentLightModeliEXT( pname, param );
    }
    static void FragmentLightModelivEXT(
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glFragmentLightModelivEXT( %d, GLint* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glFragmentLightModelivEXT" );
      glFragmentLightModelivEXT( pname, params );
    }
    static void FragmentLightfEXT(
      GLenum light,
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glFragmentLightfEXT( %d, %d, %f )",
        (int)light,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glFragmentLightfEXT" );
      glFragmentLightfEXT( light, pname, param );
    }
    static void FragmentLightfvEXT(
      GLenum light,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glFragmentLightfvEXT( %d, %d, GLfloat* )",
        (int)light,
        (int)pname
      );
      ErrorReporter errorReporter( "glFragmentLightfvEXT" );
      glFragmentLightfvEXT( light, pname, params );
    }
    static void FragmentLightiEXT(
      GLenum light,
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glFragmentLightiEXT( %d, %d, %d )",
        (int)light,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glFragmentLightiEXT" );
      glFragmentLightiEXT( light, pname, param );
    }
    static void FragmentLightivEXT(
      GLenum light,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glFragmentLightivEXT( %d, %d, GLint* )",
        (int)light,
        (int)pname
      );
      ErrorReporter errorReporter( "glFragmentLightivEXT" );
      glFragmentLightivEXT( light, pname, params );
    }
    static void FragmentMaterialfEXT(
      GLenum face,
      GLenum pname,
      const GLfloat param
    ){
      FABRIC_OGL_TRACE( "glFragmentMaterialfEXT( %d, %d, %f )",
        (int)face,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glFragmentMaterialfEXT" );
      glFragmentMaterialfEXT( face, pname, param );
    }
    static void FragmentMaterialfvEXT(
      GLenum face,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glFragmentMaterialfvEXT( %d, %d, GLfloat* )",
        (int)face,
        (int)pname
      );
      ErrorReporter errorReporter( "glFragmentMaterialfvEXT" );
      glFragmentMaterialfvEXT( face, pname, params );
    }
    static void FragmentMaterialiEXT(
      GLenum face,
      GLenum pname,
      const GLint param
    ){
      FABRIC_OGL_TRACE( "glFragmentMaterialiEXT( %d, %d, %d )",
        (int)face,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glFragmentMaterialiEXT" );
      glFragmentMaterialiEXT( face, pname, param );
    }
    static void FragmentMaterialivEXT(
      GLenum face,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glFragmentMaterialivEXT( %d, %d, GLint* )",
        (int)face,
        (int)pname
      );
      ErrorReporter errorReporter( "glFragmentMaterialivEXT" );
      glFragmentMaterialivEXT( face, pname, params );
    }
    static void GetFragmentLightfvEXT(
      GLenum light,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetFragmentLightfvEXT( %d, %d, GLfloat* )",
        (int)light,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetFragmentLightfvEXT" );
      glGetFragmentLightfvEXT( light, pname, params );
    }
    static void GetFragmentLightivEXT(
      GLenum light,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetFragmentLightivEXT( %d, %d, GLint* )",
        (int)light,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetFragmentLightivEXT" );
      glGetFragmentLightivEXT( light, pname, params );
    }
    static void GetFragmentMaterialfvEXT(
      GLenum face,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetFragmentMaterialfvEXT( %d, %d, GLfloat* )",
        (int)face,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetFragmentMaterialfvEXT" );
      glGetFragmentMaterialfvEXT( face, pname, params );
    }
    static void GetFragmentMaterialivEXT(
      GLenum face,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetFragmentMaterialivEXT( %d, %d, GLint* )",
        (int)face,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetFragmentMaterialivEXT" );
      glGetFragmentMaterialivEXT( face, pname, params );
    }
    static void LightEnviEXT(
      GLenum pname,
      GLint param
    ){
      FABRIC_OGL_TRACE( "glLightEnviEXT( %d, %d )",
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glLightEnviEXT" );
      glLightEnviEXT( pname, param );
    }
    static void BlitFramebufferEXT(
      GLint srcX0,
      GLint srcY0,
      GLint srcX1,
      GLint srcY1,
      GLint dstX0,
      GLint dstY0,
      GLint dstX1,
      GLint dstY1,
      GLbitfield mask,
      GLenum filter
    ){
      FABRIC_OGL_TRACE( "glBlitFramebufferEXT( %d, %d, %d, %d, %d, %d, %d, %d, 0x%04X, %d )",
        (int)srcX0,
        (int)srcY0,
        (int)srcX1,
        (int)srcY1,
        (int)dstX0,
        (int)dstY0,
        (int)dstX1,
        (int)dstY1,
        (unsigned)mask,
        (int)filter
      );
      ErrorReporter errorReporter( "glBlitFramebufferEXT" );
      glBlitFramebufferEXT( srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter );
    }
    static void RenderbufferStorageMultisampleEXT(
      GLenum target,
      GLsizei samples,
      GLenum internalformat,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glRenderbufferStorageMultisampleEXT( %d, %d, %d, %d, %d )",
        (int)target,
        (int)samples,
        (int)internalformat,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glRenderbufferStorageMultisampleEXT" );
      glRenderbufferStorageMultisampleEXT( target, samples, internalformat, width, height );
    }
    static void BindFramebufferEXT(
      GLenum target,
      GLuint framebuffer
    ){
      FABRIC_OGL_TRACE( "glBindFramebufferEXT( %d, 0x%04X )",
        (int)target,
        (unsigned)framebuffer
      );
      ErrorReporter errorReporter( "glBindFramebufferEXT" );
      glBindFramebufferEXT( target, framebuffer );
    }
    static void BindRenderbufferEXT(
      GLenum target,
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glBindRenderbufferEXT( %d, 0x%04X )",
        (int)target,
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glBindRenderbufferEXT" );
      glBindRenderbufferEXT( target, renderbuffer );
    }
    static GLenum CheckFramebufferStatusEXT(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glCheckFramebufferStatusEXT( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glCheckFramebufferStatusEXT" );
      GLenum result = glCheckFramebufferStatusEXT( target );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void DeleteFramebuffersEXT(
      GLsizei n,
      const GLuint* framebuffers
    ){
      FABRIC_OGL_TRACE( "glDeleteFramebuffersEXT( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteFramebuffersEXT" );
      glDeleteFramebuffersEXT( n, framebuffers );
    }
    static void DeleteRenderbuffersEXT(
      GLsizei n,
      const GLuint* renderbuffers
    ){
      FABRIC_OGL_TRACE( "glDeleteRenderbuffersEXT( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteRenderbuffersEXT" );
      glDeleteRenderbuffersEXT( n, renderbuffers );
    }
    static void FramebufferRenderbufferEXT(
      GLenum target,
      GLenum attachment,
      GLenum renderbuffertarget,
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glFramebufferRenderbufferEXT( %d, %d, %d, 0x%04X )",
        (int)target,
        (int)attachment,
        (int)renderbuffertarget,
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glFramebufferRenderbufferEXT" );
      glFramebufferRenderbufferEXT( target, attachment, renderbuffertarget, renderbuffer );
    }
    static void FramebufferTexture1DEXT(
      GLenum target,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level
    ){
      FABRIC_OGL_TRACE( "glFramebufferTexture1DEXT( %d, %d, %d, 0x%04X, %d )",
        (int)target,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level
      );
      ErrorReporter errorReporter( "glFramebufferTexture1DEXT" );
      glFramebufferTexture1DEXT( target, attachment, textarget, texture, level );
    }
    static void FramebufferTexture2DEXT(
      GLenum target,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level
    ){
      FABRIC_OGL_TRACE( "glFramebufferTexture2DEXT( %d, %d, %d, 0x%04X, %d )",
        (int)target,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level
      );
      ErrorReporter errorReporter( "glFramebufferTexture2DEXT" );
      glFramebufferTexture2DEXT( target, attachment, textarget, texture, level );
    }
    static void FramebufferTexture3DEXT(
      GLenum target,
      GLenum attachment,
      GLenum textarget,
      GLuint texture,
      GLint level,
      GLint zoffset
    ){
      FABRIC_OGL_TRACE( "glFramebufferTexture3DEXT( %d, %d, %d, 0x%04X, %d, %d )",
        (int)target,
        (int)attachment,
        (int)textarget,
        (unsigned)texture,
        (int)level,
        (int)zoffset
      );
      ErrorReporter errorReporter( "glFramebufferTexture3DEXT" );
      glFramebufferTexture3DEXT( target, attachment, textarget, texture, level, zoffset );
    }
    static void GenFramebuffersEXT(
      GLsizei n,
      GLuint* framebuffers
    ){
      FABRIC_OGL_TRACE( "glGenFramebuffersEXT( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenFramebuffersEXT" );
      glGenFramebuffersEXT( n, framebuffers );
    }
    static void GenRenderbuffersEXT(
      GLsizei n,
      GLuint* renderbuffers
    ){
      FABRIC_OGL_TRACE( "glGenRenderbuffersEXT( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenRenderbuffersEXT" );
      glGenRenderbuffersEXT( n, renderbuffers );
    }
    static void GenerateMipmapEXT(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glGenerateMipmapEXT( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glGenerateMipmapEXT" );
      glGenerateMipmapEXT( target );
    }
    static void GetFramebufferAttachmentParameterivEXT(
      GLenum target,
      GLenum attachment,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetFramebufferAttachmentParameterivEXT( %d, %d, %d, GLint* )",
        (int)target,
        (int)attachment,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetFramebufferAttachmentParameterivEXT" );
      glGetFramebufferAttachmentParameterivEXT( target, attachment, pname, params );
    }
    static void GetRenderbufferParameterivEXT(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetRenderbufferParameterivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetRenderbufferParameterivEXT" );
      glGetRenderbufferParameterivEXT( target, pname, params );
    }
    static GLboolean IsFramebufferEXT(
      GLuint framebuffer
    ){
      FABRIC_OGL_TRACE( "glIsFramebufferEXT( 0x%04X )",
        (unsigned)framebuffer
      );
      ErrorReporter errorReporter( "glIsFramebufferEXT" );
      GLboolean result = glIsFramebufferEXT( framebuffer );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLboolean IsRenderbufferEXT(
      GLuint renderbuffer
    ){
      FABRIC_OGL_TRACE( "glIsRenderbufferEXT( 0x%04X )",
        (unsigned)renderbuffer
      );
      ErrorReporter errorReporter( "glIsRenderbufferEXT" );
      GLboolean result = glIsRenderbufferEXT( renderbuffer );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void RenderbufferStorageEXT(
      GLenum target,
      GLenum internalformat,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glRenderbufferStorageEXT( %d, %d, %d, %d )",
        (int)target,
        (int)internalformat,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glRenderbufferStorageEXT" );
      glRenderbufferStorageEXT( target, internalformat, width, height );
    }
    static void FramebufferTextureEXT(
      GLenum target,
      GLenum attachment,
      GLuint texture,
      GLint level
    ){
      FABRIC_OGL_TRACE( "glFramebufferTextureEXT( %d, %d, 0x%04X, %d )",
        (int)target,
        (int)attachment,
        (unsigned)texture,
        (int)level
      );
      ErrorReporter errorReporter( "glFramebufferTextureEXT" );
      glFramebufferTextureEXT( target, attachment, texture, level );
    }
    static void FramebufferTextureFaceEXT(
      GLenum target,
      GLenum attachment,
      GLuint texture,
      GLint level,
      GLenum face
    ){
      FABRIC_OGL_TRACE( "glFramebufferTextureFaceEXT( %d, %d, 0x%04X, %d, %d )",
        (int)target,
        (int)attachment,
        (unsigned)texture,
        (int)level,
        (int)face
      );
      ErrorReporter errorReporter( "glFramebufferTextureFaceEXT" );
      glFramebufferTextureFaceEXT( target, attachment, texture, level, face );
    }
    static void FramebufferTextureLayerEXT(
      GLenum target,
      GLenum attachment,
      GLuint texture,
      GLint level,
      GLint layer
    ){
      FABRIC_OGL_TRACE( "glFramebufferTextureLayerEXT( %d, %d, 0x%04X, %d, %d )",
        (int)target,
        (int)attachment,
        (unsigned)texture,
        (int)level,
        (int)layer
      );
      ErrorReporter errorReporter( "glFramebufferTextureLayerEXT" );
      glFramebufferTextureLayerEXT( target, attachment, texture, level, layer );
    }
    static void ProgramParameteriEXT(
      GLuint program,
      GLenum pname,
      GLint value
    ){
      FABRIC_OGL_TRACE( "glProgramParameteriEXT( 0x%04X, %d, %d )",
        (unsigned)program,
        (int)pname,
        (int)value
      );
      ErrorReporter errorReporter( "glProgramParameteriEXT" );
      glProgramParameteriEXT( program, pname, value );
    }
    static void ProgramEnvParameters4fvEXT(
      GLenum target,
      GLuint index,
      GLsizei count,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glProgramEnvParameters4fvEXT( %d, 0x%04X, %d, GLfloat* )",
        (int)target,
        (unsigned)index,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramEnvParameters4fvEXT" );
      glProgramEnvParameters4fvEXT( target, index, count, params );
    }
    static void ProgramLocalParameters4fvEXT(
      GLenum target,
      GLuint index,
      GLsizei count,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glProgramLocalParameters4fvEXT( %d, 0x%04X, %d, GLfloat* )",
        (int)target,
        (unsigned)index,
        (int)count
      );
      ErrorReporter errorReporter( "glProgramLocalParameters4fvEXT" );
      glProgramLocalParameters4fvEXT( target, index, count, params );
    }
    static void BindFragDataLocationEXT(
      GLuint program,
      GLuint color,
      void* name
    ){
      FABRIC_OGL_TRACE( "glBindFragDataLocationEXT( 0x%04X, 0x%04X, char* )",
        (unsigned)program,
        (unsigned)color
      );
      ErrorReporter errorReporter( "glBindFragDataLocationEXT" );
      const GLchar* nameStr = (const GLchar*)stringDesc->getValueData( &name );
      glBindFragDataLocationEXT( program, color, nameStr );
    }
    static GLint GetFragDataLocationEXT(
      GLuint program,
      void* name
    ){
      FABRIC_OGL_TRACE( "glGetFragDataLocationEXT( 0x%04X, char* )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glGetFragDataLocationEXT" );
      const GLchar* nameStr = (const GLchar*)stringDesc->getValueData( &name );
      GLint result = glGetFragDataLocationEXT( program, nameStr );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static void GetUniformuivEXT(
      GLuint program,
      GLint location,
      GLuint* params
    ){
      FABRIC_OGL_TRACE( "glGetUniformuivEXT( 0x%04X, %d, GLuint* )",
        (unsigned)program,
        (int)location
      );
      ErrorReporter errorReporter( "glGetUniformuivEXT" );
      glGetUniformuivEXT( program, location, params );
    }
    static void GetVertexAttribIivEXT(
      GLuint index,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetVertexAttribIivEXT( 0x%04X, %d, GLint* )",
        (unsigned)index,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetVertexAttribIivEXT" );
      glGetVertexAttribIivEXT( index, pname, params );
    }
    static void GetVertexAttribIuivEXT(
      GLuint index,
      GLenum pname,
      GLuint* params
    ){
      FABRIC_OGL_TRACE( "glGetVertexAttribIuivEXT( 0x%04X, %d, GLuint* )",
        (unsigned)index,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetVertexAttribIuivEXT" );
      glGetVertexAttribIuivEXT( index, pname, params );
    }
    static void Uniform1uiEXT(
      GLint location,
      GLuint v0
    ){
      FABRIC_OGL_TRACE( "glUniform1uiEXT( %d, 0x%04X )",
        (int)location,
        (unsigned)v0
      );
      ErrorReporter errorReporter( "glUniform1uiEXT" );
      glUniform1uiEXT( location, v0 );
    }
    static void Uniform1uivEXT(
      GLint location,
      GLsizei count,
      const GLuint* value
    ){
      FABRIC_OGL_TRACE( "glUniform1uivEXT( %d, %d, GLuint* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform1uivEXT" );
      glUniform1uivEXT( location, count, value );
    }
    static void Uniform2uiEXT(
      GLint location,
      GLuint v0,
      GLuint v1
    ){
      FABRIC_OGL_TRACE( "glUniform2uiEXT( %d, 0x%04X, 0x%04X )",
        (int)location,
        (unsigned)v0,
        (unsigned)v1
      );
      ErrorReporter errorReporter( "glUniform2uiEXT" );
      glUniform2uiEXT( location, v0, v1 );
    }
    static void Uniform2uivEXT(
      GLint location,
      GLsizei count,
      const GLuint* value
    ){
      FABRIC_OGL_TRACE( "glUniform2uivEXT( %d, %d, GLuint* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform2uivEXT" );
      glUniform2uivEXT( location, count, value );
    }
    static void Uniform3uiEXT(
      GLint location,
      GLuint v0,
      GLuint v1,
      GLuint v2
    ){
      FABRIC_OGL_TRACE( "glUniform3uiEXT( %d, 0x%04X, 0x%04X, 0x%04X )",
        (int)location,
        (unsigned)v0,
        (unsigned)v1,
        (unsigned)v2
      );
      ErrorReporter errorReporter( "glUniform3uiEXT" );
      glUniform3uiEXT( location, v0, v1, v2 );
    }
    static void Uniform3uivEXT(
      GLint location,
      GLsizei count,
      const GLuint* value
    ){
      FABRIC_OGL_TRACE( "glUniform3uivEXT( %d, %d, GLuint* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform3uivEXT" );
      glUniform3uivEXT( location, count, value );
    }
    static void Uniform4uiEXT(
      GLint location,
      GLuint v0,
      GLuint v1,
      GLuint v2,
      GLuint v3
    ){
      FABRIC_OGL_TRACE( "glUniform4uiEXT( %d, 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (int)location,
        (unsigned)v0,
        (unsigned)v1,
        (unsigned)v2,
        (unsigned)v3
      );
      ErrorReporter errorReporter( "glUniform4uiEXT" );
      glUniform4uiEXT( location, v0, v1, v2, v3 );
    }
    static void Uniform4uivEXT(
      GLint location,
      GLsizei count,
      const GLuint* value
    ){
      FABRIC_OGL_TRACE( "glUniform4uivEXT( %d, %d, GLuint* )",
        (int)location,
        (int)count
      );
      ErrorReporter errorReporter( "glUniform4uivEXT" );
      glUniform4uivEXT( location, count, value );
    }
    static void VertexAttribI1iEXT(
      GLuint index,
      GLint x
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI1iEXT( 0x%04X, %d )",
        (unsigned)index,
        (int)x
      );
      ErrorReporter errorReporter( "glVertexAttribI1iEXT" );
      glVertexAttribI1iEXT( index, x );
    }
    static void VertexAttribI1ivEXT(
      GLuint index,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI1ivEXT( 0x%04X, GLint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI1ivEXT" );
      glVertexAttribI1ivEXT( index, v );
    }
    static void VertexAttribI1uiEXT(
      GLuint index,
      GLuint x
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI1uiEXT( 0x%04X, 0x%04X )",
        (unsigned)index,
        (unsigned)x
      );
      ErrorReporter errorReporter( "glVertexAttribI1uiEXT" );
      glVertexAttribI1uiEXT( index, x );
    }
    static void VertexAttribI1uivEXT(
      GLuint index,
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI1uivEXT( 0x%04X, GLuint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI1uivEXT" );
      glVertexAttribI1uivEXT( index, v );
    }
    static void VertexAttribI2iEXT(
      GLuint index,
      GLint x,
      GLint y
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI2iEXT( 0x%04X, %d, %d )",
        (unsigned)index,
        (int)x,
        (int)y
      );
      ErrorReporter errorReporter( "glVertexAttribI2iEXT" );
      glVertexAttribI2iEXT( index, x, y );
    }
    static void VertexAttribI2ivEXT(
      GLuint index,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI2ivEXT( 0x%04X, GLint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI2ivEXT" );
      glVertexAttribI2ivEXT( index, v );
    }
    static void VertexAttribI2uiEXT(
      GLuint index,
      GLuint x,
      GLuint y
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI2uiEXT( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)index,
        (unsigned)x,
        (unsigned)y
      );
      ErrorReporter errorReporter( "glVertexAttribI2uiEXT" );
      glVertexAttribI2uiEXT( index, x, y );
    }
    static void VertexAttribI2uivEXT(
      GLuint index,
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI2uivEXT( 0x%04X, GLuint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI2uivEXT" );
      glVertexAttribI2uivEXT( index, v );
    }
    static void VertexAttribI3iEXT(
      GLuint index,
      GLint x,
      GLint y,
      GLint z
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI3iEXT( 0x%04X, %d, %d, %d )",
        (unsigned)index,
        (int)x,
        (int)y,
        (int)z
      );
      ErrorReporter errorReporter( "glVertexAttribI3iEXT" );
      glVertexAttribI3iEXT( index, x, y, z );
    }
    static void VertexAttribI3ivEXT(
      GLuint index,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI3ivEXT( 0x%04X, GLint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI3ivEXT" );
      glVertexAttribI3ivEXT( index, v );
    }
    static void VertexAttribI3uiEXT(
      GLuint index,
      GLuint x,
      GLuint y,
      GLuint z
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI3uiEXT( 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)index,
        (unsigned)x,
        (unsigned)y,
        (unsigned)z
      );
      ErrorReporter errorReporter( "glVertexAttribI3uiEXT" );
      glVertexAttribI3uiEXT( index, x, y, z );
    }
    static void VertexAttribI3uivEXT(
      GLuint index,
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI3uivEXT( 0x%04X, GLuint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI3uivEXT" );
      glVertexAttribI3uivEXT( index, v );
    }
    static void VertexAttribI4bvEXT(
      GLuint index,
      const GLbyte* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4bvEXT( 0x%04X, GLbyte* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI4bvEXT" );
      glVertexAttribI4bvEXT( index, v );
    }
    static void VertexAttribI4iEXT(
      GLuint index,
      GLint x,
      GLint y,
      GLint z,
      GLint w
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4iEXT( 0x%04X, %d, %d, %d, %d )",
        (unsigned)index,
        (int)x,
        (int)y,
        (int)z,
        (int)w
      );
      ErrorReporter errorReporter( "glVertexAttribI4iEXT" );
      glVertexAttribI4iEXT( index, x, y, z, w );
    }
    static void VertexAttribI4ivEXT(
      GLuint index,
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4ivEXT( 0x%04X, GLint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI4ivEXT" );
      glVertexAttribI4ivEXT( index, v );
    }
    static void VertexAttribI4svEXT(
      GLuint index,
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4svEXT( 0x%04X, GLshort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI4svEXT" );
      glVertexAttribI4svEXT( index, v );
    }
    static void VertexAttribI4ubvEXT(
      GLuint index,
      const GLubyte* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4ubvEXT( 0x%04X, GLubyte* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI4ubvEXT" );
      glVertexAttribI4ubvEXT( index, v );
    }
    static void VertexAttribI4uiEXT(
      GLuint index,
      GLuint x,
      GLuint y,
      GLuint z,
      GLuint w
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4uiEXT( 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)index,
        (unsigned)x,
        (unsigned)y,
        (unsigned)z,
        (unsigned)w
      );
      ErrorReporter errorReporter( "glVertexAttribI4uiEXT" );
      glVertexAttribI4uiEXT( index, x, y, z, w );
    }
    static void VertexAttribI4uivEXT(
      GLuint index,
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4uivEXT( 0x%04X, GLuint* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI4uivEXT" );
      glVertexAttribI4uivEXT( index, v );
    }
    static void VertexAttribI4usvEXT(
      GLuint index,
      const GLushort* v
    ){
      FABRIC_OGL_TRACE( "glVertexAttribI4usvEXT( 0x%04X, GLushort* )",
        (unsigned)index
      );
      ErrorReporter errorReporter( "glVertexAttribI4usvEXT" );
      glVertexAttribI4usvEXT( index, v );
    }
    static void VertexAttribIPointerEXT(
      GLuint index,
      GLint size,
      GLenum type,
      GLsizei stride,
      const GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glVertexAttribIPointerEXT( 0x%04X, %d, %d, %d, GLvoid* )",
        (unsigned)index,
        (int)size,
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glVertexAttribIPointerEXT" );
      glVertexAttribIPointerEXT( index, size, type, stride, pointer );
    }
    static void GetHistogramEXT(
      GLenum target,
      GLboolean reset,
      GLenum format,
      GLenum type,
      void* values
    ){
      FABRIC_OGL_TRACE( "glGetHistogramEXT( %d, %b, %d, %d, void* )",
        (int)target,
        (bool)reset,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetHistogramEXT" );
      glGetHistogramEXT( target, reset, format, type, values );
    }
    static void GetHistogramParameterfvEXT(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetHistogramParameterfvEXT( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetHistogramParameterfvEXT" );
      glGetHistogramParameterfvEXT( target, pname, params );
    }
    static void GetHistogramParameterivEXT(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetHistogramParameterivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetHistogramParameterivEXT" );
      glGetHistogramParameterivEXT( target, pname, params );
    }
    static void GetMinmaxEXT(
      GLenum target,
      GLboolean reset,
      GLenum format,
      GLenum type,
      void* values
    ){
      FABRIC_OGL_TRACE( "glGetMinmaxEXT( %d, %b, %d, %d, void* )",
        (int)target,
        (bool)reset,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetMinmaxEXT" );
      glGetMinmaxEXT( target, reset, format, type, values );
    }
    static void GetMinmaxParameterfvEXT(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetMinmaxParameterfvEXT( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMinmaxParameterfvEXT" );
      glGetMinmaxParameterfvEXT( target, pname, params );
    }
    static void GetMinmaxParameterivEXT(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetMinmaxParameterivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetMinmaxParameterivEXT" );
      glGetMinmaxParameterivEXT( target, pname, params );
    }
    static void HistogramEXT(
      GLenum target,
      GLsizei width,
      GLenum internalformat,
      GLboolean sink
    ){
      FABRIC_OGL_TRACE( "glHistogramEXT( %d, %d, %d, %b )",
        (int)target,
        (int)width,
        (int)internalformat,
        (bool)sink
      );
      ErrorReporter errorReporter( "glHistogramEXT" );
      glHistogramEXT( target, width, internalformat, sink );
    }
    static void MinmaxEXT(
      GLenum target,
      GLenum internalformat,
      GLboolean sink
    ){
      FABRIC_OGL_TRACE( "glMinmaxEXT( %d, %d, %b )",
        (int)target,
        (int)internalformat,
        (bool)sink
      );
      ErrorReporter errorReporter( "glMinmaxEXT" );
      glMinmaxEXT( target, internalformat, sink );
    }
    static void ResetHistogramEXT(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glResetHistogramEXT( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glResetHistogramEXT" );
      glResetHistogramEXT( target );
    }
    static void ResetMinmaxEXT(
      GLenum target
    ){
      FABRIC_OGL_TRACE( "glResetMinmaxEXT( %d )",
        (int)target
      );
      ErrorReporter errorReporter( "glResetMinmaxEXT" );
      glResetMinmaxEXT( target );
    }
    static void IndexFuncEXT(
      GLenum func,
      GLfloat ref
    ){
      FABRIC_OGL_TRACE( "glIndexFuncEXT( %d, %f )",
        (int)func,
        (float)ref
      );
      ErrorReporter errorReporter( "glIndexFuncEXT" );
      glIndexFuncEXT( func, ref );
    }
    static void IndexMaterialEXT(
      GLenum face,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glIndexMaterialEXT( %d, %d )",
        (int)face,
        (int)mode
      );
      ErrorReporter errorReporter( "glIndexMaterialEXT" );
      glIndexMaterialEXT( face, mode );
    }
    static void ApplyTextureEXT(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glApplyTextureEXT( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glApplyTextureEXT" );
      glApplyTextureEXT( mode );
    }
    static void TextureLightEXT(
      GLenum pname
    ){
      FABRIC_OGL_TRACE( "glTextureLightEXT( %d )",
        (int)pname
      );
      ErrorReporter errorReporter( "glTextureLightEXT" );
      glTextureLightEXT( pname );
    }
    static void TextureMaterialEXT(
      GLenum face,
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glTextureMaterialEXT( %d, %d )",
        (int)face,
        (int)mode
      );
      ErrorReporter errorReporter( "glTextureMaterialEXT" );
      glTextureMaterialEXT( face, mode );
    }
    static void MultiDrawArraysEXT(
      GLenum mode,
      GLint* first,
      GLsizei* count,
      GLsizei primcount
    ){
      FABRIC_OGL_TRACE( "glMultiDrawArraysEXT( %d, GLint*, GLsizei*, %d )",
        (int)mode,
        (int)primcount
      );
      ErrorReporter errorReporter( "glMultiDrawArraysEXT" );
      glMultiDrawArraysEXT( mode, first, count, primcount );
    }
    static void SampleMaskEXT(
      GLclampf value,
      GLboolean invert
    ){
      FABRIC_OGL_TRACE( "glSampleMaskEXT( %f, %b )",
        (float)value,
        (bool)invert
      );
      ErrorReporter errorReporter( "glSampleMaskEXT" );
      glSampleMaskEXT( value, invert );
    }
    static void SamplePatternEXT(
      GLenum pattern
    ){
      FABRIC_OGL_TRACE( "glSamplePatternEXT( %d )",
        (int)pattern
      );
      ErrorReporter errorReporter( "glSamplePatternEXT" );
      glSamplePatternEXT( pattern );
    }
    static void ColorTableEXT(
      GLenum target,
      GLenum internalFormat,
      GLsizei width,
      GLenum format,
      GLenum type,
      const void* data
    ){
      FABRIC_OGL_TRACE( "glColorTableEXT( %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalFormat,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glColorTableEXT" );
      glColorTableEXT( target, internalFormat, width, format, type, data );
    }
    static void GetColorTableEXT(
      GLenum target,
      GLenum format,
      GLenum type,
      void* data
    ){
      FABRIC_OGL_TRACE( "glGetColorTableEXT( %d, %d, %d, void* )",
        (int)target,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glGetColorTableEXT" );
      glGetColorTableEXT( target, format, type, data );
    }
    static void GetColorTableParameterfvEXT(
      GLenum target,
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetColorTableParameterfvEXT( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetColorTableParameterfvEXT" );
      glGetColorTableParameterfvEXT( target, pname, params );
    }
    static void GetColorTableParameterivEXT(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetColorTableParameterivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetColorTableParameterivEXT" );
      glGetColorTableParameterivEXT( target, pname, params );
    }
    static void GetPixelTransformParameterfvEXT(
      GLenum target,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glGetPixelTransformParameterfvEXT( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetPixelTransformParameterfvEXT" );
      glGetPixelTransformParameterfvEXT( target, pname, params );
    }
    static void GetPixelTransformParameterivEXT(
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetPixelTransformParameterivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetPixelTransformParameterivEXT" );
      glGetPixelTransformParameterivEXT( target, pname, params );
    }
    static void PixelTransformParameterfEXT(
      GLenum target,
      GLenum pname,
      const GLfloat param
    ){
      FABRIC_OGL_TRACE( "glPixelTransformParameterfEXT( %d, %d, %f )",
        (int)target,
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glPixelTransformParameterfEXT" );
      glPixelTransformParameterfEXT( target, pname, param );
    }
    static void PixelTransformParameterfvEXT(
      GLenum target,
      GLenum pname,
      const GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glPixelTransformParameterfvEXT( %d, %d, GLfloat* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glPixelTransformParameterfvEXT" );
      glPixelTransformParameterfvEXT( target, pname, params );
    }
    static void PixelTransformParameteriEXT(
      GLenum target,
      GLenum pname,
      const GLint param
    ){
      FABRIC_OGL_TRACE( "glPixelTransformParameteriEXT( %d, %d, %d )",
        (int)target,
        (int)pname,
        (int)param
      );
      ErrorReporter errorReporter( "glPixelTransformParameteriEXT" );
      glPixelTransformParameteriEXT( target, pname, param );
    }
    static void PixelTransformParameterivEXT(
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glPixelTransformParameterivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glPixelTransformParameterivEXT" );
      glPixelTransformParameterivEXT( target, pname, params );
    }
    static void PointParameterfEXT(
      GLenum pname,
      GLfloat param
    ){
      FABRIC_OGL_TRACE( "glPointParameterfEXT( %d, %f )",
        (int)pname,
        (float)param
      );
      ErrorReporter errorReporter( "glPointParameterfEXT" );
      glPointParameterfEXT( pname, param );
    }
    static void PointParameterfvEXT(
      GLenum pname,
      GLfloat* params
    ){
      FABRIC_OGL_TRACE( "glPointParameterfvEXT( %d, GLfloat* )",
        (int)pname
      );
      ErrorReporter errorReporter( "glPointParameterfvEXT" );
      glPointParameterfvEXT( pname, params );
    }
    static void PolygonOffsetEXT(
      GLfloat factor,
      GLfloat bias
    ){
      FABRIC_OGL_TRACE( "glPolygonOffsetEXT( %f, %f )",
        (float)factor,
        (float)bias
      );
      ErrorReporter errorReporter( "glPolygonOffsetEXT" );
      glPolygonOffsetEXT( factor, bias );
    }
    static void ProvokingVertexEXT(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glProvokingVertexEXT( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glProvokingVertexEXT" );
      glProvokingVertexEXT( mode );
    }
    static void BeginSceneEXT()
    {
      FABRIC_OGL_TRACE( "glBeginSceneEXT()" );
      ErrorReporter errorReporter( "glBeginSceneEXT" );
      glBeginSceneEXT();
    }
    static void EndSceneEXT()
    {
      FABRIC_OGL_TRACE( "glEndSceneEXT()" );
      ErrorReporter errorReporter( "glEndSceneEXT" );
      glEndSceneEXT();
    }
    static void SecondaryColor3bEXT(
      GLbyte red,
      GLbyte green,
      GLbyte blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3bEXT( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3bEXT" );
      glSecondaryColor3bEXT( red, green, blue );
    }
    static void SecondaryColor3bvEXT(
      const GLbyte* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3bvEXT( GLbyte* )" );
      ErrorReporter errorReporter( "glSecondaryColor3bvEXT" );
      glSecondaryColor3bvEXT( v );
    }
    static void SecondaryColor3dEXT(
      GLdouble red,
      GLdouble green,
      GLdouble blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3dEXT( %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3dEXT" );
      glSecondaryColor3dEXT( red, green, blue );
    }
    static void SecondaryColor3dvEXT(
      const GLdouble* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3dvEXT( GLdouble* )" );
      ErrorReporter errorReporter( "glSecondaryColor3dvEXT" );
      glSecondaryColor3dvEXT( v );
    }
    static void SecondaryColor3fEXT(
      GLfloat red,
      GLfloat green,
      GLfloat blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3fEXT( %f, %f, %f )",
        (float)red,
        (float)green,
        (float)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3fEXT" );
      glSecondaryColor3fEXT( red, green, blue );
    }
    static void SecondaryColor3fvEXT(
      const GLfloat* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3fvEXT( GLfloat* )" );
      ErrorReporter errorReporter( "glSecondaryColor3fvEXT" );
      glSecondaryColor3fvEXT( v );
    }
    static void SecondaryColor3iEXT(
      GLint red,
      GLint green,
      GLint blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3iEXT( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3iEXT" );
      glSecondaryColor3iEXT( red, green, blue );
    }
    static void SecondaryColor3ivEXT(
      const GLint* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3ivEXT( GLint* )" );
      ErrorReporter errorReporter( "glSecondaryColor3ivEXT" );
      glSecondaryColor3ivEXT( v );
    }
    static void SecondaryColor3sEXT(
      GLshort red,
      GLshort green,
      GLshort blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3sEXT( %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3sEXT" );
      glSecondaryColor3sEXT( red, green, blue );
    }
    static void SecondaryColor3svEXT(
      const GLshort* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3svEXT( GLshort* )" );
      ErrorReporter errorReporter( "glSecondaryColor3svEXT" );
      glSecondaryColor3svEXT( v );
    }
    static void SecondaryColor3ubEXT(
      GLubyte red,
      GLubyte green,
      GLubyte blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3ubEXT( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3ubEXT" );
      glSecondaryColor3ubEXT( red, green, blue );
    }
    static void SecondaryColor3ubvEXT(
      const GLubyte* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3ubvEXT( GLubyte* )" );
      ErrorReporter errorReporter( "glSecondaryColor3ubvEXT" );
      glSecondaryColor3ubvEXT( v );
    }
    static void SecondaryColor3uiEXT(
      GLuint red,
      GLuint green,
      GLuint blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3uiEXT( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3uiEXT" );
      glSecondaryColor3uiEXT( red, green, blue );
    }
    static void SecondaryColor3uivEXT(
      const GLuint* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3uivEXT( GLuint* )" );
      ErrorReporter errorReporter( "glSecondaryColor3uivEXT" );
      glSecondaryColor3uivEXT( v );
    }
    static void SecondaryColor3usEXT(
      GLushort red,
      GLushort green,
      GLushort blue
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3usEXT( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue
      );
      ErrorReporter errorReporter( "glSecondaryColor3usEXT" );
      glSecondaryColor3usEXT( red, green, blue );
    }
    static void SecondaryColor3usvEXT(
      const GLushort* v
    ){
      FABRIC_OGL_TRACE( "glSecondaryColor3usvEXT( GLushort* )" );
      ErrorReporter errorReporter( "glSecondaryColor3usvEXT" );
      glSecondaryColor3usvEXT( v );
    }
    static void SecondaryColorPointerEXT(
      GLint size,
      GLenum type,
      GLsizei stride,
      GLvoid* pointer
    ){
      FABRIC_OGL_TRACE( "glSecondaryColorPointerEXT( %d, %d, %d, GLvoid* )",
        (int)size,
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glSecondaryColorPointerEXT" );
      glSecondaryColorPointerEXT( size, type, stride, pointer );
    }
    static void ActiveProgramEXT(
      GLuint program
    ){
      FABRIC_OGL_TRACE( "glActiveProgramEXT( 0x%04X )",
        (unsigned)program
      );
      ErrorReporter errorReporter( "glActiveProgramEXT" );
      glActiveProgramEXT( program );
    }
    static GLuint CreateShaderProgramEXT(
      GLenum type,
      void* string
    ){
      FABRIC_OGL_TRACE( "glCreateShaderProgramEXT( %d, char* )",
        (int)type
      );
      ErrorReporter errorReporter( "glCreateShaderProgramEXT" );
      const char* stringStr = (const char*)stringDesc->getValueData( &string );
      GLuint result = glCreateShaderProgramEXT( type, stringStr );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static void UseShaderProgramEXT(
      GLenum type,
      GLuint program
    ){
      FABRIC_OGL_TRACE( "glUseShaderProgramEXT( %d, 0x%04X )",
        (int)type,
        (unsigned)program
      );
      ErrorReporter errorReporter( "glUseShaderProgramEXT" );
      glUseShaderProgramEXT( type, program );
    }
    static void ActiveStencilFaceEXT(
      GLenum face
    ){
      FABRIC_OGL_TRACE( "glActiveStencilFaceEXT( %d )",
        (int)face
      );
      ErrorReporter errorReporter( "glActiveStencilFaceEXT" );
      glActiveStencilFaceEXT( face );
    }
    static void TexSubImage1DEXT(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLsizei width,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTexSubImage1DEXT( %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexSubImage1DEXT" );
      glTexSubImage1DEXT( target, level, xoffset, width, format, type, pixels );
    }
    static void TexSubImage2DEXT(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTexSubImage2DEXT( %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexSubImage2DEXT" );
      glTexSubImage2DEXT( target, level, xoffset, yoffset, width, height, format, type, pixels );
    }
    static void TexSubImage3DEXT(
      GLenum target,
      GLint level,
      GLint xoffset,
      GLint yoffset,
      GLint zoffset,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTexSubImage3DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)level,
        (int)xoffset,
        (int)yoffset,
        (int)zoffset,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexSubImage3DEXT" );
      glTexSubImage3DEXT( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
    }
    static void TexImage3DEXT(
      GLenum target,
      GLint level,
      GLenum internalformat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLint border,
      GLenum format,
      GLenum type,
      const void* pixels
    ){
      FABRIC_OGL_TRACE( "glTexImage3DEXT( %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)level,
        (int)internalformat,
        (int)width,
        (int)height,
        (int)depth,
        (int)border,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "glTexImage3DEXT" );
      glTexImage3DEXT( target, level, internalformat, width, height, depth, border, format, type, pixels );
    }
    static void TexBufferEXT(
      GLenum target,
      GLenum internalformat,
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glTexBufferEXT( %d, %d, 0x%04X )",
        (int)target,
        (int)internalformat,
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glTexBufferEXT" );
      glTexBufferEXT( target, internalformat, buffer );
    }
    static void ClearColorIiEXT(
      GLint red,
      GLint green,
      GLint blue,
      GLint alpha
    ){
      FABRIC_OGL_TRACE( "glClearColorIiEXT( %d, %d, %d, %d )",
        (int)red,
        (int)green,
        (int)blue,
        (int)alpha
      );
      ErrorReporter errorReporter( "glClearColorIiEXT" );
      glClearColorIiEXT( red, green, blue, alpha );
    }
    static void ClearColorIuiEXT(
      GLuint red,
      GLuint green,
      GLuint blue,
      GLuint alpha
    ){
      FABRIC_OGL_TRACE( "glClearColorIuiEXT( 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)red,
        (unsigned)green,
        (unsigned)blue,
        (unsigned)alpha
      );
      ErrorReporter errorReporter( "glClearColorIuiEXT" );
      glClearColorIuiEXT( red, green, blue, alpha );
    }
    static void GetTexParameterIivEXT(
      GLenum target,
      GLenum pname,
      GLint* params
    ){
      FABRIC_OGL_TRACE( "glGetTexParameterIivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexParameterIivEXT" );
      glGetTexParameterIivEXT( target, pname, params );
    }
    static void GetTexParameterIuivEXT(
      GLenum target,
      GLenum pname,
      GLuint* params
    ){
      FABRIC_OGL_TRACE( "glGetTexParameterIuivEXT( %d, %d, GLuint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glGetTexParameterIuivEXT" );
      glGetTexParameterIuivEXT( target, pname, params );
    }
    static void TexParameterIivEXT(
      GLenum target,
      GLenum pname,
      const GLint* params
    ){
      FABRIC_OGL_TRACE( "glTexParameterIivEXT( %d, %d, GLint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexParameterIivEXT" );
      glTexParameterIivEXT( target, pname, params );
    }
    static void TexParameterIuivEXT(
      GLenum target,
      GLenum pname,
      const GLuint* params
    ){
      FABRIC_OGL_TRACE( "glTexParameterIuivEXT( %d, %d, GLuint* )",
        (int)target,
        (int)pname
      );
      ErrorReporter errorReporter( "glTexParameterIuivEXT" );
      glTexParameterIuivEXT( target, pname, params );
    }
    static GLboolean AreTexturesResidentEXT(
      GLsizei n,
      const GLuint* textures,
      GLboolean* residences
    ){
      FABRIC_OGL_TRACE( "glAreTexturesResidentEXT( %d, GLuint*, GLboolean* )",
        (int)n
      );
      ErrorReporter errorReporter( "glAreTexturesResidentEXT" );
      GLboolean result = glAreTexturesResidentEXT( n, textures, residences );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void BindTextureEXT(
      GLenum target,
      GLuint texture
    ){
      FABRIC_OGL_TRACE( "glBindTextureEXT( %d, 0x%04X )",
        (int)target,
        (unsigned)texture
      );
      ErrorReporter errorReporter( "glBindTextureEXT" );
      glBindTextureEXT( target, texture );
    }
    static void DeleteTexturesEXT(
      GLsizei n,
      const GLuint* textures
    ){
      FABRIC_OGL_TRACE( "glDeleteTexturesEXT( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glDeleteTexturesEXT" );
      glDeleteTexturesEXT( n, textures );
    }
    static void GenTexturesEXT(
      GLsizei n,
      GLuint* textures
    ){
      FABRIC_OGL_TRACE( "glGenTexturesEXT( %d, GLuint* )",
        (int)n
      );
      ErrorReporter errorReporter( "glGenTexturesEXT" );
      glGenTexturesEXT( n, textures );
    }
    static GLboolean IsTextureEXT(
      GLuint texture
    ){
      FABRIC_OGL_TRACE( "glIsTextureEXT( 0x%04X )",
        (unsigned)texture
      );
      ErrorReporter errorReporter( "glIsTextureEXT" );
      GLboolean result = glIsTextureEXT( texture );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void PrioritizeTexturesEXT(
      GLsizei n,
      const GLuint* textures,
      const GLclampf* priorities
    ){
      FABRIC_OGL_TRACE( "glPrioritizeTexturesEXT( %d, GLuint*, GLclampf* )",
        (int)n
      );
      ErrorReporter errorReporter( "glPrioritizeTexturesEXT" );
      glPrioritizeTexturesEXT( n, textures, priorities );
    }
    static void TextureNormalEXT(
      GLenum mode
    ){
      FABRIC_OGL_TRACE( "glTextureNormalEXT( %d )",
        (int)mode
      );
      ErrorReporter errorReporter( "glTextureNormalEXT" );
      glTextureNormalEXT( mode );
    }
    static void BeginTransformFeedbackEXT(
      GLenum primitiveMode
    ){
      FABRIC_OGL_TRACE( "glBeginTransformFeedbackEXT( %d )",
        (int)primitiveMode
      );
      ErrorReporter errorReporter( "glBeginTransformFeedbackEXT" );
      glBeginTransformFeedbackEXT( primitiveMode );
    }
    static void BindBufferBaseEXT(
      GLenum target,
      GLuint index,
      GLuint buffer
    ){
      FABRIC_OGL_TRACE( "glBindBufferBaseEXT( %d, 0x%04X, 0x%04X )",
        (int)target,
        (unsigned)index,
        (unsigned)buffer
      );
      ErrorReporter errorReporter( "glBindBufferBaseEXT" );
      glBindBufferBaseEXT( target, index, buffer );
    }
    static void BindBufferOffsetEXT(
      GLenum target,
      GLuint index,
      GLuint buffer,
      GLintptr offset
    ){
      FABRIC_OGL_TRACE( "glBindBufferOffsetEXT( %d, 0x%04X, 0x%04X, %d )",
        (int)target,
        (unsigned)index,
        (unsigned)buffer,
        (int)offset
      );
      ErrorReporter errorReporter( "glBindBufferOffsetEXT" );
      glBindBufferOffsetEXT( target, index, buffer, offset );
    }
    static void BindBufferRangeEXT(
      GLenum target,
      GLuint index,
      GLuint buffer,
      GLintptr offset,
      GLsizeiptr size
    ){
      FABRIC_OGL_TRACE( "glBindBufferRangeEXT( %d, 0x%04X, 0x%04X, %d, %d )",
        (int)target,
        (unsigned)index,
        (unsigned)buffer,
        (int)offset,
        (int)size
      );
      ErrorReporter errorReporter( "glBindBufferRangeEXT" );
      glBindBufferRangeEXT( target, index, buffer, offset, size );
    }
    static void EndTransformFeedbackEXT()
    {
      FABRIC_OGL_TRACE( "glEndTransformFeedbackEXT()" );
      ErrorReporter errorReporter( "glEndTransformFeedbackEXT" );
      glEndTransformFeedbackEXT();
    }
    static void GetTransformFeedbackVaryingEXT(
      GLuint program,
      GLuint index,
      GLsizei bufSize,
      GLsizei* length,
      GLsizei* size,
      GLenum* type,
      void* name
    ){
      FABRIC_OGL_TRACE( "glGetTransformFeedbackVaryingEXT( 0x%04X, 0x%04X, %d, GLsizei*, GLsizei*, GLenum*, char* )",
        (unsigned)program,
        (unsigned)index,
        (int)bufSize
      );
      ErrorReporter errorReporter( "glGetTransformFeedbackVaryingEXT" );
      char * nameStr = new char[1024];
      glGetTransformFeedbackVaryingEXT( program, index, bufSize, length, size, type, nameStr );
      stringDesc->setValue( nameStr, strlen(nameStr), name );
      delete( nameStr );
    }
    static void TransformFeedbackVaryingsEXT(
      GLuint program,
      GLsizei count,
      void* varyings,
      GLenum bufferMode
    ){
      FABRIC_OGL_TRACE( "glTransformFeedbackVaryingsEXT( 0x%04X, %d, char*, %d )",
        (unsigned)program,
        (int)count,
        (int)bufferMode
      );
      ErrorReporter errorReporter( "glTransformFeedbackVaryingsEXT" );
      const char* varyingsStr = (const char*)stringDesc->getValueData( &varyings );
      glTransformFeedbackVaryingsEXT( program, count, &varyingsStr, bufferMode );
    }
    static void ArrayElementEXT(
      GLint i
    ){
      FABRIC_OGL_TRACE( "glArrayElementEXT( %d )",
        (int)i
      );
      ErrorReporter errorReporter( "glArrayElementEXT" );
      glArrayElementEXT( i );
    }
    static void ColorPointerEXT(
      GLint size,
      GLenum type,
      GLsizei stride,
      GLsizei count,
      const void* pointer
    ){
      FABRIC_OGL_TRACE( "glColorPointerEXT( %d, %d, %d, %d, void* )",
        (int)size,
        (int)type,
        (int)stride,
        (int)count
      );
      ErrorReporter errorReporter( "glColorPointerEXT" );
      glColorPointerEXT( size, type, stride, count, pointer );
    }
    static void DrawArraysEXT(
      GLenum mode,
      GLint first,
      GLsizei count
    ){
      FABRIC_OGL_TRACE( "glDrawArraysEXT( %d, %d, %d )",
        (int)mode,
        (int)first,
        (int)count
      );
      ErrorReporter errorReporter( "glDrawArraysEXT" );
      glDrawArraysEXT( mode, first, count );
    }
    static void EdgeFlagPointerEXT(
      GLsizei stride,
      GLsizei count,
      const GLboolean* pointer
    ){
      FABRIC_OGL_TRACE( "glEdgeFlagPointerEXT( %d, %d, GLboolean* )",
        (int)stride,
        (int)count
      );
      ErrorReporter errorReporter( "glEdgeFlagPointerEXT" );
      glEdgeFlagPointerEXT( stride, count, pointer );
    }
    static void IndexPointerEXT(
      GLenum type,
      GLsizei stride,
      GLsizei count,
      const void* pointer
    ){
      FABRIC_OGL_TRACE( "glIndexPointerEXT( %d, %d, %d, void* )",
        (int)type,
        (int)stride,
        (int)count
      );
      ErrorReporter errorReporter( "glIndexPointerEXT" );
      glIndexPointerEXT( type, stride, count, pointer );
    }
    static void NormalPointerEXT(
      GLenum type,
      GLsizei stride,
      GLsizei count,
      const void* pointer
    ){
      FABRIC_OGL_TRACE( "glNormalPointerEXT( %d, %d, %d, void* )",
        (int)type,
        (int)stride,
        (int)count
      );
      ErrorReporter errorReporter( "glNormalPointerEXT" );
      glNormalPointerEXT( type, stride, count, pointer );
    }
    static void TexCoordPointerEXT(
      GLint size,
      GLenum type,
      GLsizei stride,
      GLsizei count,
      const void* pointer
    ){
      FABRIC_OGL_TRACE( "glTexCoordPointerEXT( %d, %d, %d, %d, void* )",
        (int)size,
        (int)type,
        (int)stride,
        (int)count
      );
      ErrorReporter errorReporter( "glTexCoordPointerEXT" );
      glTexCoordPointerEXT( size, type, stride, count, pointer );
    }
    static void VertexPointerEXT(
      GLint size,
      GLenum type,
      GLsizei stride,
      GLsizei count,
      const void* pointer
    ){
      FABRIC_OGL_TRACE( "glVertexPointerEXT( %d, %d, %d, %d, void* )",
        (int)size,
        (int)type,
        (int)stride,
        (int)count
      );
      ErrorReporter errorReporter( "glVertexPointerEXT" );
      glVertexPointerEXT( size, type, stride, count, pointer );
    }
    static void BeginVertexShaderEXT()
    {
      FABRIC_OGL_TRACE( "glBeginVertexShaderEXT()" );
      ErrorReporter errorReporter( "glBeginVertexShaderEXT" );
      glBeginVertexShaderEXT();
    }
    static GLuint BindLightParameterEXT(
      GLenum light,
      GLenum value
    ){
      FABRIC_OGL_TRACE( "glBindLightParameterEXT( %d, %d )",
        (int)light,
        (int)value
      );
      ErrorReporter errorReporter( "glBindLightParameterEXT" );
      GLuint result = glBindLightParameterEXT( light, value );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static GLuint BindMaterialParameterEXT(
      GLenum face,
      GLenum value
    ){
      FABRIC_OGL_TRACE( "glBindMaterialParameterEXT( %d, %d )",
        (int)face,
        (int)value
      );
      ErrorReporter errorReporter( "glBindMaterialParameterEXT" );
      GLuint result = glBindMaterialParameterEXT( face, value );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static GLuint BindParameterEXT(
      GLenum value
    ){
      FABRIC_OGL_TRACE( "glBindParameterEXT( %d )",
        (int)value
      );
      ErrorReporter errorReporter( "glBindParameterEXT" );
      GLuint result = glBindParameterEXT( value );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static GLuint BindTexGenParameterEXT(
      GLenum unit,
      GLenum coord,
      GLenum value
    ){
      FABRIC_OGL_TRACE( "glBindTexGenParameterEXT( %d, %d, %d )",
        (int)unit,
        (int)coord,
        (int)value
      );
      ErrorReporter errorReporter( "glBindTexGenParameterEXT" );
      GLuint result = glBindTexGenParameterEXT( unit, coord, value );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static GLuint BindTextureUnitParameterEXT(
      GLenum unit,
      GLenum value
    ){
      FABRIC_OGL_TRACE( "glBindTextureUnitParameterEXT( %d, %d )",
        (int)unit,
        (int)value
      );
      ErrorReporter errorReporter( "glBindTextureUnitParameterEXT" );
      GLuint result = glBindTextureUnitParameterEXT( unit, value );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static void BindVertexShaderEXT(
      GLuint id
    ){
      FABRIC_OGL_TRACE( "glBindVertexShaderEXT( 0x%04X )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glBindVertexShaderEXT" );
      glBindVertexShaderEXT( id );
    }
    static void DeleteVertexShaderEXT(
      GLuint id
    ){
      FABRIC_OGL_TRACE( "glDeleteVertexShaderEXT( 0x%04X )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glDeleteVertexShaderEXT" );
      glDeleteVertexShaderEXT( id );
    }
    static void DisableVariantClientStateEXT(
      GLuint id
    ){
      FABRIC_OGL_TRACE( "glDisableVariantClientStateEXT( 0x%04X )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glDisableVariantClientStateEXT" );
      glDisableVariantClientStateEXT( id );
    }
    static void EnableVariantClientStateEXT(
      GLuint id
    ){
      FABRIC_OGL_TRACE( "glEnableVariantClientStateEXT( 0x%04X )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glEnableVariantClientStateEXT" );
      glEnableVariantClientStateEXT( id );
    }
    static void EndVertexShaderEXT()
    {
      FABRIC_OGL_TRACE( "glEndVertexShaderEXT()" );
      ErrorReporter errorReporter( "glEndVertexShaderEXT" );
      glEndVertexShaderEXT();
    }
    static void ExtractComponentEXT(
      GLuint res,
      GLuint src,
      GLuint num
    ){
      FABRIC_OGL_TRACE( "glExtractComponentEXT( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)res,
        (unsigned)src,
        (unsigned)num
      );
      ErrorReporter errorReporter( "glExtractComponentEXT" );
      glExtractComponentEXT( res, src, num );
    }
    static GLuint GenSymbolsEXT(
      GLenum dataType,
      GLenum storageType,
      GLenum range,
      GLuint components
    ){
      FABRIC_OGL_TRACE( "glGenSymbolsEXT( %d, %d, %d, 0x%04X )",
        (int)dataType,
        (int)storageType,
        (int)range,
        (unsigned)components
      );
      ErrorReporter errorReporter( "glGenSymbolsEXT" );
      GLuint result = glGenSymbolsEXT( dataType, storageType, range, components );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static GLuint GenVertexShadersEXT(
      GLuint range
    ){
      FABRIC_OGL_TRACE( "glGenVertexShadersEXT( 0x%04X )",
        (unsigned)range
      );
      ErrorReporter errorReporter( "glGenVertexShadersEXT" );
      GLuint result = glGenVertexShadersEXT( range );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static void GetInvariantBooleanvEXT(
      GLuint id,
      GLenum value,
      GLboolean* data
    ){
      FABRIC_OGL_TRACE( "glGetInvariantBooleanvEXT( 0x%04X, %d, GLboolean* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetInvariantBooleanvEXT" );
      glGetInvariantBooleanvEXT( id, value, data );
    }
    static void GetInvariantFloatvEXT(
      GLuint id,
      GLenum value,
      GLfloat* data
    ){
      FABRIC_OGL_TRACE( "glGetInvariantFloatvEXT( 0x%04X, %d, GLfloat* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetInvariantFloatvEXT" );
      glGetInvariantFloatvEXT( id, value, data );
    }
    static void GetInvariantIntegervEXT(
      GLuint id,
      GLenum value,
      GLint* data
    ){
      FABRIC_OGL_TRACE( "glGetInvariantIntegervEXT( 0x%04X, %d, GLint* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetInvariantIntegervEXT" );
      glGetInvariantIntegervEXT( id, value, data );
    }
    static void GetLocalConstantBooleanvEXT(
      GLuint id,
      GLenum value,
      GLboolean* data
    ){
      FABRIC_OGL_TRACE( "glGetLocalConstantBooleanvEXT( 0x%04X, %d, GLboolean* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetLocalConstantBooleanvEXT" );
      glGetLocalConstantBooleanvEXT( id, value, data );
    }
    static void GetLocalConstantFloatvEXT(
      GLuint id,
      GLenum value,
      GLfloat* data
    ){
      FABRIC_OGL_TRACE( "glGetLocalConstantFloatvEXT( 0x%04X, %d, GLfloat* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetLocalConstantFloatvEXT" );
      glGetLocalConstantFloatvEXT( id, value, data );
    }
    static void GetLocalConstantIntegervEXT(
      GLuint id,
      GLenum value,
      GLint* data
    ){
      FABRIC_OGL_TRACE( "glGetLocalConstantIntegervEXT( 0x%04X, %d, GLint* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetLocalConstantIntegervEXT" );
      glGetLocalConstantIntegervEXT( id, value, data );
    }
    static void GetVariantBooleanvEXT(
      GLuint id,
      GLenum value,
      GLboolean* data
    ){
      FABRIC_OGL_TRACE( "glGetVariantBooleanvEXT( 0x%04X, %d, GLboolean* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetVariantBooleanvEXT" );
      glGetVariantBooleanvEXT( id, value, data );
    }
    static void GetVariantFloatvEXT(
      GLuint id,
      GLenum value,
      GLfloat* data
    ){
      FABRIC_OGL_TRACE( "glGetVariantFloatvEXT( 0x%04X, %d, GLfloat* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetVariantFloatvEXT" );
      glGetVariantFloatvEXT( id, value, data );
    }
    static void GetVariantIntegervEXT(
      GLuint id,
      GLenum value,
      GLint* data
    ){
      FABRIC_OGL_TRACE( "glGetVariantIntegervEXT( 0x%04X, %d, GLint* )",
        (unsigned)id,
        (int)value
      );
      ErrorReporter errorReporter( "glGetVariantIntegervEXT" );
      glGetVariantIntegervEXT( id, value, data );
    }
    static void InsertComponentEXT(
      GLuint res,
      GLuint src,
      GLuint num
    ){
      FABRIC_OGL_TRACE( "glInsertComponentEXT( 0x%04X, 0x%04X, 0x%04X )",
        (unsigned)res,
        (unsigned)src,
        (unsigned)num
      );
      ErrorReporter errorReporter( "glInsertComponentEXT" );
      glInsertComponentEXT( res, src, num );
    }
    static GLboolean IsVariantEnabledEXT(
      GLuint id,
      GLenum cap
    ){
      FABRIC_OGL_TRACE( "glIsVariantEnabledEXT( 0x%04X, %d )",
        (unsigned)id,
        (int)cap
      );
      ErrorReporter errorReporter( "glIsVariantEnabledEXT" );
      GLboolean result = glIsVariantEnabledEXT( id, cap );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static void SetInvariantEXT(
      GLuint id,
      GLenum type,
      GLvoid* addr
    ){
      FABRIC_OGL_TRACE( "glSetInvariantEXT( 0x%04X, %d, GLvoid* )",
        (unsigned)id,
        (int)type
      );
      ErrorReporter errorReporter( "glSetInvariantEXT" );
      glSetInvariantEXT( id, type, addr );
    }
    static void SetLocalConstantEXT(
      GLuint id,
      GLenum type,
      GLvoid* addr
    ){
      FABRIC_OGL_TRACE( "glSetLocalConstantEXT( 0x%04X, %d, GLvoid* )",
        (unsigned)id,
        (int)type
      );
      ErrorReporter errorReporter( "glSetLocalConstantEXT" );
      glSetLocalConstantEXT( id, type, addr );
    }
    static void ShaderOp1EXT(
      GLenum op,
      GLuint res,
      GLuint arg1
    ){
      FABRIC_OGL_TRACE( "glShaderOp1EXT( %d, 0x%04X, 0x%04X )",
        (int)op,
        (unsigned)res,
        (unsigned)arg1
      );
      ErrorReporter errorReporter( "glShaderOp1EXT" );
      glShaderOp1EXT( op, res, arg1 );
    }
    static void ShaderOp2EXT(
      GLenum op,
      GLuint res,
      GLuint arg1,
      GLuint arg2
    ){
      FABRIC_OGL_TRACE( "glShaderOp2EXT( %d, 0x%04X, 0x%04X, 0x%04X )",
        (int)op,
        (unsigned)res,
        (unsigned)arg1,
        (unsigned)arg2
      );
      ErrorReporter errorReporter( "glShaderOp2EXT" );
      glShaderOp2EXT( op, res, arg1, arg2 );
    }
    static void ShaderOp3EXT(
      GLenum op,
      GLuint res,
      GLuint arg1,
      GLuint arg2,
      GLuint arg3
    ){
      FABRIC_OGL_TRACE( "glShaderOp3EXT( %d, 0x%04X, 0x%04X, 0x%04X, 0x%04X )",
        (int)op,
        (unsigned)res,
        (unsigned)arg1,
        (unsigned)arg2,
        (unsigned)arg3
      );
      ErrorReporter errorReporter( "glShaderOp3EXT" );
      glShaderOp3EXT( op, res, arg1, arg2, arg3 );
    }
    static void SwizzleEXT(
      GLuint res,
      GLuint in,
      GLenum outX,
      GLenum outY,
      GLenum outZ,
      GLenum outW
    ){
      FABRIC_OGL_TRACE( "glSwizzleEXT( 0x%04X, 0x%04X, %d, %d, %d, %d )",
        (unsigned)res,
        (unsigned)in,
        (int)outX,
        (int)outY,
        (int)outZ,
        (int)outW
      );
      ErrorReporter errorReporter( "glSwizzleEXT" );
      glSwizzleEXT( res, in, outX, outY, outZ, outW );
    }
    static void VariantPointerEXT(
      GLuint id,
      GLenum type,
      GLuint stride,
      GLvoid* addr
    ){
      FABRIC_OGL_TRACE( "glVariantPointerEXT( 0x%04X, %d, 0x%04X, GLvoid* )",
        (unsigned)id,
        (int)type,
        (unsigned)stride
      );
      ErrorReporter errorReporter( "glVariantPointerEXT" );
      glVariantPointerEXT( id, type, stride, addr );
    }
    static void VariantbvEXT(
      GLuint id,
      GLbyte* addr
    ){
      FABRIC_OGL_TRACE( "glVariantbvEXT( 0x%04X, GLbyte* )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glVariantbvEXT" );
      glVariantbvEXT( id, addr );
    }
    static void VariantdvEXT(
      GLuint id,
      GLdouble* addr
    ){
      FABRIC_OGL_TRACE( "glVariantdvEXT( 0x%04X, GLdouble* )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glVariantdvEXT" );
      glVariantdvEXT( id, addr );
    }
    static void VariantfvEXT(
      GLuint id,
      GLfloat* addr
    ){
      FABRIC_OGL_TRACE( "glVariantfvEXT( 0x%04X, GLfloat* )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glVariantfvEXT" );
      glVariantfvEXT( id, addr );
    }
    static void VariantivEXT(
      GLuint id,
      GLint* addr
    ){
      FABRIC_OGL_TRACE( "glVariantivEXT( 0x%04X, GLint* )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glVariantivEXT" );
      glVariantivEXT( id, addr );
    }
    static void VariantsvEXT(
      GLuint id,
      GLshort* addr
    ){
      FABRIC_OGL_TRACE( "glVariantsvEXT( 0x%04X, GLshort* )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glVariantsvEXT" );
      glVariantsvEXT( id, addr );
    }
    static void VariantubvEXT(
      GLuint id,
      GLubyte* addr
    ){
      FABRIC_OGL_TRACE( "glVariantubvEXT( 0x%04X, GLubyte* )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glVariantubvEXT" );
      glVariantubvEXT( id, addr );
    }
    static void VariantuivEXT(
      GLuint id,
      GLuint* addr
    ){
      FABRIC_OGL_TRACE( "glVariantuivEXT( 0x%04X, GLuint* )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glVariantuivEXT" );
      glVariantuivEXT( id, addr );
    }
    static void VariantusvEXT(
      GLuint id,
      GLushort* addr
    ){
      FABRIC_OGL_TRACE( "glVariantusvEXT( 0x%04X, GLushort* )",
        (unsigned)id
      );
      ErrorReporter errorReporter( "glVariantusvEXT" );
      glVariantusvEXT( id, addr );
    }
    static void WriteMaskEXT(
      GLuint res,
      GLuint in,
      GLenum outX,
      GLenum outY,
      GLenum outZ,
      GLenum outW
    ){
      FABRIC_OGL_TRACE( "glWriteMaskEXT( 0x%04X, 0x%04X, %d, %d, %d, %d )",
        (unsigned)res,
        (unsigned)in,
        (int)outX,
        (int)outY,
        (int)outZ,
        (int)outW
      );
      ErrorReporter errorReporter( "glWriteMaskEXT" );
      glWriteMaskEXT( res, in, outX, outY, outZ, outW );
    }
    static void VertexWeightPointerEXT(
      GLint size,
      GLenum type,
      GLsizei stride,
      void* pointer
    ){
      FABRIC_OGL_TRACE( "glVertexWeightPointerEXT( %d, %d, %d, void* )",
        (int)size,
        (int)type,
        (int)stride
      );
      ErrorReporter errorReporter( "glVertexWeightPointerEXT" );
      glVertexWeightPointerEXT( size, type, stride, pointer );
    }
    static void VertexWeightfEXT(
      GLfloat weight
    ){
      FABRIC_OGL_TRACE( "glVertexWeightfEXT( %f )",
        (float)weight
      );
      ErrorReporter errorReporter( "glVertexWeightfEXT" );
      glVertexWeightfEXT( weight );
    }
    static void VertexWeightfvEXT(
      GLfloat* weight
    ){
      FABRIC_OGL_TRACE( "glVertexWeightfvEXT( GLfloat* )" );
      ErrorReporter errorReporter( "glVertexWeightfvEXT" );
      glVertexWeightfvEXT( weight );
    }
    static GLuint BufferRegionEnabledEXT()
    {
      FABRIC_OGL_TRACE( "glBufferRegionEnabledEXT()" );
      ErrorReporter errorReporter( "glBufferRegionEnabledEXT" );
      GLuint result = glBufferRegionEnabledEXT();
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static void DeleteBufferRegionEXT(
      GLenum region
    ){
      FABRIC_OGL_TRACE( "glDeleteBufferRegionEXT( %d )",
        (int)region
      );
      ErrorReporter errorReporter( "glDeleteBufferRegionEXT" );
      glDeleteBufferRegionEXT( region );
    }
    static void DrawBufferRegionEXT(
      GLuint region,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height,
      GLint xDest,
      GLint yDest
    ){
      FABRIC_OGL_TRACE( "glDrawBufferRegionEXT( 0x%04X, %d, %d, %d, %d, %d, %d )",
        (unsigned)region,
        (int)x,
        (int)y,
        (int)width,
        (int)height,
        (int)xDest,
        (int)yDest
      );
      ErrorReporter errorReporter( "glDrawBufferRegionEXT" );
      glDrawBufferRegionEXT( region, x, y, width, height, xDest, yDest );
    }
    static GLuint NewBufferRegionEXT(
      GLenum region
    ){
      FABRIC_OGL_TRACE( "glNewBufferRegionEXT( %d )",
        (int)region
      );
      ErrorReporter errorReporter( "glNewBufferRegionEXT" );
      GLuint result = glNewBufferRegionEXT( region );
      FABRIC_OGL_TRACE_NOTE( "Returning 0x%04X", (unsigned)result );
      return result;
    }
    static void ReadBufferRegionEXT(
      GLuint region,
      GLint x,
      GLint y,
      GLsizei width,
      GLsizei height
    ){
      FABRIC_OGL_TRACE( "glReadBufferRegionEXT( 0x%04X, %d, %d, %d, %d )",
        (unsigned)region,
        (int)x,
        (int)y,
        (int)width,
        (int)height
      );
      ErrorReporter errorReporter( "glReadBufferRegionEXT" );
      glReadBufferRegionEXT( region, x, y, width, height );
    }
    static void XWaitGL()
    {
      FABRIC_OGL_TRACE( "glXWaitGL()" );
      ErrorReporter errorReporter( "glXWaitGL" );
      glXWaitGL();
    }
    static void XWaitX()
    {
      FABRIC_OGL_TRACE( "glXWaitX()" );
      ErrorReporter errorReporter( "glXWaitX" );
      glXWaitX();
    }
    static GLboolean xewIsSupported(
      void* name
    ){
      FABRIC_OGL_TRACE( "glxewIsSupported( char* )" );
      ErrorReporter errorReporter( "glxewIsSupported" );
      const char* nameStr = (const char*)stringDesc->getValueData( &name );
      GLboolean result = glxewIsSupported( nameStr );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLboolean xewGetExtension(
      void* name
    ){
      FABRIC_OGL_TRACE( "glxewGetExtension( char* )" );
      ErrorReporter errorReporter( "glxewGetExtension" );
      const char* nameStr = (const char*)stringDesc->getValueData( &name );
      GLboolean result = glxewGetExtension( nameStr );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static GLint uBuild1DMipmapLevels(
      GLenum target,
      GLint internalFormat,
      GLsizei width,
      GLenum format,
      GLenum type,
      GLint level,
      GLint base,
      GLint max,
      const void* data
    ){
      FABRIC_OGL_TRACE( "gluBuild1DMipmapLevels( %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalFormat,
        (int)width,
        (int)format,
        (int)type,
        (int)level,
        (int)base,
        (int)max
      );
      ErrorReporter errorReporter( "gluBuild1DMipmapLevels" );
      GLint result = gluBuild1DMipmapLevels( target, internalFormat, width, format, type, level, base, max, data );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLint uBuild1DMipmaps(
      GLenum target,
      GLint internalFormat,
      GLsizei width,
      GLenum format,
      GLenum type,
      const void* data
    ){
      FABRIC_OGL_TRACE( "gluBuild1DMipmaps( %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalFormat,
        (int)width,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "gluBuild1DMipmaps" );
      GLint result = gluBuild1DMipmaps( target, internalFormat, width, format, type, data );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLint uBuild2DMipmapLevels(
      GLenum target,
      GLint internalFormat,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      GLint level,
      GLint base,
      GLint max,
      const void* data
    ){
      FABRIC_OGL_TRACE( "gluBuild2DMipmapLevels( %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalFormat,
        (int)width,
        (int)height,
        (int)format,
        (int)type,
        (int)level,
        (int)base,
        (int)max
      );
      ErrorReporter errorReporter( "gluBuild2DMipmapLevels" );
      GLint result = gluBuild2DMipmapLevels( target, internalFormat, width, height, format, type, level, base, max, data );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLint uBuild2DMipmaps(
      GLenum target,
      GLint internalFormat,
      GLsizei width,
      GLsizei height,
      GLenum format,
      GLenum type,
      const void* data
    ){
      FABRIC_OGL_TRACE( "gluBuild2DMipmaps( %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalFormat,
        (int)width,
        (int)height,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "gluBuild2DMipmaps" );
      GLint result = gluBuild2DMipmaps( target, internalFormat, width, height, format, type, data );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLint uBuild3DMipmapLevels(
      GLenum target,
      GLint internalFormat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLenum type,
      GLint level,
      GLint base,
      GLint max,
      const void* data
    ){
      FABRIC_OGL_TRACE( "gluBuild3DMipmapLevels( %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalFormat,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)type,
        (int)level,
        (int)base,
        (int)max
      );
      ErrorReporter errorReporter( "gluBuild3DMipmapLevels" );
      GLint result = gluBuild3DMipmapLevels( target, internalFormat, width, height, depth, format, type, level, base, max, data );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLint uBuild3DMipmaps(
      GLenum target,
      GLint internalFormat,
      GLsizei width,
      GLsizei height,
      GLsizei depth,
      GLenum format,
      GLenum type,
      const void* data
    ){
      FABRIC_OGL_TRACE( "gluBuild3DMipmaps( %d, %d, %d, %d, %d, %d, %d, void* )",
        (int)target,
        (int)internalFormat,
        (int)width,
        (int)height,
        (int)depth,
        (int)format,
        (int)type
      );
      ErrorReporter errorReporter( "gluBuild3DMipmaps" );
      GLint result = gluBuild3DMipmaps( target, internalFormat, width, height, depth, format, type, data );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLboolean uCheckExtension(
      const GLubyte* extName,
      const GLubyte* extString
    ){
      FABRIC_OGL_TRACE( "gluCheckExtension( GLubyte*, GLubyte* )" );
      ErrorReporter errorReporter( "gluCheckExtension" );
      GLboolean result = gluCheckExtension( extName, extString );
      FABRIC_OGL_TRACE_NOTE( "Returning %b", (bool)result );
      return result;
    }
    static const GLubyte* uErrorString(
      GLenum error
    ){
      FABRIC_OGL_TRACE( "gluErrorString( %d )",
        (int)error
      );
      ErrorReporter errorReporter( "gluErrorString" );
      const GLubyte* result = gluErrorString( error );
      return result;
    }
    static const GLubyte* uGetString(
      GLenum name
    ){
      FABRIC_OGL_TRACE( "gluGetString( %d )",
        (int)name
      );
      ErrorReporter errorReporter( "gluGetString" );
      const GLubyte* result = gluGetString( name );
      return result;
    }
    static void uLookAt(
      GLdouble eyeX,
      GLdouble eyeY,
      GLdouble eyeZ,
      GLdouble centerX,
      GLdouble centerY,
      GLdouble centerZ,
      GLdouble upX,
      GLdouble upY,
      GLdouble upZ
    ){
      FABRIC_OGL_TRACE( "gluLookAt( %f, %f, %f, %f, %f, %f, %f, %f, %f )",
        (float)eyeX,
        (float)eyeY,
        (float)eyeZ,
        (float)centerX,
        (float)centerY,
        (float)centerZ,
        (float)upX,
        (float)upY,
        (float)upZ
      );
      ErrorReporter errorReporter( "gluLookAt" );
      gluLookAt( eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ );
    }
    static void uOrtho2D(
      GLdouble left,
      GLdouble right,
      GLdouble bottom,
      GLdouble top
    ){
      FABRIC_OGL_TRACE( "gluOrtho2D( %f, %f, %f, %f )",
        (float)left,
        (float)right,
        (float)bottom,
        (float)top
      );
      ErrorReporter errorReporter( "gluOrtho2D" );
      gluOrtho2D( left, right, bottom, top );
    }
    static void uPerspective(
      GLdouble fovy,
      GLdouble aspect,
      GLdouble zNear,
      GLdouble zFar
    ){
      FABRIC_OGL_TRACE( "gluPerspective( %f, %f, %f, %f )",
        (float)fovy,
        (float)aspect,
        (float)zNear,
        (float)zFar
      );
      ErrorReporter errorReporter( "gluPerspective" );
      gluPerspective( fovy, aspect, zNear, zFar );
    }
    static void uPickMatrix(
      GLdouble x,
      GLdouble y,
      GLdouble delX,
      GLdouble delY,
      GLint* viewport
    ){
      FABRIC_OGL_TRACE( "gluPickMatrix( %f, %f, %f, %f, GLint* )",
        (float)x,
        (float)y,
        (float)delX,
        (float)delY
      );
      ErrorReporter errorReporter( "gluPickMatrix" );
      gluPickMatrix( x, y, delX, delY, viewport );
    }
    static GLint uProject(
      GLdouble objX,
      GLdouble objY,
      GLdouble objZ,
      const GLdouble* model,
      const GLdouble* proj,
      const GLint* view,
      GLdouble* winX,
      GLdouble* winY,
      GLdouble* winZ
    ){
      FABRIC_OGL_TRACE( "gluProject( %f, %f, %f, GLdouble*, GLdouble*, GLint*, GLdouble*, GLdouble*, GLdouble* )",
        (float)objX,
        (float)objY,
        (float)objZ
      );
      ErrorReporter errorReporter( "gluProject" );
      GLint result = gluProject( objX, objY, objZ, model, proj, view, winX, winY, winZ );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLint uScaleImage(
      GLenum format,
      GLsizei wIn,
      GLsizei hIn,
      GLenum typeIn,
      const void* dataIn,
      GLsizei wOut,
      GLsizei hOut,
      GLenum typeOut,
      GLvoid* dataOut
    ){
      FABRIC_OGL_TRACE( "gluScaleImage( %d, %d, %d, %d, void*, %d, %d, %d, GLvoid* )",
        (int)format,
        (int)wIn,
        (int)hIn,
        (int)typeIn,
        (int)wOut,
        (int)hOut,
        (int)typeOut
      );
      ErrorReporter errorReporter( "gluScaleImage" );
      GLint result = gluScaleImage( format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLint uUnProject(
      GLdouble winX,
      GLdouble winY,
      GLdouble winZ,
      const GLdouble* model,
      const GLdouble* proj,
      const GLint* view,
      GLdouble* objX,
      GLdouble* objY,
      GLdouble* objZ
    ){
      FABRIC_OGL_TRACE( "gluUnProject( %f, %f, %f, GLdouble*, GLdouble*, GLint*, GLdouble*, GLdouble*, GLdouble* )",
        (float)winX,
        (float)winY,
        (float)winZ
      );
      ErrorReporter errorReporter( "gluUnProject" );
      GLint result = gluUnProject( winX, winY, winZ, model, proj, view, objX, objY, objZ );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }
    static GLint uUnProject4(
      GLdouble winX,
      GLdouble winY,
      GLdouble winZ,
      GLdouble clipW,
      const GLdouble* model,
      const GLdouble* proj,
      const GLint* view,
      GLdouble nearVal,
      GLdouble farVal,
      GLdouble* objX,
      GLdouble* objY,
      GLdouble* objZ,
      GLdouble* objW
    ){
      FABRIC_OGL_TRACE( "gluUnProject4( %f, %f, %f, %f, GLdouble*, GLdouble*, GLint*, %f, %f, GLdouble*, GLdouble*, GLdouble*, GLdouble* )",
        (float)winX,
        (float)winY,
        (float)winZ,
        (float)clipW,
        (float)nearVal,
        (float)farVal
      );
      ErrorReporter errorReporter( "gluUnProject4" );
      GLint result = gluUnProject4( winX, winY, winZ, clipW, model, proj, view, nearVal, farVal, objX, objY, objZ, objW );
      FABRIC_OGL_TRACE_NOTE( "Returning %d", (int)result );
      return result;
    }

#define ADD_CONST_BOOL( name, value ) \
  scope.put( name, CG::ConstantSymbol::Create( CG::ExprValue( booleanAdapter, CG::USAGE_RVALUE, booleanAdapter->llvmConst( value ) ) ) )
#define ADD_CONST_INT( name, value ) \
  scope.put( name, CG::ConstantSymbol::Create( CG::ExprValue( integerAdapter, CG::USAGE_RVALUE, integerAdapter->llvmConst( value ) ) ) )
#define ADD_FUNC_QUOTE( x ) #x
#define ADD_FUNC( name, paramLayout ) \
  CG::FunctionBuilder( moduleBuilder, ADD_FUNC_QUOTE(gl##name), paramLayout); \
  llvmFuncTable[ ADD_FUNC_QUOTE(gl##name) ] = (void *)&name;
    
    void llvmPrepareModule( CG::ModuleBuilder &moduleBuilder, RC::Handle<RT::Manager> const &rtManager )
    {
      FABRIC_OGL_TRACE( "llvmPrepareModule()" );
            
      stringDesc = rtManager->getStringDesc();

      llvmFuncTable.clear();
      
      CG::ModuleScope &scope = moduleBuilder.getScope();
      RC::ConstHandle<CG::BooleanAdapter> booleanAdapter = moduleBuilder.getManager()->getBooleanAdapter();
      RC::ConstHandle<CG::IntegerAdapter> integerAdapter = moduleBuilder.getManager()->getIntegerAdapter();

      #if defined( GL_INDEX_CLEAR_VALUE )
        ADD_CONST_INT( "GL_INDEX_CLEAR_VALUE", GL_INDEX_CLEAR_VALUE );
      #endif
      #if defined( GLX_CONTEXT_PROFILE_MASK_ARB )
        ADD_CONST_INT( "GLX_CONTEXT_PROFILE_MASK_ARB", GLX_CONTEXT_PROFILE_MASK_ARB );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD6_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD6_EXT", GL_OUTPUT_TEXTURE_COORD6_EXT );
      #endif
      #if defined( GL_POINT_SPRITE_CULL_CLIP_ATIX )
        ADD_CONST_INT( "GL_POINT_SPRITE_CULL_CLIP_ATIX", GL_POINT_SPRITE_CULL_CLIP_ATIX );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD20_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD20_EXT", GL_OUTPUT_TEXTURE_COORD20_EXT );
      #endif
      #if defined( GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB", GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB );
      #endif
      #if defined( GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT", GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT", GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT );
      #endif
      #if defined( GL_SAMPLE_ALPHA_TO_ONE_SGIS )
        ADD_CONST_INT( "GL_SAMPLE_ALPHA_TO_ONE_SGIS", GL_SAMPLE_ALPHA_TO_ONE_SGIS );
      #endif
      #if defined( GLEW_EXT_texture_rectangle )
        ADD_CONST_INT( "GLEW_EXT_texture_rectangle", GLEW_EXT_texture_rectangle );
      #endif
      #if defined( GL_SOURCE1_ALPHA )
        ADD_CONST_INT( "GL_SOURCE1_ALPHA", GL_SOURCE1_ALPHA );
      #endif
      #if defined( GL_DITHER )
        ADD_CONST_INT( "GL_DITHER", GL_DITHER );
      #endif
      #if defined( GL_SHADING_LANGUAGE_VERSION_ARB )
        ADD_CONST_INT( "GL_SHADING_LANGUAGE_VERSION_ARB", GL_SHADING_LANGUAGE_VERSION_ARB );
      #endif
      #if defined( GL_SAMPLER_2D_ARB )
        ADD_CONST_INT( "GL_SAMPLER_2D_ARB", GL_SAMPLER_2D_ARB );
      #endif
      #if defined( GLX_AUX6_ATI )
        ADD_CONST_INT( "GLX_AUX6_ATI", GLX_AUX6_ATI );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE", GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE );
      #endif
      #if defined( GL_SOURCE0_ALPHA )
        ADD_CONST_INT( "GL_SOURCE0_ALPHA", GL_SOURCE0_ALPHA );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB4_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB4_4_NV", GL_MAP2_VERTEX_ATTRIB4_4_NV );
      #endif
      #if defined( GL_FOG_COORD_ARRAY )
        ADD_CONST_INT( "GL_FOG_COORD_ARRAY", GL_FOG_COORD_ARRAY );
      #endif
      #if defined( GL_HISTOGRAM_FORMAT_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_FORMAT_EXT", GL_HISTOGRAM_FORMAT_EXT );
      #endif
      #if defined( GL_INDEX_ARRAY_TYPE )
        ADD_CONST_INT( "GL_INDEX_ARRAY_TYPE", GL_INDEX_ARRAY_TYPE );
      #endif
      #if defined( GL_PROXY_TEXTURE_2D_MULTISAMPLE )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_2D_MULTISAMPLE", GL_PROXY_TEXTURE_2D_MULTISAMPLE );
      #endif
      #if defined( GL_PROVOKING_VERTEX_EXT )
        ADD_CONST_INT( "GL_PROVOKING_VERTEX_EXT", GL_PROVOKING_VERTEX_EXT );
      #endif
      #if defined( GL_TEXTURE_MAX_LOD )
        ADD_CONST_INT( "GL_TEXTURE_MAX_LOD", GL_TEXTURE_MAX_LOD );
      #endif
      #if defined( GL_LINE_STRIP_ADJACENCY_ARB )
        ADD_CONST_INT( "GL_LINE_STRIP_ADJACENCY_ARB", GL_LINE_STRIP_ADJACENCY_ARB );
      #endif
      #if defined( GLX_BIND_TO_TEXTURE_TARGETS_EXT )
        ADD_CONST_INT( "GLX_BIND_TO_TEXTURE_TARGETS_EXT", GLX_BIND_TO_TEXTURE_TARGETS_EXT );
      #endif
      #if defined( GL_OBJECT_SUBTYPE_ARB )
        ADD_CONST_INT( "GL_OBJECT_SUBTYPE_ARB", GL_OBJECT_SUBTYPE_ARB );
      #endif
      #if defined( GL_RGBA_INTEGER_EXT )
        ADD_CONST_INT( "GL_RGBA_INTEGER_EXT", GL_RGBA_INTEGER_EXT );
      #endif
      #if defined( GL_SRGB8_EXT )
        ADD_CONST_INT( "GL_SRGB8_EXT", GL_SRGB8_EXT );
      #endif
      #if defined( GL_ALPHA_FLOAT32_ATI )
        ADD_CONST_INT( "GL_ALPHA_FLOAT32_ATI", GL_ALPHA_FLOAT32_ATI );
      #endif
      #if defined( GL_MIRROR_CLAMP_TO_EDGE_EXT )
        ADD_CONST_INT( "GL_MIRROR_CLAMP_TO_EDGE_EXT", GL_MIRROR_CLAMP_TO_EDGE_EXT );
      #endif
      #if defined( GL_SAMPLER_2D_RECT )
        ADD_CONST_INT( "GL_SAMPLER_2D_RECT", GL_SAMPLER_2D_RECT );
      #endif
      #if defined( GL_RGB9_E5 )
        ADD_CONST_INT( "GL_RGB9_E5", GL_RGB9_E5 );
      #endif
      #if defined( GL_DEPTH_BOUNDS_TEST_EXT )
        ADD_CONST_INT( "GL_DEPTH_BOUNDS_TEST_EXT", GL_DEPTH_BOUNDS_TEST_EXT );
      #endif
      #if defined( GL_NUM_FRAGMENT_CONSTANTS_ATI )
        ADD_CONST_INT( "GL_NUM_FRAGMENT_CONSTANTS_ATI", GL_NUM_FRAGMENT_CONSTANTS_ATI );
      #endif
      #if defined( GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI )
        ADD_CONST_INT( "GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI", GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI );
      #endif
      #if defined( GL_TEXTURE_COMPRESSED )
        ADD_CONST_INT( "GL_TEXTURE_COMPRESSED", GL_TEXTURE_COMPRESSED );
      #endif
      #if defined( GL_PIXEL_PACK_BUFFER_BINDING_EXT )
        ADD_CONST_INT( "GL_PIXEL_PACK_BUFFER_BINDING_EXT", GL_PIXEL_PACK_BUFFER_BINDING_EXT );
      #endif
      #if defined( GL_TEXTURE18_ARB )
        ADD_CONST_INT( "GL_TEXTURE18_ARB", GL_TEXTURE18_ARB );
      #endif
      #if defined( GL_TRANSPOSE_PROGRAM_MATRIX_EXT )
        ADD_CONST_INT( "GL_TRANSPOSE_PROGRAM_MATRIX_EXT", GL_TRANSPOSE_PROGRAM_MATRIX_EXT );
      #endif
      #if defined( GL_T2F_C4UB_V3F )
        ADD_CONST_INT( "GL_T2F_C4UB_V3F", GL_T2F_C4UB_V3F );
      #endif
      #if defined( GL_SOURCE2_ALPHA_EXT )
        ADD_CONST_INT( "GL_SOURCE2_ALPHA_EXT", GL_SOURCE2_ALPHA_EXT );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT", GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GLX_OPTIMAL_PBUFFER_WIDTH_SGIX )
        ADD_CONST_INT( "GLX_OPTIMAL_PBUFFER_WIDTH_SGIX", GLX_OPTIMAL_PBUFFER_WIDTH_SGIX );
      #endif
      #if defined( GL_TEXTURE_MIN_LOD )
        ADD_CONST_INT( "GL_TEXTURE_MIN_LOD", GL_TEXTURE_MIN_LOD );
      #endif
      #if defined( GL_DRAW_BUFFER2_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER2_ATI", GL_DRAW_BUFFER2_ATI );
      #endif
      #if defined( GL_PROXY_TEXTURE_RECTANGLE_EXT )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_RECTANGLE_EXT", GL_PROXY_TEXTURE_RECTANGLE_EXT );
      #endif
      #if defined( GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB", GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB );
      #endif
      #if defined( GL_MODELVIEW6_ARB )
        ADD_CONST_INT( "GL_MODELVIEW6_ARB", GL_MODELVIEW6_ARB );
      #endif
      #if defined( GL_PIXEL_UNPACK_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_PIXEL_UNPACK_BUFFER_BINDING_ARB", GL_PIXEL_UNPACK_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_DU8DV8_ATI )
        ADD_CONST_INT( "GL_DU8DV8_ATI", GL_DU8DV8_ATI );
      #endif
      #if defined( GL_HISTOGRAM_LUMINANCE_SIZE_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_LUMINANCE_SIZE_EXT", GL_HISTOGRAM_LUMINANCE_SIZE_EXT );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_Y )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_Y", GL_TEXTURE_CUBE_MAP_POSITIVE_Y );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_X )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_X", GL_TEXTURE_CUBE_MAP_POSITIVE_X );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_Z )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_Z", GL_TEXTURE_CUBE_MAP_POSITIVE_Z );
      #endif
      #if defined( GL_BYTE )
        ADD_CONST_INT( "GL_BYTE", GL_BYTE );
      #endif
      #if defined( GL_DRAW_BUFFER6_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER6_ATI", GL_DRAW_BUFFER6_ATI );
      #endif
      #if defined( GL_TEXTURE21_ARB )
        ADD_CONST_INT( "GL_TEXTURE21_ARB", GL_TEXTURE21_ARB );
      #endif
      #if defined( GL_TEXCOORD4_BIT_PGI )
        ADD_CONST_INT( "GL_TEXCOORD4_BIT_PGI", GL_TEXCOORD4_BIT_PGI );
      #endif
      #if defined( GL_PACK_RESAMPLE_OML )
        ADD_CONST_INT( "GL_PACK_RESAMPLE_OML", GL_PACK_RESAMPLE_OML );
      #endif
      #if defined( GL_SAMPLER_1D_ARRAY_EXT )
        ADD_CONST_INT( "GL_SAMPLER_1D_ARRAY_EXT", GL_SAMPLER_1D_ARRAY_EXT );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB12_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB12_NV", GL_EVAL_VERTEX_ATTRIB12_NV );
      #endif
      #if defined( GL_PGI_misc_hints )
        ADD_CONST_INT( "GL_PGI_misc_hints", GL_PGI_misc_hints );
      #endif
      #if defined( GL_BUFFER_MAP_POINTER_ARB )
        ADD_CONST_INT( "GL_BUFFER_MAP_POINTER_ARB", GL_BUFFER_MAP_POINTER_ARB );
      #endif
      #if defined( GL_DEPTH_BIAS )
        ADD_CONST_INT( "GL_DEPTH_BIAS", GL_DEPTH_BIAS );
      #endif
      #if defined( GL_BLEND_DST_ALPHA_EXT )
        ADD_CONST_INT( "GL_BLEND_DST_ALPHA_EXT", GL_BLEND_DST_ALPHA_EXT );
      #endif
      #if defined( GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB )
        ADD_CONST_INT( "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB", GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB );
      #endif
      #if defined( GL_COLOR_CLEAR_VALUE )
        ADD_CONST_INT( "GL_COLOR_CLEAR_VALUE", GL_COLOR_CLEAR_VALUE );
      #endif
      #if defined( GL_BLUE_INTEGER_EXT )
        ADD_CONST_INT( "GL_BLUE_INTEGER_EXT", GL_BLUE_INTEGER_EXT );
      #endif
      #if defined( GL_TEXTURE_DEPTH_TYPE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_DEPTH_TYPE_ARB", GL_TEXTURE_DEPTH_TYPE_ARB );
      #endif
      #if defined( GL_DEPTH_WRITEMASK )
        ADD_CONST_INT( "GL_DEPTH_WRITEMASK", GL_DEPTH_WRITEMASK );
      #endif
      #if defined( GL_TEXTURE_GEN_MODE )
        ADD_CONST_INT( "GL_TEXTURE_GEN_MODE", GL_TEXTURE_GEN_MODE );
      #endif
      #if defined( GL_3D_COLOR_TEXTURE )
        ADD_CONST_INT( "GL_3D_COLOR_TEXTURE", GL_3D_COLOR_TEXTURE );
      #endif
      #if defined( GL_SAMPLER_2D_MULTISAMPLE )
        ADD_CONST_INT( "GL_SAMPLER_2D_MULTISAMPLE", GL_SAMPLER_2D_MULTISAMPLE );
      #endif
      #if defined( GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB", GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB );
      #endif
      #if defined( GL_PIXEL_MAP_G_TO_G )
        ADD_CONST_INT( "GL_PIXEL_MAP_G_TO_G", GL_PIXEL_MAP_G_TO_G );
      #endif
      #if defined( GL_MATRIX_INDEX_ARRAY_STRIDE_ARB )
        ADD_CONST_INT( "GL_MATRIX_INDEX_ARRAY_STRIDE_ARB", GL_MATRIX_INDEX_ARRAY_STRIDE_ARB );
      #endif
      #if defined( GL_RENDER )
        ADD_CONST_INT( "GL_RENDER", GL_RENDER );
      #endif
      #if defined( GL_MAX_TEXTURE_COORDS )
        ADD_CONST_INT( "GL_MAX_TEXTURE_COORDS", GL_MAX_TEXTURE_COORDS );
      #endif
      #if defined( GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT )
        ADD_CONST_INT( "GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT", GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT );
      #endif
      #if defined( GLEW_EXT_texture_filter_anisotropic )
        ADD_CONST_INT( "GLEW_EXT_texture_filter_anisotropic", GLEW_EXT_texture_filter_anisotropic );
      #endif
      #if defined( GL_TEXTURE_BINDING_2D_MULTISAMPLE )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_2D_MULTISAMPLE", GL_TEXTURE_BINDING_2D_MULTISAMPLE );
      #endif
      #if defined( GL_MATRIX_PALETTE_ARB )
        ADD_CONST_INT( "GL_MATRIX_PALETTE_ARB", GL_MATRIX_PALETTE_ARB );
      #endif
      #if defined( GL_PROGRAM_FORMAT_ARB )
        ADD_CONST_INT( "GL_PROGRAM_FORMAT_ARB", GL_PROGRAM_FORMAT_ARB );
      #endif
      #if defined( GL_PROGRAM_STRING_ARB )
        ADD_CONST_INT( "GL_PROGRAM_STRING_ARB", GL_PROGRAM_STRING_ARB );
      #endif
      #if defined( GL_TRIANGLE_STRIP_ADJACENCY )
        ADD_CONST_INT( "GL_TRIANGLE_STRIP_ADJACENCY", GL_TRIANGLE_STRIP_ADJACENCY );
      #endif
      #if defined( GL_MODELVIEW0_MATRIX_EXT )
        ADD_CONST_INT( "GL_MODELVIEW0_MATRIX_EXT", GL_MODELVIEW0_MATRIX_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER", GL_TRANSFORM_FEEDBACK_BUFFER );
      #endif
      #if defined( GL_BGRA_EXT )
        ADD_CONST_INT( "GL_BGRA_EXT", GL_BGRA_EXT );
      #endif
      #if defined( GL_MATRIX19_ARB )
        ADD_CONST_INT( "GL_MATRIX19_ARB", GL_MATRIX19_ARB );
      #endif
      #if defined( GL_RENDERBUFFER_INTERNAL_FORMAT_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_INTERNAL_FORMAT_EXT", GL_RENDERBUFFER_INTERNAL_FORMAT_EXT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD22_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD22_EXT", GL_OUTPUT_TEXTURE_COORD22_EXT );
      #endif
      #if defined( GL_COLOR_TABLE_ALPHA_SIZE_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_ALPHA_SIZE_SGI", GL_COLOR_TABLE_ALPHA_SIZE_SGI );
      #endif
      #if defined( GL_PROVOKING_VERTEX )
        ADD_CONST_INT( "GL_PROVOKING_VERTEX", GL_PROVOKING_VERTEX );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_LENGTH_NV", GL_TEXTURE_COORD_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_SIGNED_NORMALIZED )
        ADD_CONST_INT( "GL_SIGNED_NORMALIZED", GL_SIGNED_NORMALIZED );
      #endif
      #if defined( GL_SPARE1_NV )
        ADD_CONST_INT( "GL_SPARE1_NV", GL_SPARE1_NV );
      #endif
      #if defined( GL_RG_SNORM )
        ADD_CONST_INT( "GL_RG_SNORM", GL_RG_SNORM );
      #endif
      #if defined( GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS )
        ADD_CONST_INT( "GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS", GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS );
      #endif
      #if defined( GL_RENDERBUFFER_FREE_MEMORY_ATI )
        ADD_CONST_INT( "GL_RENDERBUFFER_FREE_MEMORY_ATI", GL_RENDERBUFFER_FREE_MEMORY_ATI );
      #endif
      #if defined( GL_EXP )
        ADD_CONST_INT( "GL_EXP", GL_EXP );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB", GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_LINE_STRIP_ADJACENCY )
        ADD_CONST_INT( "GL_LINE_STRIP_ADJACENCY", GL_LINE_STRIP_ADJACENCY );
      #endif
      #if defined( GL_POINT_SIZE )
        ADD_CONST_INT( "GL_POINT_SIZE", GL_POINT_SIZE );
      #endif
      #if defined( GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB", GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB );
      #endif
      #if defined( GL_TEXTURE_COMPARE_FUNC )
        ADD_CONST_INT( "GL_TEXTURE_COMPARE_FUNC", GL_TEXTURE_COMPARE_FUNC );
      #endif
      #if defined( GL_CMYK_EXT )
        ADD_CONST_INT( "GL_CMYK_EXT", GL_CMYK_EXT );
      #endif
      #if defined( GL_RGB12 )
        ADD_CONST_INT( "GL_RGB12", GL_RGB12 );
      #endif
      #if defined( GL_TIME_ELAPSED_EXT )
        ADD_CONST_INT( "GL_TIME_ELAPSED_EXT", GL_TIME_ELAPSED_EXT );
      #endif
      #if defined( GL_RGB10 )
        ADD_CONST_INT( "GL_RGB10", GL_RGB10 );
      #endif
      #if defined( GL_RGB16 )
        ADD_CONST_INT( "GL_RGB16", GL_RGB16 );
      #endif
      #if defined( GL_TEXTURE_COMPARE_FAIL_VALUE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_COMPARE_FAIL_VALUE_ARB", GL_TEXTURE_COMPARE_FAIL_VALUE_ARB );
      #endif
      #if defined( GL_POLYGON_OFFSET_FILL )
        ADD_CONST_INT( "GL_POLYGON_OFFSET_FILL", GL_POLYGON_OFFSET_FILL );
      #endif
      #if defined( GL_TRACK_MATRIX_NV )
        ADD_CONST_INT( "GL_TRACK_MATRIX_NV", GL_TRACK_MATRIX_NV );
      #endif
      #if defined( GL_FIRST_VERTEX_CONVENTION )
        ADD_CONST_INT( "GL_FIRST_VERTEX_CONVENTION", GL_FIRST_VERTEX_CONVENTION );
      #endif
      #if defined( GL_EXT_422_pixels )
        ADD_CONST_INT( "GL_EXT_422_pixels", GL_EXT_422_pixels );
      #endif
      #if defined( GL_FLOAT_RGB16_NV )
        ADD_CONST_INT( "GL_FLOAT_RGB16_NV", GL_FLOAT_RGB16_NV );
      #endif
      #if defined( GL_DOUBLEBUFFER )
        ADD_CONST_INT( "GL_DOUBLEBUFFER", GL_DOUBLEBUFFER );
      #endif
      #if defined( GL_MINMAX_FORMAT )
        ADD_CONST_INT( "GL_MINMAX_FORMAT", GL_MINMAX_FORMAT );
      #endif
      #if defined( GL_MAX_CLIP_PLANES )
        ADD_CONST_INT( "GL_MAX_CLIP_PLANES", GL_MAX_CLIP_PLANES );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_STRIDE", GL_FOG_COORDINATE_ARRAY_STRIDE );
      #endif
      #if defined( GL_CURRENT_FOG_COORDINATE_EXT )
        ADD_CONST_INT( "GL_CURRENT_FOG_COORDINATE_EXT", GL_CURRENT_FOG_COORDINATE_EXT );
      #endif
      #if defined( GL_ALL_COMPLETED_NV )
        ADD_CONST_INT( "GL_ALL_COMPLETED_NV", GL_ALL_COMPLETED_NV );
      #endif
      #if defined( GL_TESSELLATION_FACTOR_AMD )
        ADD_CONST_INT( "GL_TESSELLATION_FACTOR_AMD", GL_TESSELLATION_FACTOR_AMD );
      #endif
      #if defined( GL_TEXTURE_INTENSITY_TYPE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_INTENSITY_TYPE_ARB", GL_TEXTURE_INTENSITY_TYPE_ARB );
      #endif
      #if defined( GL_EXT_packed_float )
        ADD_CONST_INT( "GL_EXT_packed_float", GL_EXT_packed_float );
      #endif
      #if defined( GL_RGB9_E5_EXT )
        ADD_CONST_INT( "GL_RGB9_E5_EXT", GL_RGB9_E5_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE", GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE );
      #endif
      #if defined( GL_OML_subsample )
        ADD_CONST_INT( "GL_OML_subsample", GL_OML_subsample );
      #endif
      #if defined( GL_TEXTURE_SWIZZLE_G_EXT )
        ADD_CONST_INT( "GL_TEXTURE_SWIZZLE_G_EXT", GL_TEXTURE_SWIZZLE_G_EXT );
      #endif
      #if defined( GL_PROGRAM_TEX_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_TEX_INSTRUCTIONS_ARB", GL_PROGRAM_TEX_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_MAX_VERTEX_SHADER_INVARIANTS_EXT )
        ADD_CONST_INT( "GL_MAX_VERTEX_SHADER_INVARIANTS_EXT", GL_MAX_VERTEX_SHADER_INVARIANTS_EXT );
      #endif
      #if defined( GL_COMPILE_AND_EXECUTE )
        ADD_CONST_INT( "GL_COMPILE_AND_EXECUTE", GL_COMPILE_AND_EXECUTE );
      #endif
      #if defined( GL_MATRIX9_ARB )
        ADD_CONST_INT( "GL_MATRIX9_ARB", GL_MATRIX9_ARB );
      #endif
      #if defined( GL_GREEN_BITS )
        ADD_CONST_INT( "GL_GREEN_BITS", GL_GREEN_BITS );
      #endif
      #if defined( GL_SHADING_LANGUAGE_VERSION )
        ADD_CONST_INT( "GL_SHADING_LANGUAGE_VERSION", GL_SHADING_LANGUAGE_VERSION );
      #endif
      #if defined( GL_R1UI_T2F_N3F_V3F_SUN )
        ADD_CONST_INT( "GL_R1UI_T2F_N3F_V3F_SUN", GL_R1UI_T2F_N3F_V3F_SUN );
      #endif
      #if defined( GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT )
        ADD_CONST_INT( "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT );
      #endif
      #if defined( GL_UNSIGNED_SHORT_1_5_5_5_REV )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_1_5_5_5_REV", GL_UNSIGNED_SHORT_1_5_5_5_REV );
      #endif
      #if defined( GL_COMBINE_ALPHA_EXT )
        ADD_CONST_INT( "GL_COMBINE_ALPHA_EXT", GL_COMBINE_ALPHA_EXT );
      #endif
      #if defined( GL_RGB5_A1_EXT )
        ADD_CONST_INT( "GL_RGB5_A1_EXT", GL_RGB5_A1_EXT );
      #endif
      #if defined( GL_TRANSPOSE_COLOR_MATRIX_ARB )
        ADD_CONST_INT( "GL_TRANSPOSE_COLOR_MATRIX_ARB", GL_TRANSPOSE_COLOR_MATRIX_ARB );
      #endif
      #if defined( GL_LUMINANCE_ALPHA32I_EXT )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA32I_EXT", GL_LUMINANCE_ALPHA32I_EXT );
      #endif
      #if defined( GL_READ_WRITE_ARB )
        ADD_CONST_INT( "GL_READ_WRITE_ARB", GL_READ_WRITE_ARB );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB", GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB );
      #endif
      #if defined( GL_CONTEXT_CORE_PROFILE_BIT )
        ADD_CONST_INT( "GL_CONTEXT_CORE_PROFILE_BIT", GL_CONTEXT_CORE_PROFILE_BIT );
      #endif
      #if defined( GL_QUAD_MESH_SUN )
        ADD_CONST_INT( "GL_QUAD_MESH_SUN", GL_QUAD_MESH_SUN );
      #endif
      #if defined( GL_ALPHA_TEST_FUNC )
        ADD_CONST_INT( "GL_ALPHA_TEST_FUNC", GL_ALPHA_TEST_FUNC );
      #endif
      #if defined( GL_FRAGMENT_SHADER_DERIVATIVE_HINT )
        ADD_CONST_INT( "GL_FRAGMENT_SHADER_DERIVATIVE_HINT", GL_FRAGMENT_SHADER_DERIVATIVE_HINT );
      #endif
      #if defined( GL_TEXTURE_DEPTH )
        ADD_CONST_INT( "GL_TEXTURE_DEPTH", GL_TEXTURE_DEPTH );
      #endif
      #if defined( GLX_TRANSPARENT_INDEX )
        ADD_CONST_INT( "GLX_TRANSPARENT_INDEX", GLX_TRANSPARENT_INDEX );
      #endif
      #if defined( GL_EXT_separate_shader_objects )
        ADD_CONST_INT( "GL_EXT_separate_shader_objects", GL_EXT_separate_shader_objects );
      #endif
      #if defined( GL_NORMAL_MAP_ARB )
        ADD_CONST_INT( "GL_NORMAL_MAP_ARB", GL_NORMAL_MAP_ARB );
      #endif
      #if defined( GL_POST_CONVOLUTION_BLUE_BIAS_EXT )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_BLUE_BIAS_EXT", GL_POST_CONVOLUTION_BLUE_BIAS_EXT );
      #endif
      #if defined( GLEW_EXT_packed_depth_stencil )
        ADD_CONST_INT( "GLEW_EXT_packed_depth_stencil", GLEW_EXT_packed_depth_stencil );
      #endif
      #if defined( GL_DRAW_BUFFER6 )
        ADD_CONST_INT( "GL_DRAW_BUFFER6", GL_DRAW_BUFFER6 );
      #endif
      #if defined( GL_DRAW_BUFFER7 )
        ADD_CONST_INT( "GL_DRAW_BUFFER7", GL_DRAW_BUFFER7 );
      #endif
      #if defined( GL_DRAW_BUFFER4 )
        ADD_CONST_INT( "GL_DRAW_BUFFER4", GL_DRAW_BUFFER4 );
      #endif
      #if defined( GL_DRAW_BUFFER5 )
        ADD_CONST_INT( "GL_DRAW_BUFFER5", GL_DRAW_BUFFER5 );
      #endif
      #if defined( GL_DRAW_BUFFER2 )
        ADD_CONST_INT( "GL_DRAW_BUFFER2", GL_DRAW_BUFFER2 );
      #endif
      #if defined( GL_DRAW_BUFFER3 )
        ADD_CONST_INT( "GL_DRAW_BUFFER3", GL_DRAW_BUFFER3 );
      #endif
      #if defined( GL_DRAW_BUFFER0 )
        ADD_CONST_INT( "GL_DRAW_BUFFER0", GL_DRAW_BUFFER0 );
      #endif
      #if defined( GL_DRAW_BUFFER1 )
        ADD_CONST_INT( "GL_DRAW_BUFFER1", GL_DRAW_BUFFER1 );
      #endif
      #if defined( GL_LIGHT1 )
        ADD_CONST_INT( "GL_LIGHT1", GL_LIGHT1 );
      #endif
      #if defined( GL_LIGHT0 )
        ADD_CONST_INT( "GL_LIGHT0", GL_LIGHT0 );
      #endif
      #if defined( GL_LIGHT3 )
        ADD_CONST_INT( "GL_LIGHT3", GL_LIGHT3 );
      #endif
      #if defined( GL_LIGHT2 )
        ADD_CONST_INT( "GL_LIGHT2", GL_LIGHT2 );
      #endif
      #if defined( GL_LIGHT5 )
        ADD_CONST_INT( "GL_LIGHT5", GL_LIGHT5 );
      #endif
      #if defined( GL_LIGHT4 )
        ADD_CONST_INT( "GL_LIGHT4", GL_LIGHT4 );
      #endif
      #if defined( GL_DRAW_BUFFER8 )
        ADD_CONST_INT( "GL_DRAW_BUFFER8", GL_DRAW_BUFFER8 );
      #endif
      #if defined( GL_LIGHT6 )
        ADD_CONST_INT( "GL_LIGHT6", GL_LIGHT6 );
      #endif
      #if defined( GL_MAP_STENCIL )
        ADD_CONST_INT( "GL_MAP_STENCIL", GL_MAP_STENCIL );
      #endif
      #if defined( GL_PN_TRIANGLES_NORMAL_MODE_ATI )
        ADD_CONST_INT( "GL_PN_TRIANGLES_NORMAL_MODE_ATI", GL_PN_TRIANGLES_NORMAL_MODE_ATI );
      #endif
      #if defined( GL_QUADRATIC_ATTENUATION )
        ADD_CONST_INT( "GL_QUADRATIC_ATTENUATION", GL_QUADRATIC_ATTENUATION );
      #endif
      #if defined( GL_MODELVIEW31_ARB )
        ADD_CONST_INT( "GL_MODELVIEW31_ARB", GL_MODELVIEW31_ARB );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_SEAMLESS )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_SEAMLESS", GL_TEXTURE_CUBE_MAP_SEAMLESS );
      #endif
      #if defined( GLXEW_EXT_swap_control )
        ADD_CONST_INT( "GLXEW_EXT_swap_control", GLXEW_EXT_swap_control );
      #endif
      #if defined( GL_LAST_VERTEX_CONVENTION )
        ADD_CONST_INT( "GL_LAST_VERTEX_CONVENTION", GL_LAST_VERTEX_CONVENTION );
      #endif
      #if defined( GL_TEXTURE_RECTANGLE )
        ADD_CONST_INT( "GL_TEXTURE_RECTANGLE", GL_TEXTURE_RECTANGLE );
      #endif
      #if defined( GL_VERTEX_PROGRAM_ARB )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_ARB", GL_VERTEX_PROGRAM_ARB );
      #endif
      #if defined( GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT", GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT );
      #endif
      #if defined( GL_FILL )
        ADD_CONST_INT( "GL_FILL", GL_FILL );
      #endif
      #if defined( GL_LUMINANCE_ALPHA32UI_EXT )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA32UI_EXT", GL_LUMINANCE_ALPHA32UI_EXT );
      #endif
      #if defined( GL_COMBINER6_NV )
        ADD_CONST_INT( "GL_COMBINER6_NV", GL_COMBINER6_NV );
      #endif
      #if defined( GL_DEPTH_BUFFER )
        ADD_CONST_INT( "GL_DEPTH_BUFFER", GL_DEPTH_BUFFER );
      #endif
      #if defined( GL_SRC_COLOR )
        ADD_CONST_INT( "GL_SRC_COLOR", GL_SRC_COLOR );
      #endif
      #if defined( GL_FLOAT_RGB_NV )
        ADD_CONST_INT( "GL_FLOAT_RGB_NV", GL_FLOAT_RGB_NV );
      #endif
      #if defined( GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT )
        ADD_CONST_INT( "GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT", GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT );
      #endif
      #if defined( GLEW_EXT_texture )
        ADD_CONST_INT( "GLEW_EXT_texture", GLEW_EXT_texture );
      #endif
      #if defined( GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX )
        ADD_CONST_INT( "GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX", GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX );
      #endif
      #if defined( GL_EXT_framebuffer_blit )
        ADD_CONST_INT( "GL_EXT_framebuffer_blit", GL_EXT_framebuffer_blit );
      #endif
      #if defined( GL_SAMPLE_BUFFERS )
        ADD_CONST_INT( "GL_SAMPLE_BUFFERS", GL_SAMPLE_BUFFERS );
      #endif
      #if defined( GLEW_EXT_texture_env_combine )
        ADD_CONST_INT( "GLEW_EXT_texture_env_combine", GLEW_EXT_texture_env_combine );
      #endif
      #if defined( GL_RGBA_INTEGER )
        ADD_CONST_INT( "GL_RGBA_INTEGER", GL_RGBA_INTEGER );
      #endif
      #if defined( GL_COLOR_ATTACHMENT11_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT11_EXT", GL_COLOR_ATTACHMENT11_EXT );
      #endif
      #if defined( GL_ACTIVE_ATTRIBUTE_MAX_LENGTH )
        ADD_CONST_INT( "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH", GL_ACTIVE_ATTRIBUTE_MAX_LENGTH );
      #endif
      #if defined( GL_MATRIX_INDEX_ARRAY_SIZE_ARB )
        ADD_CONST_INT( "GL_MATRIX_INDEX_ARRAY_SIZE_ARB", GL_MATRIX_INDEX_ARRAY_SIZE_ARB );
      #endif
      #if defined( GL_EXTENSIONS )
        ADD_CONST_INT( "GL_EXTENSIONS", GL_EXTENSIONS );
      #endif
      #if defined( GL_COLOR_MATRIX )
        ADD_CONST_INT( "GL_COLOR_MATRIX", GL_COLOR_MATRIX );
      #endif
      #if defined( GL_VERTEX_WEIGHT_ARRAY_EXT )
        ADD_CONST_INT( "GL_VERTEX_WEIGHT_ARRAY_EXT", GL_VERTEX_WEIGHT_ARRAY_EXT );
      #endif
      #if defined( GL_PASS_THROUGH_TOKEN )
        ADD_CONST_INT( "GL_PASS_THROUGH_TOKEN", GL_PASS_THROUGH_TOKEN );
      #endif
      #if defined( GL_UPPER_LEFT )
        ADD_CONST_INT( "GL_UPPER_LEFT", GL_UPPER_LEFT );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB2_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB2_4_NV", GL_MAP1_VERTEX_ATTRIB2_4_NV );
      #endif
      #if defined( GL_COLOR_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_COLOR_ARRAY_LENGTH_NV", GL_COLOR_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_ELEMENT_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_ADDRESS_NV", GL_ELEMENT_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GL_PROGRAM_MATRIX_STACK_DEPTH_EXT )
        ADD_CONST_INT( "GL_PROGRAM_MATRIX_STACK_DEPTH_EXT", GL_PROGRAM_MATRIX_STACK_DEPTH_EXT );
      #endif
      #if defined( GL_CON_2_ATI )
        ADD_CONST_INT( "GL_CON_2_ATI", GL_CON_2_ATI );
      #endif
      #if defined( GL_TRANSPOSE_TEXTURE_MATRIX )
        ADD_CONST_INT( "GL_TRANSPOSE_TEXTURE_MATRIX", GL_TRANSPOSE_TEXTURE_MATRIX );
      #endif
      #if defined( GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI )
        ADD_CONST_INT( "GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI", GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI );
      #endif
      #if defined( GL_COUNTER_RANGE_AMD )
        ADD_CONST_INT( "GL_COUNTER_RANGE_AMD", GL_COUNTER_RANGE_AMD );
      #endif
      #if defined( GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT", GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT );
      #endif
      #if defined( GL_DEPTH_BUFFER_BIT )
        ADD_CONST_INT( "GL_DEPTH_BUFFER_BIT", GL_DEPTH_BUFFER_BIT );
      #endif
      #if defined( GL_STENCIL_BACK_PASS_DEPTH_FAIL )
        ADD_CONST_INT( "GL_STENCIL_BACK_PASS_DEPTH_FAIL", GL_STENCIL_BACK_PASS_DEPTH_FAIL );
      #endif
      #if defined( GL_UNIFORM_BUFFER )
        ADD_CONST_INT( "GL_UNIFORM_BUFFER", GL_UNIFORM_BUFFER );
      #endif
      #if defined( GLX_EXTENSIONS )
        ADD_CONST_INT( "GLX_EXTENSIONS", GLX_EXTENSIONS );
      #endif
      #if defined( GL_VARIABLE_E_NV )
        ADD_CONST_INT( "GL_VARIABLE_E_NV", GL_VARIABLE_E_NV );
      #endif
      #if defined( GL_SAMPLE_MASK )
        ADD_CONST_INT( "GL_SAMPLE_MASK", GL_SAMPLE_MASK );
      #endif
      #if defined( GL_MULTISAMPLE_ARB )
        ADD_CONST_INT( "GL_MULTISAMPLE_ARB", GL_MULTISAMPLE_ARB );
      #endif
      #if defined( GL_CCW )
        ADD_CONST_INT( "GL_CCW", GL_CCW );
      #endif
      #if defined( GL_TEXTURE_ALPHA_TYPE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_ALPHA_TYPE_ARB", GL_TEXTURE_ALPHA_TYPE_ARB );
      #endif
      #if defined( GLX_BACK_LEFT_BUFFER_BIT_SGIX )
        ADD_CONST_INT( "GLX_BACK_LEFT_BUFFER_BIT_SGIX", GLX_BACK_LEFT_BUFFER_BIT_SGIX );
      #endif
      #if defined( GL_DEPTH_COMPONENT24 )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT24", GL_DEPTH_COMPONENT24 );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE", GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE );
      #endif
      #if defined( GLX_MAX_ALPHA_SGIS )
        ADD_CONST_INT( "GLX_MAX_ALPHA_SGIS", GLX_MAX_ALPHA_SGIS );
      #endif
      #if defined( GLX_MIPMAP_LEVEL_ATI )
        ADD_CONST_INT( "GLX_MIPMAP_LEVEL_ATI", GLX_MIPMAP_LEVEL_ATI );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_INTEGER )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_INTEGER", GL_VERTEX_ATTRIB_ARRAY_INTEGER );
      #endif
      #if defined( GL_MODELVIEW18_ARB )
        ADD_CONST_INT( "GL_MODELVIEW18_ARB", GL_MODELVIEW18_ARB );
      #endif
      #if defined( GLEW_EXT_transform_feedback )
        ADD_CONST_INT( "GLEW_EXT_transform_feedback", GLEW_EXT_transform_feedback );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE", GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE );
      #endif
      #if defined( GL_RGBA_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_RGBA_EXTENDED_RANGE_SGIX", GL_RGBA_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_R32I )
        ADD_CONST_INT( "GL_R32I", GL_R32I );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT", GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT );
      #endif
      #if defined( GL_FOG_OFFSET_SGIX )
        ADD_CONST_INT( "GL_FOG_OFFSET_SGIX", GL_FOG_OFFSET_SGIX );
      #endif
      #if defined( GL_R32F )
        ADD_CONST_INT( "GL_R32F", GL_R32F );
      #endif
      #if defined( GL_SAMPLE_ALPHA_TO_ONE_EXT )
        ADD_CONST_INT( "GL_SAMPLE_ALPHA_TO_ONE_EXT", GL_SAMPLE_ALPHA_TO_ONE_EXT );
      #endif
      #if defined( GL_MAX_VERTEX_SHADER_VARIANTS_EXT )
        ADD_CONST_INT( "GL_MAX_VERTEX_SHADER_VARIANTS_EXT", GL_MAX_VERTEX_SHADER_VARIANTS_EXT );
      #endif
      #if defined( GL_OR_REVERSE )
        ADD_CONST_INT( "GL_OR_REVERSE", GL_OR_REVERSE );
      #endif
      #if defined( GL_MIN_RED_SGIS )
        ADD_CONST_INT( "GL_MIN_RED_SGIS", GL_MIN_RED_SGIS );
      #endif
      #if defined( GL_LUMINANCE12_ALPHA4 )
        ADD_CONST_INT( "GL_LUMINANCE12_ALPHA4", GL_LUMINANCE12_ALPHA4 );
      #endif
      #if defined( GL_VERTEX_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_BUFFER_BINDING", GL_VERTEX_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GLX_AUX8_ATI )
        ADD_CONST_INT( "GLX_AUX8_ATI", GLX_AUX8_ATI );
      #endif
      #if defined( GLX_AUX3_ATI )
        ADD_CONST_INT( "GLX_AUX3_ATI", GLX_AUX3_ATI );
      #endif
      #if defined( GLEW_EXT_texture3D )
        ADD_CONST_INT( "GLEW_EXT_texture3D", GLEW_EXT_texture3D );
      #endif
      #if defined( GL_PIXEL_MAP_R_TO_R )
        ADD_CONST_INT( "GL_PIXEL_MAP_R_TO_R", GL_PIXEL_MAP_R_TO_R );
      #endif
      #if defined( GL_INGR_interlace_read )
        ADD_CONST_INT( "GL_INGR_interlace_read", GL_INGR_interlace_read );
      #endif
      #if defined( GLEW_EXT_index_func )
        ADD_CONST_INT( "GLEW_EXT_index_func", GLEW_EXT_index_func );
      #endif
      #if defined( GL_FOG_COORDINATE_SOURCE )
        ADD_CONST_INT( "GL_FOG_COORDINATE_SOURCE", GL_FOG_COORDINATE_SOURCE );
      #endif
      #if defined( GL_UNSIGNED_SHORT_5_6_5_REV )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_5_6_5_REV", GL_UNSIGNED_SHORT_5_6_5_REV );
      #endif
      #if defined( GL_TEXTURE_BORDER )
        ADD_CONST_INT( "GL_TEXTURE_BORDER", GL_TEXTURE_BORDER );
      #endif
      #if defined( GL_REPLICATE_BORDER )
        ADD_CONST_INT( "GL_REPLICATE_BORDER", GL_REPLICATE_BORDER );
      #endif
      #if defined( GL_ELEMENT_ARRAY_ATI )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_ATI", GL_ELEMENT_ARRAY_ATI );
      #endif
      #if defined( GLEW_REND_screen_coordinates )
        ADD_CONST_INT( "GLEW_REND_screen_coordinates", GLEW_REND_screen_coordinates );
      #endif
      #if defined( GL_CMYKA_EXT )
        ADD_CONST_INT( "GL_CMYKA_EXT", GL_CMYKA_EXT );
      #endif
      #if defined( GL_PROXY_TEXTURE_2D_EXT )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_2D_EXT", GL_PROXY_TEXTURE_2D_EXT );
      #endif
      #if defined( GL_MATRIX20_ARB )
        ADD_CONST_INT( "GL_MATRIX20_ARB", GL_MATRIX20_ARB );
      #endif
      #if defined( GL_FALSE )
        ADD_CONST_INT( "GL_FALSE", GL_FALSE );
      #endif
      #if defined( GL_FLOAT_MAT2 )
        ADD_CONST_INT( "GL_FLOAT_MAT2", GL_FLOAT_MAT2 );
      #endif
      #if defined( GL_FLOAT_MAT3 )
        ADD_CONST_INT( "GL_FLOAT_MAT3", GL_FLOAT_MAT3 );
      #endif
      #if defined( GL_DEPTH )
        ADD_CONST_INT( "GL_DEPTH", GL_DEPTH );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_LENGTH_NV", GL_EDGE_FLAG_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX", GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_FLOAT_MAT4 )
        ADD_CONST_INT( "GL_FLOAT_MAT4", GL_FLOAT_MAT4 );
      #endif
      #if defined( GL_PALETTE4_RGB8_OES )
        ADD_CONST_INT( "GL_PALETTE4_RGB8_OES", GL_PALETTE4_RGB8_OES );
      #endif
      #if defined( GL_DSDT_NV )
        ADD_CONST_INT( "GL_DSDT_NV", GL_DSDT_NV );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI", GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI );
      #endif
      #if defined( GL_OPERAND1_RGB )
        ADD_CONST_INT( "GL_OPERAND1_RGB", GL_OPERAND1_RGB );
      #endif
      #if defined( GL_OBJECT_LINK_STATUS_ARB )
        ADD_CONST_INT( "GL_OBJECT_LINK_STATUS_ARB", GL_OBJECT_LINK_STATUS_ARB );
      #endif
      #if defined( GL_COLOR_ATTACHMENT8_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT8_EXT", GL_COLOR_ATTACHMENT8_EXT );
      #endif
      #if defined( GLX_NUM_VIDEO_SLOTS_NV )
        ADD_CONST_INT( "GLX_NUM_VIDEO_SLOTS_NV", GLX_NUM_VIDEO_SLOTS_NV );
      #endif
      #if defined( GLX_MAX_PBUFFER_PIXELS_SGIX )
        ADD_CONST_INT( "GLX_MAX_PBUFFER_PIXELS_SGIX", GLX_MAX_PBUFFER_PIXELS_SGIX );
      #endif
      #if defined( GL_BUMP_TARGET_ATI )
        ADD_CONST_INT( "GL_BUMP_TARGET_ATI", GL_BUMP_TARGET_ATI );
      #endif
      #if defined( GL_MAX_VERTEX_HINT_PGI )
        ADD_CONST_INT( "GL_MAX_VERTEX_HINT_PGI", GL_MAX_VERTEX_HINT_PGI );
      #endif
      #if defined( GL_POST_CONVOLUTION_GREEN_BIAS_EXT )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_GREEN_BIAS_EXT", GL_POST_CONVOLUTION_GREEN_BIAS_EXT );
      #endif
      #if defined( GL_RGBA32UI )
        ADD_CONST_INT( "GL_RGBA32UI", GL_RGBA32UI );
      #endif
      #if defined( GL_422_EXT )
        ADD_CONST_INT( "GL_422_EXT", GL_422_EXT );
      #endif
      #if defined( GL_RG8I )
        ADD_CONST_INT( "GL_RG8I", GL_RG8I );
      #endif
      #if defined( GLX_VISUAL_SELECT_GROUP_SGIX )
        ADD_CONST_INT( "GLX_VISUAL_SELECT_GROUP_SGIX", GLX_VISUAL_SELECT_GROUP_SGIX );
      #endif
      #if defined( GL_RGBA8I )
        ADD_CONST_INT( "GL_RGBA8I", GL_RGBA8I );
      #endif
      #if defined( GL_PROGRAM_PARAMETERS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_PARAMETERS_ARB", GL_PROGRAM_PARAMETERS_ARB );
      #endif
      #if defined( GL_SRC1_ALPHA )
        ADD_CONST_INT( "GL_SRC1_ALPHA", GL_SRC1_ALPHA );
      #endif
      #if defined( GL_OP_INDEX_EXT )
        ADD_CONST_INT( "GL_OP_INDEX_EXT", GL_OP_INDEX_EXT );
      #endif
      #if defined( GLX_3DFX_WINDOW_MODE_MESA )
        ADD_CONST_INT( "GLX_3DFX_WINDOW_MODE_MESA", GLX_3DFX_WINDOW_MODE_MESA );
      #endif
      #if defined( GL_MAX_BINDABLE_UNIFORM_SIZE_EXT )
        ADD_CONST_INT( "GL_MAX_BINDABLE_UNIFORM_SIZE_EXT", GL_MAX_BINDABLE_UNIFORM_SIZE_EXT );
      #endif
      #if defined( GL_MODELVIEW30_ARB )
        ADD_CONST_INT( "GL_MODELVIEW30_ARB", GL_MODELVIEW30_ARB );
      #endif
      #if defined( GL_SIGNED_ALPHA_NV )
        ADD_CONST_INT( "GL_SIGNED_ALPHA_NV", GL_SIGNED_ALPHA_NV );
      #endif
      #if defined( GL_STENCIL_TAG_BITS_EXT )
        ADD_CONST_INT( "GL_STENCIL_TAG_BITS_EXT", GL_STENCIL_TAG_BITS_EXT );
      #endif
      #if defined( GL_TEXTURE8_ARB )
        ADD_CONST_INT( "GL_TEXTURE8_ARB", GL_TEXTURE8_ARB );
      #endif
      #if defined( GL_ALPHA_BIAS )
        ADD_CONST_INT( "GL_ALPHA_BIAS", GL_ALPHA_BIAS );
      #endif
      #if defined( GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB", GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_CURRENT_TANGENT_EXT )
        ADD_CONST_INT( "GL_CURRENT_TANGENT_EXT", GL_CURRENT_TANGENT_EXT );
      #endif
      #if defined( GL_HILO16_NV )
        ADD_CONST_INT( "GL_HILO16_NV", GL_HILO16_NV );
      #endif
      #if defined( GL_ABGR_EXT )
        ADD_CONST_INT( "GL_ABGR_EXT", GL_ABGR_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_NV", GL_TRANSFORM_FEEDBACK_NV );
      #endif
      #if defined( GL_MULTISAMPLE_EXT )
        ADD_CONST_INT( "GL_MULTISAMPLE_EXT", GL_MULTISAMPLE_EXT );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY", GL_FOG_COORDINATE_ARRAY );
      #endif
      #if defined( GL_RASTERIZER_DISCARD_EXT )
        ADD_CONST_INT( "GL_RASTERIZER_DISCARD_EXT", GL_RASTERIZER_DISCARD_EXT );
      #endif
      #if defined( GLX_MIPMAP_TEXTURE_EXT )
        ADD_CONST_INT( "GLX_MIPMAP_TEXTURE_EXT", GLX_MIPMAP_TEXTURE_EXT );
      #endif
      #if defined( GL_MATRIX1_NV )
        ADD_CONST_INT( "GL_MATRIX1_NV", GL_MATRIX1_NV );
      #endif
      #if defined( GL_SAMPLER_CUBE_SHADOW )
        ADD_CONST_INT( "GL_SAMPLER_CUBE_SHADOW", GL_SAMPLER_CUBE_SHADOW );
      #endif
      #if defined( GL_TEXTURE_BINDING_3D )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_3D", GL_TEXTURE_BINDING_3D );
      #endif
      #if defined( GLEW_EXT_vertex_array )
        ADD_CONST_INT( "GLEW_EXT_vertex_array", GLEW_EXT_vertex_array );
      #endif
      #if defined( GL_VERTEX_SHADER_BINDING_EXT )
        ADD_CONST_INT( "GL_VERTEX_SHADER_BINDING_EXT", GL_VERTEX_SHADER_BINDING_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE", GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE );
      #endif
      #if defined( GL_OP_CLAMP_EXT )
        ADD_CONST_INT( "GL_OP_CLAMP_EXT", GL_OP_CLAMP_EXT );
      #endif
      #if defined( GLX_VISUAL_ID_EXT )
        ADD_CONST_INT( "GLX_VISUAL_ID_EXT", GLX_VISUAL_ID_EXT );
      #endif
      #if defined( GL_ASYNC_DRAW_PIXELS_SGIX )
        ADD_CONST_INT( "GL_ASYNC_DRAW_PIXELS_SGIX", GL_ASYNC_DRAW_PIXELS_SGIX );
      #endif
      #if defined( GLX_TEXTURE_RGBA_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_RGBA_ATI", GLX_TEXTURE_RGBA_ATI );
      #endif
      #if defined( GL_FOG_COORDINATE_SOURCE_EXT )
        ADD_CONST_INT( "GL_FOG_COORDINATE_SOURCE_EXT", GL_FOG_COORDINATE_SOURCE_EXT );
      #endif
      #if defined( GL_OBJECT_TYPE_ARB )
        ADD_CONST_INT( "GL_OBJECT_TYPE_ARB", GL_OBJECT_TYPE_ARB );
      #endif
      #if defined( GL_TEXTURE )
        ADD_CONST_INT( "GL_TEXTURE", GL_TEXTURE );
      #endif
      #if defined( GL_BLUE_MAX_CLAMP_INGR )
        ADD_CONST_INT( "GL_BLUE_MAX_CLAMP_INGR", GL_BLUE_MAX_CLAMP_INGR );
      #endif
      #if defined( GL_MAX_PROJECTION_STACK_DEPTH )
        ADD_CONST_INT( "GL_MAX_PROJECTION_STACK_DEPTH", GL_MAX_PROJECTION_STACK_DEPTH );
      #endif
      #if defined( GL_MIN_PROGRAM_TEXEL_OFFSET_NV )
        ADD_CONST_INT( "GL_MIN_PROGRAM_TEXEL_OFFSET_NV", GL_MIN_PROGRAM_TEXEL_OFFSET_NV );
      #endif
      #if defined( GL_CND_ATI )
        ADD_CONST_INT( "GL_CND_ATI", GL_CND_ATI );
      #endif
      #if defined( GL_MAX_CLIP_DISTANCES )
        ADD_CONST_INT( "GL_MAX_CLIP_DISTANCES", GL_MAX_CLIP_DISTANCES );
      #endif
      #if defined( GL_CULL_MODES_NV )
        ADD_CONST_INT( "GL_CULL_MODES_NV", GL_CULL_MODES_NV );
      #endif
      #if defined( GL_FRAGMENT_PROGRAM_NV )
        ADD_CONST_INT( "GL_FRAGMENT_PROGRAM_NV", GL_FRAGMENT_PROGRAM_NV );
      #endif
      #if defined( GL_CLIP_DISTANCE_NV )
        ADD_CONST_INT( "GL_CLIP_DISTANCE_NV", GL_CLIP_DISTANCE_NV );
      #endif
      #if defined( GLX_AUX5_EXT )
        ADD_CONST_INT( "GLX_AUX5_EXT", GLX_AUX5_EXT );
      #endif
      #if defined( GLX_STENCIL_BUFFER_BIT )
        ADD_CONST_INT( "GLX_STENCIL_BUFFER_BIT", GLX_STENCIL_BUFFER_BIT );
      #endif
      #if defined( GLX_X_VISUAL_TYPE )
        ADD_CONST_INT( "GLX_X_VISUAL_TYPE", GLX_X_VISUAL_TYPE );
      #endif
      #if defined( GL_ACTIVE_UNIFORMS )
        ADD_CONST_INT( "GL_ACTIVE_UNIFORMS", GL_ACTIVE_UNIFORMS );
      #endif
      #if defined( GLX_TRANSPARENT_BLUE_VALUE )
        ADD_CONST_INT( "GLX_TRANSPARENT_BLUE_VALUE", GLX_TRANSPARENT_BLUE_VALUE );
      #endif
      #if defined( GL_DOT2_ADD_ATI )
        ADD_CONST_INT( "GL_DOT2_ADD_ATI", GL_DOT2_ADD_ATI );
      #endif
      #if defined( GL_BIAS_BY_NEGATIVE_ONE_HALF_NV )
        ADD_CONST_INT( "GL_BIAS_BY_NEGATIVE_ONE_HALF_NV", GL_BIAS_BY_NEGATIVE_ONE_HALF_NV );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB3_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB3_NV", GL_EVAL_VERTEX_ATTRIB3_NV );
      #endif
      #if defined( GL_EXT_subtexture )
        ADD_CONST_INT( "GL_EXT_subtexture", GL_EXT_subtexture );
      #endif
      #if defined( GL_TEXTURE_BINDING_CUBE_MAP )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_CUBE_MAP", GL_TEXTURE_BINDING_CUBE_MAP );
      #endif
      #if defined( GL_PIXEL_TRANSFORM_2D_MATRIX_EXT )
        ADD_CONST_INT( "GL_PIXEL_TRANSFORM_2D_MATRIX_EXT", GL_PIXEL_TRANSFORM_2D_MATRIX_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT", GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT );
      #endif
      #if defined( GL_STENCIL_TEST_TWO_SIDE_EXT )
        ADD_CONST_INT( "GL_STENCIL_TEST_TWO_SIDE_EXT", GL_STENCIL_TEST_TWO_SIDE_EXT );
      #endif
      #if defined( GLX_TEXTURE_CUBE_MAP_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_CUBE_MAP_ATI", GLX_TEXTURE_CUBE_MAP_ATI );
      #endif
      #if defined( GL_NUM_COMPRESSED_TEXTURE_FORMATS )
        ADD_CONST_INT( "GL_NUM_COMPRESSED_TEXTURE_FORMATS", GL_NUM_COMPRESSED_TEXTURE_FORMATS );
      #endif
      #if defined( GL_YCBCR_MESA )
        ADD_CONST_INT( "GL_YCBCR_MESA", GL_YCBCR_MESA );
      #endif
      #if defined( GL_NORMAL_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_BUFFER_BINDING_ARB", GL_NORMAL_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_EXT )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_EXT", GL_SECONDARY_COLOR_ARRAY_EXT );
      #endif
      #if defined( GL_UNPACK_RESAMPLE_OML )
        ADD_CONST_INT( "GL_UNPACK_RESAMPLE_OML", GL_UNPACK_RESAMPLE_OML );
      #endif
      #if defined( GL_CURRENT_VERTEX_EXT )
        ADD_CONST_INT( "GL_CURRENT_VERTEX_EXT", GL_CURRENT_VERTEX_EXT );
      #endif
      #if defined( GL_4PASS_2_EXT )
        ADD_CONST_INT( "GL_4PASS_2_EXT", GL_4PASS_2_EXT );
      #endif
      #if defined( GL_MAX_TEXTURE_BUFFER_SIZE )
        ADD_CONST_INT( "GL_MAX_TEXTURE_BUFFER_SIZE", GL_MAX_TEXTURE_BUFFER_SIZE );
      #endif
      #if defined( GL_UNSIGNED_INT_8_8_8_8_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_8_8_8_8_EXT", GL_UNSIGNED_INT_8_8_8_8_EXT );
      #endif
      #if defined( GL_ALPHA_FLOAT16_APPLE )
        ADD_CONST_INT( "GL_ALPHA_FLOAT16_APPLE", GL_ALPHA_FLOAT16_APPLE );
      #endif
      #if defined( GL_TEXTURE_ENV_MODE_ALPHA_EXT )
        ADD_CONST_INT( "GL_TEXTURE_ENV_MODE_ALPHA_EXT", GL_TEXTURE_ENV_MODE_ALPHA_EXT );
      #endif
      #if defined( GL_RASTERIZER_DISCARD_NV )
        ADD_CONST_INT( "GL_RASTERIZER_DISCARD_NV", GL_RASTERIZER_DISCARD_NV );
      #endif
      #if defined( GL_TEXTURE_MAX_LEVEL )
        ADD_CONST_INT( "GL_TEXTURE_MAX_LEVEL", GL_TEXTURE_MAX_LEVEL );
      #endif
      #if defined( GL_SOURCE3_ALPHA_NV )
        ADD_CONST_INT( "GL_SOURCE3_ALPHA_NV", GL_SOURCE3_ALPHA_NV );
      #endif
      #if defined( GL_OPERAND0_RGB_EXT )
        ADD_CONST_INT( "GL_OPERAND0_RGB_EXT", GL_OPERAND0_RGB_EXT );
      #endif
      #if defined( GL_ACCUM_RED_BITS )
        ADD_CONST_INT( "GL_ACCUM_RED_BITS", GL_ACCUM_RED_BITS );
      #endif
      #if defined( GL_TEXTURE_COMPARE_FUNC_ARB )
        ADD_CONST_INT( "GL_TEXTURE_COMPARE_FUNC_ARB", GL_TEXTURE_COMPARE_FUNC_ARB );
      #endif
      #if defined( GL_OML_interlace )
        ADD_CONST_INT( "GL_OML_interlace", GL_OML_interlace );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT", GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT );
      #endif
      #if defined( GLX_EVENT_MASK_SGIX )
        ADD_CONST_INT( "GLX_EVENT_MASK_SGIX", GLX_EVENT_MASK_SGIX );
      #endif
      #if defined( GL_PRIMITIVE_ID_NV )
        ADD_CONST_INT( "GL_PRIMITIVE_ID_NV", GL_PRIMITIVE_ID_NV );
      #endif
      #if defined( GL_NORMAL_MAP )
        ADD_CONST_INT( "GL_NORMAL_MAP", GL_NORMAL_MAP );
      #endif
      #if defined( GL_STENCIL_BUFFER )
        ADD_CONST_INT( "GL_STENCIL_BUFFER", GL_STENCIL_BUFFER );
      #endif
      #if defined( GL_ALPHA8 )
        ADD_CONST_INT( "GL_ALPHA8", GL_ALPHA8 );
      #endif
      #if defined( GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV )
        ADD_CONST_INT( "GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV", GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV );
      #endif
      #if defined( GL_BLEND_EQUATION )
        ADD_CONST_INT( "GL_BLEND_EQUATION", GL_BLEND_EQUATION );
      #endif
      #if defined( GL_FRAGMENT_COLOR_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_COLOR_EXT", GL_FRAGMENT_COLOR_EXT );
      #endif
      #if defined( GL_INTENSITY32I_EXT )
        ADD_CONST_INT( "GL_INTENSITY32I_EXT", GL_INTENSITY32I_EXT );
      #endif
      #if defined( GL_TEXTURE_APPLICATION_MODE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_APPLICATION_MODE_EXT", GL_TEXTURE_APPLICATION_MODE_EXT );
      #endif
      #if defined( GL_PROGRAM_ATTRIBS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_ATTRIBS_ARB", GL_PROGRAM_ATTRIBS_ARB );
      #endif
      #if defined( GL_STENCIL_CLEAR_TAG_VALUE_EXT )
        ADD_CONST_INT( "GL_STENCIL_CLEAR_TAG_VALUE_EXT", GL_STENCIL_CLEAR_TAG_VALUE_EXT );
      #endif
      #if defined( GL_MODELVIEW28_ARB )
        ADD_CONST_INT( "GL_MODELVIEW28_ARB", GL_MODELVIEW28_ARB );
      #endif
      #if defined( GL_ALPHA4 )
        ADD_CONST_INT( "GL_ALPHA4", GL_ALPHA4 );
      #endif
      #if defined( GL_MAX_GEOMETRY_OUTPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS", GL_MAX_GEOMETRY_OUTPUT_COMPONENTS );
      #endif
      #if defined( GL_RGBA_SIGNED_COMPONENTS_EXT )
        ADD_CONST_INT( "GL_RGBA_SIGNED_COMPONENTS_EXT", GL_RGBA_SIGNED_COMPONENTS_EXT );
      #endif
      #if defined( GL_FENCE_STATUS_NV )
        ADD_CONST_INT( "GL_FENCE_STATUS_NV", GL_FENCE_STATUS_NV );
      #endif
      #if defined( GLX_SYNC_FRAME_SGIX )
        ADD_CONST_INT( "GLX_SYNC_FRAME_SGIX", GLX_SYNC_FRAME_SGIX );
      #endif
      #if defined( GL_EYE_DISTANCE_TO_LINE_SGIS )
        ADD_CONST_INT( "GL_EYE_DISTANCE_TO_LINE_SGIS", GL_EYE_DISTANCE_TO_LINE_SGIS );
      #endif
      #if defined( GL_UNPACK_CONSTANT_DATA_SUNX )
        ADD_CONST_INT( "GL_UNPACK_CONSTANT_DATA_SUNX", GL_UNPACK_CONSTANT_DATA_SUNX );
      #endif
      #if defined( GL_LINE )
        ADD_CONST_INT( "GL_LINE", GL_LINE );
      #endif
      #if defined( GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV", GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV );
      #endif
      #if defined( GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT", GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT );
      #endif
      #if defined( GL_INTENSITY16_SIGNED_SGIX )
        ADD_CONST_INT( "GL_INTENSITY16_SIGNED_SGIX", GL_INTENSITY16_SIGNED_SGIX );
      #endif
      #if defined( GL_LUMINANCE16_EXT )
        ADD_CONST_INT( "GL_LUMINANCE16_EXT", GL_LUMINANCE16_EXT );
      #endif
      #if defined( GL_DRAW_BUFFER4_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER4_ATI", GL_DRAW_BUFFER4_ATI );
      #endif
      #if defined( GL_STENCIL_BITS )
        ADD_CONST_INT( "GL_STENCIL_BITS", GL_STENCIL_BITS );
      #endif
      #if defined( GL_MAX_VERTEX_UNITS_ARB )
        ADD_CONST_INT( "GL_MAX_VERTEX_UNITS_ARB", GL_MAX_VERTEX_UNITS_ARB );
      #endif
      #if defined( GL_MESAX_texture_stack )
        ADD_CONST_INT( "GL_MESAX_texture_stack", GL_MESAX_texture_stack );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD19_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD19_EXT", GL_OUTPUT_TEXTURE_COORD19_EXT );
      #endif
      #if defined( GL_RGBA32UI_EXT )
        ADD_CONST_INT( "GL_RGBA32UI_EXT", GL_RGBA32UI_EXT );
      #endif
      #if defined( GL_CONVOLUTION_FILTER_SCALE )
        ADD_CONST_INT( "GL_CONVOLUTION_FILTER_SCALE", GL_CONVOLUTION_FILTER_SCALE );
      #endif
      #if defined( GL_BLUE_INTEGER )
        ADD_CONST_INT( "GL_BLUE_INTEGER", GL_BLUE_INTEGER );
      #endif
      #if defined( GL_DYNAMIC_COPY )
        ADD_CONST_INT( "GL_DYNAMIC_COPY", GL_DYNAMIC_COPY );
      #endif
      #if defined( GL_GEOMETRY_PROGRAM_NV )
        ADD_CONST_INT( "GL_GEOMETRY_PROGRAM_NV", GL_GEOMETRY_PROGRAM_NV );
      #endif
      #if defined( GL_SYNC_FLAGS )
        ADD_CONST_INT( "GL_SYNC_FLAGS", GL_SYNC_FLAGS );
      #endif
      #if defined( GL_SAMPLE_MASK_VALUE_NV )
        ADD_CONST_INT( "GL_SAMPLE_MASK_VALUE_NV", GL_SAMPLE_MASK_VALUE_NV );
      #endif
      #if defined( GL_COLOR_TABLE_BLUE_SIZE_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_BLUE_SIZE_SGI", GL_COLOR_TABLE_BLUE_SIZE_SGI );
      #endif
      #if defined( GL_CON_0_ATI )
        ADD_CONST_INT( "GL_CON_0_ATI", GL_CON_0_ATI );
      #endif
      #if defined( GL_MAX_TEXTURE_IMAGE_UNITS_ARB )
        ADD_CONST_INT( "GL_MAX_TEXTURE_IMAGE_UNITS_ARB", GL_MAX_TEXTURE_IMAGE_UNITS_ARB );
      #endif
      #if defined( GL_RG32I )
        ADD_CONST_INT( "GL_RG32I", GL_RG32I );
      #endif
      #if defined( GL_UNSIGNED_BYTE_2_3_3_REV )
        ADD_CONST_INT( "GL_UNSIGNED_BYTE_2_3_3_REV", GL_UNSIGNED_BYTE_2_3_3_REV );
      #endif
      #if defined( GL_RENDERBUFFER_INTERNAL_FORMAT )
        ADD_CONST_INT( "GL_RENDERBUFFER_INTERNAL_FORMAT", GL_RENDERBUFFER_INTERNAL_FORMAT );
      #endif
      #if defined( GL_EXT_stencil_two_side )
        ADD_CONST_INT( "GL_EXT_stencil_two_side", GL_EXT_stencil_two_side );
      #endif
      #if defined( GL_COLOR_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_COLOR_ARRAY_TYPE_EXT", GL_COLOR_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_BOOL_VEC2_ARB )
        ADD_CONST_INT( "GL_BOOL_VEC2_ARB", GL_BOOL_VEC2_ARB );
      #endif
      #if defined( GL_CLIENT_ACTIVE_TEXTURE )
        ADD_CONST_INT( "GL_CLIENT_ACTIVE_TEXTURE", GL_CLIENT_ACTIVE_TEXTURE );
      #endif
      #if defined( GLX_SLOW_VISUAL_EXT )
        ADD_CONST_INT( "GLX_SLOW_VISUAL_EXT", GLX_SLOW_VISUAL_EXT );
      #endif
      #if defined( GL_RGBA_FLOAT16_APPLE )
        ADD_CONST_INT( "GL_RGBA_FLOAT16_APPLE", GL_RGBA_FLOAT16_APPLE );
      #endif
      #if defined( GLEW_EXT_cull_vertex )
        ADD_CONST_INT( "GLEW_EXT_cull_vertex", GLEW_EXT_cull_vertex );
      #endif
      #if defined( GLX_VIDEO_OUT_FIELD_2_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_FIELD_2_NV", GLX_VIDEO_OUT_FIELD_2_NV );
      #endif
      #if defined( GL_BUFFER_FLUSHING_UNMAP_APPLE )
        ADD_CONST_INT( "GL_BUFFER_FLUSHING_UNMAP_APPLE", GL_BUFFER_FLUSHING_UNMAP_APPLE );
      #endif
      #if defined( GLX_GREEN_SIZE )
        ADD_CONST_INT( "GLX_GREEN_SIZE", GLX_GREEN_SIZE );
      #endif
      #if defined( GL_BUFFER_MAPPED_ARB )
        ADD_CONST_INT( "GL_BUFFER_MAPPED_ARB", GL_BUFFER_MAPPED_ARB );
      #endif
      #if defined( GL_OPERAND2_ALPHA )
        ADD_CONST_INT( "GL_OPERAND2_ALPHA", GL_OPERAND2_ALPHA );
      #endif
      #if defined( GL_SAMPLE_ALPHA_TO_COVERAGE )
        ADD_CONST_INT( "GL_SAMPLE_ALPHA_TO_COVERAGE", GL_SAMPLE_ALPHA_TO_COVERAGE );
      #endif
      #if defined( GLX_OML_sync_control )
        ADD_CONST_INT( "GLX_OML_sync_control", GLX_OML_sync_control );
      #endif
      #if defined( GL_FOG_DENSITY )
        ADD_CONST_INT( "GL_FOG_DENSITY", GL_FOG_DENSITY );
      #endif
      #if defined( GL_TEXTURE_CONSTANT_DATA_SUNX )
        ADD_CONST_INT( "GL_TEXTURE_CONSTANT_DATA_SUNX", GL_TEXTURE_CONSTANT_DATA_SUNX );
      #endif
      #if defined( GL_CONSTANT_ATTENUATION )
        ADD_CONST_INT( "GL_CONSTANT_ATTENUATION", GL_CONSTANT_ATTENUATION );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD25_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD25_EXT", GL_OUTPUT_TEXTURE_COORD25_EXT );
      #endif
      #if defined( GL_MAX_SHININESS_NV )
        ADD_CONST_INT( "GL_MAX_SHININESS_NV", GL_MAX_SHININESS_NV );
      #endif
      #if defined( GL_CONVOLUTION_HINT_SGIX )
        ADD_CONST_INT( "GL_CONVOLUTION_HINT_SGIX", GL_CONVOLUTION_HINT_SGIX );
      #endif
      #if defined( GL_ADD_SIGNED_ARB )
        ADD_CONST_INT( "GL_ADD_SIGNED_ARB", GL_ADD_SIGNED_ARB );
      #endif
      #if defined( GL_EXT_draw_buffers2 )
        ADD_CONST_INT( "GL_EXT_draw_buffers2", GL_EXT_draw_buffers2 );
      #endif
      #if defined( GLX_HYPERPIPE_RENDER_PIPE_SGIX )
        ADD_CONST_INT( "GLX_HYPERPIPE_RENDER_PIPE_SGIX", GLX_HYPERPIPE_RENDER_PIPE_SGIX );
      #endif
      #if defined( GL_DEBUG_CATEGORY_APPLICATION_AMD )
        ADD_CONST_INT( "GL_DEBUG_CATEGORY_APPLICATION_AMD", GL_DEBUG_CATEGORY_APPLICATION_AMD );
      #endif
      #if defined( GL_LUMINANCE_FLOAT32_APPLE )
        ADD_CONST_INT( "GL_LUMINANCE_FLOAT32_APPLE", GL_LUMINANCE_FLOAT32_APPLE );
      #endif
      #if defined( GL_HI_BIAS_NV )
        ADD_CONST_INT( "GL_HI_BIAS_NV", GL_HI_BIAS_NV );
      #endif
      #if defined( GL_RESAMPLE_ZERO_FILL_OML )
        ADD_CONST_INT( "GL_RESAMPLE_ZERO_FILL_OML", GL_RESAMPLE_ZERO_FILL_OML );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB", GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB", GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB );
      #endif
      #if defined( GL_CON_5_ATI )
        ADD_CONST_INT( "GL_CON_5_ATI", GL_CON_5_ATI );
      #endif
      #if defined( GL_SAMPLES_SGIS )
        ADD_CONST_INT( "GL_SAMPLES_SGIS", GL_SAMPLES_SGIS );
      #endif
      #if defined( GL_INVALID_OPERATION )
        ADD_CONST_INT( "GL_INVALID_OPERATION", GL_INVALID_OPERATION );
      #endif
      #if defined( GLEW_EXT_framebuffer_sRGB )
        ADD_CONST_INT( "GLEW_EXT_framebuffer_sRGB", GLEW_EXT_framebuffer_sRGB );
      #endif
      #if defined( GL_HILO8_NV )
        ADD_CONST_INT( "GL_HILO8_NV", GL_HILO8_NV );
      #endif
      #if defined( GL_CLAMP_READ_COLOR )
        ADD_CONST_INT( "GL_CLAMP_READ_COLOR", GL_CLAMP_READ_COLOR );
      #endif
      #if defined( GL_RED_INTEGER )
        ADD_CONST_INT( "GL_RED_INTEGER", GL_RED_INTEGER );
      #endif
      #if defined( GL_VERTEX_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_STRIDE_EXT", GL_VERTEX_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_TEXTURE_BINDING_BUFFER )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_BUFFER", GL_TEXTURE_BINDING_BUFFER );
      #endif
      #if defined( GL_COLOR_ATTACHMENT5 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT5", GL_COLOR_ATTACHMENT5 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT4 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT4", GL_COLOR_ATTACHMENT4 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT7 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT7", GL_COLOR_ATTACHMENT7 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT6 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT6", GL_COLOR_ATTACHMENT6 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT1 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT1", GL_COLOR_ATTACHMENT1 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT0 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT0", GL_COLOR_ATTACHMENT0 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT3 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT3", GL_COLOR_ATTACHMENT3 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT2 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT2", GL_COLOR_ATTACHMENT2 );
      #endif
      #if defined( GL_TEXTURE_LUMINANCE_TYPE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_LUMINANCE_TYPE_ARB", GL_TEXTURE_LUMINANCE_TYPE_ARB );
      #endif
      #if defined( GL_COLOR_ATTACHMENT9 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT9", GL_COLOR_ATTACHMENT9 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT8 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT8", GL_COLOR_ATTACHMENT8 );
      #endif
      #if defined( GL_TEXTURE_RANGE_POINTER_APPLE )
        ADD_CONST_INT( "GL_TEXTURE_RANGE_POINTER_APPLE", GL_TEXTURE_RANGE_POINTER_APPLE );
      #endif
      #if defined( GL_MIRROR_CLAMP_ATI )
        ADD_CONST_INT( "GL_MIRROR_CLAMP_ATI", GL_MIRROR_CLAMP_ATI );
      #endif
      #if defined( GL_PACK_IMAGE_HEIGHT )
        ADD_CONST_INT( "GL_PACK_IMAGE_HEIGHT", GL_PACK_IMAGE_HEIGHT );
      #endif
      #if defined( GL_MATRIX5_NV )
        ADD_CONST_INT( "GL_MATRIX5_NV", GL_MATRIX5_NV );
      #endif
      #if defined( GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV )
        ADD_CONST_INT( "GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV", GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV );
      #endif
      #if defined( GL_PIXEL_MAP_B_TO_B_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_B_TO_B_SIZE", GL_PIXEL_MAP_B_TO_B_SIZE );
      #endif
      #if defined( GL_READ_PIXEL_DATA_RANGE_LENGTH_NV )
        ADD_CONST_INT( "GL_READ_PIXEL_DATA_RANGE_LENGTH_NV", GL_READ_PIXEL_DATA_RANGE_LENGTH_NV );
      #endif
      #if defined( GL_BUFFER_USAGE )
        ADD_CONST_INT( "GL_BUFFER_USAGE", GL_BUFFER_USAGE );
      #endif
      #if defined( GL_CULL_FACE_MODE )
        ADD_CONST_INT( "GL_CULL_FACE_MODE", GL_CULL_FACE_MODE );
      #endif
      #if defined( GL_POST_CONVOLUTION_COLOR_TABLE )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_COLOR_TABLE", GL_POST_CONVOLUTION_COLOR_TABLE );
      #endif
      #if defined( GL_PROGRAM_TARGET_NV )
        ADD_CONST_INT( "GL_PROGRAM_TARGET_NV", GL_PROGRAM_TARGET_NV );
      #endif
      #if defined( GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV", GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV );
      #endif
      #if defined( GL_FRAGMENT_COLOR_MATERIAL_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_COLOR_MATERIAL_EXT", GL_FRAGMENT_COLOR_MATERIAL_EXT );
      #endif
      #if defined( GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX )
        ADD_CONST_INT( "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX", GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX );
      #endif
      #if defined( GL_MAX_PROGRAM_GENERIC_RESULTS_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_GENERIC_RESULTS_NV", GL_MAX_PROGRAM_GENERIC_RESULTS_NV );
      #endif
      #if defined( GL_BOOL )
        ADD_CONST_INT( "GL_BOOL", GL_BOOL );
      #endif
      #if defined( GL_PIXEL_TILE_CACHE_INCREMENT_SGIX )
        ADD_CONST_INT( "GL_PIXEL_TILE_CACHE_INCREMENT_SGIX", GL_PIXEL_TILE_CACHE_INCREMENT_SGIX );
      #endif
      #if defined( GL_RGBA_INTEGER_MODE_EXT )
        ADD_CONST_INT( "GL_RGBA_INTEGER_MODE_EXT", GL_RGBA_INTEGER_MODE_EXT );
      #endif
      #if defined( GL_ATIX_vertex_shader_output_point_size )
        ADD_CONST_INT( "GL_ATIX_vertex_shader_output_point_size", GL_ATIX_vertex_shader_output_point_size );
      #endif
      #if defined( GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV", GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV );
      #endif
      #if defined( GL_POLYGON_OFFSET_BIAS_EXT )
        ADD_CONST_INT( "GL_POLYGON_OFFSET_BIAS_EXT", GL_POLYGON_OFFSET_BIAS_EXT );
      #endif
      #if defined( GL_EXT_index_texture )
        ADD_CONST_INT( "GL_EXT_index_texture", GL_EXT_index_texture );
      #endif
      #if defined( GL_SIGNED_HILO8_NV )
        ADD_CONST_INT( "GL_SIGNED_HILO8_NV", GL_SIGNED_HILO8_NV );
      #endif
      #if defined( GL_MATRIX30_ARB )
        ADD_CONST_INT( "GL_MATRIX30_ARB", GL_MATRIX30_ARB );
      #endif
      #if defined( GL_DOT3_RGB_EXT )
        ADD_CONST_INT( "GL_DOT3_RGB_EXT", GL_DOT3_RGB_EXT );
      #endif
      #if defined( GLX_HYPERPIPE_STEREO_SGIX )
        ADD_CONST_INT( "GLX_HYPERPIPE_STEREO_SGIX", GLX_HYPERPIPE_STEREO_SGIX );
      #endif
      #if defined( GL_COMBINE_RGB_EXT )
        ADD_CONST_INT( "GL_COMBINE_RGB_EXT", GL_COMBINE_RGB_EXT );
      #endif
      #if defined( GL_T2F_V3F )
        ADD_CONST_INT( "GL_T2F_V3F", GL_T2F_V3F );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT", GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT );
      #endif
      #if defined( GL_RGB_SNORM )
        ADD_CONST_INT( "GL_RGB_SNORM", GL_RGB_SNORM );
      #endif
      #if defined( GL_OPERAND0_ALPHA )
        ADD_CONST_INT( "GL_OPERAND0_ALPHA", GL_OPERAND0_ALPHA );
      #endif
      #if defined( GL_ALWAYS )
        ADD_CONST_INT( "GL_ALWAYS", GL_ALWAYS );
      #endif
      #if defined( GL_EXT_texture_integer )
        ADD_CONST_INT( "GL_EXT_texture_integer", GL_EXT_texture_integer );
      #endif
      #if defined( GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB", GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB );
      #endif
      #if defined( GL_NORMAL_MAP_NV )
        ADD_CONST_INT( "GL_NORMAL_MAP_NV", GL_NORMAL_MAP_NV );
      #endif
      #if defined( GL_MODELVIEW1_EXT )
        ADD_CONST_INT( "GL_MODELVIEW1_EXT", GL_MODELVIEW1_EXT );
      #endif
      #if defined( GL_FLOAT_MAT3_ARB )
        ADD_CONST_INT( "GL_FLOAT_MAT3_ARB", GL_FLOAT_MAT3_ARB );
      #endif
      #if defined( GL_POINT_SPRITE_COORD_ORIGIN )
        ADD_CONST_INT( "GL_POINT_SPRITE_COORD_ORIGIN", GL_POINT_SPRITE_COORD_ORIGIN );
      #endif
      #if defined( GL_INTERLACE_SGIX )
        ADD_CONST_INT( "GL_INTERLACE_SGIX", GL_INTERLACE_SGIX );
      #endif
      #if defined( GL_POINT_SIZE_RANGE )
        ADD_CONST_INT( "GL_POINT_SIZE_RANGE", GL_POINT_SIZE_RANGE );
      #endif
      #if defined( GL_HISTOGRAM_WIDTH )
        ADD_CONST_INT( "GL_HISTOGRAM_WIDTH", GL_HISTOGRAM_WIDTH );
      #endif
      #if defined( GL_PIXEL_COUNT_NV )
        ADD_CONST_INT( "GL_PIXEL_COUNT_NV", GL_PIXEL_COUNT_NV );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_BINDING )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING", GL_TRANSFORM_FEEDBACK_BUFFER_BINDING );
      #endif
      #if defined( GL_GREEN_BIAS )
        ADD_CONST_INT( "GL_GREEN_BIAS", GL_GREEN_BIAS );
      #endif
      #if defined( GL_SAMPLER_2D_MULTISAMPLE_ARRAY )
        ADD_CONST_INT( "GL_SAMPLER_2D_MULTISAMPLE_ARRAY", GL_SAMPLER_2D_MULTISAMPLE_ARRAY );
      #endif
      #if defined( GL_SHADER_TYPE )
        ADD_CONST_INT( "GL_SHADER_TYPE", GL_SHADER_TYPE );
      #endif
      #if defined( GLX_ACCUM_ALPHA_SIZE )
        ADD_CONST_INT( "GLX_ACCUM_ALPHA_SIZE", GLX_ACCUM_ALPHA_SIZE );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE", GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE );
      #endif
      #if defined( GL_FRAMEBUFFER_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_EXT", GL_FRAMEBUFFER_EXT );
      #endif
      #if defined( GL_SAMPLE_PATTERN_SGIS )
        ADD_CONST_INT( "GL_SAMPLE_PATTERN_SGIS", GL_SAMPLE_PATTERN_SGIS );
      #endif
      #if defined( GL_RGBA32I_EXT )
        ADD_CONST_INT( "GL_RGBA32I_EXT", GL_RGBA32I_EXT );
      #endif
      #if defined( GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB", GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB );
      #endif
      #if defined( GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX )
        ADD_CONST_INT( "GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX", GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX );
      #endif
      #if defined( GL_SLUMINANCE8_ALPHA8_EXT )
        ADD_CONST_INT( "GL_SLUMINANCE8_ALPHA8_EXT", GL_SLUMINANCE8_ALPHA8_EXT );
      #endif
      #if defined( GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER );
      #endif
      #if defined( GL_FOG_COLOR )
        ADD_CONST_INT( "GL_FOG_COLOR", GL_FOG_COLOR );
      #endif
      #if defined( GL_MATRIX7_NV )
        ADD_CONST_INT( "GL_MATRIX7_NV", GL_MATRIX7_NV );
      #endif
      #if defined( GL_TEXTURE_LUMINANCE_TYPE )
        ADD_CONST_INT( "GL_TEXTURE_LUMINANCE_TYPE", GL_TEXTURE_LUMINANCE_TYPE );
      #endif
      #if defined( GLX_TEXTURE_RECTANGLE_BIT_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_RECTANGLE_BIT_EXT", GLX_TEXTURE_RECTANGLE_BIT_EXT );
      #endif
      #if defined( GLEW_EXT_timer_query )
        ADD_CONST_INT( "GLEW_EXT_timer_query", GLEW_EXT_timer_query );
      #endif
      #if defined( GL_RG16UI )
        ADD_CONST_INT( "GL_RG16UI", GL_RG16UI );
      #endif
      #if defined( GL_SWIZZLE_STRQ_DQ_ATI )
        ADD_CONST_INT( "GL_SWIZZLE_STRQ_DQ_ATI", GL_SWIZZLE_STRQ_DQ_ATI );
      #endif
      #if defined( GL_LUMINANCE_ALPHA16I_EXT )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA16I_EXT", GL_LUMINANCE_ALPHA16I_EXT );
      #endif
      #if defined( GL_SIGNED_INTENSITY_NV )
        ADD_CONST_INT( "GL_SIGNED_INTENSITY_NV", GL_SIGNED_INTENSITY_NV );
      #endif
      #if defined( GLX_TRANSPARENT_INDEX_EXT )
        ADD_CONST_INT( "GLX_TRANSPARENT_INDEX_EXT", GLX_TRANSPARENT_INDEX_EXT );
      #endif
      #if defined( GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT )
        ADD_CONST_INT( "GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT", GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT );
      #endif
      #if defined( GL_COUNTER_TYPE_AMD )
        ADD_CONST_INT( "GL_COUNTER_TYPE_AMD", GL_COUNTER_TYPE_AMD );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB1_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB1_4_NV", GL_MAP2_VERTEX_ATTRIB1_4_NV );
      #endif
      #if defined( GL_UNSIGNED_INT_10_10_10_2 )
        ADD_CONST_INT( "GL_UNSIGNED_INT_10_10_10_2", GL_UNSIGNED_INT_10_10_10_2 );
      #endif
      #if defined( GL_FOG_COORD_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_FOG_COORD_ARRAY_STRIDE", GL_FOG_COORD_ARRAY_STRIDE );
      #endif
      #if defined( GL_VERTEX_STREAM0_ATI )
        ADD_CONST_INT( "GL_VERTEX_STREAM0_ATI", GL_VERTEX_STREAM0_ATI );
      #endif
      #if defined( GL_STENCIL_BACK_REF )
        ADD_CONST_INT( "GL_STENCIL_BACK_REF", GL_STENCIL_BACK_REF );
      #endif
      #if defined( GL_TEXTURE9_ARB )
        ADD_CONST_INT( "GL_TEXTURE9_ARB", GL_TEXTURE9_ARB );
      #endif
      #if defined( GL_LINE_RESET_TOKEN )
        ADD_CONST_INT( "GL_LINE_RESET_TOKEN", GL_LINE_RESET_TOKEN );
      #endif
      #if defined( GL_COLOR_SUM_ARB )
        ADD_CONST_INT( "GL_COLOR_SUM_ARB", GL_COLOR_SUM_ARB );
      #endif
      #if defined( GL_COMBINE_RGB )
        ADD_CONST_INT( "GL_COMBINE_RGB", GL_COMBINE_RGB );
      #endif
      #if defined( GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX )
        ADD_CONST_INT( "GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX", GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX );
      #endif
      #if defined( GL_TEXTURE0_ARB )
        ADD_CONST_INT( "GL_TEXTURE0_ARB", GL_TEXTURE0_ARB );
      #endif
      #if defined( GL_STEREO )
        ADD_CONST_INT( "GL_STEREO", GL_STEREO );
      #endif
      #if defined( GL_ALREADY_SIGNALED )
        ADD_CONST_INT( "GL_ALREADY_SIGNALED", GL_ALREADY_SIGNALED );
      #endif
      #if defined( GL_STATIC_COPY_ARB )
        ADD_CONST_INT( "GL_STATIC_COPY_ARB", GL_STATIC_COPY_ARB );
      #endif
      #if defined( GL_LIGHT_MODEL_LOCAL_VIEWER )
        ADD_CONST_INT( "GL_LIGHT_MODEL_LOCAL_VIEWER", GL_LIGHT_MODEL_LOCAL_VIEWER );
      #endif
      #if defined( GL_PIXEL_COUNTER_BITS_NV )
        ADD_CONST_INT( "GL_PIXEL_COUNTER_BITS_NV", GL_PIXEL_COUNTER_BITS_NV );
      #endif
      #if defined( GL_EXT_blend_color )
        ADD_CONST_INT( "GL_EXT_blend_color", GL_EXT_blend_color );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_CUBE_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_CUBE_EXT", GL_UNSIGNED_INT_SAMPLER_CUBE_EXT );
      #endif
      #if defined( GL_SAMPLER_3D_ARB )
        ADD_CONST_INT( "GL_SAMPLER_3D_ARB", GL_SAMPLER_3D_ARB );
      #endif
      #if defined( GL_DISCARD_ATI )
        ADD_CONST_INT( "GL_DISCARD_ATI", GL_DISCARD_ATI );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP", GL_TEXTURE_CUBE_MAP );
      #endif
      #if defined( GL_REG_2_ATI )
        ADD_CONST_INT( "GL_REG_2_ATI", GL_REG_2_ATI );
      #endif
      #if defined( GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY", GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY );
      #endif
      #if defined( GL_PRIMITIVES_GENERATED_NV )
        ADD_CONST_INT( "GL_PRIMITIVES_GENERATED_NV", GL_PRIMITIVES_GENERATED_NV );
      #endif
      #if defined( GL_CLIP_PLANE1 )
        ADD_CONST_INT( "GL_CLIP_PLANE1", GL_CLIP_PLANE1 );
      #endif
      #if defined( GL_CLIP_PLANE0 )
        ADD_CONST_INT( "GL_CLIP_PLANE0", GL_CLIP_PLANE0 );
      #endif
      #if defined( GL_CLIP_PLANE3 )
        ADD_CONST_INT( "GL_CLIP_PLANE3", GL_CLIP_PLANE3 );
      #endif
      #if defined( GL_CLIP_PLANE2 )
        ADD_CONST_INT( "GL_CLIP_PLANE2", GL_CLIP_PLANE2 );
      #endif
      #if defined( GL_CLIP_PLANE5 )
        ADD_CONST_INT( "GL_CLIP_PLANE5", GL_CLIP_PLANE5 );
      #endif
      #if defined( GL_CLIP_PLANE4 )
        ADD_CONST_INT( "GL_CLIP_PLANE4", GL_CLIP_PLANE4 );
      #endif
      #if defined( GL_UNSIGNED_INT_24_8_NV )
        ADD_CONST_INT( "GL_UNSIGNED_INT_24_8_NV", GL_UNSIGNED_INT_24_8_NV );
      #endif
      #if defined( GL_2_BYTES )
        ADD_CONST_INT( "GL_2_BYTES", GL_2_BYTES );
      #endif
      #if defined( GL_COLOR_INDEX16_EXT )
        ADD_CONST_INT( "GL_COLOR_INDEX16_EXT", GL_COLOR_INDEX16_EXT );
      #endif
      #if defined( GL_NORMAL_ARRAY_TYPE )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_TYPE", GL_NORMAL_ARRAY_TYPE );
      #endif
      #if defined( GL_TEXTURE_BUFFER )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER", GL_TEXTURE_BUFFER );
      #endif
      #if defined( GL_ENV_REVERSE_BLEND_EXT )
        ADD_CONST_INT( "GL_ENV_REVERSE_BLEND_EXT", GL_ENV_REVERSE_BLEND_EXT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD4_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD4_EXT", GL_OUTPUT_TEXTURE_COORD4_EXT );
      #endif
      #if defined( GL_SAMPLER_CUBE_MAP_ARRAY_ARB )
        ADD_CONST_INT( "GL_SAMPLER_CUBE_MAP_ARRAY_ARB", GL_SAMPLER_CUBE_MAP_ARRAY_ARB );
      #endif
      #if defined( GL_COLOR_ATTACHMENT10_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT10_EXT", GL_COLOR_ATTACHMENT10_EXT );
      #endif
      #if defined( GLX_SAMPLES )
        ADD_CONST_INT( "GLX_SAMPLES", GLX_SAMPLES );
      #endif
      #if defined( GL_LINE_STIPPLE_REPEAT )
        ADD_CONST_INT( "GL_LINE_STIPPLE_REPEAT", GL_LINE_STIPPLE_REPEAT );
      #endif
      #if defined( GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX", GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX );
      #endif
      #if defined( GL_POINTS )
        ADD_CONST_INT( "GL_POINTS", GL_POINTS );
      #endif
      #if defined( GL_RENDERBUFFER_DEPTH_SIZE_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_DEPTH_SIZE_EXT", GL_RENDERBUFFER_DEPTH_SIZE_EXT );
      #endif
      #if defined( GLX_RGBA_BIT_SGIX )
        ADD_CONST_INT( "GLX_RGBA_BIT_SGIX", GLX_RGBA_BIT_SGIX );
      #endif
      #if defined( GL_RENDERBUFFER_BLUE_SIZE )
        ADD_CONST_INT( "GL_RENDERBUFFER_BLUE_SIZE", GL_RENDERBUFFER_BLUE_SIZE );
      #endif
      #if defined( GL_UNIFORM_NAME_LENGTH )
        ADD_CONST_INT( "GL_UNIFORM_NAME_LENGTH", GL_UNIFORM_NAME_LENGTH );
      #endif
      #if defined( GLX_AUX_BUFFERS )
        ADD_CONST_INT( "GLX_AUX_BUFFERS", GLX_AUX_BUFFERS );
      #endif
      #if defined( GL_POLYGON )
        ADD_CONST_INT( "GL_POLYGON", GL_POLYGON );
      #endif
      #if defined( GL_NAND )
        ADD_CONST_INT( "GL_NAND", GL_NAND );
      #endif
      #if defined( GL_MAP1_INDEX )
        ADD_CONST_INT( "GL_MAP1_INDEX", GL_MAP1_INDEX );
      #endif
      #if defined( GL_COMBINER_SUM_OUTPUT_NV )
        ADD_CONST_INT( "GL_COMBINER_SUM_OUTPUT_NV", GL_COMBINER_SUM_OUTPUT_NV );
      #endif
      #if defined( GL_LINE_WIDTH_GRANULARITY )
        ADD_CONST_INT( "GL_LINE_WIDTH_GRANULARITY", GL_LINE_WIDTH_GRANULARITY );
      #endif
      #if defined( GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB )
        ADD_CONST_INT( "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB", GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB );
      #endif
      #if defined( GL_SAMPLES_PASSED_ARB )
        ADD_CONST_INT( "GL_SAMPLES_PASSED_ARB", GL_SAMPLES_PASSED_ARB );
      #endif
      #if defined( GL_VERTEX_ARRAY_BINDING_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_BINDING_APPLE", GL_VERTEX_ARRAY_BINDING_APPLE );
      #endif
      #if defined( GL_OP_MUL_EXT )
        ADD_CONST_INT( "GL_OP_MUL_EXT", GL_OP_MUL_EXT );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV", GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GL_ADD_SIGNED )
        ADD_CONST_INT( "GL_ADD_SIGNED", GL_ADD_SIGNED );
      #endif
      #if defined( GL_MAX_3D_TEXTURE_SIZE )
        ADD_CONST_INT( "GL_MAX_3D_TEXTURE_SIZE", GL_MAX_3D_TEXTURE_SIZE );
      #endif
      #if defined( GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS )
        ADD_CONST_INT( "GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS", GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS );
      #endif
      #if defined( GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX", GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX );
      #endif
      #if defined( GLX_RGBA_FLOAT_TYPE )
        ADD_CONST_INT( "GLX_RGBA_FLOAT_TYPE", GLX_RGBA_FLOAT_TYPE );
      #endif
      #if defined( GL_DONT_CARE )
        ADD_CONST_INT( "GL_DONT_CARE", GL_DONT_CARE );
      #endif
      #if defined( GL_MODELVIEW17_ARB )
        ADD_CONST_INT( "GL_MODELVIEW17_ARB", GL_MODELVIEW17_ARB );
      #endif
      #if defined( GL_LUMINANCE_ALPHA_FLOAT32_APPLE )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA_FLOAT32_APPLE", GL_LUMINANCE_ALPHA_FLOAT32_APPLE );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING", GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GLX_PSEUDO_COLOR_EXT )
        ADD_CONST_INT( "GLX_PSEUDO_COLOR_EXT", GLX_PSEUDO_COLOR_EXT );
      #endif
      #if defined( GL_MAP_FLUSH_EXPLICIT_BIT )
        ADD_CONST_INT( "GL_MAP_FLUSH_EXPLICIT_BIT", GL_MAP_FLUSH_EXPLICIT_BIT );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI", GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_SIZE", GL_TEXTURE_COORD_ARRAY_SIZE );
      #endif
      #if defined( GL_CURRENT_VERTEX_WEIGHT_EXT )
        ADD_CONST_INT( "GL_CURRENT_VERTEX_WEIGHT_EXT", GL_CURRENT_VERTEX_WEIGHT_EXT );
      #endif
      #if defined( GL_R16F )
        ADD_CONST_INT( "GL_R16F", GL_R16F );
      #endif
      #if defined( GL_UNSIGNED_INT_VEC3_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_VEC3_EXT", GL_UNSIGNED_INT_VEC3_EXT );
      #endif
      #if defined( GL_MAX_EXT )
        ADD_CONST_INT( "GL_MAX_EXT", GL_MAX_EXT );
      #endif
      #if defined( GL_SAMPLER_RENDERBUFFER_NV )
        ADD_CONST_INT( "GL_SAMPLER_RENDERBUFFER_NV", GL_SAMPLER_RENDERBUFFER_NV );
      #endif
      #if defined( GL_TEXTURE13_ARB )
        ADD_CONST_INT( "GL_TEXTURE13_ARB", GL_TEXTURE13_ARB );
      #endif
      #if defined( GL_FULL_STIPPLE_HINT_PGI )
        ADD_CONST_INT( "GL_FULL_STIPPLE_HINT_PGI", GL_FULL_STIPPLE_HINT_PGI );
      #endif
      #if defined( GL_UNIFORM_BLOCK_BINDING )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_BINDING", GL_UNIFORM_BLOCK_BINDING );
      #endif
      #if defined( GL_LOCAL_CONSTANT_DATATYPE_EXT )
        ADD_CONST_INT( "GL_LOCAL_CONSTANT_DATATYPE_EXT", GL_LOCAL_CONSTANT_DATATYPE_EXT );
      #endif
      #if defined( GL_Z_EXT )
        ADD_CONST_INT( "GL_Z_EXT", GL_Z_EXT );
      #endif
      #if defined( GL_FLOAT_RGBA32_NV )
        ADD_CONST_INT( "GL_FLOAT_RGBA32_NV", GL_FLOAT_RGBA32_NV );
      #endif
      #if defined( GL_MAX_PROGRAM_OUTPUT_VERTICES_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_OUTPUT_VERTICES_NV", GL_MAX_PROGRAM_OUTPUT_VERTICES_NV );
      #endif
      #if defined( GL_LINE_WIDTH )
        ADD_CONST_INT( "GL_LINE_WIDTH", GL_LINE_WIDTH );
      #endif
      #if defined( GL_ATIX_texture_env_combine3 )
        ADD_CONST_INT( "GL_ATIX_texture_env_combine3", GL_ATIX_texture_env_combine3 );
      #endif
      #if defined( GL_RGBA_FLOAT32_APPLE )
        ADD_CONST_INT( "GL_RGBA_FLOAT32_APPLE", GL_RGBA_FLOAT32_APPLE );
      #endif
      #if defined( GL_DYNAMIC_READ_ARB )
        ADD_CONST_INT( "GL_DYNAMIC_READ_ARB", GL_DYNAMIC_READ_ARB );
      #endif
      #if defined( GL_LEQUAL )
        ADD_CONST_INT( "GL_LEQUAL", GL_LEQUAL );
      #endif
      #if defined( GL_SAMPLE_COVERAGE_INVERT_ARB )
        ADD_CONST_INT( "GL_SAMPLE_COVERAGE_INVERT_ARB", GL_SAMPLE_COVERAGE_INVERT_ARB );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT", GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT );
      #endif
      #if defined( GL_UNSIGNED_SHORT_8_8_REV_MESA )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_8_8_REV_MESA", GL_UNSIGNED_SHORT_8_8_REV_MESA );
      #endif
      #if defined( GL_MAX_CONVOLUTION_HEIGHT )
        ADD_CONST_INT( "GL_MAX_CONVOLUTION_HEIGHT", GL_MAX_CONVOLUTION_HEIGHT );
      #endif
      #if defined( GL_COMBINE_ARB )
        ADD_CONST_INT( "GL_COMBINE_ARB", GL_COMBINE_ARB );
      #endif
      #if defined( GL_UNSIGNED_INVERT_NV )
        ADD_CONST_INT( "GL_UNSIGNED_INVERT_NV", GL_UNSIGNED_INVERT_NV );
      #endif
      #if defined( GL_PIXEL_MAP_A_TO_A_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_A_TO_A_SIZE", GL_PIXEL_MAP_A_TO_A_SIZE );
      #endif
      #if defined( GL_RGBA_S3TC )
        ADD_CONST_INT( "GL_RGBA_S3TC", GL_RGBA_S3TC );
      #endif
      #if defined( GL_LIGHT_MODEL_AMBIENT )
        ADD_CONST_INT( "GL_LIGHT_MODEL_AMBIENT", GL_LIGHT_MODEL_AMBIENT );
      #endif
      #if defined( GL_HISTOGRAM )
        ADD_CONST_INT( "GL_HISTOGRAM", GL_HISTOGRAM );
      #endif
      #if defined( GL_INTERPOLATE_ARB )
        ADD_CONST_INT( "GL_INTERPOLATE_ARB", GL_INTERPOLATE_ARB );
      #endif
      #if defined( GL_EXT_bgra )
        ADD_CONST_INT( "GL_EXT_bgra", GL_EXT_bgra );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT", GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT );
      #endif
      #if defined( GL_CON_6_ATI )
        ADD_CONST_INT( "GL_CON_6_ATI", GL_CON_6_ATI );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB", GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB );
      #endif
      #if defined( GLX_BACK_LEFT_BUFFER_BIT )
        ADD_CONST_INT( "GLX_BACK_LEFT_BUFFER_BIT", GLX_BACK_LEFT_BUFFER_BIT );
      #endif
      #if defined( GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX )
        ADD_CONST_INT( "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX", GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX );
      #endif
      #if defined( GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN )
        ADD_CONST_INT( "GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN", GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN );
      #endif
      #if defined( GL_MAX_CLIENT_ATTRIB_STACK_DEPTH )
        ADD_CONST_INT( "GL_MAX_CLIENT_ATTRIB_STACK_DEPTH", GL_MAX_CLIENT_ATTRIB_STACK_DEPTH );
      #endif
      #if defined( GL_CURRENT_VERTEX_ATTRIB )
        ADD_CONST_INT( "GL_CURRENT_VERTEX_ATTRIB", GL_CURRENT_VERTEX_ATTRIB );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB0_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB0_4_NV", GL_MAP1_VERTEX_ATTRIB0_4_NV );
      #endif
      #if defined( GLXEW_VERSION_1_4 )
        ADD_CONST_INT( "GLXEW_VERSION_1_4", GLXEW_VERSION_1_4 );
      #endif
      #if defined( GL_OP_FRAC_EXT )
        ADD_CONST_INT( "GL_OP_FRAC_EXT", GL_OP_FRAC_EXT );
      #endif
      #if defined( GL_ALLOW_DRAW_FRG_HINT_PGI )
        ADD_CONST_INT( "GL_ALLOW_DRAW_FRG_HINT_PGI", GL_ALLOW_DRAW_FRG_HINT_PGI );
      #endif
      #if defined( GL_LUMINANCE6_ALPHA2 )
        ADD_CONST_INT( "GL_LUMINANCE6_ALPHA2", GL_LUMINANCE6_ALPHA2 );
      #endif
      #if defined( GL_SCALE_BY_TWO_NV )
        ADD_CONST_INT( "GL_SCALE_BY_TWO_NV", GL_SCALE_BY_TWO_NV );
      #endif
      #if defined( GL_MATRIX10_ARB )
        ADD_CONST_INT( "GL_MATRIX10_ARB", GL_MATRIX10_ARB );
      #endif
      #if defined( GL_PRIMARY_COLOR )
        ADD_CONST_INT( "GL_PRIMARY_COLOR", GL_PRIMARY_COLOR );
      #endif
      #if defined( GL_C3F_V3F )
        ADD_CONST_INT( "GL_C3F_V3F", GL_C3F_V3F );
      #endif
      #if defined( GL_OP_EXP_BASE_2_EXT )
        ADD_CONST_INT( "GL_OP_EXP_BASE_2_EXT", GL_OP_EXP_BASE_2_EXT );
      #endif
      #if defined( GL_COMBINER_BIAS_NV )
        ADD_CONST_INT( "GL_COMBINER_BIAS_NV", GL_COMBINER_BIAS_NV );
      #endif
      #if defined( GL_MODELVIEW20_ARB )
        ADD_CONST_INT( "GL_MODELVIEW20_ARB", GL_MODELVIEW20_ARB );
      #endif
      #if defined( GL_AUX_BUFFERS )
        ADD_CONST_INT( "GL_AUX_BUFFERS", GL_AUX_BUFFERS );
      #endif
      #if defined( GLEW_EXT_texture_mirror_clamp )
        ADD_CONST_INT( "GLEW_EXT_texture_mirror_clamp", GLEW_EXT_texture_mirror_clamp );
      #endif
      #if defined( GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT )
        ADD_CONST_INT( "GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT", GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT );
      #endif
      #if defined( GL_OPERAND2_RGB_ARB )
        ADD_CONST_INT( "GL_OPERAND2_RGB_ARB", GL_OPERAND2_RGB_ARB );
      #endif
      #if defined( GL_IMPLEMENTATION_COLOR_READ_TYPE )
        ADD_CONST_INT( "GL_IMPLEMENTATION_COLOR_READ_TYPE", GL_IMPLEMENTATION_COLOR_READ_TYPE );
      #endif
      #if defined( GL_UNSIGNED_SHORT_4_4_4_4_REV )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_4_4_4_4_REV", GL_UNSIGNED_SHORT_4_4_4_4_REV );
      #endif
      #if defined( GLX_MAX_PBUFFER_PIXELS )
        ADD_CONST_INT( "GLX_MAX_PBUFFER_PIXELS", GLX_MAX_PBUFFER_PIXELS );
      #endif
      #if defined( GL_INT_SAMPLER_2D_EXT )
        ADD_CONST_INT( "GL_INT_SAMPLER_2D_EXT", GL_INT_SAMPLER_2D_EXT );
      #endif
      #if defined( GL_SMOOTH )
        ADD_CONST_INT( "GL_SMOOTH", GL_SMOOTH );
      #endif
      #if defined( GL_DISCARD_NV )
        ADD_CONST_INT( "GL_DISCARD_NV", GL_DISCARD_NV );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT );
      #endif
      #if defined( GL_MODELVIEW27_ARB )
        ADD_CONST_INT( "GL_MODELVIEW27_ARB", GL_MODELVIEW27_ARB );
      #endif
      #if defined( GLX_PIPE_RECT_SGIX )
        ADD_CONST_INT( "GLX_PIPE_RECT_SGIX", GLX_PIPE_RECT_SGIX );
      #endif
      #if defined( GL_MAX_PROGRAM_PARAMETERS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_PARAMETERS_ARB", GL_MAX_PROGRAM_PARAMETERS_ARB );
      #endif
      #if defined( GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE )
        ADD_CONST_INT( "GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE", GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE );
      #endif
      #if defined( GL_CURRENT_TEXTURE_COORDS )
        ADD_CONST_INT( "GL_CURRENT_TEXTURE_COORDS", GL_CURRENT_TEXTURE_COORDS );
      #endif
      #if defined( GL_STATIC_READ )
        ADD_CONST_INT( "GL_STATIC_READ", GL_STATIC_READ );
      #endif
      #if defined( GL_LUMINANCE8I_EXT )
        ADD_CONST_INT( "GL_LUMINANCE8I_EXT", GL_LUMINANCE8I_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP2_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP2_APPLE", GL_VERTEX_ATTRIB_MAP2_APPLE );
      #endif
      #if defined( GL_UNPACK_ROW_BYTES_APPLE )
        ADD_CONST_INT( "GL_UNPACK_ROW_BYTES_APPLE", GL_UNPACK_ROW_BYTES_APPLE );
      #endif
      #if defined( GL_SHADOW_AMBIENT_SGIX )
        ADD_CONST_INT( "GL_SHADOW_AMBIENT_SGIX", GL_SHADOW_AMBIENT_SGIX );
      #endif
      #if defined( GL_IMPLEMENTATION_COLOR_READ_TYPE_OES )
        ADD_CONST_INT( "GL_IMPLEMENTATION_COLOR_READ_TYPE_OES", GL_IMPLEMENTATION_COLOR_READ_TYPE_OES );
      #endif
      #if defined( GL_CURRENT_MATRIX_STACK_DEPTH_NV )
        ADD_CONST_INT( "GL_CURRENT_MATRIX_STACK_DEPTH_NV", GL_CURRENT_MATRIX_STACK_DEPTH_NV );
      #endif
      #if defined( GL_SAMPLER_1D_ARB )
        ADD_CONST_INT( "GL_SAMPLER_1D_ARB", GL_SAMPLER_1D_ARB );
      #endif
      #if defined( GLX_VISUAL_CAVEAT_EXT )
        ADD_CONST_INT( "GLX_VISUAL_CAVEAT_EXT", GLX_VISUAL_CAVEAT_EXT );
      #endif
      #if defined( GL_BOOL_VEC3_ARB )
        ADD_CONST_INT( "GL_BOOL_VEC3_ARB", GL_BOOL_VEC3_ARB );
      #endif
      #if defined( GL_MATRIX25_ARB )
        ADD_CONST_INT( "GL_MATRIX25_ARB", GL_MATRIX25_ARB );
      #endif
      #if defined( GL_CONVOLUTION_2D_EXT )
        ADD_CONST_INT( "GL_CONVOLUTION_2D_EXT", GL_CONVOLUTION_2D_EXT );
      #endif
      #if defined( GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION )
        ADD_CONST_INT( "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION", GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION );
      #endif
      #if defined( GLEW_MESAX_texture_stack )
        ADD_CONST_INT( "GLEW_MESAX_texture_stack", GLEW_MESAX_texture_stack );
      #endif
      #if defined( GL_LUMINANCE_ALPHA16F_ARB )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA16F_ARB", GL_LUMINANCE_ALPHA16F_ARB );
      #endif
      #if defined( GL_SHARED_TEXTURE_PALETTE_EXT )
        ADD_CONST_INT( "GL_SHARED_TEXTURE_PALETTE_EXT", GL_SHARED_TEXTURE_PALETTE_EXT );
      #endif
      #if defined( GL_ACTIVE_STENCIL_FACE_EXT )
        ADD_CONST_INT( "GL_ACTIVE_STENCIL_FACE_EXT", GL_ACTIVE_STENCIL_FACE_EXT );
      #endif
      #if defined( GL_LUMINANCE_ALPHA )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA", GL_LUMINANCE_ALPHA );
      #endif
      #if defined( GLEW_VERSION_2_0 )
        ADD_CONST_INT( "GLEW_VERSION_2_0", GLEW_VERSION_2_0 );
      #endif
      #if defined( GLEW_VERSION_2_1 )
        ADD_CONST_INT( "GLEW_VERSION_2_1", GLEW_VERSION_2_1 );
      #endif
      #if defined( GL_MAX_CONVOLUTION_WIDTH )
        ADD_CONST_INT( "GL_MAX_CONVOLUTION_WIDTH", GL_MAX_CONVOLUTION_WIDTH );
      #endif
      #if defined( GL_TEXTURE_WRAP_R_EXT )
        ADD_CONST_INT( "GL_TEXTURE_WRAP_R_EXT", GL_TEXTURE_WRAP_R_EXT );
      #endif
      #if defined( GL_PIXEL_UNPACK_BUFFER_BINDING )
        ADD_CONST_INT( "GL_PIXEL_UNPACK_BUFFER_BINDING", GL_PIXEL_UNPACK_BUFFER_BINDING );
      #endif
      #if defined( GL_HILO_NV )
        ADD_CONST_INT( "GL_HILO_NV", GL_HILO_NV );
      #endif
      #if defined( GL_RGB_FLOAT16_APPLE )
        ADD_CONST_INT( "GL_RGB_FLOAT16_APPLE", GL_RGB_FLOAT16_APPLE );
      #endif
      #if defined( GL_COMPRESSED_INTENSITY )
        ADD_CONST_INT( "GL_COMPRESSED_INTENSITY", GL_COMPRESSED_INTENSITY );
      #endif
      #if defined( GL_ALPHA_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_ALPHA_EXTENDED_RANGE_SGIX", GL_ALPHA_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_VARYINGS )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_VARYINGS", GL_TRANSFORM_FEEDBACK_VARYINGS );
      #endif
      #if defined( GL_ELEMENT_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_LENGTH_NV", GL_ELEMENT_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_MAX_COLOR_ATTACHMENTS )
        ADD_CONST_INT( "GL_MAX_COLOR_ATTACHMENTS", GL_MAX_COLOR_ATTACHMENTS );
      #endif
      #if defined( GL_VERTEX_STREAM5_ATI )
        ADD_CONST_INT( "GL_VERTEX_STREAM5_ATI", GL_VERTEX_STREAM5_ATI );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV", GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV );
      #endif
      #if defined( GL_MAT_EMISSION_BIT_PGI )
        ADD_CONST_INT( "GL_MAT_EMISSION_BIT_PGI", GL_MAT_EMISSION_BIT_PGI );
      #endif
      #if defined( GL_ALPHA )
        ADD_CONST_INT( "GL_ALPHA", GL_ALPHA );
      #endif
      #if defined( GL_ALPHA_INTEGER_EXT )
        ADD_CONST_INT( "GL_ALPHA_INTEGER_EXT", GL_ALPHA_INTEGER_EXT );
      #endif
      #if defined( GL_MAX_ELEMENTS_VERTICES )
        ADD_CONST_INT( "GL_MAX_ELEMENTS_VERTICES", GL_MAX_ELEMENTS_VERTICES );
      #endif
      #if defined( GL_INT_VEC2_ARB )
        ADD_CONST_INT( "GL_INT_VEC2_ARB", GL_INT_VEC2_ARB );
      #endif
      #if defined( GL_CURRENT_COLOR )
        ADD_CONST_INT( "GL_CURRENT_COLOR", GL_CURRENT_COLOR );
      #endif
      #if defined( GL_TEXTURE_FILTER_CONTROL_EXT )
        ADD_CONST_INT( "GL_TEXTURE_FILTER_CONTROL_EXT", GL_TEXTURE_FILTER_CONTROL_EXT );
      #endif
      #if defined( GL_DSDT8_MAG8_NV )
        ADD_CONST_INT( "GL_DSDT8_MAG8_NV", GL_DSDT8_MAG8_NV );
      #endif
      #if defined( GL_COMPRESSED_RED_RGTC1_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_RED_RGTC1_EXT", GL_COMPRESSED_RED_RGTC1_EXT );
      #endif
      #if defined( GL_INVALID_FRAMEBUFFER_OPERATION )
        ADD_CONST_INT( "GL_INVALID_FRAMEBUFFER_OPERATION", GL_INVALID_FRAMEBUFFER_OPERATION );
      #endif
      #if defined( GL_RGB_INTEGER_EXT )
        ADD_CONST_INT( "GL_RGB_INTEGER_EXT", GL_RGB_INTEGER_EXT );
      #endif
      #if defined( GL_SIGNED_HILO16_NV )
        ADD_CONST_INT( "GL_SIGNED_HILO16_NV", GL_SIGNED_HILO16_NV );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING", GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GL_DEPTH32F_STENCIL8 )
        ADD_CONST_INT( "GL_DEPTH32F_STENCIL8", GL_DEPTH32F_STENCIL8 );
      #endif
      #if defined( GL_MAX_ARRAY_TEXTURE_LAYERS )
        ADD_CONST_INT( "GL_MAX_ARRAY_TEXTURE_LAYERS", GL_MAX_ARRAY_TEXTURE_LAYERS );
      #endif
      #if defined( GL_GEOMETRY_INPUT_TYPE_ARB )
        ADD_CONST_INT( "GL_GEOMETRY_INPUT_TYPE_ARB", GL_GEOMETRY_INPUT_TYPE_ARB );
      #endif
      #if defined( GLX_VIDEO_OUT_COLOR_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_COLOR_NV", GLX_VIDEO_OUT_COLOR_NV );
      #endif
      #if defined( GL_TEXTURE_POINT_MODE_ATIX )
        ADD_CONST_INT( "GL_TEXTURE_POINT_MODE_ATIX", GL_TEXTURE_POINT_MODE_ATIX );
      #endif
      #if defined( GL_MAX_SERVER_WAIT_TIMEOUT )
        ADD_CONST_INT( "GL_MAX_SERVER_WAIT_TIMEOUT", GL_MAX_SERVER_WAIT_TIMEOUT );
      #endif
      #if defined( GL_MODULATE_SUBTRACT_ATI )
        ADD_CONST_INT( "GL_MODULATE_SUBTRACT_ATI", GL_MODULATE_SUBTRACT_ATI );
      #endif
      #if defined( GL_NOR )
        ADD_CONST_INT( "GL_NOR", GL_NOR );
      #endif
      #if defined( GL_EXT_texture_snorm )
        ADD_CONST_INT( "GL_EXT_texture_snorm", GL_EXT_texture_snorm );
      #endif
      #if defined( GL_DEPENDENT_RGB_TEXTURE_3D_NV )
        ADD_CONST_INT( "GL_DEPENDENT_RGB_TEXTURE_3D_NV", GL_DEPENDENT_RGB_TEXTURE_3D_NV );
      #endif
      #if defined( GL_COLOR_TABLE_LUMINANCE_SIZE_EXT )
        ADD_CONST_INT( "GL_COLOR_TABLE_LUMINANCE_SIZE_EXT", GL_COLOR_TABLE_LUMINANCE_SIZE_EXT );
      #endif
      #if defined( GL_FLAT )
        ADD_CONST_INT( "GL_FLAT", GL_FLAT );
      #endif
      #if defined( GL_INT_VEC4_ARB )
        ADD_CONST_INT( "GL_INT_VEC4_ARB", GL_INT_VEC4_ARB );
      #endif
      #if defined( GL_RGB_FLOAT32_APPLE )
        ADD_CONST_INT( "GL_RGB_FLOAT32_APPLE", GL_RGB_FLOAT32_APPLE );
      #endif
      #if defined( GL_PIXEL_MAP_S_TO_S )
        ADD_CONST_INT( "GL_PIXEL_MAP_S_TO_S", GL_PIXEL_MAP_S_TO_S );
      #endif
      #if defined( GL_RGBA8UI_EXT )
        ADD_CONST_INT( "GL_RGBA8UI_EXT", GL_RGBA8UI_EXT );
      #endif
      #if defined( GL_VERTEX_ARRAY_STORAGE_HINT_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE", GL_VERTEX_ARRAY_STORAGE_HINT_APPLE );
      #endif
      #if defined( GL_RGB2_EXT )
        ADD_CONST_INT( "GL_RGB2_EXT", GL_RGB2_EXT );
      #endif
      #if defined( GL_UNPACK_LSB_FIRST )
        ADD_CONST_INT( "GL_UNPACK_LSB_FIRST", GL_UNPACK_LSB_FIRST );
      #endif
      #if defined( GL_FLOAT_RG16_NV )
        ADD_CONST_INT( "GL_FLOAT_RG16_NV", GL_FLOAT_RG16_NV );
      #endif
      #if defined( GLX_BIND_TO_TEXTURE_LUMINANCE_ATI )
        ADD_CONST_INT( "GLX_BIND_TO_TEXTURE_LUMINANCE_ATI", GLX_BIND_TO_TEXTURE_LUMINANCE_ATI );
      #endif
      #if defined( GL_SAMPLE_MASK_VALUE )
        ADD_CONST_INT( "GL_SAMPLE_MASK_VALUE", GL_SAMPLE_MASK_VALUE );
      #endif
      #if defined( GL_SOURCE1_RGB )
        ADD_CONST_INT( "GL_SOURCE1_RGB", GL_SOURCE1_RGB );
      #endif
      #if defined( GL_CONSTANT_BORDER )
        ADD_CONST_INT( "GL_CONSTANT_BORDER", GL_CONSTANT_BORDER );
      #endif
      #if defined( GL_STRICT_LIGHTING_HINT_PGI )
        ADD_CONST_INT( "GL_STRICT_LIGHTING_HINT_PGI", GL_STRICT_LIGHTING_HINT_PGI );
      #endif
      #if defined( GL_UNSIGNED_INT_VEC4_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_VEC4_EXT", GL_UNSIGNED_INT_VEC4_EXT );
      #endif
      #if defined( GL_TRIANGLES_ADJACENCY_ARB )
        ADD_CONST_INT( "GL_TRIANGLES_ADJACENCY_ARB", GL_TRIANGLES_ADJACENCY_ARB );
      #endif
      #if defined( GL_ACTIVE_TEXTURE )
        ADD_CONST_INT( "GL_ACTIVE_TEXTURE", GL_ACTIVE_TEXTURE );
      #endif
      #if defined( GL_TEXTURE_BASE_LEVEL )
        ADD_CONST_INT( "GL_TEXTURE_BASE_LEVEL", GL_TEXTURE_BASE_LEVEL );
      #endif
      #if defined( GL_ALPHA_INTEGER )
        ADD_CONST_INT( "GL_ALPHA_INTEGER", GL_ALPHA_INTEGER );
      #endif
      #if defined( GL_GREEN_SCALE )
        ADD_CONST_INT( "GL_GREEN_SCALE", GL_GREEN_SCALE );
      #endif
      #if defined( GL_MATRIX17_ARB )
        ADD_CONST_INT( "GL_MATRIX17_ARB", GL_MATRIX17_ARB );
      #endif
      #if defined( GL_PROJECTION )
        ADD_CONST_INT( "GL_PROJECTION", GL_PROJECTION );
      #endif
      #if defined( GL_TEXTURE31_ARB )
        ADD_CONST_INT( "GL_TEXTURE31_ARB", GL_TEXTURE31_ARB );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_3D )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_3D", GL_UNSIGNED_INT_SAMPLER_3D );
      #endif
      #if defined( GL_EXT_shader_image_load_store )
        ADD_CONST_INT( "GL_EXT_shader_image_load_store", GL_EXT_shader_image_load_store );
      #endif
      #if defined( GL_COLOR_INDEX4_EXT )
        ADD_CONST_INT( "GL_COLOR_INDEX4_EXT", GL_COLOR_INDEX4_EXT );
      #endif
      #if defined( GL_INT_VEC3 )
        ADD_CONST_INT( "GL_INT_VEC3", GL_INT_VEC3 );
      #endif
      #if defined( GL_INT_VEC2 )
        ADD_CONST_INT( "GL_INT_VEC2", GL_INT_VEC2 );
      #endif
      #if defined( GL_STENCIL_FAIL )
        ADD_CONST_INT( "GL_STENCIL_FAIL", GL_STENCIL_FAIL );
      #endif
      #if defined( GL_TEXTURE_STORAGE_HINT_APPLE )
        ADD_CONST_INT( "GL_TEXTURE_STORAGE_HINT_APPLE", GL_TEXTURE_STORAGE_HINT_APPLE );
      #endif
      #if defined( GL_VERSION_4_0 )
        ADD_CONST_INT( "GL_VERSION_4_0", GL_VERSION_4_0 );
      #endif
      #if defined( GL_VERSION_4_1 )
        ADD_CONST_INT( "GL_VERSION_4_1", GL_VERSION_4_1 );
      #endif
      #if defined( GL_COLOR_TABLE )
        ADD_CONST_INT( "GL_COLOR_TABLE", GL_COLOR_TABLE );
      #endif
      #if defined( GL_SAMPLE_MASK_INVERT_SGIS )
        ADD_CONST_INT( "GL_SAMPLE_MASK_INVERT_SGIS", GL_SAMPLE_MASK_INVERT_SGIS );
      #endif
      #if defined( GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV", GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT", GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT );
      #endif
      #if defined( GL_PACK_SKIP_IMAGES_EXT )
        ADD_CONST_INT( "GL_PACK_SKIP_IMAGES_EXT", GL_PACK_SKIP_IMAGES_EXT );
      #endif
      #if defined( GL_OP_NEGATE_EXT )
        ADD_CONST_INT( "GL_OP_NEGATE_EXT", GL_OP_NEGATE_EXT );
      #endif
      #if defined( GL_FRAMEBUFFER_UNSUPPORTED )
        ADD_CONST_INT( "GL_FRAMEBUFFER_UNSUPPORTED", GL_FRAMEBUFFER_UNSUPPORTED );
      #endif
      #if defined( GL_RED_BIAS )
        ADD_CONST_INT( "GL_RED_BIAS", GL_RED_BIAS );
      #endif
      #if defined( GL_VERTEX_PROGRAM_TWO_SIDE_ARB )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_TWO_SIDE_ARB", GL_VERTEX_PROGRAM_TWO_SIDE_ARB );
      #endif
      #if defined( GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_KTX_FRONT_REGION )
        ADD_CONST_INT( "GL_KTX_FRONT_REGION", GL_KTX_FRONT_REGION );
      #endif
      #if defined( GL_MAX_PROGRAM_LOOP_COUNT_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_LOOP_COUNT_NV", GL_MAX_PROGRAM_LOOP_COUNT_NV );
      #endif
      #if defined( GL_PROGRAM_LENGTH_ARB )
        ADD_CONST_INT( "GL_PROGRAM_LENGTH_ARB", GL_PROGRAM_LENGTH_ARB );
      #endif
      #if defined( GL_R8 )
        ADD_CONST_INT( "GL_R8", GL_R8 );
      #endif
      #if defined( GL_RENDER_MODE )
        ADD_CONST_INT( "GL_RENDER_MODE", GL_RENDER_MODE );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING", GL_EDGE_FLAG_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GL_MAX_CUBE_MAP_TEXTURE_SIZE )
        ADD_CONST_INT( "GL_MAX_CUBE_MAP_TEXTURE_SIZE", GL_MAX_CUBE_MAP_TEXTURE_SIZE );
      #endif
      #if defined( GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV )
        ADD_CONST_INT( "GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV", GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV );
      #endif
      #if defined( GL_CONSTANT_COLOR_EXT )
        ADD_CONST_INT( "GL_CONSTANT_COLOR_EXT", GL_CONSTANT_COLOR_EXT );
      #endif
      #if defined( GL_RENDERBUFFER_WIDTH )
        ADD_CONST_INT( "GL_RENDERBUFFER_WIDTH", GL_RENDERBUFFER_WIDTH );
      #endif
      #if defined( GL_1PASS_EXT )
        ADD_CONST_INT( "GL_1PASS_EXT", GL_1PASS_EXT );
      #endif
      #if defined( GL_MAX_VERTEX_VARYING_COMPONENTS_EXT )
        ADD_CONST_INT( "GL_MAX_VERTEX_VARYING_COMPONENTS_EXT", GL_MAX_VERTEX_VARYING_COMPONENTS_EXT );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB13_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB13_4_NV", GL_MAP2_VERTEX_ATTRIB13_4_NV );
      #endif
      #if defined( GLX_TEXTURE_RECTANGLE_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_RECTANGLE_EXT", GLX_TEXTURE_RECTANGLE_EXT );
      #endif
      #if defined( GL_STORAGE_CACHED_APPLE )
        ADD_CONST_INT( "GL_STORAGE_CACHED_APPLE", GL_STORAGE_CACHED_APPLE );
      #endif
      #if defined( GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI )
        ADD_CONST_INT( "GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI", GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI );
      #endif
      #if defined( GL_TEXTURE_BLUE_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_BLUE_SIZE", GL_TEXTURE_BLUE_SIZE );
      #endif
      #if defined( GL_HISTOGRAM_GREEN_SIZE )
        ADD_CONST_INT( "GL_HISTOGRAM_GREEN_SIZE", GL_HISTOGRAM_GREEN_SIZE );
      #endif
      #if defined( GLEW_EXT_index_array_formats )
        ADD_CONST_INT( "GLEW_EXT_index_array_formats", GLEW_EXT_index_array_formats );
      #endif
      #if defined( GL_TEXTURE24_ARB )
        ADD_CONST_INT( "GL_TEXTURE24_ARB", GL_TEXTURE24_ARB );
      #endif
      #if defined( GL_RESTART_SUN )
        ADD_CONST_INT( "GL_RESTART_SUN", GL_RESTART_SUN );
      #endif
      #if defined( GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL )
        ADD_CONST_INT( "GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL", GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY2_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY2_NV", GL_VERTEX_ATTRIB_ARRAY2_NV );
      #endif
      #if defined( GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV", GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV );
      #endif
      #if defined( GL_DRAW_BUFFER10 )
        ADD_CONST_INT( "GL_DRAW_BUFFER10", GL_DRAW_BUFFER10 );
      #endif
      #if defined( GL_DRAW_BUFFER11 )
        ADD_CONST_INT( "GL_DRAW_BUFFER11", GL_DRAW_BUFFER11 );
      #endif
      #if defined( GL_DRAW_BUFFER12 )
        ADD_CONST_INT( "GL_DRAW_BUFFER12", GL_DRAW_BUFFER12 );
      #endif
      #if defined( GL_DRAW_BUFFER13 )
        ADD_CONST_INT( "GL_DRAW_BUFFER13", GL_DRAW_BUFFER13 );
      #endif
      #if defined( GL_DRAW_BUFFER14 )
        ADD_CONST_INT( "GL_DRAW_BUFFER14", GL_DRAW_BUFFER14 );
      #endif
      #if defined( GL_DRAW_BUFFER15 )
        ADD_CONST_INT( "GL_DRAW_BUFFER15", GL_DRAW_BUFFER15 );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB", GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB );
      #endif
      #if defined( GLX_WINDOW )
        ADD_CONST_INT( "GLX_WINDOW", GLX_WINDOW );
      #endif
      #if defined( GL_VERTEX_STREAM6_ATI )
        ADD_CONST_INT( "GL_VERTEX_STREAM6_ATI", GL_VERTEX_STREAM6_ATI );
      #endif
      #if defined( GL_EDGEFLAG_BIT_PGI )
        ADD_CONST_INT( "GL_EDGEFLAG_BIT_PGI", GL_EDGEFLAG_BIT_PGI );
      #endif
      #if defined( GL_SRC_ALPHA_SATURATE )
        ADD_CONST_INT( "GL_SRC_ALPHA_SATURATE", GL_SRC_ALPHA_SATURATE );
      #endif
      #if defined( GL_EXT_vertex_attrib_64bit )
        ADD_CONST_INT( "GL_EXT_vertex_attrib_64bit", GL_EXT_vertex_attrib_64bit );
      #endif
      #if defined( GL_CONSTANT_ALPHA )
        ADD_CONST_INT( "GL_CONSTANT_ALPHA", GL_CONSTANT_ALPHA );
      #endif
      #if defined( GL_VERTEX_ARRAY_RANGE_VALID_NV )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_RANGE_VALID_NV", GL_VERTEX_ARRAY_RANGE_VALID_NV );
      #endif
      #if defined( GL_R16I )
        ADD_CONST_INT( "GL_R16I", GL_R16I );
      #endif
      #if defined( GL_ASYNC_READ_PIXELS_SGIX )
        ADD_CONST_INT( "GL_ASYNC_READ_PIXELS_SGIX", GL_ASYNC_READ_PIXELS_SGIX );
      #endif
      #if defined( GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT", GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT );
      #endif
      #if defined( GLEW_EXT_separate_shader_objects )
        ADD_CONST_INT( "GLEW_EXT_separate_shader_objects", GLEW_EXT_separate_shader_objects );
      #endif
      #if defined( GL_FRAGMENT_PROGRAM_ARB )
        ADD_CONST_INT( "GL_FRAGMENT_PROGRAM_ARB", GL_FRAGMENT_PROGRAM_ARB );
      #endif
      #if defined( GL_SAMPLE_ALPHA_TO_COVERAGE_ARB )
        ADD_CONST_INT( "GL_SAMPLE_ALPHA_TO_COVERAGE_ARB", GL_SAMPLE_ALPHA_TO_COVERAGE_ARB );
      #endif
      #if defined( GLX_RED_SIZE )
        ADD_CONST_INT( "GLX_RED_SIZE", GLX_RED_SIZE );
      #endif
      #if defined( GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER );
      #endif
      #if defined( GL_COMPARE_R_TO_TEXTURE )
        ADD_CONST_INT( "GL_COMPARE_R_TO_TEXTURE", GL_COMPARE_R_TO_TEXTURE );
      #endif
      #if defined( GL_DEPTH_BOUNDS_EXT )
        ADD_CONST_INT( "GL_DEPTH_BOUNDS_EXT", GL_DEPTH_BOUNDS_EXT );
      #endif
      #if defined( GL_PREVIOUS )
        ADD_CONST_INT( "GL_PREVIOUS", GL_PREVIOUS );
      #endif
      #if defined( GL_ACTIVE_VARYING_MAX_LENGTH_NV )
        ADD_CONST_INT( "GL_ACTIVE_VARYING_MAX_LENGTH_NV", GL_ACTIVE_VARYING_MAX_LENGTH_NV );
      #endif
      #if defined( GL_ALPHA_SNORM )
        ADD_CONST_INT( "GL_ALPHA_SNORM", GL_ALPHA_SNORM );
      #endif
      #if defined( GL_PROXY_COLOR_TABLE )
        ADD_CONST_INT( "GL_PROXY_COLOR_TABLE", GL_PROXY_COLOR_TABLE );
      #endif
      #if defined( GL_PIXEL_UNPACK_BUFFER_ARB )
        ADD_CONST_INT( "GL_PIXEL_UNPACK_BUFFER_ARB", GL_PIXEL_UNPACK_BUFFER_ARB );
      #endif
      #if defined( GLX_DIRECT_COLOR )
        ADD_CONST_INT( "GLX_DIRECT_COLOR", GLX_DIRECT_COLOR );
      #endif
      #if defined( GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV", GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV );
      #endif
      #if defined( GL_STENCIL )
        ADD_CONST_INT( "GL_STENCIL", GL_STENCIL );
      #endif
      #if defined( GL_INTENSITY_FLOAT16_APPLE )
        ADD_CONST_INT( "GL_INTENSITY_FLOAT16_APPLE", GL_INTENSITY_FLOAT16_APPLE );
      #endif
      #if defined( GL_SAMPLE_COVERAGE_VALUE_ARB )
        ADD_CONST_INT( "GL_SAMPLE_COVERAGE_VALUE_ARB", GL_SAMPLE_COVERAGE_VALUE_ARB );
      #endif
      #if defined( GLX_STENCIL_BUFFER_BIT_SGIX )
        ADD_CONST_INT( "GLX_STENCIL_BUFFER_BIT_SGIX", GLX_STENCIL_BUFFER_BIT_SGIX );
      #endif
      #if defined( GL_MULTISAMPLE_FILTER_HINT_NV )
        ADD_CONST_INT( "GL_MULTISAMPLE_FILTER_HINT_NV", GL_MULTISAMPLE_FILTER_HINT_NV );
      #endif
      #if defined( GL_DIFFUSE )
        ADD_CONST_INT( "GL_DIFFUSE", GL_DIFFUSE );
      #endif
      #if defined( GL_MULTISAMPLE_COVERAGE_MODES_NV )
        ADD_CONST_INT( "GL_MULTISAMPLE_COVERAGE_MODES_NV", GL_MULTISAMPLE_COVERAGE_MODES_NV );
      #endif
      #if defined( GL_ENV_REVERSE_SUBTRACT_EXT )
        ADD_CONST_INT( "GL_ENV_REVERSE_SUBTRACT_EXT", GL_ENV_REVERSE_SUBTRACT_EXT );
      #endif
      #if defined( GL_SOURCE2_RGB )
        ADD_CONST_INT( "GL_SOURCE2_RGB", GL_SOURCE2_RGB );
      #endif
      #if defined( GL_EYE_DISTANCE_TO_POINT_SGIS )
        ADD_CONST_INT( "GL_EYE_DISTANCE_TO_POINT_SGIS", GL_EYE_DISTANCE_TO_POINT_SGIS );
      #endif
      #if defined( GL_TEXTURE_3D_EXT )
        ADD_CONST_INT( "GL_TEXTURE_3D_EXT", GL_TEXTURE_3D_EXT );
      #endif
      #if defined( GL_INGR_color_clamp )
        ADD_CONST_INT( "GL_INGR_color_clamp", GL_INGR_color_clamp );
      #endif
      #if defined( GLX_MAX_PBUFFER_WIDTH_SGIX )
        ADD_CONST_INT( "GLX_MAX_PBUFFER_WIDTH_SGIX", GLX_MAX_PBUFFER_WIDTH_SGIX );
      #endif
      #if defined( GL_KTX_Z_REGION )
        ADD_CONST_INT( "GL_KTX_Z_REGION", GL_KTX_Z_REGION );
      #endif
      #if defined( GL_TEXTURE_GEN_S )
        ADD_CONST_INT( "GL_TEXTURE_GEN_S", GL_TEXTURE_GEN_S );
      #endif
      #if defined( GLEW_EXT_copy_texture )
        ADD_CONST_INT( "GLEW_EXT_copy_texture", GLEW_EXT_copy_texture );
      #endif
      #if defined( GL_OBJECT_INFO_LOG_LENGTH_ARB )
        ADD_CONST_INT( "GL_OBJECT_INFO_LOG_LENGTH_ARB", GL_OBJECT_INFO_LOG_LENGTH_ARB );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY4_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY4_NV", GL_VERTEX_ATTRIB_ARRAY4_NV );
      #endif
      #if defined( GL_OBJECT_DISTANCE_TO_POINT_SGIS )
        ADD_CONST_INT( "GL_OBJECT_DISTANCE_TO_POINT_SGIS", GL_OBJECT_DISTANCE_TO_POINT_SGIS );
      #endif
      #if defined( GL_EXTENDED_RANGE_SGIS )
        ADD_CONST_INT( "GL_EXTENDED_RANGE_SGIS", GL_EXTENDED_RANGE_SGIS );
      #endif
      #if defined( GL_MAX_RENDERBUFFER_SIZE )
        ADD_CONST_INT( "GL_MAX_RENDERBUFFER_SIZE", GL_MAX_RENDERBUFFER_SIZE );
      #endif
      #if defined( GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV )
        ADD_CONST_INT( "GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV", GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV );
      #endif
      #if defined( GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV )
        ADD_CONST_INT( "GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV", GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV );
      #endif
      #if defined( GL_INCR_WRAP )
        ADD_CONST_INT( "GL_INCR_WRAP", GL_INCR_WRAP );
      #endif
      #if defined( GL_RENDERBUFFER_ALPHA_SIZE )
        ADD_CONST_INT( "GL_RENDERBUFFER_ALPHA_SIZE", GL_RENDERBUFFER_ALPHA_SIZE );
      #endif
      #if defined( GL_MAX_LUMINANCE_SGIS )
        ADD_CONST_INT( "GL_MAX_LUMINANCE_SGIS", GL_MAX_LUMINANCE_SGIS );
      #endif
      #if defined( GL_TEXTURE_2D_BINDING_EXT )
        ADD_CONST_INT( "GL_TEXTURE_2D_BINDING_EXT", GL_TEXTURE_2D_BINDING_EXT );
      #endif
      #if defined( GL_COLOR_TABLE_BIAS_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_BIAS_SGI", GL_COLOR_TABLE_BIAS_SGI );
      #endif
      #if defined( GL_MODELVIEW15_ARB )
        ADD_CONST_INT( "GL_MODELVIEW15_ARB", GL_MODELVIEW15_ARB );
      #endif
      #if defined( GL_TEXTURE_GREEN_TYPE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_GREEN_TYPE_ARB", GL_TEXTURE_GREEN_TYPE_ARB );
      #endif
      #if defined( GL_LIGHT_MODEL_TWO_SIDE )
        ADD_CONST_INT( "GL_LIGHT_MODEL_TWO_SIDE", GL_LIGHT_MODEL_TWO_SIDE );
      #endif
      #if defined( GL_DECR_WRAP )
        ADD_CONST_INT( "GL_DECR_WRAP", GL_DECR_WRAP );
      #endif
      #if defined( GL_OP_SET_LT_EXT )
        ADD_CONST_INT( "GL_OP_SET_LT_EXT", GL_OP_SET_LT_EXT );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB6_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB6_4_NV", GL_MAP2_VERTEX_ATTRIB6_4_NV );
      #endif
      #if defined( GL_MAX_CONVOLUTION_WIDTH_EXT )
        ADD_CONST_INT( "GL_MAX_CONVOLUTION_WIDTH_EXT", GL_MAX_CONVOLUTION_WIDTH_EXT );
      #endif
      #if defined( GL_COMPILE )
        ADD_CONST_INT( "GL_COMPILE", GL_COMPILE );
      #endif
      #if defined( GL_SAMPLE_POSITION )
        ADD_CONST_INT( "GL_SAMPLE_POSITION", GL_SAMPLE_POSITION );
      #endif
      #if defined( GL_EXT_provoking_vertex )
        ADD_CONST_INT( "GL_EXT_provoking_vertex", GL_EXT_provoking_vertex );
      #endif
      #if defined( GL_STORAGE_PRIVATE_APPLE )
        ADD_CONST_INT( "GL_STORAGE_PRIVATE_APPLE", GL_STORAGE_PRIVATE_APPLE );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV", GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV );
      #endif
      #if defined( GL_INCR )
        ADD_CONST_INT( "GL_INCR", GL_INCR );
      #endif
      #if defined( GL_EXT_texture_compression_dxt1 )
        ADD_CONST_INT( "GL_EXT_texture_compression_dxt1", GL_EXT_texture_compression_dxt1 );
      #endif
      #if defined( GL_MAX_RECTANGLE_TEXTURE_SIZE )
        ADD_CONST_INT( "GL_MAX_RECTANGLE_TEXTURE_SIZE", GL_MAX_RECTANGLE_TEXTURE_SIZE );
      #endif
      #if defined( GL_ALPHA_TEST_REF )
        ADD_CONST_INT( "GL_ALPHA_TEST_REF", GL_ALPHA_TEST_REF );
      #endif
      #if defined( GL_MAP_ATTRIB_V_ORDER_NV )
        ADD_CONST_INT( "GL_MAP_ATTRIB_V_ORDER_NV", GL_MAP_ATTRIB_V_ORDER_NV );
      #endif
      #if defined( GL_UNPACK_SKIP_ROWS )
        ADD_CONST_INT( "GL_UNPACK_SKIP_ROWS", GL_UNPACK_SKIP_ROWS );
      #endif
      #if defined( GL_EXT_transform_feedback )
        ADD_CONST_INT( "GL_EXT_transform_feedback", GL_EXT_transform_feedback );
      #endif
      #if defined( GL_PROGRAM_ERROR_STRING_ARB )
        ADD_CONST_INT( "GL_PROGRAM_ERROR_STRING_ARB", GL_PROGRAM_ERROR_STRING_ARB );
      #endif
      #if defined( GL_COLOR_ALPHA_PAIRING_ATI )
        ADD_CONST_INT( "GL_COLOR_ALPHA_PAIRING_ATI", GL_COLOR_ALPHA_PAIRING_ATI );
      #endif
      #if defined( GLX_SAMPLE_BUFFERS_BIT_SGIX )
        ADD_CONST_INT( "GLX_SAMPLE_BUFFERS_BIT_SGIX", GLX_SAMPLE_BUFFERS_BIT_SGIX );
      #endif
      #if defined( GL_4X_BIT_ATI )
        ADD_CONST_INT( "GL_4X_BIT_ATI", GL_4X_BIT_ATI );
      #endif
      #if defined( GL_DEPTH_CLAMP )
        ADD_CONST_INT( "GL_DEPTH_CLAMP", GL_DEPTH_CLAMP );
      #endif
      #if defined( GL_LUMINANCE_ALPHA_INTEGER_EXT )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA_INTEGER_EXT", GL_LUMINANCE_ALPHA_INTEGER_EXT );
      #endif
      #if defined( GL_BLEND_DST_ALPHA )
        ADD_CONST_INT( "GL_BLEND_DST_ALPHA", GL_BLEND_DST_ALPHA );
      #endif
      #if defined( GL_INT_SAMPLER_CUBE )
        ADD_CONST_INT( "GL_INT_SAMPLER_CUBE", GL_INT_SAMPLER_CUBE );
      #endif
      #if defined( GLEW_EXT_index_material )
        ADD_CONST_INT( "GLEW_EXT_index_material", GLEW_EXT_index_material );
      #endif
      #if defined( GL_POINT_SPRITE_R_MODE_NV )
        ADD_CONST_INT( "GL_POINT_SPRITE_R_MODE_NV", GL_POINT_SPRITE_R_MODE_NV );
      #endif
      #if defined( GL_CURRENT_QUERY )
        ADD_CONST_INT( "GL_CURRENT_QUERY", GL_CURRENT_QUERY );
      #endif
      #if defined( GL_MODELVIEW1_MATRIX_EXT )
        ADD_CONST_INT( "GL_MODELVIEW1_MATRIX_EXT", GL_MODELVIEW1_MATRIX_EXT );
      #endif
      #if defined( GL_DRAW_BUFFER3_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER3_ATI", GL_DRAW_BUFFER3_ATI );
      #endif
      #if defined( GL_VERTEX_SHADER )
        ADD_CONST_INT( "GL_VERTEX_SHADER", GL_VERTEX_SHADER );
      #endif
      #if defined( GL_TEXTURE28_ARB )
        ADD_CONST_INT( "GL_TEXTURE28_ARB", GL_TEXTURE28_ARB );
      #endif
      #if defined( GL_RGB16UI )
        ADD_CONST_INT( "GL_RGB16UI", GL_RGB16UI );
      #endif
      #if defined( GL_COPY_INVERTED )
        ADD_CONST_INT( "GL_COPY_INVERTED", GL_COPY_INVERTED );
      #endif
      #if defined( GL_TEXTURE_PRIORITY )
        ADD_CONST_INT( "GL_TEXTURE_PRIORITY", GL_TEXTURE_PRIORITY );
      #endif
      #if defined( GL_FORMAT_SUBSAMPLE_244_244_OML )
        ADD_CONST_INT( "GL_FORMAT_SUBSAMPLE_244_244_OML", GL_FORMAT_SUBSAMPLE_244_244_OML );
      #endif
      #if defined( GL_STATIC_ATI )
        ADD_CONST_INT( "GL_STATIC_ATI", GL_STATIC_ATI );
      #endif
      #if defined( GL_MAX_GEOMETRY_INPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_INPUT_COMPONENTS", GL_MAX_GEOMETRY_INPUT_COMPONENTS );
      #endif
      #if defined( GL_LOWER_LEFT )
        ADD_CONST_INT( "GL_LOWER_LEFT", GL_LOWER_LEFT );
      #endif
      #if defined( GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT", GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB3_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB3_4_NV", GL_MAP2_VERTEX_ATTRIB3_4_NV );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV", GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_INDEX_ARRAY_EXT )
        ADD_CONST_INT( "GL_INDEX_ARRAY_EXT", GL_INDEX_ARRAY_EXT );
      #endif
      #if defined( GL_GEOMETRY_OUTPUT_TYPE_EXT )
        ADD_CONST_INT( "GL_GEOMETRY_OUTPUT_TYPE_EXT", GL_GEOMETRY_OUTPUT_TYPE_EXT );
      #endif
      #if defined( GL_PIXEL_MIN_FILTER_EXT )
        ADD_CONST_INT( "GL_PIXEL_MIN_FILTER_EXT", GL_PIXEL_MIN_FILTER_EXT );
      #endif
      #if defined( GL_TEXTURE_BINDING_1D )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_1D", GL_TEXTURE_BINDING_1D );
      #endif
      #if defined( GL_AUX1 )
        ADD_CONST_INT( "GL_AUX1", GL_AUX1 );
      #endif
      #if defined( GL_DT_BIAS_NV )
        ADD_CONST_INT( "GL_DT_BIAS_NV", GL_DT_BIAS_NV );
      #endif
      #if defined( GL_MATRIX1_ARB )
        ADD_CONST_INT( "GL_MATRIX1_ARB", GL_MATRIX1_ARB );
      #endif
      #if defined( GL_TEXTURE_BINDING_CUBE_MAP_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_CUBE_MAP_EXT", GL_TEXTURE_BINDING_CUBE_MAP_EXT );
      #endif
      #if defined( GL_PIXEL_UNPACK_BUFFER )
        ADD_CONST_INT( "GL_PIXEL_UNPACK_BUFFER", GL_PIXEL_UNPACK_BUFFER );
      #endif
      #if defined( GL_CONSTANT_COLOR0_NV )
        ADD_CONST_INT( "GL_CONSTANT_COLOR0_NV", GL_CONSTANT_COLOR0_NV );
      #endif
      #if defined( GL_LOCAL_CONSTANT_VALUE_EXT )
        ADD_CONST_INT( "GL_LOCAL_CONSTANT_VALUE_EXT", GL_LOCAL_CONSTANT_VALUE_EXT );
      #endif
      #if defined( GL_POINT_DISTANCE_ATTENUATION )
        ADD_CONST_INT( "GL_POINT_DISTANCE_ATTENUATION", GL_POINT_DISTANCE_ATTENUATION );
      #endif
      #if defined( GL_TEXTURE_BUFFER_DATA_STORE_BINDING )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER_DATA_STORE_BINDING", GL_TEXTURE_BUFFER_DATA_STORE_BINDING );
      #endif
      #if defined( GL_UNSIGNED_BYTE_3_3_2_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_BYTE_3_3_2_EXT", GL_UNSIGNED_BYTE_3_3_2_EXT );
      #endif
      #if defined( GL_OPERAND0_ALPHA_ARB )
        ADD_CONST_INT( "GL_OPERAND0_ALPHA_ARB", GL_OPERAND0_ALPHA_ARB );
      #endif
      #if defined( GL_4PASS_1_EXT )
        ADD_CONST_INT( "GL_4PASS_1_EXT", GL_4PASS_1_EXT );
      #endif
      #if defined( GL_REPLACE_OLDEST_SUN )
        ADD_CONST_INT( "GL_REPLACE_OLDEST_SUN", GL_REPLACE_OLDEST_SUN );
      #endif
      #if defined( GL_MATRIX0_NV )
        ADD_CONST_INT( "GL_MATRIX0_NV", GL_MATRIX0_NV );
      #endif
      #if defined( GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT )
        ADD_CONST_INT( "GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT );
      #endif
      #if defined( GL_AMBIENT_AND_DIFFUSE )
        ADD_CONST_INT( "GL_AMBIENT_AND_DIFFUSE", GL_AMBIENT_AND_DIFFUSE );
      #endif
      #if defined( GL_TEXTURE_1D_BINDING_EXT )
        ADD_CONST_INT( "GL_TEXTURE_1D_BINDING_EXT", GL_TEXTURE_1D_BINDING_EXT );
      #endif
      #if defined( GL_MATRIX7_ARB )
        ADD_CONST_INT( "GL_MATRIX7_ARB", GL_MATRIX7_ARB );
      #endif
      #if defined( GL_COMPRESSED_SIGNED_RED_RGTC1_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SIGNED_RED_RGTC1_EXT", GL_COMPRESSED_SIGNED_RED_RGTC1_EXT );
      #endif
      #if defined( GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI )
        ADD_CONST_INT( "GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI", GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI );
      #endif
      #if defined( GL_ZERO )
        ADD_CONST_INT( "GL_ZERO", GL_ZERO );
      #endif
      #if defined( GL_PROGRAM_FORMAT_ASCII_ARB )
        ADD_CONST_INT( "GL_PROGRAM_FORMAT_ASCII_ARB", GL_PROGRAM_FORMAT_ASCII_ARB );
      #endif
      #if defined( GL_ELEMENT_ARRAY_BUFFER )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_BUFFER", GL_ELEMENT_ARRAY_BUFFER );
      #endif
      #if defined( GL_SYNC_STATUS )
        ADD_CONST_INT( "GL_SYNC_STATUS", GL_SYNC_STATUS );
      #endif
      #if defined( GL_MAX_NAME_STACK_DEPTH )
        ADD_CONST_INT( "GL_MAX_NAME_STACK_DEPTH", GL_MAX_NAME_STACK_DEPTH );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_ATTRIBS_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_ATTRIBS_NV", GL_TRANSFORM_FEEDBACK_ATTRIBS_NV );
      #endif
      #if defined( GLEW_OML_interlace )
        ADD_CONST_INT( "GLEW_OML_interlace", GLEW_OML_interlace );
      #endif
      #if defined( GL_READ_ONLY )
        ADD_CONST_INT( "GL_READ_ONLY", GL_READ_ONLY );
      #endif
      #if defined( GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT )
        ADD_CONST_INT( "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT );
      #endif
      #if defined( GLXEW_EXT_scene_marker )
        ADD_CONST_INT( "GLXEW_EXT_scene_marker", GLXEW_EXT_scene_marker );
      #endif
      #if defined( GL_MAP1_GRID_DOMAIN )
        ADD_CONST_INT( "GL_MAP1_GRID_DOMAIN", GL_MAP1_GRID_DOMAIN );
      #endif
      #if defined( GL_RETAINED_APPLE )
        ADD_CONST_INT( "GL_RETAINED_APPLE", GL_RETAINED_APPLE );
      #endif
      #if defined( GL_EXT_texture_sRGB )
        ADD_CONST_INT( "GL_EXT_texture_sRGB", GL_EXT_texture_sRGB );
      #endif
      #if defined( GL_INVARIANT_EXT )
        ADD_CONST_INT( "GL_INVARIANT_EXT", GL_INVARIANT_EXT );
      #endif
      #if defined( GL_HALF_BIAS_NORMAL_NV )
        ADD_CONST_INT( "GL_HALF_BIAS_NORMAL_NV", GL_HALF_BIAS_NORMAL_NV );
      #endif
      #if defined( GLX_TRANSPARENT_TYPE_EXT )
        ADD_CONST_INT( "GLX_TRANSPARENT_TYPE_EXT", GLX_TRANSPARENT_TYPE_EXT );
      #endif
      #if defined( GL_PROXY_HISTOGRAM )
        ADD_CONST_INT( "GL_PROXY_HISTOGRAM", GL_PROXY_HISTOGRAM );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_R_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_R_SIZE", GL_PIXEL_MAP_I_TO_R_SIZE );
      #endif
      #if defined( GL_CULL_FRAGMENT_NV )
        ADD_CONST_INT( "GL_CULL_FRAGMENT_NV", GL_CULL_FRAGMENT_NV );
      #endif
      #if defined( GL_TEXTURE_COMPRESSION_HINT_ARB )
        ADD_CONST_INT( "GL_TEXTURE_COMPRESSION_HINT_ARB", GL_TEXTURE_COMPRESSION_HINT_ARB );
      #endif
      #if defined( GLXEW_EXT_visual_rating )
        ADD_CONST_INT( "GLXEW_EXT_visual_rating", GLXEW_EXT_visual_rating );
      #endif
      #if defined( GL_OPERAND1_ALPHA_ARB )
        ADD_CONST_INT( "GL_OPERAND1_ALPHA_ARB", GL_OPERAND1_ALPHA_ARB );
      #endif
      #if defined( GL_T2F_C3F_V3F )
        ADD_CONST_INT( "GL_T2F_C3F_V3F", GL_T2F_C3F_V3F );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY5_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY5_NV", GL_VERTEX_ATTRIB_ARRAY5_NV );
      #endif
      #if defined( GLEW_EXT_multisample )
        ADD_CONST_INT( "GLEW_EXT_multisample", GLEW_EXT_multisample );
      #endif
      #if defined( GL_HISTOGRAM_BLUE_SIZE_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_BLUE_SIZE_EXT", GL_HISTOGRAM_BLUE_SIZE_EXT );
      #endif
      #if defined( GL_COMPRESSED_RED )
        ADD_CONST_INT( "GL_COMPRESSED_RED", GL_COMPRESSED_RED );
      #endif
      #if defined( GL_BGR )
        ADD_CONST_INT( "GL_BGR", GL_BGR );
      #endif
      #if defined( GLX_TEXTURE_FORMAT_NONE_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_FORMAT_NONE_EXT", GLX_TEXTURE_FORMAT_NONE_EXT );
      #endif
      #if defined( GL_IGNORE_BORDER )
        ADD_CONST_INT( "GL_IGNORE_BORDER", GL_IGNORE_BORDER );
      #endif
      #if defined( GL_RGBA16_SNORM )
        ADD_CONST_INT( "GL_RGBA16_SNORM", GL_RGBA16_SNORM );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB", GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB );
      #endif
      #if defined( GL_SAMPLER_2D_ARRAY_EXT )
        ADD_CONST_INT( "GL_SAMPLER_2D_ARRAY_EXT", GL_SAMPLER_2D_ARRAY_EXT );
      #endif
      #if defined( GL_RGB16F_ARB )
        ADD_CONST_INT( "GL_RGB16F_ARB", GL_RGB16F_ARB );
      #endif
      #if defined( GL_COMBINER_MUX_SUM_NV )
        ADD_CONST_INT( "GL_COMBINER_MUX_SUM_NV", GL_COMBINER_MUX_SUM_NV );
      #endif
      #if defined( GL_MAX_VIEWPORT_DIMS )
        ADD_CONST_INT( "GL_MAX_VIEWPORT_DIMS", GL_MAX_VIEWPORT_DIMS );
      #endif
      #if defined( GL_LIST_INDEX )
        ADD_CONST_INT( "GL_LIST_INDEX", GL_LIST_INDEX );
      #endif
      #if defined( GL_OP_RECIP_EXT )
        ADD_CONST_INT( "GL_OP_RECIP_EXT", GL_OP_RECIP_EXT );
      #endif
      #if defined( GL_STREAM_DRAW_ARB )
        ADD_CONST_INT( "GL_STREAM_DRAW_ARB", GL_STREAM_DRAW_ARB );
      #endif
      #if defined( GL_FRAGMENT_NORMAL_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_NORMAL_EXT", GL_FRAGMENT_NORMAL_EXT );
      #endif
      #if defined( GL_TEXTURE_BORDER_COLOR )
        ADD_CONST_INT( "GL_TEXTURE_BORDER_COLOR", GL_TEXTURE_BORDER_COLOR );
      #endif
      #if defined( GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV )
        ADD_CONST_INT( "GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV", GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV );
      #endif
      #if defined( GL_PROXY_TEXTURE_1D_EXT )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_1D_EXT", GL_PROXY_TEXTURE_1D_EXT );
      #endif
      #if defined( GL_MATRIX31_ARB )
        ADD_CONST_INT( "GL_MATRIX31_ARB", GL_MATRIX31_ARB );
      #endif
      #if defined( GL_MIN_INTENSITY_SGIS )
        ADD_CONST_INT( "GL_MIN_INTENSITY_SGIS", GL_MIN_INTENSITY_SGIS );
      #endif
      #if defined( GL_MAX_ACTIVE_LIGHTS_EXT )
        ADD_CONST_INT( "GL_MAX_ACTIVE_LIGHTS_EXT", GL_MAX_ACTIVE_LIGHTS_EXT );
      #endif
      #if defined( GL_RGB_FLOAT32_ATI )
        ADD_CONST_INT( "GL_RGB_FLOAT32_ATI", GL_RGB_FLOAT32_ATI );
      #endif
      #if defined( GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT", GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT );
      #endif
      #if defined( GL_TEXTURE_BUFFER_FORMAT_ARB )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER_FORMAT_ARB", GL_TEXTURE_BUFFER_FORMAT_ARB );
      #endif
      #if defined( GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB", GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB );
      #endif
      #if defined( GLX_PBUFFER )
        ADD_CONST_INT( "GLX_PBUFFER", GLX_PBUFFER );
      #endif
      #if defined( GL_LUMINANCE16_ALPHA16 )
        ADD_CONST_INT( "GL_LUMINANCE16_ALPHA16", GL_LUMINANCE16_ALPHA16 );
      #endif
      #if defined( GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX )
        ADD_CONST_INT( "GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX", GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX );
      #endif
      #if defined( GL_COMPILE_STATUS )
        ADD_CONST_INT( "GL_COMPILE_STATUS", GL_COMPILE_STATUS );
      #endif
      #if defined( GL_LOGIC_OP_MODE )
        ADD_CONST_INT( "GL_LOGIC_OP_MODE", GL_LOGIC_OP_MODE );
      #endif
      #if defined( GL_PREVIOUS_TEXTURE_INPUT_NV )
        ADD_CONST_INT( "GL_PREVIOUS_TEXTURE_INPUT_NV", GL_PREVIOUS_TEXTURE_INPUT_NV );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD17_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD17_EXT", GL_OUTPUT_TEXTURE_COORD17_EXT );
      #endif
      #if defined( GL_MATRIX16_ARB )
        ADD_CONST_INT( "GL_MATRIX16_ARB", GL_MATRIX16_ARB );
      #endif
      #if defined( GL_ALPHA_FLOAT32_APPLE )
        ADD_CONST_INT( "GL_ALPHA_FLOAT32_APPLE", GL_ALPHA_FLOAT32_APPLE );
      #endif
      #if defined( GL_MAX_ALPHA_SGIS )
        ADD_CONST_INT( "GL_MAX_ALPHA_SGIS", GL_MAX_ALPHA_SGIS );
      #endif
      #if defined( GL_SIGNED_RGB_UNSIGNED_ALPHA_NV )
        ADD_CONST_INT( "GL_SIGNED_RGB_UNSIGNED_ALPHA_NV", GL_SIGNED_RGB_UNSIGNED_ALPHA_NV );
      #endif
      #if defined( GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB )
        ADD_CONST_INT( "GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB", GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB );
      #endif
      #if defined( GLX_BAD_ENUM )
        ADD_CONST_INT( "GLX_BAD_ENUM", GLX_BAD_ENUM );
      #endif
      #if defined( GLX_BUFFER_CLOBBER_MASK_SGIX )
        ADD_CONST_INT( "GLX_BUFFER_CLOBBER_MASK_SGIX", GLX_BUFFER_CLOBBER_MASK_SGIX );
      #endif
      #if defined( GL_UNSIGNED_INT_24_8 )
        ADD_CONST_INT( "GL_UNSIGNED_INT_24_8", GL_UNSIGNED_INT_24_8 );
      #endif
      #if defined( GL_UNSIGNED_BYTE )
        ADD_CONST_INT( "GL_UNSIGNED_BYTE", GL_UNSIGNED_BYTE );
      #endif
      #if defined( GLEW_PGI_vertex_hints )
        ADD_CONST_INT( "GLEW_PGI_vertex_hints", GLEW_PGI_vertex_hints );
      #endif
      #if defined( GL_TESSELLATION_MODE_AMD )
        ADD_CONST_INT( "GL_TESSELLATION_MODE_AMD", GL_TESSELLATION_MODE_AMD );
      #endif
      #if defined( GL_INT_SAMPLER_BUFFER_EXT )
        ADD_CONST_INT( "GL_INT_SAMPLER_BUFFER_EXT", GL_INT_SAMPLER_BUFFER_EXT );
      #endif
      #if defined( GL_QUADS )
        ADD_CONST_INT( "GL_QUADS", GL_QUADS );
      #endif
      #if defined( GL_R16 )
        ADD_CONST_INT( "GL_R16", GL_R16 );
      #endif
      #if defined( GL_DRAW_BUFFER0_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER0_ATI", GL_DRAW_BUFFER0_ATI );
      #endif
      #if defined( GL_CURRENT_SAMPLE_COUNT_QUERY_NV )
        ADD_CONST_INT( "GL_CURRENT_SAMPLE_COUNT_QUERY_NV", GL_CURRENT_SAMPLE_COUNT_QUERY_NV );
      #endif
      #if defined( GLX_RENDER_TYPE_SGIX )
        ADD_CONST_INT( "GLX_RENDER_TYPE_SGIX", GLX_RENDER_TYPE_SGIX );
      #endif
      #if defined( GLX_FRONT_RIGHT_ATI )
        ADD_CONST_INT( "GLX_FRONT_RIGHT_ATI", GLX_FRONT_RIGHT_ATI );
      #endif
      #if defined( GL_SIGNED_RGBA_NV )
        ADD_CONST_INT( "GL_SIGNED_RGBA_NV", GL_SIGNED_RGBA_NV );
      #endif
      #if defined( GL_PIXEL_PACK_BUFFER )
        ADD_CONST_INT( "GL_PIXEL_PACK_BUFFER", GL_PIXEL_PACK_BUFFER );
      #endif
      #if defined( GL_VERSION_1_5 )
        ADD_CONST_INT( "GL_VERSION_1_5", GL_VERSION_1_5 );
      #endif
      #if defined( GL_VERSION_1_4 )
        ADD_CONST_INT( "GL_VERSION_1_4", GL_VERSION_1_4 );
      #endif
      #if defined( GL_VERSION_1_3 )
        ADD_CONST_INT( "GL_VERSION_1_3", GL_VERSION_1_3 );
      #endif
      #if defined( GL_VERSION_1_2 )
        ADD_CONST_INT( "GL_VERSION_1_2", GL_VERSION_1_2 );
      #endif
      #if defined( GL_VERSION_1_1 )
        ADD_CONST_INT( "GL_VERSION_1_1", GL_VERSION_1_1 );
      #endif
      #if defined( GL_OUTPUT_FOG_EXT )
        ADD_CONST_INT( "GL_OUTPUT_FOG_EXT", GL_OUTPUT_FOG_EXT );
      #endif
      #if defined( GLX_RGBA_BIT )
        ADD_CONST_INT( "GLX_RGBA_BIT", GLX_RGBA_BIT );
      #endif
      #if defined( GL_HISTOGRAM_ALPHA_SIZE_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_ALPHA_SIZE_EXT", GL_HISTOGRAM_ALPHA_SIZE_EXT );
      #endif
      #if defined( GL_UNSIGNED_BYTE_3_3_2 )
        ADD_CONST_INT( "GL_UNSIGNED_BYTE_3_3_2", GL_UNSIGNED_BYTE_3_3_2 );
      #endif
      #if defined( GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB", GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB );
      #endif
      #if defined( GL_CURRENT_MATRIX_NV )
        ADD_CONST_INT( "GL_CURRENT_MATRIX_NV", GL_CURRENT_MATRIX_NV );
      #endif
      #if defined( GL_422_REV_AVERAGE_EXT )
        ADD_CONST_INT( "GL_422_REV_AVERAGE_EXT", GL_422_REV_AVERAGE_EXT );
      #endif
      #if defined( GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT )
        ADD_CONST_INT( "GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT", GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_SIZE )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE", GL_TRANSFORM_FEEDBACK_BUFFER_SIZE );
      #endif
      #if defined( GL_DRAW_BUFFER )
        ADD_CONST_INT( "GL_DRAW_BUFFER", GL_DRAW_BUFFER );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_BLUE_SCALE )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_BLUE_SCALE", GL_POST_COLOR_MATRIX_BLUE_SCALE );
      #endif
      #if defined( GL_VERSION_3_1 )
        ADD_CONST_INT( "GL_VERSION_3_1", GL_VERSION_3_1 );
      #endif
      #if defined( GL_VERSION_3_0 )
        ADD_CONST_INT( "GL_VERSION_3_0", GL_VERSION_3_0 );
      #endif
      #if defined( GL_VERSION_3_3 )
        ADD_CONST_INT( "GL_VERSION_3_3", GL_VERSION_3_3 );
      #endif
      #if defined( GL_STENCIL_INDEX1 )
        ADD_CONST_INT( "GL_STENCIL_INDEX1", GL_STENCIL_INDEX1 );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY6_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY6_NV", GL_VERTEX_ATTRIB_ARRAY6_NV );
      #endif
      #if defined( GL_STENCIL_INDEX4 )
        ADD_CONST_INT( "GL_STENCIL_INDEX4", GL_STENCIL_INDEX4 );
      #endif
      #if defined( GL_MIRROR_CLAMP_TO_BORDER_EXT )
        ADD_CONST_INT( "GL_MIRROR_CLAMP_TO_BORDER_EXT", GL_MIRROR_CLAMP_TO_BORDER_EXT );
      #endif
      #if defined( GLEW_EXT_vertex_shader )
        ADD_CONST_INT( "GLEW_EXT_vertex_shader", GLEW_EXT_vertex_shader );
      #endif
      #if defined( GL_TEXTURE_GREEN_TYPE )
        ADD_CONST_INT( "GL_TEXTURE_GREEN_TYPE", GL_TEXTURE_GREEN_TYPE );
      #endif
      #if defined( GL_MAX_COLOR_MATRIX_STACK_DEPTH )
        ADD_CONST_INT( "GL_MAX_COLOR_MATRIX_STACK_DEPTH", GL_MAX_COLOR_MATRIX_STACK_DEPTH );
      #endif
      #if defined( GL_DEPTH_BITS )
        ADD_CONST_INT( "GL_DEPTH_BITS", GL_DEPTH_BITS );
      #endif
      #if defined( GL_DEPENDENT_HILO_TEXTURE_2D_NV )
        ADD_CONST_INT( "GL_DEPENDENT_HILO_TEXTURE_2D_NV", GL_DEPENDENT_HILO_TEXTURE_2D_NV );
      #endif
      #if defined( GL_RASTER_POSITION_UNCLIPPED_IBM )
        ADD_CONST_INT( "GL_RASTER_POSITION_UNCLIPPED_IBM", GL_RASTER_POSITION_UNCLIPPED_IBM );
      #endif
      #if defined( GL_RGB8UI )
        ADD_CONST_INT( "GL_RGB8UI", GL_RGB8UI );
      #endif
      #if defined( GL_TEXTURE27_ARB )
        ADD_CONST_INT( "GL_TEXTURE27_ARB", GL_TEXTURE27_ARB );
      #endif
      #if defined( GL_STENCIL_INDEX16 )
        ADD_CONST_INT( "GL_STENCIL_INDEX16", GL_STENCIL_INDEX16 );
      #endif
      #if defined( GLX_BACK_RIGHT_ATI )
        ADD_CONST_INT( "GLX_BACK_RIGHT_ATI", GLX_BACK_RIGHT_ATI );
      #endif
      #if defined( GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB )
        ADD_CONST_INT( "GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB", GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD21_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD21_EXT", GL_OUTPUT_TEXTURE_COORD21_EXT );
      #endif
      #if defined( GL_CURRENT_RASTER_TEXTURE_COORDS )
        ADD_CONST_INT( "GL_CURRENT_RASTER_TEXTURE_COORDS", GL_CURRENT_RASTER_TEXTURE_COORDS );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_COLOR_TABLE )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_COLOR_TABLE", GL_POST_COLOR_MATRIX_COLOR_TABLE );
      #endif
      #if defined( GL_TEXTURE26_ARB )
        ADD_CONST_INT( "GL_TEXTURE26_ARB", GL_TEXTURE26_ARB );
      #endif
      #if defined( GL_EXT_framebuffer_multisample )
        ADD_CONST_INT( "GL_EXT_framebuffer_multisample", GL_EXT_framebuffer_multisample );
      #endif
      #if defined( GL_OP_DOT4_EXT )
        ADD_CONST_INT( "GL_OP_DOT4_EXT", GL_OP_DOT4_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB", GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB );
      #endif
      #if defined( GL_BLEND_DST_RGB )
        ADD_CONST_INT( "GL_BLEND_DST_RGB", GL_BLEND_DST_RGB );
      #endif
      #if defined( GL_CG_FRAGMENT_SHADER_EXT )
        ADD_CONST_INT( "GL_CG_FRAGMENT_SHADER_EXT", GL_CG_FRAGMENT_SHADER_EXT );
      #endif
      #if defined( GLX_AUX9_ATI )
        ADD_CONST_INT( "GLX_AUX9_ATI", GLX_AUX9_ATI );
      #endif
      #if defined( GL_COPY )
        ADD_CONST_INT( "GL_COPY", GL_COPY );
      #endif
      #if defined( GL_MIRROR_CLAMP_TO_EDGE_ATI )
        ADD_CONST_INT( "GL_MIRROR_CLAMP_TO_EDGE_ATI", GL_MIRROR_CLAMP_TO_EDGE_ATI );
      #endif
      #if defined( GLEW_EXT_gpu_shader4 )
        ADD_CONST_INT( "GLEW_EXT_gpu_shader4", GLEW_EXT_gpu_shader4 );
      #endif
      #if defined( GL_MAP1_VERTEX_3 )
        ADD_CONST_INT( "GL_MAP1_VERTEX_3", GL_MAP1_VERTEX_3 );
      #endif
      #if defined( GL_SAMPLE_PATTERN_EXT )
        ADD_CONST_INT( "GL_SAMPLE_PATTERN_EXT", GL_SAMPLE_PATTERN_EXT );
      #endif
      #if defined( GLX_X_RENDERABLE )
        ADD_CONST_INT( "GLX_X_RENDERABLE", GLX_X_RENDERABLE );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT", GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT );
      #endif
      #if defined( GL_CLEAR )
        ADD_CONST_INT( "GL_CLEAR", GL_CLEAR );
      #endif
      #if defined( GL_LIGHT7 )
        ADD_CONST_INT( "GL_LIGHT7", GL_LIGHT7 );
      #endif
      #if defined( GL_CURRENT_RASTER_POSITION_VALID )
        ADD_CONST_INT( "GL_CURRENT_RASTER_POSITION_VALID", GL_CURRENT_RASTER_POSITION_VALID );
      #endif
      #if defined( GL_BUMP_NUM_TEX_UNITS_ATI )
        ADD_CONST_INT( "GL_BUMP_NUM_TEX_UNITS_ATI", GL_BUMP_NUM_TEX_UNITS_ATI );
      #endif
      #if defined( GL_HISTOGRAM_LUMINANCE_SIZE )
        ADD_CONST_INT( "GL_HISTOGRAM_LUMINANCE_SIZE", GL_HISTOGRAM_LUMINANCE_SIZE );
      #endif
      #if defined( GL_MATRIX_MODE )
        ADD_CONST_INT( "GL_MATRIX_MODE", GL_MATRIX_MODE );
      #endif
      #if defined( GL_COLOR_ATTACHMENT3_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT3_EXT", GL_COLOR_ATTACHMENT3_EXT );
      #endif
      #if defined( GL_DRAW_BUFFER9 )
        ADD_CONST_INT( "GL_DRAW_BUFFER9", GL_DRAW_BUFFER9 );
      #endif
      #if defined( GL_PIXEL_PACK_BUFFER_BINDING )
        ADD_CONST_INT( "GL_PIXEL_PACK_BUFFER_BINDING", GL_PIXEL_PACK_BUFFER_BINDING );
      #endif
      #if defined( GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB )
        ADD_CONST_INT( "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB", GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB );
      #endif
      #if defined( GL_FRAGMENT_SHADER_ATI )
        ADD_CONST_INT( "GL_FRAGMENT_SHADER_ATI", GL_FRAGMENT_SHADER_ATI );
      #endif
      #if defined( GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS )
        ADD_CONST_INT( "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS", GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS );
      #endif
      #if defined( GL_VERTEX_STREAM2_ATI )
        ADD_CONST_INT( "GL_VERTEX_STREAM2_ATI", GL_VERTEX_STREAM2_ATI );
      #endif
      #if defined( GL_POINT_SIZE_MAX_ARB )
        ADD_CONST_INT( "GL_POINT_SIZE_MAX_ARB", GL_POINT_SIZE_MAX_ARB );
      #endif
      #if defined( GLX_MAX_PBUFFER_HEIGHT )
        ADD_CONST_INT( "GLX_MAX_PBUFFER_HEIGHT", GLX_MAX_PBUFFER_HEIGHT );
      #endif
      #if defined( GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT", GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT );
      #endif
      #if defined( GL_VARIABLE_B_NV )
        ADD_CONST_INT( "GL_VARIABLE_B_NV", GL_VARIABLE_B_NV );
      #endif
      #if defined( GL_SELECTION_BUFFER_SIZE )
        ADD_CONST_INT( "GL_SELECTION_BUFFER_SIZE", GL_SELECTION_BUFFER_SIZE );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB14_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB14_4_NV", GL_MAP2_VERTEX_ATTRIB14_4_NV );
      #endif
      #if defined( GL_INTENSITY_SIGNED_SGIX )
        ADD_CONST_INT( "GL_INTENSITY_SIGNED_SGIX", GL_INTENSITY_SIGNED_SGIX );
      #endif
      #if defined( GLEW_EXT_point_parameters )
        ADD_CONST_INT( "GLEW_EXT_point_parameters", GLEW_EXT_point_parameters );
      #endif
      #if defined( GL_RGBA16_EXT )
        ADD_CONST_INT( "GL_RGBA16_EXT", GL_RGBA16_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_10F_11F_11F_REV_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_10F_11F_11F_REV_EXT", GL_UNSIGNED_INT_10F_11F_11F_REV_EXT );
      #endif
      #if defined( GL_VARIABLE_F_NV )
        ADD_CONST_INT( "GL_VARIABLE_F_NV", GL_VARIABLE_F_NV );
      #endif
      #if defined( GLX_STATIC_COLOR_EXT )
        ADD_CONST_INT( "GLX_STATIC_COLOR_EXT", GLX_STATIC_COLOR_EXT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD24_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD24_EXT", GL_OUTPUT_TEXTURE_COORD24_EXT );
      #endif
      #if defined( GL_CURRENT_RASTER_POSITION )
        ADD_CONST_INT( "GL_CURRENT_RASTER_POSITION", GL_CURRENT_RASTER_POSITION );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_SIZE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_SIZE", GL_VERTEX_ATTRIB_ARRAY_SIZE );
      #endif
      #if defined( GL_EXP2 )
        ADD_CONST_INT( "GL_EXP2", GL_EXP2 );
      #endif
      #if defined( GL_WEIGHT_ARRAY_STRIDE_ARB )
        ADD_CONST_INT( "GL_WEIGHT_ARRAY_STRIDE_ARB", GL_WEIGHT_ARRAY_STRIDE_ARB );
      #endif
      #if defined( GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV", GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV );
      #endif
      #if defined( GL_MATRIX6_ARB )
        ADD_CONST_INT( "GL_MATRIX6_ARB", GL_MATRIX6_ARB );
      #endif
      #if defined( GL_CURRENT_WEIGHT_ARB )
        ADD_CONST_INT( "GL_CURRENT_WEIGHT_ARB", GL_CURRENT_WEIGHT_ARB );
      #endif
      #if defined( GL_SHADOW_ATTENUATION_EXT )
        ADD_CONST_INT( "GL_SHADOW_ATTENUATION_EXT", GL_SHADOW_ATTENUATION_EXT );
      #endif
      #if defined( GL_TRIANGLE_LIST_SUN )
        ADD_CONST_INT( "GL_TRIANGLE_LIST_SUN", GL_TRIANGLE_LIST_SUN );
      #endif
      #if defined( GL_INVERSE_NV )
        ADD_CONST_INT( "GL_INVERSE_NV", GL_INVERSE_NV );
      #endif
      #if defined( GLEW_EXT_shared_texture_palette )
        ADD_CONST_INT( "GLEW_EXT_shared_texture_palette", GLEW_EXT_shared_texture_palette );
      #endif
      #if defined( GL_EXT_texture_buffer_object )
        ADD_CONST_INT( "GL_EXT_texture_buffer_object", GL_EXT_texture_buffer_object );
      #endif
      #if defined( GL_DOT_PRODUCT_DEPTH_REPLACE_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_DEPTH_REPLACE_NV", GL_DOT_PRODUCT_DEPTH_REPLACE_NV );
      #endif
      #if defined( GL_FLOAT_VEC2 )
        ADD_CONST_INT( "GL_FLOAT_VEC2", GL_FLOAT_VEC2 );
      #endif
      #if defined( GL_FOG_INDEX )
        ADD_CONST_INT( "GL_FOG_INDEX", GL_FOG_INDEX );
      #endif
      #if defined( GLX_SWAP_METHOD_OML )
        ADD_CONST_INT( "GLX_SWAP_METHOD_OML", GLX_SWAP_METHOD_OML );
      #endif
      #if defined( GL_FLOAT_VEC4 )
        ADD_CONST_INT( "GL_FLOAT_VEC4", GL_FLOAT_VEC4 );
      #endif
      #if defined( GL_R11F_G11F_B10F_EXT )
        ADD_CONST_INT( "GL_R11F_G11F_B10F_EXT", GL_R11F_G11F_B10F_EXT );
      #endif
      #if defined( GL_FLOAT_RGB32_NV )
        ADD_CONST_INT( "GL_FLOAT_RGB32_NV", GL_FLOAT_RGB32_NV );
      #endif
      #if defined( GL_COEFF )
        ADD_CONST_INT( "GL_COEFF", GL_COEFF );
      #endif
      #if defined( GL_PROXY_TEXTURE_2D_ARRAY_EXT )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_2D_ARRAY_EXT", GL_PROXY_TEXTURE_2D_ARRAY_EXT );
      #endif
      #if defined( GL_SOURCE2_ALPHA )
        ADD_CONST_INT( "GL_SOURCE2_ALPHA", GL_SOURCE2_ALPHA );
      #endif
      #if defined( GLX_MAX_RED_SGIS )
        ADD_CONST_INT( "GLX_MAX_RED_SGIS", GLX_MAX_RED_SGIS );
      #endif
      #if defined( GL_ENV_REPLACE_EXT )
        ADD_CONST_INT( "GL_ENV_REPLACE_EXT", GL_ENV_REPLACE_EXT );
      #endif
      #if defined( GL_BUFFER_SIZE )
        ADD_CONST_INT( "GL_BUFFER_SIZE", GL_BUFFER_SIZE );
      #endif
      #if defined( GLEW_EXT_shadow_funcs )
        ADD_CONST_INT( "GLEW_EXT_shadow_funcs", GLEW_EXT_shadow_funcs );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB9_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB9_4_NV", GL_MAP1_VERTEX_ATTRIB9_4_NV );
      #endif
      #if defined( GLX_FRONT_RIGHT_EXT )
        ADD_CONST_INT( "GLX_FRONT_RIGHT_EXT", GLX_FRONT_RIGHT_EXT );
      #endif
      #if defined( GLEW_EXT_misc_attribute )
        ADD_CONST_INT( "GLEW_EXT_misc_attribute", GLEW_EXT_misc_attribute );
      #endif
      #if defined( GL_BUFFER_SIZE_ARB )
        ADD_CONST_INT( "GL_BUFFER_SIZE_ARB", GL_BUFFER_SIZE_ARB );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_BUFFER )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_BUFFER", GL_UNSIGNED_INT_SAMPLER_BUFFER );
      #endif
      #if defined( GL_UNIFORM_BUFFER_START )
        ADD_CONST_INT( "GL_UNIFORM_BUFFER_START", GL_UNIFORM_BUFFER_START );
      #endif
      #if defined( GL_VARIABLE_D_NV )
        ADD_CONST_INT( "GL_VARIABLE_D_NV", GL_VARIABLE_D_NV );
      #endif
      #if defined( GL_INT_VEC4 )
        ADD_CONST_INT( "GL_INT_VEC4", GL_INT_VEC4 );
      #endif
      #if defined( GL_AUX_DEPTH_STENCIL_APPLE )
        ADD_CONST_INT( "GL_AUX_DEPTH_STENCIL_APPLE", GL_AUX_DEPTH_STENCIL_APPLE );
      #endif
      #if defined( GL_CLAMP_READ_COLOR_ARB )
        ADD_CONST_INT( "GL_CLAMP_READ_COLOR_ARB", GL_CLAMP_READ_COLOR_ARB );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV", GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV );
      #endif
      #if defined( GL_PROXY_HISTOGRAM_EXT )
        ADD_CONST_INT( "GL_PROXY_HISTOGRAM_EXT", GL_PROXY_HISTOGRAM_EXT );
      #endif
      #if defined( GL_TEXTURE_DEPTH_EXT )
        ADD_CONST_INT( "GL_TEXTURE_DEPTH_EXT", GL_TEXTURE_DEPTH_EXT );
      #endif
      #if defined( GL_COLOR_MATERIAL )
        ADD_CONST_INT( "GL_COLOR_MATERIAL", GL_COLOR_MATERIAL );
      #endif
      #if defined( GL_MAX_TEXTURE_STACK_DEPTH )
        ADD_CONST_INT( "GL_MAX_TEXTURE_STACK_DEPTH", GL_MAX_TEXTURE_STACK_DEPTH );
      #endif
      #if defined( GLEW_EXT_Cg_shader )
        ADD_CONST_INT( "GLEW_EXT_Cg_shader", GLEW_EXT_Cg_shader );
      #endif
      #if defined( GL_TEXTURE_FILTER_CONTROL )
        ADD_CONST_INT( "GL_TEXTURE_FILTER_CONTROL", GL_TEXTURE_FILTER_CONTROL );
      #endif
      #if defined( GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT", GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_RECORD_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_RECORD_NV", GL_TRANSFORM_FEEDBACK_RECORD_NV );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM", GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM );
      #endif
      #if defined( GL_LUMINANCE_ALPHA8I_EXT )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA8I_EXT", GL_LUMINANCE_ALPHA8I_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT", GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_STRIDE", GL_TEXTURE_COORD_ARRAY_STRIDE );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT", GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT );
      #endif
      #if defined( GL_Q )
        ADD_CONST_INT( "GL_Q", GL_Q );
      #endif
      #if defined( GL_R )
        ADD_CONST_INT( "GL_R", GL_R );
      #endif
      #if defined( GL_S )
        ADD_CONST_INT( "GL_S", GL_S );
      #endif
      #if defined( GL_T )
        ADD_CONST_INT( "GL_T", GL_T );
      #endif
      #if defined( GL_DOUBLE )
        ADD_CONST_INT( "GL_DOUBLE", GL_DOUBLE );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB15_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB15_4_NV", GL_MAP2_VERTEX_ATTRIB15_4_NV );
      #endif
      #if defined( GLX_SCREEN_EXT )
        ADD_CONST_INT( "GLX_SCREEN_EXT", GLX_SCREEN_EXT );
      #endif
      #if defined( GL_EXT_separate_specular_color )
        ADD_CONST_INT( "GL_EXT_separate_specular_color", GL_EXT_separate_specular_color );
      #endif
      #if defined( GL_MATRIX26_ARB )
        ADD_CONST_INT( "GL_MATRIX26_ARB", GL_MATRIX26_ARB );
      #endif
      #if defined( GLX_BIND_TO_TEXTURE_RGBA_EXT )
        ADD_CONST_INT( "GLX_BIND_TO_TEXTURE_RGBA_EXT", GLX_BIND_TO_TEXTURE_RGBA_EXT );
      #endif
      #if defined( GL_PROGRAM_RESIDENT_NV )
        ADD_CONST_INT( "GL_PROGRAM_RESIDENT_NV", GL_PROGRAM_RESIDENT_NV );
      #endif
      #if defined( GL_4PASS_3_EXT )
        ADD_CONST_INT( "GL_4PASS_3_EXT", GL_4PASS_3_EXT );
      #endif
      #if defined( GLEW_EXT_secondary_color )
        ADD_CONST_INT( "GLEW_EXT_secondary_color", GLEW_EXT_secondary_color );
      #endif
      #if defined( GL_OP_RECIP_SQRT_EXT )
        ADD_CONST_INT( "GL_OP_RECIP_SQRT_EXT", GL_OP_RECIP_SQRT_EXT );
      #endif
      #if defined( GL_EXT_texture_env_combine )
        ADD_CONST_INT( "GL_EXT_texture_env_combine", GL_EXT_texture_env_combine );
      #endif
      #if defined( GL_MAX_SAMPLES )
        ADD_CONST_INT( "GL_MAX_SAMPLES", GL_MAX_SAMPLES );
      #endif
      #if defined( GL_MAX_TEXTURE_UNITS_ARB )
        ADD_CONST_INT( "GL_MAX_TEXTURE_UNITS_ARB", GL_MAX_TEXTURE_UNITS_ARB );
      #endif
      #if defined( GL_VARIABLE_C_NV )
        ADD_CONST_INT( "GL_VARIABLE_C_NV", GL_VARIABLE_C_NV );
      #endif
      #if defined( GL_UNSIGNED_INT_8_8_S8_S8_REV_NV )
        ADD_CONST_INT( "GL_UNSIGNED_INT_8_8_S8_S8_REV_NV", GL_UNSIGNED_INT_8_8_S8_S8_REV_NV );
      #endif
      #if defined( GL_NOOP )
        ADD_CONST_INT( "GL_NOOP", GL_NOOP );
      #endif
      #if defined( GL_POINT_DISTANCE_ATTENUATION_ARB )
        ADD_CONST_INT( "GL_POINT_DISTANCE_ATTENUATION_ARB", GL_POINT_DISTANCE_ATTENUATION_ARB );
      #endif
      #if defined( GL_CONTEXT_FLAGS )
        ADD_CONST_INT( "GL_CONTEXT_FLAGS", GL_CONTEXT_FLAGS );
      #endif
      #if defined( GL_PROGRAM_LENGTH_NV )
        ADD_CONST_INT( "GL_PROGRAM_LENGTH_NV", GL_PROGRAM_LENGTH_NV );
      #endif
      #if defined( GL_TEXCOORD3_BIT_PGI )
        ADD_CONST_INT( "GL_TEXCOORD3_BIT_PGI", GL_TEXCOORD3_BIT_PGI );
      #endif
      #if defined( GL_BLEND_DST_RGB_EXT )
        ADD_CONST_INT( "GL_BLEND_DST_RGB_EXT", GL_BLEND_DST_RGB_EXT );
      #endif
      #if defined( GL_INTENSITY16_SNORM )
        ADD_CONST_INT( "GL_INTENSITY16_SNORM", GL_INTENSITY16_SNORM );
      #endif
      #if defined( GL_MATRIX24_ARB )
        ADD_CONST_INT( "GL_MATRIX24_ARB", GL_MATRIX24_ARB );
      #endif
      #if defined( GL_DRAW_BUFFER14_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER14_ARB", GL_DRAW_BUFFER14_ARB );
      #endif
      #if defined( GL_PALETTE4_RGB5_A1_OES )
        ADD_CONST_INT( "GL_PALETTE4_RGB5_A1_OES", GL_PALETTE4_RGB5_A1_OES );
      #endif
      #if defined( GL_PROJECTION_MATRIX )
        ADD_CONST_INT( "GL_PROJECTION_MATRIX", GL_PROJECTION_MATRIX );
      #endif
      #if defined( GL_POINT_SIZE_MAX )
        ADD_CONST_INT( "GL_POINT_SIZE_MAX", GL_POINT_SIZE_MAX );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_GREEN_SCALE )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_GREEN_SCALE", GL_POST_COLOR_MATRIX_GREEN_SCALE );
      #endif
      #if defined( GL_MODELVIEW_MATRIX )
        ADD_CONST_INT( "GL_MODELVIEW_MATRIX", GL_MODELVIEW_MATRIX );
      #endif
      #if defined( GL_QUERY_WAIT )
        ADD_CONST_INT( "GL_QUERY_WAIT", GL_QUERY_WAIT );
      #endif
      #if defined( GL_RED_SCALE )
        ADD_CONST_INT( "GL_RED_SCALE", GL_RED_SCALE );
      #endif
      #if defined( GL_TEXTURE15_ARB )
        ADD_CONST_INT( "GL_TEXTURE15_ARB", GL_TEXTURE15_ARB );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD2_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD2_EXT", GL_OUTPUT_TEXTURE_COORD2_EXT );
      #endif
      #if defined( GL_VERTEX_SHADER_LOCALS_EXT )
        ADD_CONST_INT( "GL_VERTEX_SHADER_LOCALS_EXT", GL_VERTEX_SHADER_LOCALS_EXT );
      #endif
      #if defined( GL_DEPTH_COMPONENT16_SGIX )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT16_SGIX", GL_DEPTH_COMPONENT16_SGIX );
      #endif
      #if defined( GL_LO_SCALE_NV )
        ADD_CONST_INT( "GL_LO_SCALE_NV", GL_LO_SCALE_NV );
      #endif
      #if defined( GLX_COLOR_INDEX_BIT_SGIX )
        ADD_CONST_INT( "GLX_COLOR_INDEX_BIT_SGIX", GLX_COLOR_INDEX_BIT_SGIX );
      #endif
      #if defined( GL_NATIVE_GRAPHICS_HANDLE_PGI )
        ADD_CONST_INT( "GL_NATIVE_GRAPHICS_HANDLE_PGI", GL_NATIVE_GRAPHICS_HANDLE_PGI );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB", GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB );
      #endif
      #if defined( GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB", GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB );
      #endif
      #if defined( GL_MAX_TEXTURE_LOD_BIAS )
        ADD_CONST_INT( "GL_MAX_TEXTURE_LOD_BIAS", GL_MAX_TEXTURE_LOD_BIAS );
      #endif
      #if defined( GL_ALIASED_LINE_WIDTH_RANGE )
        ADD_CONST_INT( "GL_ALIASED_LINE_WIDTH_RANGE", GL_ALIASED_LINE_WIDTH_RANGE );
      #endif
      #if defined( GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT )
        ADD_CONST_INT( "GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT", GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT );
      #endif
      #if defined( GLEW_EXT_scene_marker )
        ADD_CONST_INT( "GLEW_EXT_scene_marker", GLEW_EXT_scene_marker );
      #endif
      #if defined( GL_EXT_light_texture )
        ADD_CONST_INT( "GL_EXT_light_texture", GL_EXT_light_texture );
      #endif
      #if defined( GL_FRAGMENT_MATERIAL_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_MATERIAL_EXT", GL_FRAGMENT_MATERIAL_EXT );
      #endif
      #if defined( GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV", GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV );
      #endif
      #if defined( GL_HISTOGRAM_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_EXT", GL_HISTOGRAM_EXT );
      #endif
      #if defined( GL_MAX_COLOR_ATTACHMENTS_EXT )
        ADD_CONST_INT( "GL_MAX_COLOR_ATTACHMENTS_EXT", GL_MAX_COLOR_ATTACHMENTS_EXT );
      #endif
      #if defined( GL_BGRA )
        ADD_CONST_INT( "GL_BGRA", GL_BGRA );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_2D_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_2D_EXT", GL_UNSIGNED_INT_SAMPLER_2D_EXT );
      #endif
      #if defined( GL_RENDERBUFFER_WIDTH_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_WIDTH_EXT", GL_RENDERBUFFER_WIDTH_EXT );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_RED_BIAS )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_RED_BIAS", GL_POST_COLOR_MATRIX_RED_BIAS );
      #endif
      #if defined( GL_CURRENT_MATRIX_ARB )
        ADD_CONST_INT( "GL_CURRENT_MATRIX_ARB", GL_CURRENT_MATRIX_ARB );
      #endif
      #if defined( GL_STREAM_READ_ARB )
        ADD_CONST_INT( "GL_STREAM_READ_ARB", GL_STREAM_READ_ARB );
      #endif
      #if defined( GL_TEXTURE_FREE_MEMORY_ATI )
        ADD_CONST_INT( "GL_TEXTURE_FREE_MEMORY_ATI", GL_TEXTURE_FREE_MEMORY_ATI );
      #endif
      #if defined( GL_POINT )
        ADD_CONST_INT( "GL_POINT", GL_POINT );
      #endif
      #if defined( GL_ALPHA16UI_EXT )
        ADD_CONST_INT( "GL_ALPHA16UI_EXT", GL_ALPHA16UI_EXT );
      #endif
      #if defined( GL_WEIGHT_SUM_UNITY_ARB )
        ADD_CONST_INT( "GL_WEIGHT_SUM_UNITY_ARB", GL_WEIGHT_SUM_UNITY_ARB );
      #endif
      #if defined( GL_RENDERBUFFER_HEIGHT_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_HEIGHT_EXT", GL_RENDERBUFFER_HEIGHT_EXT );
      #endif
      #if defined( GL_POLYGON_TOKEN )
        ADD_CONST_INT( "GL_POLYGON_TOKEN", GL_POLYGON_TOKEN );
      #endif
      #if defined( GL_SMOOTH_LINE_WIDTH_GRANULARITY )
        ADD_CONST_INT( "GL_SMOOTH_LINE_WIDTH_GRANULARITY", GL_SMOOTH_LINE_WIDTH_GRANULARITY );
      #endif
      #if defined( GL_COMPRESSED_RGBA_FXT1_3DFX )
        ADD_CONST_INT( "GL_COMPRESSED_RGBA_FXT1_3DFX", GL_COMPRESSED_RGBA_FXT1_3DFX );
      #endif
      #if defined( GLX_FRONT_LEFT_BUFFER_BIT_SGIX )
        ADD_CONST_INT( "GLX_FRONT_LEFT_BUFFER_BIT_SGIX", GLX_FRONT_LEFT_BUFFER_BIT_SGIX );
      #endif
      #if defined( GL_SRGB )
        ADD_CONST_INT( "GL_SRGB", GL_SRGB );
      #endif
      #if defined( GLX_TEXTURE_TARGET_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_TARGET_ATI", GLX_TEXTURE_TARGET_ATI );
      #endif
      #if defined( GL_COLOR_MATRIX_SGI )
        ADD_CONST_INT( "GL_COLOR_MATRIX_SGI", GL_COLOR_MATRIX_SGI );
      #endif
      #if defined( GL_ONE_MINUS_CONSTANT_COLOR )
        ADD_CONST_INT( "GL_ONE_MINUS_CONSTANT_COLOR", GL_ONE_MINUS_CONSTANT_COLOR );
      #endif
      #if defined( GL_UNSIGNED_INT_8_8_8_8 )
        ADD_CONST_INT( "GL_UNSIGNED_INT_8_8_8_8", GL_UNSIGNED_INT_8_8_8_8 );
      #endif
      #if defined( GL_MAX_TESS_CONTROL_INPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS", GL_MAX_TESS_CONTROL_INPUT_COMPONENTS );
      #endif
      #if defined( GLEW_EXT_texture_cube_map )
        ADD_CONST_INT( "GLEW_EXT_texture_cube_map", GLEW_EXT_texture_cube_map );
      #endif
      #if defined( GL_REPLACE_MIDDLE_SUN )
        ADD_CONST_INT( "GL_REPLACE_MIDDLE_SUN", GL_REPLACE_MIDDLE_SUN );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_2D_RECT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_2D_RECT", GL_UNSIGNED_INT_SAMPLER_2D_RECT );
      #endif
      #if defined( GL_EXT_texture_swizzle )
        ADD_CONST_INT( "GL_EXT_texture_swizzle", GL_EXT_texture_swizzle );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_POINTER_EXT", GL_FOG_COORDINATE_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_PALETTE4_R5_G6_B5_OES )
        ADD_CONST_INT( "GL_PALETTE4_R5_G6_B5_OES", GL_PALETTE4_R5_G6_B5_OES );
      #endif
      #if defined( GL_BINORMAL_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_BINORMAL_ARRAY_POINTER_EXT", GL_BINORMAL_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_UNSIGNED_SHORT_8_8_MESA )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_8_8_MESA", GL_UNSIGNED_SHORT_8_8_MESA );
      #endif
      #if defined( GL_LUMINANCE_ALPHA16UI_EXT )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA16UI_EXT", GL_LUMINANCE_ALPHA16UI_EXT );
      #endif
      #if defined( GLX_TRANSPARENT_RGB_EXT )
        ADD_CONST_INT( "GLX_TRANSPARENT_RGB_EXT", GLX_TRANSPARENT_RGB_EXT );
      #endif
      #if defined( GL_3DFX_tbuffer )
        ADD_CONST_INT( "GL_3DFX_tbuffer", GL_3DFX_tbuffer );
      #endif
      #if defined( GL_CONSTANT_EXT )
        ADD_CONST_INT( "GL_CONSTANT_EXT", GL_CONSTANT_EXT );
      #endif
      #if defined( GL_PALETTE8_RGB8_OES )
        ADD_CONST_INT( "GL_PALETTE8_RGB8_OES", GL_PALETTE8_RGB8_OES );
      #endif
      #if defined( GL_MUL_ATI )
        ADD_CONST_INT( "GL_MUL_ATI", GL_MUL_ATI );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME );
      #endif
      #if defined( GL_TEXTURE_BINDING_CUBE_MAP_ARRAY )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY", GL_TEXTURE_BINDING_CUBE_MAP_ARRAY );
      #endif
      #if defined( GL_BLEND_SRC_ALPHA )
        ADD_CONST_INT( "GL_BLEND_SRC_ALPHA", GL_BLEND_SRC_ALPHA );
      #endif
      #if defined( GL_INTERPOLATE_EXT )
        ADD_CONST_INT( "GL_INTERPOLATE_EXT", GL_INTERPOLATE_EXT );
      #endif
      #if defined( GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX )
        ADD_CONST_INT( "GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX", GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX );
      #endif
      #if defined( GL_AND_REVERSE )
        ADD_CONST_INT( "GL_AND_REVERSE", GL_AND_REVERSE );
      #endif
      #if defined( GL_MAX_INTEGER_SAMPLES )
        ADD_CONST_INT( "GL_MAX_INTEGER_SAMPLES", GL_MAX_INTEGER_SAMPLES );
      #endif
      #if defined( GL_HISTOGRAM_GREEN_SIZE_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_GREEN_SIZE_EXT", GL_HISTOGRAM_GREEN_SIZE_EXT );
      #endif
      #if defined( GL_VIEWPORT_INDEX_PROVOKING_VERTEX )
        ADD_CONST_INT( "GL_VIEWPORT_INDEX_PROVOKING_VERTEX", GL_VIEWPORT_INDEX_PROVOKING_VERTEX );
      #endif
      #if defined( GL_CLAMP_FRAGMENT_COLOR )
        ADD_CONST_INT( "GL_CLAMP_FRAGMENT_COLOR", GL_CLAMP_FRAGMENT_COLOR );
      #endif
      #if defined( GL_QUERY_RESULT_AVAILABLE )
        ADD_CONST_INT( "GL_QUERY_RESULT_AVAILABLE", GL_QUERY_RESULT_AVAILABLE );
      #endif
      #if defined( GL_FORMAT_SUBSAMPLE_24_24_OML )
        ADD_CONST_INT( "GL_FORMAT_SUBSAMPLE_24_24_OML", GL_FORMAT_SUBSAMPLE_24_24_OML );
      #endif
      #if defined( GL_TEXTURE_RED_TYPE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_RED_TYPE_ARB", GL_TEXTURE_RED_TYPE_ARB );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT", GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT );
      #endif
      #if defined( GL_FOG_MODE )
        ADD_CONST_INT( "GL_FOG_MODE", GL_FOG_MODE );
      #endif
      #if defined( GL_RGBA8_SNORM )
        ADD_CONST_INT( "GL_RGBA8_SNORM", GL_RGBA8_SNORM );
      #endif
      #if defined( GL_CLAMP_TO_EDGE_SGIS )
        ADD_CONST_INT( "GL_CLAMP_TO_EDGE_SGIS", GL_CLAMP_TO_EDGE_SGIS );
      #endif
      #if defined( GL_COLOR3_BIT_PGI )
        ADD_CONST_INT( "GL_COLOR3_BIT_PGI", GL_COLOR3_BIT_PGI );
      #endif
      #if defined( GL_INT_SAMPLER_3D )
        ADD_CONST_INT( "GL_INT_SAMPLER_3D", GL_INT_SAMPLER_3D );
      #endif
      #if defined( GL_BUMP_TEX_UNITS_ATI )
        ADD_CONST_INT( "GL_BUMP_TEX_UNITS_ATI", GL_BUMP_TEX_UNITS_ATI );
      #endif
      #if defined( GLX_BACK_LEFT_ATI )
        ADD_CONST_INT( "GLX_BACK_LEFT_ATI", GLX_BACK_LEFT_ATI );
      #endif
      #if defined( GL_OBJECT_ACTIVE_ATTRIBUTES_ARB )
        ADD_CONST_INT( "GL_OBJECT_ACTIVE_ATTRIBUTES_ARB", GL_OBJECT_ACTIVE_ATTRIBUTES_ARB );
      #endif
      #if defined( GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT )
        ADD_CONST_INT( "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT", GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT );
      #endif
      #if defined( GL_AND )
        ADD_CONST_INT( "GL_AND", GL_AND );
      #endif
      #if defined( GL_ACTIVE_PROGRAM_EXT )
        ADD_CONST_INT( "GL_ACTIVE_PROGRAM_EXT", GL_ACTIVE_PROGRAM_EXT );
      #endif
      #if defined( GL_INDEX_MODE )
        ADD_CONST_INT( "GL_INDEX_MODE", GL_INDEX_MODE );
      #endif
      #if defined( GL_BLUE_MIN_CLAMP_INGR )
        ADD_CONST_INT( "GL_BLUE_MIN_CLAMP_INGR", GL_BLUE_MIN_CLAMP_INGR );
      #endif
      #if defined( GL_PASS_THROUGH_NV )
        ADD_CONST_INT( "GL_PASS_THROUGH_NV", GL_PASS_THROUGH_NV );
      #endif
      #if defined( GL_ACCUM_GREEN_BITS )
        ADD_CONST_INT( "GL_ACCUM_GREEN_BITS", GL_ACCUM_GREEN_BITS );
      #endif
      #if defined( GL_LINE_STRIP_ADJACENCY_EXT )
        ADD_CONST_INT( "GL_LINE_STRIP_ADJACENCY_EXT", GL_LINE_STRIP_ADJACENCY_EXT );
      #endif
      #if defined( GLX_TEXTURE_FORMAT_RGB_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_FORMAT_RGB_EXT", GLX_TEXTURE_FORMAT_RGB_EXT );
      #endif
      #if defined( GL_INT_SAMPLER_1D_ARRAY_EXT )
        ADD_CONST_INT( "GL_INT_SAMPLER_1D_ARRAY_EXT", GL_INT_SAMPLER_1D_ARRAY_EXT );
      #endif
      #if defined( GL_STATIC_COPY )
        ADD_CONST_INT( "GL_STATIC_COPY", GL_STATIC_COPY );
      #endif
      #if defined( GL_FOG_COORD_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_FOG_COORD_ARRAY_ADDRESS_NV", GL_FOG_COORD_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GL_3_BYTES )
        ADD_CONST_INT( "GL_3_BYTES", GL_3_BYTES );
      #endif
      #if defined( GL_COORD_REPLACE_ARB )
        ADD_CONST_INT( "GL_COORD_REPLACE_ARB", GL_COORD_REPLACE_ARB );
      #endif
      #if defined( GL_EXT_blend_logic_op )
        ADD_CONST_INT( "GL_EXT_blend_logic_op", GL_EXT_blend_logic_op );
      #endif
      #if defined( GL_COMPRESSED_RED_GREEN_RGTC2_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_RED_GREEN_RGTC2_EXT", GL_COMPRESSED_RED_GREEN_RGTC2_EXT );
      #endif
      #if defined( GL_SAMPLER_2D_SHADOW_ARB )
        ADD_CONST_INT( "GL_SAMPLER_2D_SHADOW_ARB", GL_SAMPLER_2D_SHADOW_ARB );
      #endif
      #if defined( GL_ELEMENT_ARRAY_TYPE_ATI )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_TYPE_ATI", GL_ELEMENT_ARRAY_TYPE_ATI );
      #endif
      #if defined( GL_ONE_MINUS_DST_ALPHA )
        ADD_CONST_INT( "GL_ONE_MINUS_DST_ALPHA", GL_ONE_MINUS_DST_ALPHA );
      #endif
      #if defined( GL_COMPRESSED_RGB_S3TC_DXT1_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_RGB_S3TC_DXT1_EXT", GL_COMPRESSED_RGB_S3TC_DXT1_EXT );
      #endif
      #if defined( GL_RESAMPLE_AVERAGE_OML )
        ADD_CONST_INT( "GL_RESAMPLE_AVERAGE_OML", GL_RESAMPLE_AVERAGE_OML );
      #endif
      #if defined( GL_EXT_texture_compression_rgtc )
        ADD_CONST_INT( "GL_EXT_texture_compression_rgtc", GL_EXT_texture_compression_rgtc );
      #endif
      #if defined( GL_TEXTURE_SHARED_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_SHARED_SIZE_EXT", GL_TEXTURE_SHARED_SIZE_EXT );
      #endif
      #if defined( GL_SYNC_GPU_COMMANDS_COMPLETE )
        ADD_CONST_INT( "GL_SYNC_GPU_COMMANDS_COMPLETE", GL_SYNC_GPU_COMMANDS_COMPLETE );
      #endif
      #if defined( GL_SMOOTH_POINT_SIZE_RANGE )
        ADD_CONST_INT( "GL_SMOOTH_POINT_SIZE_RANGE", GL_SMOOTH_POINT_SIZE_RANGE );
      #endif
      #if defined( GL_MODELVIEW19_ARB )
        ADD_CONST_INT( "GL_MODELVIEW19_ARB", GL_MODELVIEW19_ARB );
      #endif
      #if defined( GL_ALPHA_FLOAT16_ATI )
        ADD_CONST_INT( "GL_ALPHA_FLOAT16_ATI", GL_ALPHA_FLOAT16_ATI );
      #endif
      #if defined( GL_ALIASED_POINT_SIZE_RANGE )
        ADD_CONST_INT( "GL_ALIASED_POINT_SIZE_RANGE", GL_ALIASED_POINT_SIZE_RANGE );
      #endif
      #if defined( GLXEW_OML_swap_method )
        ADD_CONST_INT( "GLXEW_OML_swap_method", GLXEW_OML_swap_method );
      #endif
      #if defined( GL_COMPRESSED_SRGB_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB_EXT", GL_COMPRESSED_SRGB_EXT );
      #endif
      #if defined( GLEW_EXT_color_subtable )
        ADD_CONST_INT( "GLEW_EXT_color_subtable", GLEW_EXT_color_subtable );
      #endif
      #if defined( GL_2X_BIT_ATI )
        ADD_CONST_INT( "GL_2X_BIT_ATI", GL_2X_BIT_ATI );
      #endif
      #if defined( GL_EXT_fragment_lighting )
        ADD_CONST_INT( "GL_EXT_fragment_lighting", GL_EXT_fragment_lighting );
      #endif
      #if defined( GL_POINT_SPRITE_CULL_MODE_ATIX )
        ADD_CONST_INT( "GL_POINT_SPRITE_CULL_MODE_ATIX", GL_POINT_SPRITE_CULL_MODE_ATIX );
      #endif
      #if defined( GLX_BLENDED_RGBA_SGIS )
        ADD_CONST_INT( "GLX_BLENDED_RGBA_SGIS", GLX_BLENDED_RGBA_SGIS );
      #endif
      #if defined( GL_NEGATIVE_X_EXT )
        ADD_CONST_INT( "GL_NEGATIVE_X_EXT", GL_NEGATIVE_X_EXT );
      #endif
      #if defined( GLX_AUX2_ATI )
        ADD_CONST_INT( "GLX_AUX2_ATI", GLX_AUX2_ATI );
      #endif
      #if defined( GL_MAX_TEXTURE_IMAGE_UNITS_NV )
        ADD_CONST_INT( "GL_MAX_TEXTURE_IMAGE_UNITS_NV", GL_MAX_TEXTURE_IMAGE_UNITS_NV );
      #endif
      #if defined( GL_MODULATE_SIGNED_ADD_ATIX )
        ADD_CONST_INT( "GL_MODULATE_SIGNED_ADD_ATIX", GL_MODULATE_SIGNED_ADD_ATIX );
      #endif
      #if defined( GL_SCISSOR_BIT )
        ADD_CONST_INT( "GL_SCISSOR_BIT", GL_SCISSOR_BIT );
      #endif
      #if defined( GLX_PRESERVED_CONTENTS )
        ADD_CONST_INT( "GLX_PRESERVED_CONTENTS", GLX_PRESERVED_CONTENTS );
      #endif
      #if defined( GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV", GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV );
      #endif
      #if defined( GL_ALPHA_MAX_SGIX )
        ADD_CONST_INT( "GL_ALPHA_MAX_SGIX", GL_ALPHA_MAX_SGIX );
      #endif
      #if defined( GL_GEOMETRY_VERTICES_OUT_EXT )
        ADD_CONST_INT( "GL_GEOMETRY_VERTICES_OUT_EXT", GL_GEOMETRY_VERTICES_OUT_EXT );
      #endif
      #if defined( GL_MAX_GEOMETRY_OUTPUT_VERTICES )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_OUTPUT_VERTICES", GL_MAX_GEOMETRY_OUTPUT_VERTICES );
      #endif
      #if defined( GL_TRANSPOSE_NV )
        ADD_CONST_INT( "GL_TRANSPOSE_NV", GL_TRANSPOSE_NV );
      #endif
      #if defined( GL_MATRIX15_ARB )
        ADD_CONST_INT( "GL_MATRIX15_ARB", GL_MATRIX15_ARB );
      #endif
      #if defined( GL_ACTIVE_UNIFORM_MAX_LENGTH )
        ADD_CONST_INT( "GL_ACTIVE_UNIFORM_MAX_LENGTH", GL_ACTIVE_UNIFORM_MAX_LENGTH );
      #endif
      #if defined( GL_VIDEO_COLOR_CONVERSION_OFFSET_NV )
        ADD_CONST_INT( "GL_VIDEO_COLOR_CONVERSION_OFFSET_NV", GL_VIDEO_COLOR_CONVERSION_OFFSET_NV );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT", GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT );
      #endif
      #if defined( GL_MODELVIEW29_ARB )
        ADD_CONST_INT( "GL_MODELVIEW29_ARB", GL_MODELVIEW29_ARB );
      #endif
      #if defined( GL_DRAW_BUFFER12_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER12_ATI", GL_DRAW_BUFFER12_ATI );
      #endif
      #if defined( GL_MATRIX_INDEX_ARRAY_ARB )
        ADD_CONST_INT( "GL_MATRIX_INDEX_ARRAY_ARB", GL_MATRIX_INDEX_ARRAY_ARB );
      #endif
      #if defined( GL_PERTURB_EXT )
        ADD_CONST_INT( "GL_PERTURB_EXT", GL_PERTURB_EXT );
      #endif
      #if defined( GL_TEXTURE1_ARB )
        ADD_CONST_INT( "GL_TEXTURE1_ARB", GL_TEXTURE1_ARB );
      #endif
      #if defined( GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB )
        ADD_CONST_INT( "GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB", GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB );
      #endif
      #if defined( GL_FLOAT_CLEAR_COLOR_VALUE_NV )
        ADD_CONST_INT( "GL_FLOAT_CLEAR_COLOR_VALUE_NV", GL_FLOAT_CLEAR_COLOR_VALUE_NV );
      #endif
      #if defined( GL_TANGENT_ARRAY_EXT )
        ADD_CONST_INT( "GL_TANGENT_ARRAY_EXT", GL_TANGENT_ARRAY_EXT );
      #endif
      #if defined( GL_IMPLEMENTATION_COLOR_READ_FORMAT )
        ADD_CONST_INT( "GL_IMPLEMENTATION_COLOR_READ_FORMAT", GL_IMPLEMENTATION_COLOR_READ_FORMAT );
      #endif
      #if defined( GL_MAX_PROGRAM_ENV_PARAMETERS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_ENV_PARAMETERS_ARB", GL_MAX_PROGRAM_ENV_PARAMETERS_ARB );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB10_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB10_4_NV", GL_MAP2_VERTEX_ATTRIB10_4_NV );
      #endif
      #if defined( GL_MAX_SPOT_EXPONENT_NV )
        ADD_CONST_INT( "GL_MAX_SPOT_EXPONENT_NV", GL_MAX_SPOT_EXPONENT_NV );
      #endif
      #if defined( GL_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_ARRAY_BUFFER_BINDING_ARB", GL_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_COLOR_TABLE_BIAS )
        ADD_CONST_INT( "GL_COLOR_TABLE_BIAS", GL_COLOR_TABLE_BIAS );
      #endif
      #if defined( GL_FEEDBACK_BUFFER_SIZE )
        ADD_CONST_INT( "GL_FEEDBACK_BUFFER_SIZE", GL_FEEDBACK_BUFFER_SIZE );
      #endif
      #if defined( GL_VARIANT_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_VARIANT_ARRAY_TYPE_EXT", GL_VARIANT_ARRAY_TYPE_EXT );
      #endif
      #if defined( GLEW_EXT_texture_array )
        ADD_CONST_INT( "GLEW_EXT_texture_array", GLEW_EXT_texture_array );
      #endif
      #if defined( GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV )
        ADD_CONST_INT( "GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV", GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV );
      #endif
      #if defined( GL_DEPTH_STENCIL_NV )
        ADD_CONST_INT( "GL_DEPTH_STENCIL_NV", GL_DEPTH_STENCIL_NV );
      #endif
      #if defined( GL_COMPRESSED_TEXTURE_FORMATS )
        ADD_CONST_INT( "GL_COMPRESSED_TEXTURE_FORMATS", GL_COMPRESSED_TEXTURE_FORMATS );
      #endif
      #if defined( GL_PERFMON_RESULT_SIZE_AMD )
        ADD_CONST_INT( "GL_PERFMON_RESULT_SIZE_AMD", GL_PERFMON_RESULT_SIZE_AMD );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY", GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY );
      #endif
      #if defined( GLX_FRONT_LEFT_ATI )
        ADD_CONST_INT( "GLX_FRONT_LEFT_ATI", GLX_FRONT_LEFT_ATI );
      #endif
      #if defined( GL_MODULATE_SIGNED_ADD_ATI )
        ADD_CONST_INT( "GL_MODULATE_SIGNED_ADD_ATI", GL_MODULATE_SIGNED_ADD_ATI );
      #endif
      #if defined( GL_PIXEL_COUNT_AVAILABLE_NV )
        ADD_CONST_INT( "GL_PIXEL_COUNT_AVAILABLE_NV", GL_PIXEL_COUNT_AVAILABLE_NV );
      #endif
      #if defined( GL_SAMPLE_COUNT_NV )
        ADD_CONST_INT( "GL_SAMPLE_COUNT_NV", GL_SAMPLE_COUNT_NV );
      #endif
      #if defined( GL_DEPTH_COMPONENT24_ARB )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT24_ARB", GL_DEPTH_COMPONENT24_ARB );
      #endif
      #if defined( GL_MAT_COLOR_INDEXES_BIT_PGI )
        ADD_CONST_INT( "GL_MAT_COLOR_INDEXES_BIT_PGI", GL_MAT_COLOR_INDEXES_BIT_PGI );
      #endif
      #if defined( GL_PRIMITIVES_GENERATED_EXT )
        ADD_CONST_INT( "GL_PRIMITIVES_GENERATED_EXT", GL_PRIMITIVES_GENERATED_EXT );
      #endif
      #if defined( GL_RENDERBUFFER_STENCIL_SIZE_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_STENCIL_SIZE_EXT", GL_RENDERBUFFER_STENCIL_SIZE_EXT );
      #endif
      #if defined( GL_FLOAT_R_NV )
        ADD_CONST_INT( "GL_FLOAT_R_NV", GL_FLOAT_R_NV );
      #endif
      #if defined( GL_MAX_PIXEL_MAP_TABLE )
        ADD_CONST_INT( "GL_MAX_PIXEL_MAP_TABLE", GL_MAX_PIXEL_MAP_TABLE );
      #endif
      #if defined( GL_TEXTURE25 )
        ADD_CONST_INT( "GL_TEXTURE25", GL_TEXTURE25 );
      #endif
      #if defined( GL_STENCIL_INDEX1_EXT )
        ADD_CONST_INT( "GL_STENCIL_INDEX1_EXT", GL_STENCIL_INDEX1_EXT );
      #endif
      #if defined( GL_SAMPLER_2D_RECT_SHADOW )
        ADD_CONST_INT( "GL_SAMPLER_2D_RECT_SHADOW", GL_SAMPLER_2D_RECT_SHADOW );
      #endif
      #if defined( GL_POINT_TOKEN )
        ADD_CONST_INT( "GL_POINT_TOKEN", GL_POINT_TOKEN );
      #endif
      #if defined( GL_T4F_C4F_N3F_V4F )
        ADD_CONST_INT( "GL_T4F_C4F_N3F_V4F", GL_T4F_C4F_N3F_V4F );
      #endif
      #if defined( GL_TEXTURE30 )
        ADD_CONST_INT( "GL_TEXTURE30", GL_TEXTURE30 );
      #endif
      #if defined( GL_TEXTURE31 )
        ADD_CONST_INT( "GL_TEXTURE31", GL_TEXTURE31 );
      #endif
      #if defined( GL_2PASS_0_SGIS )
        ADD_CONST_INT( "GL_2PASS_0_SGIS", GL_2PASS_0_SGIS );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_1D )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_1D", GL_UNSIGNED_INT_SAMPLER_1D );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY9_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY9_NV", GL_VERTEX_ATTRIB_ARRAY9_NV );
      #endif
      #if defined( GL_EXT_texture_compression_s3tc )
        ADD_CONST_INT( "GL_EXT_texture_compression_s3tc", GL_EXT_texture_compression_s3tc );
      #endif
      #if defined( GLX_PBUFFER_HEIGHT )
        ADD_CONST_INT( "GLX_PBUFFER_HEIGHT", GLX_PBUFFER_HEIGHT );
      #endif
      #if defined( GL_BACK_LEFT )
        ADD_CONST_INT( "GL_BACK_LEFT", GL_BACK_LEFT );
      #endif
      #if defined( GL_TEXTURE_ENV_COLOR )
        ADD_CONST_INT( "GL_TEXTURE_ENV_COLOR", GL_TEXTURE_ENV_COLOR );
      #endif
      #if defined( GL_BUFFER_MAP_POINTER )
        ADD_CONST_INT( "GL_BUFFER_MAP_POINTER", GL_BUFFER_MAP_POINTER );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB11_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB11_4_NV", GL_MAP1_VERTEX_ATTRIB11_4_NV );
      #endif
      #if defined( GL_LINE_SMOOTH )
        ADD_CONST_INT( "GL_LINE_SMOOTH", GL_LINE_SMOOTH );
      #endif
      #if defined( GL_MODELVIEW23_ARB )
        ADD_CONST_INT( "GL_MODELVIEW23_ARB", GL_MODELVIEW23_ARB );
      #endif
      #if defined( GL_TEXTURE_SWIZZLE_R_EXT )
        ADD_CONST_INT( "GL_TEXTURE_SWIZZLE_R_EXT", GL_TEXTURE_SWIZZLE_R_EXT );
      #endif
      #if defined( GL_STENCIL_ATTACHMENT_EXT )
        ADD_CONST_INT( "GL_STENCIL_ATTACHMENT_EXT", GL_STENCIL_ATTACHMENT_EXT );
      #endif
      #if defined( GL_INDEX_ARRAY_LIST_IBM )
        ADD_CONST_INT( "GL_INDEX_ARRAY_LIST_IBM", GL_INDEX_ARRAY_LIST_IBM );
      #endif
      #if defined( GL_STENCIL_REF )
        ADD_CONST_INT( "GL_STENCIL_REF", GL_STENCIL_REF );
      #endif
      #if defined( GL_LUMINANCE_ALPHA8UI_EXT )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA8UI_EXT", GL_LUMINANCE_ALPHA8UI_EXT );
      #endif
      #if defined( GL_NORMAL_MAP_EXT )
        ADD_CONST_INT( "GL_NORMAL_MAP_EXT", GL_NORMAL_MAP_EXT );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB", GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_ALWAYS_FAST_HINT_PGI )
        ADD_CONST_INT( "GL_ALWAYS_FAST_HINT_PGI", GL_ALWAYS_FAST_HINT_PGI );
      #endif
      #if defined( GL_MULTISAMPLE_BIT_ARB )
        ADD_CONST_INT( "GL_MULTISAMPLE_BIT_ARB", GL_MULTISAMPLE_BIT_ARB );
      #endif
      #if defined( GL_COPY_WRITE_BUFFER )
        ADD_CONST_INT( "GL_COPY_WRITE_BUFFER", GL_COPY_WRITE_BUFFER );
      #endif
      #if defined( GLEW_EXT_stencil_clear_tag )
        ADD_CONST_INT( "GLEW_EXT_stencil_clear_tag", GLEW_EXT_stencil_clear_tag );
      #endif
      #if defined( GL_INDEX_ARRAY_COUNT_EXT )
        ADD_CONST_INT( "GL_INDEX_ARRAY_COUNT_EXT", GL_INDEX_ARRAY_COUNT_EXT );
      #endif
      #if defined( GL_FLOAT_RG_NV )
        ADD_CONST_INT( "GL_FLOAT_RG_NV", GL_FLOAT_RG_NV );
      #endif
      #if defined( GL_OPERAND0_RGB )
        ADD_CONST_INT( "GL_OPERAND0_RGB", GL_OPERAND0_RGB );
      #endif
      #if defined( GL_MAX_TEXTURE_BUFFER_SIZE_ARB )
        ADD_CONST_INT( "GL_MAX_TEXTURE_BUFFER_SIZE_ARB", GL_MAX_TEXTURE_BUFFER_SIZE_ARB );
      #endif
      #if defined( GL_EXT_texture_object )
        ADD_CONST_INT( "GL_EXT_texture_object", GL_EXT_texture_object );
      #endif
      #if defined( GL_DS_BIAS_NV )
        ADD_CONST_INT( "GL_DS_BIAS_NV", GL_DS_BIAS_NV );
      #endif
      #if defined( GL_LIGHT_MODEL_COLOR_CONTROL )
        ADD_CONST_INT( "GL_LIGHT_MODEL_COLOR_CONTROL", GL_LIGHT_MODEL_COLOR_CONTROL );
      #endif
      #if defined( GL_FEEDBACK )
        ADD_CONST_INT( "GL_FEEDBACK", GL_FEEDBACK );
      #endif
      #if defined( GLX_LARGEST_PBUFFER )
        ADD_CONST_INT( "GLX_LARGEST_PBUFFER", GLX_LARGEST_PBUFFER );
      #endif
      #if defined( GL_TEXCOORD1_BIT_PGI )
        ADD_CONST_INT( "GL_TEXCOORD1_BIT_PGI", GL_TEXCOORD1_BIT_PGI );
      #endif
      #if defined( GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB", GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_MAX_ATTRIB_STACK_DEPTH )
        ADD_CONST_INT( "GL_MAX_ATTRIB_STACK_DEPTH", GL_MAX_ATTRIB_STACK_DEPTH );
      #endif
      #if defined( GL_RGBA4_DXT5_S3TC )
        ADD_CONST_INT( "GL_RGBA4_DXT5_S3TC", GL_RGBA4_DXT5_S3TC );
      #endif
      #if defined( GL_EVAL_TRIANGULAR_2D_NV )
        ADD_CONST_INT( "GL_EVAL_TRIANGULAR_2D_NV", GL_EVAL_TRIANGULAR_2D_NV );
      #endif
      #if defined( GL_MODELVIEW13_ARB )
        ADD_CONST_INT( "GL_MODELVIEW13_ARB", GL_MODELVIEW13_ARB );
      #endif
      #if defined( GLX_NO_TEXTURE_ATI )
        ADD_CONST_INT( "GLX_NO_TEXTURE_ATI", GLX_NO_TEXTURE_ATI );
      #endif
      #if defined( GL_PROXY_TEXTURE_1D_ARRAY )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_1D_ARRAY", GL_PROXY_TEXTURE_1D_ARRAY );
      #endif
      #if defined( GLX_BIND_TO_TEXTURE_RGBA_ATI )
        ADD_CONST_INT( "GLX_BIND_TO_TEXTURE_RGBA_ATI", GLX_BIND_TO_TEXTURE_RGBA_ATI );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_G )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_G", GL_PIXEL_MAP_I_TO_G );
      #endif
      #if defined( GL_INTERLEAVED_ATTRIBS_EXT )
        ADD_CONST_INT( "GL_INTERLEAVED_ATTRIBS_EXT", GL_INTERLEAVED_ATTRIBS_EXT );
      #endif
      #if defined( GL_TEXTURE29_ARB )
        ADD_CONST_INT( "GL_TEXTURE29_ARB", GL_TEXTURE29_ARB );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_B )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_B", GL_PIXEL_MAP_I_TO_B );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_A )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_A", GL_PIXEL_MAP_I_TO_A );
      #endif
      #if defined( GL_EXT_packed_pixels )
        ADD_CONST_INT( "GL_EXT_packed_pixels", GL_EXT_packed_pixels );
      #endif
      #if defined( GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS )
        ADD_CONST_INT( "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS", GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_I )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_I", GL_PIXEL_MAP_I_TO_I );
      #endif
      #if defined( GL_STATIC_DRAW_ARB )
        ADD_CONST_INT( "GL_STATIC_DRAW_ARB", GL_STATIC_DRAW_ARB );
      #endif
      #if defined( GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV )
        ADD_CONST_INT( "GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV", GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV );
      #endif
      #if defined( GL_POINT_SPRITE_NV )
        ADD_CONST_INT( "GL_POINT_SPRITE_NV", GL_POINT_SPRITE_NV );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_R )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_R", GL_PIXEL_MAP_I_TO_R );
      #endif
      #if defined( GL_MAX_3D_TEXTURE_SIZE_EXT )
        ADD_CONST_INT( "GL_MAX_3D_TEXTURE_SIZE_EXT", GL_MAX_3D_TEXTURE_SIZE_EXT );
      #endif
      #if defined( GL_LINEAR_ATTENUATION )
        ADD_CONST_INT( "GL_LINEAR_ATTENUATION", GL_LINEAR_ATTENUATION );
      #endif
      #if defined( GL_VERTEX_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_POINTER_EXT", GL_VERTEX_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_TEXTURE_MIN_LOD_SGIS )
        ADD_CONST_INT( "GL_TEXTURE_MIN_LOD_SGIS", GL_TEXTURE_MIN_LOD_SGIS );
      #endif
      #if defined( GL_LIST_BIT )
        ADD_CONST_INT( "GL_LIST_BIT", GL_LIST_BIT );
      #endif
      #if defined( GL_OP_LOG_BASE_2_EXT )
        ADD_CONST_INT( "GL_OP_LOG_BASE_2_EXT", GL_OP_LOG_BASE_2_EXT );
      #endif
      #if defined( GL_SOURCE2_ALPHA_ARB )
        ADD_CONST_INT( "GL_SOURCE2_ALPHA_ARB", GL_SOURCE2_ALPHA_ARB );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_STRIDE", GL_EDGE_FLAG_ARRAY_STRIDE );
      #endif
      #if defined( GL_TEXTURE_MAG_FILTER )
        ADD_CONST_INT( "GL_TEXTURE_MAG_FILTER", GL_TEXTURE_MAG_FILTER );
      #endif
      #if defined( GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT )
        ADD_CONST_INT( "GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT", GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT );
      #endif
      #if defined( GL_CONVOLUTION_FILTER_BIAS )
        ADD_CONST_INT( "GL_CONVOLUTION_FILTER_BIAS", GL_CONVOLUTION_FILTER_BIAS );
      #endif
      #if defined( GL_LUMINANCE4_EXT )
        ADD_CONST_INT( "GL_LUMINANCE4_EXT", GL_LUMINANCE4_EXT );
      #endif
      #if defined( GL_COLOR_MATERIAL_FACE )
        ADD_CONST_INT( "GL_COLOR_MATERIAL_FACE", GL_COLOR_MATERIAL_FACE );
      #endif
      #if defined( GL_TEXTURE_LIGHT_EXT )
        ADD_CONST_INT( "GL_TEXTURE_LIGHT_EXT", GL_TEXTURE_LIGHT_EXT );
      #endif
      #if defined( GL_TEXTURE_RECTANGLE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_RECTANGLE_EXT", GL_TEXTURE_RECTANGLE_EXT );
      #endif
      #if defined( GL_PROGRAM_POINT_SIZE_ARB )
        ADD_CONST_INT( "GL_PROGRAM_POINT_SIZE_ARB", GL_PROGRAM_POINT_SIZE_ARB );
      #endif
      #if defined( GLX_TRANSPARENT_RED_VALUE_EXT )
        ADD_CONST_INT( "GLX_TRANSPARENT_RED_VALUE_EXT", GLX_TRANSPARENT_RED_VALUE_EXT );
      #endif
      #if defined( GLX_EXT_swap_control )
        ADD_CONST_INT( "GLX_EXT_swap_control", GLX_EXT_swap_control );
      #endif
      #if defined( GL_SAMPLER_CUBE )
        ADD_CONST_INT( "GL_SAMPLER_CUBE", GL_SAMPLER_CUBE );
      #endif
      #if defined( GL_EVAL_FRACTIONAL_TESSELLATION_NV )
        ADD_CONST_INT( "GL_EVAL_FRACTIONAL_TESSELLATION_NV", GL_EVAL_FRACTIONAL_TESSELLATION_NV );
      #endif
      #if defined( GL_OBJECT_ACTIVE_UNIFORMS_ARB )
        ADD_CONST_INT( "GL_OBJECT_ACTIVE_UNIFORMS_ARB", GL_OBJECT_ACTIVE_UNIFORMS_ARB );
      #endif
      #if defined( GL_RGBA_FLOAT32_ATI )
        ADD_CONST_INT( "GL_RGBA_FLOAT32_ATI", GL_RGBA_FLOAT32_ATI );
      #endif
      #if defined( GL_RGB_S3TC )
        ADD_CONST_INT( "GL_RGB_S3TC", GL_RGB_S3TC );
      #endif
      #if defined( GL_SIGNED_RGB8_NV )
        ADD_CONST_INT( "GL_SIGNED_RGB8_NV", GL_SIGNED_RGB8_NV );
      #endif
      #if defined( GL_TANGENT_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_TANGENT_ARRAY_STRIDE_EXT", GL_TANGENT_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_MAX_BLUE_SGIS )
        ADD_CONST_INT( "GL_MAX_BLUE_SGIS", GL_MAX_BLUE_SGIS );
      #endif
      #if defined( GL_LEFT )
        ADD_CONST_INT( "GL_LEFT", GL_LEFT );
      #endif
      #if defined( GLEW_EXT_texture_perturb_normal )
        ADD_CONST_INT( "GLEW_EXT_texture_perturb_normal", GLEW_EXT_texture_perturb_normal );
      #endif
      #if defined( GLX_BIND_TO_TEXTURE_RGB_EXT )
        ADD_CONST_INT( "GLX_BIND_TO_TEXTURE_RGB_EXT", GLX_BIND_TO_TEXTURE_RGB_EXT );
      #endif
      #if defined( GL_FLOAT_RGBA16_NV )
        ADD_CONST_INT( "GL_FLOAT_RGBA16_NV", GL_FLOAT_RGBA16_NV );
      #endif
      #if defined( GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB", GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_BLUE_BIAS )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_BLUE_BIAS", GL_POST_COLOR_MATRIX_BLUE_BIAS );
      #endif
      #if defined( GL_DEPTH24_STENCIL8_EXT )
        ADD_CONST_INT( "GL_DEPTH24_STENCIL8_EXT", GL_DEPTH24_STENCIL8_EXT );
      #endif
      #if defined( GL_MIRRORED_REPEAT_IBM )
        ADD_CONST_INT( "GL_MIRRORED_REPEAT_IBM", GL_MIRRORED_REPEAT_IBM );
      #endif
      #if defined( GL_COMPRESSED_SRGB_S3TC_DXT1_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB_S3TC_DXT1_EXT", GL_COMPRESSED_SRGB_S3TC_DXT1_EXT );
      #endif
      #if defined( GL_MIN_BLUE_SGIS )
        ADD_CONST_INT( "GL_MIN_BLUE_SGIS", GL_MIN_BLUE_SGIS );
      #endif
      #if defined( GL_PROXY_TEXTURE_3D_EXT )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_3D_EXT", GL_PROXY_TEXTURE_3D_EXT );
      #endif
      #if defined( GL_MATRIX4_ARB )
        ADD_CONST_INT( "GL_MATRIX4_ARB", GL_MATRIX4_ARB );
      #endif
      #if defined( GL_PROGRAM_NATIVE_ATTRIBS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_NATIVE_ATTRIBS_ARB", GL_PROGRAM_NATIVE_ATTRIBS_ARB );
      #endif
      #if defined( GLX_AUX6_EXT )
        ADD_CONST_INT( "GLX_AUX6_EXT", GLX_AUX6_EXT );
      #endif
      #if defined( GL_SIGNED_RGB_NV )
        ADD_CONST_INT( "GL_SIGNED_RGB_NV", GL_SIGNED_RGB_NV );
      #endif
      #if defined( GL_MINMAX )
        ADD_CONST_INT( "GL_MINMAX", GL_MINMAX );
      #endif
      #if defined( GL_MAX_TEXTURE_SIZE )
        ADD_CONST_INT( "GL_MAX_TEXTURE_SIZE", GL_MAX_TEXTURE_SIZE );
      #endif
      #if defined( GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV )
        ADD_CONST_INT( "GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV", GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV );
      #endif
      #if defined( GL_ALPHA8_SNORM )
        ADD_CONST_INT( "GL_ALPHA8_SNORM", GL_ALPHA8_SNORM );
      #endif
      #if defined( GL_ALPHA32F_ARB )
        ADD_CONST_INT( "GL_ALPHA32F_ARB", GL_ALPHA32F_ARB );
      #endif
      #if defined( GL_ARRAY_BUFFER )
        ADD_CONST_INT( "GL_ARRAY_BUFFER", GL_ARRAY_BUFFER );
      #endif
      #if defined( GL_COMPRESSED_ALPHA )
        ADD_CONST_INT( "GL_COMPRESSED_ALPHA", GL_COMPRESSED_ALPHA );
      #endif
      #if defined( GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT )
        ADD_CONST_INT( "GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT", GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT );
      #endif
      #if defined( GL_MAX_LIGHTS )
        ADD_CONST_INT( "GL_MAX_LIGHTS", GL_MAX_LIGHTS );
      #endif
      #if defined( GL_TEXTURE_COMPRESSED_IMAGE_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_COMPRESSED_IMAGE_SIZE", GL_TEXTURE_COMPRESSED_IMAGE_SIZE );
      #endif
      #if defined( GL_MODULATE_ADD_ATIX )
        ADD_CONST_INT( "GL_MODULATE_ADD_ATIX", GL_MODULATE_ADD_ATIX );
      #endif
      #if defined( GL_TEXTURE_1D )
        ADD_CONST_INT( "GL_TEXTURE_1D", GL_TEXTURE_1D );
      #endif
      #if defined( GL_MAX_VARYING_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_VARYING_COMPONENTS", GL_MAX_VARYING_COMPONENTS );
      #endif
      #if defined( GL_NAME_STACK_DEPTH )
        ADD_CONST_INT( "GL_NAME_STACK_DEPTH", GL_NAME_STACK_DEPTH );
      #endif
      #if defined( GL_BLEND_SRC_RGB )
        ADD_CONST_INT( "GL_BLEND_SRC_RGB", GL_BLEND_SRC_RGB );
      #endif
      #if defined( GL_MATRIX14_ARB )
        ADD_CONST_INT( "GL_MATRIX14_ARB", GL_MATRIX14_ARB );
      #endif
      #if defined( GL_MAX_SAMPLE_MASK_WORDS_NV )
        ADD_CONST_INT( "GL_MAX_SAMPLE_MASK_WORDS_NV", GL_MAX_SAMPLE_MASK_WORDS_NV );
      #endif
      #if defined( GL_ALPHA8I_EXT )
        ADD_CONST_INT( "GL_ALPHA8I_EXT", GL_ALPHA8I_EXT );
      #endif
      #if defined( GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS", GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_TRIANGLE_STRIP_ADJACENCY_EXT )
        ADD_CONST_INT( "GL_TRIANGLE_STRIP_ADJACENCY_EXT", GL_TRIANGLE_STRIP_ADJACENCY_EXT );
      #endif
      #if defined( GL_R1UI_T2F_C4F_N3F_V3F_SUN )
        ADD_CONST_INT( "GL_R1UI_T2F_C4F_N3F_V3F_SUN", GL_R1UI_T2F_C4F_N3F_V3F_SUN );
      #endif
      #if defined( GL_MATRIX12_ARB )
        ADD_CONST_INT( "GL_MATRIX12_ARB", GL_MATRIX12_ARB );
      #endif
      #if defined( GL_SAMPLE_ALPHA_TO_ONE )
        ADD_CONST_INT( "GL_SAMPLE_ALPHA_TO_ONE", GL_SAMPLE_ALPHA_TO_ONE );
      #endif
      #if defined( GL_WEIGHT_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_WEIGHT_ARRAY_BUFFER_BINDING", GL_WEIGHT_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GLXEW_VERSION_1_2 )
        ADD_CONST_INT( "GLXEW_VERSION_1_2", GLXEW_VERSION_1_2 );
      #endif
      #if defined( GL_PROGRAM_POINT_SIZE_EXT )
        ADD_CONST_INT( "GL_PROGRAM_POINT_SIZE_EXT", GL_PROGRAM_POINT_SIZE_EXT );
      #endif
      #if defined( GL_ALPHA_TEST )
        ADD_CONST_INT( "GL_ALPHA_TEST", GL_ALPHA_TEST );
      #endif
      #if defined( GL_CLAMP_FRAGMENT_COLOR_ARB )
        ADD_CONST_INT( "GL_CLAMP_FRAGMENT_COLOR_ARB", GL_CLAMP_FRAGMENT_COLOR_ARB );
      #endif
      #if defined( GL_ATTRIB_ARRAY_STRIDE_NV )
        ADD_CONST_INT( "GL_ATTRIB_ARRAY_STRIDE_NV", GL_ATTRIB_ARRAY_STRIDE_NV );
      #endif
      #if defined( GL_BACK_NORMALS_HINT_PGI )
        ADD_CONST_INT( "GL_BACK_NORMALS_HINT_PGI", GL_BACK_NORMALS_HINT_PGI );
      #endif
      #if defined( GL_EXT_clip_volume_hint )
        ADD_CONST_INT( "GL_EXT_clip_volume_hint", GL_EXT_clip_volume_hint );
      #endif
      #if defined( GL_UNPACK_IMAGE_HEIGHT_EXT )
        ADD_CONST_INT( "GL_UNPACK_IMAGE_HEIGHT_EXT", GL_UNPACK_IMAGE_HEIGHT_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV", GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_SIZE_EXT )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_SIZE_EXT", GL_SECONDARY_COLOR_ARRAY_SIZE_EXT );
      #endif
      #if defined( GL_TEXTURE_COMPARE_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_COMPARE_SGIX", GL_TEXTURE_COMPARE_SGIX );
      #endif
      #if defined( GL_DRAW_BUFFER13_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER13_ARB", GL_DRAW_BUFFER13_ARB );
      #endif
      #if defined( GL_INT_SAMPLER_2D )
        ADD_CONST_INT( "GL_INT_SAMPLER_2D", GL_INT_SAMPLER_2D );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_1D_ARRAY )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY", GL_UNSIGNED_INT_SAMPLER_1D_ARRAY );
      #endif
      #if defined( GL_VERTEX_ARRAY_RANGE_LENGTH_NV )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_RANGE_LENGTH_NV", GL_VERTEX_ARRAY_RANGE_LENGTH_NV );
      #endif
      #if defined( GL_STATIC_VERTEX_ARRAY_IBM )
        ADD_CONST_INT( "GL_STATIC_VERTEX_ARRAY_IBM", GL_STATIC_VERTEX_ARRAY_IBM );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB6_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB6_4_NV", GL_MAP1_VERTEX_ATTRIB6_4_NV );
      #endif
      #if defined( GL_STENCIL_PASS_DEPTH_FAIL )
        ADD_CONST_INT( "GL_STENCIL_PASS_DEPTH_FAIL", GL_STENCIL_PASS_DEPTH_FAIL );
      #endif
      #if defined( GL_DRAW_BUFFER3_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER3_ARB", GL_DRAW_BUFFER3_ARB );
      #endif
      #if defined( GL_PIXEL_MAP_A_TO_A )
        ADD_CONST_INT( "GL_PIXEL_MAP_A_TO_A", GL_PIXEL_MAP_A_TO_A );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_POINTER )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_POINTER", GL_TEXTURE_COORD_ARRAY_POINTER );
      #endif
      #if defined( GLEW_EXT_polygon_offset )
        ADD_CONST_INT( "GLEW_EXT_polygon_offset", GLEW_EXT_polygon_offset );
      #endif
      #if defined( GL_TEXTURE_ALPHA_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_ALPHA_SIZE_EXT", GL_TEXTURE_ALPHA_SIZE_EXT );
      #endif
      #if defined( GL_MAX_GEOMETRY_UNIFORM_BLOCKS )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_UNIFORM_BLOCKS", GL_MAX_GEOMETRY_UNIFORM_BLOCKS );
      #endif
      #if defined( GL_LUMINANCE8_SNORM )
        ADD_CONST_INT( "GL_LUMINANCE8_SNORM", GL_LUMINANCE8_SNORM );
      #endif
      #if defined( GL_EXPAND_NORMAL_NV )
        ADD_CONST_INT( "GL_EXPAND_NORMAL_NV", GL_EXPAND_NORMAL_NV );
      #endif
      #if defined( GL_MAT_SPECULAR_BIT_PGI )
        ADD_CONST_INT( "GL_MAT_SPECULAR_BIT_PGI", GL_MAT_SPECULAR_BIT_PGI );
      #endif
      #if defined( GL_OML_resample )
        ADD_CONST_INT( "GL_OML_resample", GL_OML_resample );
      #endif
      #if defined( GL_MAX_PROGRAM_IF_DEPTH_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_IF_DEPTH_NV", GL_MAX_PROGRAM_IF_DEPTH_NV );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB", GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB );
      #endif
      #if defined( GL_POINT_FADE_THRESHOLD_SIZE_EXT )
        ADD_CONST_INT( "GL_POINT_FADE_THRESHOLD_SIZE_EXT", GL_POINT_FADE_THRESHOLD_SIZE_EXT );
      #endif
      #if defined( GL_FIXED_ONLY )
        ADD_CONST_INT( "GL_FIXED_ONLY", GL_FIXED_ONLY );
      #endif
      #if defined( GL_OP_MAX_EXT )
        ADD_CONST_INT( "GL_OP_MAX_EXT", GL_OP_MAX_EXT );
      #endif
      #if defined( GL_TRANSPOSE_TEXTURE_MATRIX_ARB )
        ADD_CONST_INT( "GL_TRANSPOSE_TEXTURE_MATRIX_ARB", GL_TRANSPOSE_TEXTURE_MATRIX_ARB );
      #endif
      #if defined( GL_NONE )
        ADD_CONST_INT( "GL_NONE", GL_NONE );
      #endif
      #if defined( GL_POLYGON_MODE )
        ADD_CONST_INT( "GL_POLYGON_MODE", GL_POLYGON_MODE );
      #endif
      #if defined( GL_PROXY_TEXTURE_RECTANGLE_ARB )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_RECTANGLE_ARB", GL_PROXY_TEXTURE_RECTANGLE_ARB );
      #endif
      #if defined( GL_HALF_FLOAT )
        ADD_CONST_INT( "GL_HALF_FLOAT", GL_HALF_FLOAT );
      #endif
      #if defined( GL_RGBA_SNORM )
        ADD_CONST_INT( "GL_RGBA_SNORM", GL_RGBA_SNORM );
      #endif
      #if defined( GL_MAX_PROGRAM_LOOP_DEPTH_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_LOOP_DEPTH_NV", GL_MAX_PROGRAM_LOOP_DEPTH_NV );
      #endif
      #if defined( GL_V2F )
        ADD_CONST_INT( "GL_V2F", GL_V2F );
      #endif
      #if defined( GL_LIGHTING_BIT )
        ADD_CONST_INT( "GL_LIGHTING_BIT", GL_LIGHTING_BIT );
      #endif
      #if defined( GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD )
        ADD_CONST_INT( "GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD", GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD );
      #endif
      #if defined( GL_SCISSOR_BOX )
        ADD_CONST_INT( "GL_SCISSOR_BOX", GL_SCISSOR_BOX );
      #endif
      #if defined( GL_UNIFORM_BLOCK_DATA_SIZE )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_DATA_SIZE", GL_UNIFORM_BLOCK_DATA_SIZE );
      #endif
      #if defined( GLX_TEXTURE_FORMAT_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_FORMAT_EXT", GLX_TEXTURE_FORMAT_EXT );
      #endif
      #if defined( GL_INVERTED_SCREEN_W_REND )
        ADD_CONST_INT( "GL_INVERTED_SCREEN_W_REND", GL_INVERTED_SCREEN_W_REND );
      #endif
      #if defined( GL_OFFSET_TEXTURE_2D_MATRIX_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_2D_MATRIX_NV", GL_OFFSET_TEXTURE_2D_MATRIX_NV );
      #endif
      #if defined( GLX_WIDTH_SGIX )
        ADD_CONST_INT( "GLX_WIDTH_SGIX", GLX_WIDTH_SGIX );
      #endif
      #if defined( GL_POINT_FADE_THRESHOLD_SIZE_SGIS )
        ADD_CONST_INT( "GL_POINT_FADE_THRESHOLD_SIZE_SGIS", GL_POINT_FADE_THRESHOLD_SIZE_SGIS );
      #endif
      #if defined( GLEW_EXT_framebuffer_object )
        ADD_CONST_INT( "GLEW_EXT_framebuffer_object", GLEW_EXT_framebuffer_object );
      #endif
      #if defined( GL_UNIFORM_IS_ROW_MAJOR )
        ADD_CONST_INT( "GL_UNIFORM_IS_ROW_MAJOR", GL_UNIFORM_IS_ROW_MAJOR );
      #endif
      #if defined( GL_MAX_UNIFORM_BLOCK_SIZE )
        ADD_CONST_INT( "GL_MAX_UNIFORM_BLOCK_SIZE", GL_MAX_UNIFORM_BLOCK_SIZE );
      #endif
      #if defined( GL_INDEX_ARRAY )
        ADD_CONST_INT( "GL_INDEX_ARRAY", GL_INDEX_ARRAY );
      #endif
      #if defined( GL_CONVOLUTION_1D_EXT )
        ADD_CONST_INT( "GL_CONVOLUTION_1D_EXT", GL_CONVOLUTION_1D_EXT );
      #endif
      #if defined( GL_ASYNC_HISTOGRAM_SGIX )
        ADD_CONST_INT( "GL_ASYNC_HISTOGRAM_SGIX", GL_ASYNC_HISTOGRAM_SGIX );
      #endif
      #if defined( GL_SLUMINANCE_ALPHA_EXT )
        ADD_CONST_INT( "GL_SLUMINANCE_ALPHA_EXT", GL_SLUMINANCE_ALPHA_EXT );
      #endif
      #if defined( GL_INDEX_ARRAY_LIST_STRIDE_IBM )
        ADD_CONST_INT( "GL_INDEX_ARRAY_LIST_STRIDE_IBM", GL_INDEX_ARRAY_LIST_STRIDE_IBM );
      #endif
      #if defined( GL_COMBINER2_NV )
        ADD_CONST_INT( "GL_COMBINER2_NV", GL_COMBINER2_NV );
      #endif
      #if defined( GL_LIST_BASE )
        ADD_CONST_INT( "GL_LIST_BASE", GL_LIST_BASE );
      #endif
      #if defined( GL_TEXTURE_RESIDENT_EXT )
        ADD_CONST_INT( "GL_TEXTURE_RESIDENT_EXT", GL_TEXTURE_RESIDENT_EXT );
      #endif
      #if defined( GLX_FBCONFIG_ID_SGIX )
        ADD_CONST_INT( "GLX_FBCONFIG_ID_SGIX", GLX_FBCONFIG_ID_SGIX );
      #endif
      #if defined( GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB )
        ADD_CONST_INT( "GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB", GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB );
      #endif
      #if defined( GL_COLOR_WRITEMASK )
        ADD_CONST_INT( "GL_COLOR_WRITEMASK", GL_COLOR_WRITEMASK );
      #endif
      #if defined( GL_MATRIX23_ARB )
        ADD_CONST_INT( "GL_MATRIX23_ARB", GL_MATRIX23_ARB );
      #endif
      #if defined( GL_EXT_texture_edge_clamp )
        ADD_CONST_INT( "GL_EXT_texture_edge_clamp", GL_EXT_texture_edge_clamp );
      #endif
      #if defined( GL_MODELVIEW0_STACK_DEPTH_EXT )
        ADD_CONST_INT( "GL_MODELVIEW0_STACK_DEPTH_EXT", GL_MODELVIEW0_STACK_DEPTH_EXT );
      #endif
      #if defined( GL_FRAMEBUFFER_SRGB_CAPABLE_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_SRGB_CAPABLE_EXT", GL_FRAMEBUFFER_SRGB_CAPABLE_EXT );
      #endif
      #if defined( GL_LIGHT_ENV_MODE_EXT )
        ADD_CONST_INT( "GL_LIGHT_ENV_MODE_EXT", GL_LIGHT_ENV_MODE_EXT );
      #endif
      #if defined( GL_PROGRAM_NATIVE_PARAMETERS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_NATIVE_PARAMETERS_ARB", GL_PROGRAM_NATIVE_PARAMETERS_ARB );
      #endif
      #if defined( GL_TEXTURE_WRAP_R )
        ADD_CONST_INT( "GL_TEXTURE_WRAP_R", GL_TEXTURE_WRAP_R );
      #endif
      #if defined( GL_TEXTURE_WRAP_S )
        ADD_CONST_INT( "GL_TEXTURE_WRAP_S", GL_TEXTURE_WRAP_S );
      #endif
      #if defined( GL_TEXTURE_WRAP_T )
        ADD_CONST_INT( "GL_TEXTURE_WRAP_T", GL_TEXTURE_WRAP_T );
      #endif
      #if defined( GL_DST_ALPHA )
        ADD_CONST_INT( "GL_DST_ALPHA", GL_DST_ALPHA );
      #endif
      #if defined( GL_INT_SAMPLER_3D_EXT )
        ADD_CONST_INT( "GL_INT_SAMPLER_3D_EXT", GL_INT_SAMPLER_3D_EXT );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV", GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV );
      #endif
      #if defined( GL_TEXTURE_2D_ARRAY_EXT )
        ADD_CONST_INT( "GL_TEXTURE_2D_ARRAY_EXT", GL_TEXTURE_2D_ARRAY_EXT );
      #endif
      #if defined( GL_EVAL_BIT )
        ADD_CONST_INT( "GL_EVAL_BIT", GL_EVAL_BIT );
      #endif
      #if defined( GL_INT_SAMPLER_2D_ARRAY )
        ADD_CONST_INT( "GL_INT_SAMPLER_2D_ARRAY", GL_INT_SAMPLER_2D_ARRAY );
      #endif
      #if defined( GL_4PASS_0_SGIS )
        ADD_CONST_INT( "GL_4PASS_0_SGIS", GL_4PASS_0_SGIS );
      #endif
      #if defined( GLX_TEXTURE_TARGET_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_TARGET_EXT", GLX_TEXTURE_TARGET_EXT );
      #endif
      #if defined( GL_TEXTURE_BLUE_TYPE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_BLUE_TYPE_ARB", GL_TEXTURE_BLUE_TYPE_ARB );
      #endif
      #if defined( GL_COMPRESSED_RGB )
        ADD_CONST_INT( "GL_COMPRESSED_RGB", GL_COMPRESSED_RGB );
      #endif
      #if defined( GL_DUDV_ATI )
        ADD_CONST_INT( "GL_DUDV_ATI", GL_DUDV_ATI );
      #endif
      #if defined( GL_MAX_TEXTURE_COORDS_ARB )
        ADD_CONST_INT( "GL_MAX_TEXTURE_COORDS_ARB", GL_MAX_TEXTURE_COORDS_ARB );
      #endif
      #if defined( GL_COLOR_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_COLOR_ARRAY_STRIDE_EXT", GL_COLOR_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD11_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD11_EXT", GL_OUTPUT_TEXTURE_COORD11_EXT );
      #endif
      #if defined( GL_CULL_VERTEX_OBJECT_POSITION_EXT )
        ADD_CONST_INT( "GL_CULL_VERTEX_OBJECT_POSITION_EXT", GL_CULL_VERTEX_OBJECT_POSITION_EXT );
      #endif
      #if defined( GL_TEXTURE12_ARB )
        ADD_CONST_INT( "GL_TEXTURE12_ARB", GL_TEXTURE12_ARB );
      #endif
      #if defined( GL_GLEXT_VERSION )
        ADD_CONST_INT( "GL_GLEXT_VERSION", GL_GLEXT_VERSION );
      #endif
      #if defined( GL_RESAMPLE_ZERO_FILL_SGIX )
        ADD_CONST_INT( "GL_RESAMPLE_ZERO_FILL_SGIX", GL_RESAMPLE_ZERO_FILL_SGIX );
      #endif
      #if defined( GL_BLUE_BITS )
        ADD_CONST_INT( "GL_BLUE_BITS", GL_BLUE_BITS );
      #endif
      #if defined( GL_OUTPUT_COLOR1_EXT )
        ADD_CONST_INT( "GL_OUTPUT_COLOR1_EXT", GL_OUTPUT_COLOR1_EXT );
      #endif
      #if defined( GL_SAMPLE_MASK_NV )
        ADD_CONST_INT( "GL_SAMPLE_MASK_NV", GL_SAMPLE_MASK_NV );
      #endif
      #if defined( GL_FLOAT_RG32_NV )
        ADD_CONST_INT( "GL_FLOAT_RG32_NV", GL_FLOAT_RG32_NV );
      #endif
      #if defined( GL_ALPHA_MIN_CLAMP_INGR )
        ADD_CONST_INT( "GL_ALPHA_MIN_CLAMP_INGR", GL_ALPHA_MIN_CLAMP_INGR );
      #endif
      #if defined( GL_PACK_SWAP_BYTES )
        ADD_CONST_INT( "GL_PACK_SWAP_BYTES", GL_PACK_SWAP_BYTES );
      #endif
      #if defined( GL_EQUAL )
        ADD_CONST_INT( "GL_EQUAL", GL_EQUAL );
      #endif
      #if defined( GL_PROGRAM_ATTRIB_COMPONENTS_NV )
        ADD_CONST_INT( "GL_PROGRAM_ATTRIB_COMPONENTS_NV", GL_PROGRAM_ATTRIB_COMPONENTS_NV );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB", GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB );
      #endif
      #if defined( GL_MIN_SAMPLE_SHADING_VALUE_ARB )
        ADD_CONST_INT( "GL_MIN_SAMPLE_SHADING_VALUE_ARB", GL_MIN_SAMPLE_SHADING_VALUE_ARB );
      #endif
      #if defined( GL_TEXTURE_BINDING_1D_ARRAY )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_1D_ARRAY", GL_TEXTURE_BINDING_1D_ARRAY );
      #endif
      #if defined( GL_1PASS_SGIS )
        ADD_CONST_INT( "GL_1PASS_SGIS", GL_1PASS_SGIS );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_SIZE )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_SIZE", GL_SECONDARY_COLOR_ARRAY_SIZE );
      #endif
      #if defined( GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB )
        ADD_CONST_INT( "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB", GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB );
      #endif
      #if defined( GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT );
      #endif
      #if defined( GL_EXT_pixel_transform )
        ADD_CONST_INT( "GL_EXT_pixel_transform", GL_EXT_pixel_transform );
      #endif
      #if defined( GL_EXT_polygon_offset )
        ADD_CONST_INT( "GL_EXT_polygon_offset", GL_EXT_polygon_offset );
      #endif
      #if defined( GL_POINT_FADE_THRESHOLD_SIZE )
        ADD_CONST_INT( "GL_POINT_FADE_THRESHOLD_SIZE", GL_POINT_FADE_THRESHOLD_SIZE );
      #endif
      #if defined( GL_INT_SAMPLER_BUFFER )
        ADD_CONST_INT( "GL_INT_SAMPLER_BUFFER", GL_INT_SAMPLER_BUFFER );
      #endif
      #if defined( GL_INT_SAMPLER_1D_EXT )
        ADD_CONST_INT( "GL_INT_SAMPLER_1D_EXT", GL_INT_SAMPLER_1D_EXT );
      #endif
      #if defined( GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB", GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV", GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV );
      #endif
      #if defined( GL_SAMPLE_COUNT_BITS_NV )
        ADD_CONST_INT( "GL_SAMPLE_COUNT_BITS_NV", GL_SAMPLE_COUNT_BITS_NV );
      #endif
      #if defined( GL_SPARE0_PLUS_SECONDARY_COLOR_NV )
        ADD_CONST_INT( "GL_SPARE0_PLUS_SECONDARY_COLOR_NV", GL_SPARE0_PLUS_SECONDARY_COLOR_NV );
      #endif
      #if defined( GL_EXT_rescale_normal )
        ADD_CONST_INT( "GL_EXT_rescale_normal", GL_EXT_rescale_normal );
      #endif
      #if defined( GL_CURRENT_MATRIX_STACK_DEPTH_ARB )
        ADD_CONST_INT( "GL_CURRENT_MATRIX_STACK_DEPTH_ARB", GL_CURRENT_MATRIX_STACK_DEPTH_ARB );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_EXT )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_EXT", GL_TEXTURE_COORD_ARRAY_EXT );
      #endif
      #if defined( GL_LINE_STRIP )
        ADD_CONST_INT( "GL_LINE_STRIP", GL_LINE_STRIP );
      #endif
      #if defined( GL_ASYNC_TEX_IMAGE_SGIX )
        ADD_CONST_INT( "GL_ASYNC_TEX_IMAGE_SGIX", GL_ASYNC_TEX_IMAGE_SGIX );
      #endif
      #if defined( GLEW_EXT_blend_func_separate )
        ADD_CONST_INT( "GLEW_EXT_blend_func_separate", GLEW_EXT_blend_func_separate );
      #endif
      #if defined( GL_PACK_ROW_LENGTH )
        ADD_CONST_INT( "GL_PACK_ROW_LENGTH", GL_PACK_ROW_LENGTH );
      #endif
      #if defined( GL_LIGHT_MODEL_COLOR_CONTROL_EXT )
        ADD_CONST_INT( "GL_LIGHT_MODEL_COLOR_CONTROL_EXT", GL_LIGHT_MODEL_COLOR_CONTROL_EXT );
      #endif
      #if defined( GL_VARIABLE_G_NV )
        ADD_CONST_INT( "GL_VARIABLE_G_NV", GL_VARIABLE_G_NV );
      #endif
      #if defined( GL_DRAW_BUFFER0_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER0_ARB", GL_DRAW_BUFFER0_ARB );
      #endif
      #if defined( GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB", GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB );
      #endif
      #if defined( GL_COLOR )
        ADD_CONST_INT( "GL_COLOR", GL_COLOR );
      #endif
      #if defined( GL_HISTOGRAM_ALPHA_SIZE )
        ADD_CONST_INT( "GL_HISTOGRAM_ALPHA_SIZE", GL_HISTOGRAM_ALPHA_SIZE );
      #endif
      #if defined( GL_PHONG_WIN )
        ADD_CONST_INT( "GL_PHONG_WIN", GL_PHONG_WIN );
      #endif
      #if defined( GL_RED_MAX_CLAMP_INGR )
        ADD_CONST_INT( "GL_RED_MAX_CLAMP_INGR", GL_RED_MAX_CLAMP_INGR );
      #endif
      #if defined( GL_INTENSITY_FLOAT16_ATI )
        ADD_CONST_INT( "GL_INTENSITY_FLOAT16_ATI", GL_INTENSITY_FLOAT16_ATI );
      #endif
      #if defined( GL_BITMAP )
        ADD_CONST_INT( "GL_BITMAP", GL_BITMAP );
      #endif
      #if defined( GL_DYNAMIC_READ )
        ADD_CONST_INT( "GL_DYNAMIC_READ", GL_DYNAMIC_READ );
      #endif
      #if defined( GL_COMPRESSED_LUMINANCE )
        ADD_CONST_INT( "GL_COMPRESSED_LUMINANCE", GL_COMPRESSED_LUMINANCE );
      #endif
      #if defined( GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT", GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV )
        ADD_CONST_INT( "GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV", GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV );
      #endif
      #if defined( GL_TEXTURE_MAX_CLAMP_S_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_MAX_CLAMP_S_SGIX", GL_TEXTURE_MAX_CLAMP_S_SGIX );
      #endif
      #if defined( GL_MAX_GREEN_SGIS )
        ADD_CONST_INT( "GL_MAX_GREEN_SGIS", GL_MAX_GREEN_SGIS );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT );
      #endif
      #if defined( GL_INDEX_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_INDEX_ARRAY_LENGTH_NV", GL_INDEX_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_LUMINANCE6_ALPHA2_EXT )
        ADD_CONST_INT( "GL_LUMINANCE6_ALPHA2_EXT", GL_LUMINANCE6_ALPHA2_EXT );
      #endif
      #if defined( GL_DEPTH_STENCIL )
        ADD_CONST_INT( "GL_DEPTH_STENCIL", GL_DEPTH_STENCIL );
      #endif
      #if defined( GL_ELEMENT_ARRAY_TYPE_APPLE )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_TYPE_APPLE", GL_ELEMENT_ARRAY_TYPE_APPLE );
      #endif
      #if defined( GL_EXT_direct_state_access )
        ADD_CONST_INT( "GL_EXT_direct_state_access", GL_EXT_direct_state_access );
      #endif
      #if defined( GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV )
        ADD_CONST_INT( "GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV", GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV );
      #endif
      #if defined( GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI )
        ADD_CONST_INT( "GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI", GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI );
      #endif
      #if defined( GL_UNIFORM_BUFFER_BINDING_EXT )
        ADD_CONST_INT( "GL_UNIFORM_BUFFER_BINDING_EXT", GL_UNIFORM_BUFFER_BINDING_EXT );
      #endif
      #if defined( GL_TEXTURE_INTENSITY_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_INTENSITY_SIZE", GL_TEXTURE_INTENSITY_SIZE );
      #endif
      #if defined( GLEW_EXT_bindable_uniform )
        ADD_CONST_INT( "GLEW_EXT_bindable_uniform", GLEW_EXT_bindable_uniform );
      #endif
      #if defined( GL_RGB16_SIGNED_SGIX )
        ADD_CONST_INT( "GL_RGB16_SIGNED_SGIX", GL_RGB16_SIGNED_SGIX );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD7_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD7_EXT", GL_OUTPUT_TEXTURE_COORD7_EXT );
      #endif
      #if defined( GL_SYNC_CONDITION )
        ADD_CONST_INT( "GL_SYNC_CONDITION", GL_SYNC_CONDITION );
      #endif
      #if defined( GL_TEXTURE_2D )
        ADD_CONST_INT( "GL_TEXTURE_2D", GL_TEXTURE_2D );
      #endif
      #if defined( GL_HISTOGRAM_SINK )
        ADD_CONST_INT( "GL_HISTOGRAM_SINK", GL_HISTOGRAM_SINK );
      #endif
      #if defined( GL_TEXTURE_DT_SIZE_NV )
        ADD_CONST_INT( "GL_TEXTURE_DT_SIZE_NV", GL_TEXTURE_DT_SIZE_NV );
      #endif
      #if defined( GL_MAP_INVALIDATE_RANGE_BIT )
        ADD_CONST_INT( "GL_MAP_INVALIDATE_RANGE_BIT", GL_MAP_INVALIDATE_RANGE_BIT );
      #endif
      #if defined( GL_TEXTURE23 )
        ADD_CONST_INT( "GL_TEXTURE23", GL_TEXTURE23 );
      #endif
      #if defined( GL_TEXTURE22 )
        ADD_CONST_INT( "GL_TEXTURE22", GL_TEXTURE22 );
      #endif
      #if defined( GL_TEXTURE21 )
        ADD_CONST_INT( "GL_TEXTURE21", GL_TEXTURE21 );
      #endif
      #if defined( GL_TEXTURE20 )
        ADD_CONST_INT( "GL_TEXTURE20", GL_TEXTURE20 );
      #endif
      #if defined( GL_TEXTURE27 )
        ADD_CONST_INT( "GL_TEXTURE27", GL_TEXTURE27 );
      #endif
      #if defined( GL_TEXTURE26 )
        ADD_CONST_INT( "GL_TEXTURE26", GL_TEXTURE26 );
      #endif
      #if defined( GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE", GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE );
      #endif
      #if defined( GL_TEXTURE24 )
        ADD_CONST_INT( "GL_TEXTURE24", GL_TEXTURE24 );
      #endif
      #if defined( GL_R8_SNORM )
        ADD_CONST_INT( "GL_R8_SNORM", GL_R8_SNORM );
      #endif
      #if defined( GL_TEXTURE29 )
        ADD_CONST_INT( "GL_TEXTURE29", GL_TEXTURE29 );
      #endif
      #if defined( GL_TEXTURE28 )
        ADD_CONST_INT( "GL_TEXTURE28", GL_TEXTURE28 );
      #endif
      #if defined( GL_ELEMENT_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_BUFFER_BINDING", GL_ELEMENT_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GLEW_EXT_pixel_transform_color_table )
        ADD_CONST_INT( "GLEW_EXT_pixel_transform_color_table", GLEW_EXT_pixel_transform_color_table );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER", GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER );
      #endif
      #if defined( GL_TRIANGLES_ADJACENCY )
        ADD_CONST_INT( "GL_TRIANGLES_ADJACENCY", GL_TRIANGLES_ADJACENCY );
      #endif
      #if defined( GL_PIXEL_MODE_BIT )
        ADD_CONST_INT( "GL_PIXEL_MODE_BIT", GL_PIXEL_MODE_BIT );
      #endif
      #if defined( GL_MAX_ASYNC_READ_PIXELS_SGIX )
        ADD_CONST_INT( "GL_MAX_ASYNC_READ_PIXELS_SGIX", GL_MAX_ASYNC_READ_PIXELS_SGIX );
      #endif
      #if defined( GL_INT_VEC3_ARB )
        ADD_CONST_INT( "GL_INT_VEC3_ARB", GL_INT_VEC3_ARB );
      #endif
      #if defined( GL_TEXTURE_1D_STACK_BINDING_MESAX )
        ADD_CONST_INT( "GL_TEXTURE_1D_STACK_BINDING_MESAX", GL_TEXTURE_1D_STACK_BINDING_MESAX );
      #endif
      #if defined( GL_ALPHA_SCALE )
        ADD_CONST_INT( "GL_ALPHA_SCALE", GL_ALPHA_SCALE );
      #endif
      #if defined( GL_READ_BUFFER )
        ADD_CONST_INT( "GL_READ_BUFFER", GL_READ_BUFFER );
      #endif
      #if defined( GL_ELEMENT_ARRAY_APPLE )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_APPLE", GL_ELEMENT_ARRAY_APPLE );
      #endif
      #if defined( GL_PACK_SKIP_PIXELS )
        ADD_CONST_INT( "GL_PACK_SKIP_PIXELS", GL_PACK_SKIP_PIXELS );
      #endif
      #if defined( GL_TEXTURE_HI_SIZE_NV )
        ADD_CONST_INT( "GL_TEXTURE_HI_SIZE_NV", GL_TEXTURE_HI_SIZE_NV );
      #endif
      #if defined( GLEW_EXT_convolution )
        ADD_CONST_INT( "GLEW_EXT_convolution", GLEW_EXT_convolution );
      #endif
      #if defined( GL_BLEND_EQUATION_EXT )
        ADD_CONST_INT( "GL_BLEND_EQUATION_EXT", GL_BLEND_EQUATION_EXT );
      #endif
      #if defined( GL_WRAP_BORDER_SUN )
        ADD_CONST_INT( "GL_WRAP_BORDER_SUN", GL_WRAP_BORDER_SUN );
      #endif
      #if defined( GL_INVARIANT_VALUE_EXT )
        ADD_CONST_INT( "GL_INVARIANT_VALUE_EXT", GL_INVARIANT_VALUE_EXT );
      #endif
      #if defined( GLX_STATIC_GRAY_EXT )
        ADD_CONST_INT( "GLX_STATIC_GRAY_EXT", GLX_STATIC_GRAY_EXT );
      #endif
      #if defined( GL_FIXED_ONLY_ARB )
        ADD_CONST_INT( "GL_FIXED_ONLY_ARB", GL_FIXED_ONLY_ARB );
      #endif
      #if defined( GL_GEQUAL )
        ADD_CONST_INT( "GL_GEQUAL", GL_GEQUAL );
      #endif
      #if defined( GL_FRAMEBUFFER_SRGB_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_SRGB_EXT", GL_FRAMEBUFFER_SRGB_EXT );
      #endif
      #if defined( GL_MODELVIEW8_ARB )
        ADD_CONST_INT( "GL_MODELVIEW8_ARB", GL_MODELVIEW8_ARB );
      #endif
      #if defined( GL_MAX_CONVOLUTION_HEIGHT_EXT )
        ADD_CONST_INT( "GL_MAX_CONVOLUTION_HEIGHT_EXT", GL_MAX_CONVOLUTION_HEIGHT_EXT );
      #endif
      #if defined( GL_RGBA8UI )
        ADD_CONST_INT( "GL_RGBA8UI", GL_RGBA8UI );
      #endif
      #if defined( GL_DSDT8_NV )
        ADD_CONST_INT( "GL_DSDT8_NV", GL_DSDT8_NV );
      #endif
      #if defined( GL_NEGATE_BIT_ATI )
        ADD_CONST_INT( "GL_NEGATE_BIT_ATI", GL_NEGATE_BIT_ATI );
      #endif
      #if defined( GL_INTENSITY32UI_EXT )
        ADD_CONST_INT( "GL_INTENSITY32UI_EXT", GL_INTENSITY32UI_EXT );
      #endif
      #if defined( GL_STRICT_SCISSOR_HINT_PGI )
        ADD_CONST_INT( "GL_STRICT_SCISSOR_HINT_PGI", GL_STRICT_SCISSOR_HINT_PGI );
      #endif
      #if defined( GL_VARIANT_EXT )
        ADD_CONST_INT( "GL_VARIANT_EXT", GL_VARIANT_EXT );
      #endif
      #if defined( GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT )
        ADD_CONST_INT( "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT", GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT );
      #endif
      #if defined( GL_SUBTRACT )
        ADD_CONST_INT( "GL_SUBTRACT", GL_SUBTRACT );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_EXT )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_EXT", GL_EDGE_FLAG_ARRAY_EXT );
      #endif
      #if defined( GL_PALETTE4_RGBA4_OES )
        ADD_CONST_INT( "GL_PALETTE4_RGBA4_OES", GL_PALETTE4_RGBA4_OES );
      #endif
      #if defined( GL_LINE_STIPPLE )
        ADD_CONST_INT( "GL_LINE_STIPPLE", GL_LINE_STIPPLE );
      #endif
      #if defined( GL_COMPRESSED_RED_RGTC1 )
        ADD_CONST_INT( "GL_COMPRESSED_RED_RGTC1", GL_COMPRESSED_RED_RGTC1 );
      #endif
      #if defined( GL_READ_WRITE )
        ADD_CONST_INT( "GL_READ_WRITE", GL_READ_WRITE );
      #endif
      #if defined( GL_BINORMAL_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_BINORMAL_ARRAY_STRIDE_EXT", GL_BINORMAL_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_LUMINANCE16_ALPHA16_SNORM )
        ADD_CONST_INT( "GL_LUMINANCE16_ALPHA16_SNORM", GL_LUMINANCE16_ALPHA16_SNORM );
      #endif
      #if defined( GLX_BACK_RIGHT_EXT )
        ADD_CONST_INT( "GLX_BACK_RIGHT_EXT", GLX_BACK_RIGHT_EXT );
      #endif
      #if defined( GLX_ACCUM_BUFFER_BIT )
        ADD_CONST_INT( "GLX_ACCUM_BUFFER_BIT", GLX_ACCUM_BUFFER_BIT );
      #endif
      #if defined( GLX_TEXTURE_1D_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_1D_ATI", GLX_TEXTURE_1D_ATI );
      #endif
      #if defined( GL_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_ARRAY_BUFFER_BINDING", GL_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GL_INDEX_WRITEMASK )
        ADD_CONST_INT( "GL_INDEX_WRITEMASK", GL_INDEX_WRITEMASK );
      #endif
      #if defined( GL_INTERPOLATE )
        ADD_CONST_INT( "GL_INTERPOLATE", GL_INTERPOLATE );
      #endif
      #if defined( GLEW_ATIX_texture_env_route )
        ADD_CONST_INT( "GLEW_ATIX_texture_env_route", GLEW_ATIX_texture_env_route );
      #endif
      #if defined( GLX_MIN_GREEN_SGIS )
        ADD_CONST_INT( "GLX_MIN_GREEN_SGIS", GLX_MIN_GREEN_SGIS );
      #endif
      #if defined( GL_DYNAMIC_DRAW )
        ADD_CONST_INT( "GL_DYNAMIC_DRAW", GL_DYNAMIC_DRAW );
      #endif
      #if defined( GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE )
        ADD_CONST_INT( "GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE", GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE );
      #endif
      #if defined( GL_4D_COLOR_TEXTURE )
        ADD_CONST_INT( "GL_4D_COLOR_TEXTURE", GL_4D_COLOR_TEXTURE );
      #endif
      #if defined( GL_COMBINER_AB_DOT_PRODUCT_NV )
        ADD_CONST_INT( "GL_COMBINER_AB_DOT_PRODUCT_NV", GL_COMBINER_AB_DOT_PRODUCT_NV );
      #endif
      #if defined( GLX_TEXTURE_2D_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_2D_ATI", GLX_TEXTURE_2D_ATI );
      #endif
      #if defined( GL_MULTISAMPLE_SGIS )
        ADD_CONST_INT( "GL_MULTISAMPLE_SGIS", GL_MULTISAMPLE_SGIS );
      #endif
      #if defined( GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS", GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS );
      #endif
      #if defined( GLX_RGBA_TYPE_SGIX )
        ADD_CONST_INT( "GLX_RGBA_TYPE_SGIX", GLX_RGBA_TYPE_SGIX );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB", GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_UNPACK_ROW_LENGTH )
        ADD_CONST_INT( "GL_UNPACK_ROW_LENGTH", GL_UNPACK_ROW_LENGTH );
      #endif
      #if defined( GL_OBJECT_ATTACHED_OBJECTS_ARB )
        ADD_CONST_INT( "GL_OBJECT_ATTACHED_OBJECTS_ARB", GL_OBJECT_ATTACHED_OBJECTS_ARB );
      #endif
      #if defined( GL_CURRENT_PROGRAM )
        ADD_CONST_INT( "GL_CURRENT_PROGRAM", GL_CURRENT_PROGRAM );
      #endif
      #if defined( GL_BUFFER_MAPPED )
        ADD_CONST_INT( "GL_BUFFER_MAPPED", GL_BUFFER_MAPPED );
      #endif
      #if defined( GL_DEBUG_CATEGORY_PERFORMANCE_AMD )
        ADD_CONST_INT( "GL_DEBUG_CATEGORY_PERFORMANCE_AMD", GL_DEBUG_CATEGORY_PERFORMANCE_AMD );
      #endif
      #if defined( GL_EYE_LINEAR )
        ADD_CONST_INT( "GL_EYE_LINEAR", GL_EYE_LINEAR );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY7_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY7_NV", GL_VERTEX_ATTRIB_ARRAY7_NV );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_RED_SCALE_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_RED_SCALE_SGI", GL_POST_COLOR_MATRIX_RED_SCALE_SGI );
      #endif
      #if defined( GL_TEXTURE_INTENSITY_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_INTENSITY_SIZE_EXT", GL_TEXTURE_INTENSITY_SIZE_EXT );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB14_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB14_NV", GL_EVAL_VERTEX_ATTRIB14_NV );
      #endif
      #if defined( GL_PN_TRIANGLES_ATI )
        ADD_CONST_INT( "GL_PN_TRIANGLES_ATI", GL_PN_TRIANGLES_ATI );
      #endif
      #if defined( GLX_TRANSPARENT_ALPHA_VALUE )
        ADD_CONST_INT( "GLX_TRANSPARENT_ALPHA_VALUE", GLX_TRANSPARENT_ALPHA_VALUE );
      #endif
      #if defined( GL_INTENSITY8I_EXT )
        ADD_CONST_INT( "GL_INTENSITY8I_EXT", GL_INTENSITY8I_EXT );
      #endif
      #if defined( GL_STREAM_DRAW )
        ADD_CONST_INT( "GL_STREAM_DRAW", GL_STREAM_DRAW );
      #endif
      #if defined( GL_ALPHA4_EXT )
        ADD_CONST_INT( "GL_ALPHA4_EXT", GL_ALPHA4_EXT );
      #endif
      #if defined( GL_OBJECT_POINT_SGIS )
        ADD_CONST_INT( "GL_OBJECT_POINT_SGIS", GL_OBJECT_POINT_SGIS );
      #endif
      #if defined( GL_DOT3_RGBA_ARB )
        ADD_CONST_INT( "GL_DOT3_RGBA_ARB", GL_DOT3_RGBA_ARB );
      #endif
      #if defined( GL_MAX_UNIFORM_BUFFER_BINDINGS )
        ADD_CONST_INT( "GL_MAX_UNIFORM_BUFFER_BINDINGS", GL_MAX_UNIFORM_BUFFER_BINDINGS );
      #endif
      #if defined( GLEW_EXT_fog_coord )
        ADD_CONST_INT( "GLEW_EXT_fog_coord", GLEW_EXT_fog_coord );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_POINTER_EXT", GL_EDGE_FLAG_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_COMPRESSED_LUMINANCE_LATC1_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_LUMINANCE_LATC1_EXT", GL_COMPRESSED_LUMINANCE_LATC1_EXT );
      #endif
      #if defined( GL_SIGNALED )
        ADD_CONST_INT( "GL_SIGNALED", GL_SIGNALED );
      #endif
      #if defined( GL_BOOL_VEC4_ARB )
        ADD_CONST_INT( "GL_BOOL_VEC4_ARB", GL_BOOL_VEC4_ARB );
      #endif
      #if defined( GL_OFFSET_TEXTURE_2D_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_2D_NV", GL_OFFSET_TEXTURE_2D_NV );
      #endif
      #if defined( GL_FRAMEBUFFER )
        ADD_CONST_INT( "GL_FRAMEBUFFER", GL_FRAMEBUFFER );
      #endif
      #if defined( GL_SPECULAR )
        ADD_CONST_INT( "GL_SPECULAR", GL_SPECULAR );
      #endif
      #if defined( GLX_HEIGHT_SGIX )
        ADD_CONST_INT( "GLX_HEIGHT_SGIX", GLX_HEIGHT_SGIX );
      #endif
      #if defined( GL_COLOR_TABLE_FORMAT_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_FORMAT_SGI", GL_COLOR_TABLE_FORMAT_SGI );
      #endif
      #if defined( GLX_VENDOR )
        ADD_CONST_INT( "GLX_VENDOR", GLX_VENDOR );
      #endif
      #if defined( GL_MAX_PROGRAM_ATTRIBS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_ATTRIBS_ARB", GL_MAX_PROGRAM_ATTRIBS_ARB );
      #endif
      #if defined( GL_HALF_FLOAT_ARB )
        ADD_CONST_INT( "GL_HALF_FLOAT_ARB", GL_HALF_FLOAT_ARB );
      #endif
      #if defined( GL_RGB32I_EXT )
        ADD_CONST_INT( "GL_RGB32I_EXT", GL_RGB32I_EXT );
      #endif
      #if defined( GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV", GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV );
      #endif
      #if defined( GL_SAMPLER_BUFFER_AMD )
        ADD_CONST_INT( "GL_SAMPLER_BUFFER_AMD", GL_SAMPLER_BUFFER_AMD );
      #endif
      #if defined( GLX_DRAWABLE_TYPE )
        ADD_CONST_INT( "GLX_DRAWABLE_TYPE", GLX_DRAWABLE_TYPE );
      #endif
      #if defined( GL_GENERATE_MIPMAP )
        ADD_CONST_INT( "GL_GENERATE_MIPMAP", GL_GENERATE_MIPMAP );
      #endif
      #if defined( GL_PROGRAM_PARAMETER_NV )
        ADD_CONST_INT( "GL_PROGRAM_PARAMETER_NV", GL_PROGRAM_PARAMETER_NV );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM", GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM );
      #endif
      #if defined( GL_EXT_texture_rectangle )
        ADD_CONST_INT( "GL_EXT_texture_rectangle", GL_EXT_texture_rectangle );
      #endif
      #if defined( GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB )
        ADD_CONST_INT( "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB", GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB10_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB10_NV", GL_EVAL_VERTEX_ATTRIB10_NV );
      #endif
      #if defined( GL_COLOR_ARRAY_SIZE )
        ADD_CONST_INT( "GL_COLOR_ARRAY_SIZE", GL_COLOR_ARRAY_SIZE );
      #endif
      #if defined( GLX_PBUFFER_WIDTH )
        ADD_CONST_INT( "GLX_PBUFFER_WIDTH", GLX_PBUFFER_WIDTH );
      #endif
      #if defined( GL_STENCIL_BACK_FAIL )
        ADD_CONST_INT( "GL_STENCIL_BACK_FAIL", GL_STENCIL_BACK_FAIL );
      #endif
      #if defined( GL_POLYGON_OFFSET_FACTOR )
        ADD_CONST_INT( "GL_POLYGON_OFFSET_FACTOR", GL_POLYGON_OFFSET_FACTOR );
      #endif
      #if defined( GL_COMPRESSED_RGBA_S3TC_DXT3_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT", GL_COMPRESSED_RGBA_S3TC_DXT3_EXT );
      #endif
      #if defined( GLX_DAMAGED )
        ADD_CONST_INT( "GLX_DAMAGED", GLX_DAMAGED );
      #endif
      #if defined( GL_EXT_texture_compression_latc )
        ADD_CONST_INT( "GL_EXT_texture_compression_latc", GL_EXT_texture_compression_latc );
      #endif
      #if defined( GL_GENERATE_MIPMAP_SGIS )
        ADD_CONST_INT( "GL_GENERATE_MIPMAP_SGIS", GL_GENERATE_MIPMAP_SGIS );
      #endif
      #if defined( GL_INTENSITY8UI_EXT )
        ADD_CONST_INT( "GL_INTENSITY8UI_EXT", GL_INTENSITY8UI_EXT );
      #endif
      #if defined( GL_SYNC_FLUSH_COMMANDS_BIT )
        ADD_CONST_INT( "GL_SYNC_FLUSH_COMMANDS_BIT", GL_SYNC_FLUSH_COMMANDS_BIT );
      #endif
      #if defined( GLX_EXT_visual_info )
        ADD_CONST_INT( "GLX_EXT_visual_info", GLX_EXT_visual_info );
      #endif
      #if defined( GL_QUERY_WAIT_NV )
        ADD_CONST_INT( "GL_QUERY_WAIT_NV", GL_QUERY_WAIT_NV );
      #endif
      #if defined( GL_DRAW_BUFFER14_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER14_ATI", GL_DRAW_BUFFER14_ATI );
      #endif
      #if defined( GL_SIGNED_INTENSITY8_NV )
        ADD_CONST_INT( "GL_SIGNED_INTENSITY8_NV", GL_SIGNED_INTENSITY8_NV );
      #endif
      #if defined( GLX_RGBA_TYPE )
        ADD_CONST_INT( "GLX_RGBA_TYPE", GLX_RGBA_TYPE );
      #endif
      #if defined( GL_EDGE_FLAG )
        ADD_CONST_INT( "GL_EDGE_FLAG", GL_EDGE_FLAG );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT", GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT );
      #endif
      #if defined( GL_POST_CONVOLUTION_ALPHA_BIAS )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_ALPHA_BIAS", GL_POST_CONVOLUTION_ALPHA_BIAS );
      #endif
      #if defined( GL_PACK_LSB_FIRST )
        ADD_CONST_INT( "GL_PACK_LSB_FIRST", GL_PACK_LSB_FIRST );
      #endif
      #if defined( GL_MULTISAMPLE_3DFX )
        ADD_CONST_INT( "GL_MULTISAMPLE_3DFX", GL_MULTISAMPLE_3DFX );
      #endif
      #if defined( GL_BINORMAL_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_BINORMAL_ARRAY_TYPE_EXT", GL_BINORMAL_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_RGBA16I_EXT )
        ADD_CONST_INT( "GL_RGBA16I_EXT", GL_RGBA16I_EXT );
      #endif
      #if defined( GLX_BIND_TO_TEXTURE_INTENSITY_ATI )
        ADD_CONST_INT( "GLX_BIND_TO_TEXTURE_INTENSITY_ATI", GLX_BIND_TO_TEXTURE_INTENSITY_ATI );
      #endif
      #if defined( GL_VIDEO_RESIZE_COMPENSATION_SUN )
        ADD_CONST_INT( "GL_VIDEO_RESIZE_COMPENSATION_SUN", GL_VIDEO_RESIZE_COMPENSATION_SUN );
      #endif
      #if defined( GL_TEXTURE_BIT )
        ADD_CONST_INT( "GL_TEXTURE_BIT", GL_TEXTURE_BIT );
      #endif
      #if defined( GL_UNIFORM_MATRIX_STRIDE )
        ADD_CONST_INT( "GL_UNIFORM_MATRIX_STRIDE", GL_UNIFORM_MATRIX_STRIDE );
      #endif
      #if defined( GL_CONVOLUTION_FORMAT_EXT )
        ADD_CONST_INT( "GL_CONVOLUTION_FORMAT_EXT", GL_CONVOLUTION_FORMAT_EXT );
      #endif
      #if defined( GL_VERTEX_PRECLIP_HINT_SGIX )
        ADD_CONST_INT( "GL_VERTEX_PRECLIP_HINT_SGIX", GL_VERTEX_PRECLIP_HINT_SGIX );
      #endif
      #if defined( GL_MAX_DEPTH_TEXTURE_SAMPLES )
        ADD_CONST_INT( "GL_MAX_DEPTH_TEXTURE_SAMPLES", GL_MAX_DEPTH_TEXTURE_SAMPLES );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV", GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV );
      #endif
      #if defined( GL_QUERY_BY_REGION_WAIT )
        ADD_CONST_INT( "GL_QUERY_BY_REGION_WAIT", GL_QUERY_BY_REGION_WAIT );
      #endif
      #if defined( GL_TEXTURE_RESIDENT )
        ADD_CONST_INT( "GL_TEXTURE_RESIDENT", GL_TEXTURE_RESIDENT );
      #endif
      #if defined( GL_EXT_abgr )
        ADD_CONST_INT( "GL_EXT_abgr", GL_EXT_abgr );
      #endif
      #if defined( GL_OP_MOV_EXT )
        ADD_CONST_INT( "GL_OP_MOV_EXT", GL_OP_MOV_EXT );
      #endif
      #if defined( GL_QUERY_RESULT_AVAILABLE_ARB )
        ADD_CONST_INT( "GL_QUERY_RESULT_AVAILABLE_ARB", GL_QUERY_RESULT_AVAILABLE_ARB );
      #endif
      #if defined( GL_FOG )
        ADD_CONST_INT( "GL_FOG", GL_FOG );
      #endif
      #if defined( GL_POST_CONVOLUTION_RED_SCALE_EXT )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_RED_SCALE_EXT", GL_POST_CONVOLUTION_RED_SCALE_EXT );
      #endif
      #if defined( GL_PACK_CMYK_HINT_EXT )
        ADD_CONST_INT( "GL_PACK_CMYK_HINT_EXT", GL_PACK_CMYK_HINT_EXT );
      #endif
      #if defined( GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV", GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV );
      #endif
      #if defined( GL_FOG_COORD )
        ADD_CONST_INT( "GL_FOG_COORD", GL_FOG_COORD );
      #endif
      #if defined( GLX_NON_CONFORMANT_VISUAL_EXT )
        ADD_CONST_INT( "GLX_NON_CONFORMANT_VISUAL_EXT", GLX_NON_CONFORMANT_VISUAL_EXT );
      #endif
      #if defined( GL_POSITION )
        ADD_CONST_INT( "GL_POSITION", GL_POSITION );
      #endif
      #if defined( GL_STATIC_READ_ARB )
        ADD_CONST_INT( "GL_STATIC_READ_ARB", GL_STATIC_READ_ARB );
      #endif
      #if defined( GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV )
        ADD_CONST_INT( "GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV", GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV );
      #endif
      #if defined( GLEW_EXT_texture_buffer_object )
        ADD_CONST_INT( "GLEW_EXT_texture_buffer_object", GLEW_EXT_texture_buffer_object );
      #endif
      #if defined( GL_CONVOLUTION_BORDER_MODE )
        ADD_CONST_INT( "GL_CONVOLUTION_BORDER_MODE", GL_CONVOLUTION_BORDER_MODE );
      #endif
      #if defined( GL_OFFSET_TEXTURE_2D_SCALE_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_2D_SCALE_NV", GL_OFFSET_TEXTURE_2D_SCALE_NV );
      #endif
      #if defined( GL_RG )
        ADD_CONST_INT( "GL_RG", GL_RG );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT", GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT );
      #endif
      #if defined( GL_PROXY_TEXTURE_CUBE_MAP_ARB )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_CUBE_MAP_ARB", GL_PROXY_TEXTURE_CUBE_MAP_ARB );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY1_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY1_NV", GL_VERTEX_ATTRIB_ARRAY1_NV );
      #endif
      #if defined( GL_LINE_STIPPLE_PATTERN )
        ADD_CONST_INT( "GL_LINE_STIPPLE_PATTERN", GL_LINE_STIPPLE_PATTERN );
      #endif
      #if defined( GL_VERTEX_ARRAY_RANGE_NV )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_RANGE_NV", GL_VERTEX_ARRAY_RANGE_NV );
      #endif
      #if defined( GL_INVALID_FRAMEBUFFER_OPERATION_EXT )
        ADD_CONST_INT( "GL_INVALID_FRAMEBUFFER_OPERATION_EXT", GL_INVALID_FRAMEBUFFER_OPERATION_EXT );
      #endif
      #if defined( GL_VARIANT_ARRAY_EXT )
        ADD_CONST_INT( "GL_VARIANT_ARRAY_EXT", GL_VARIANT_ARRAY_EXT );
      #endif
      #if defined( GL_MAP1_TEXTURE_COORD_2 )
        ADD_CONST_INT( "GL_MAP1_TEXTURE_COORD_2", GL_MAP1_TEXTURE_COORD_2 );
      #endif
      #if defined( GL_LAST_VERTEX_CONVENTION_EXT )
        ADD_CONST_INT( "GL_LAST_VERTEX_CONVENTION_EXT", GL_LAST_VERTEX_CONVENTION_EXT );
      #endif
      #if defined( GL_STENCIL_INDEX4_EXT )
        ADD_CONST_INT( "GL_STENCIL_INDEX4_EXT", GL_STENCIL_INDEX4_EXT );
      #endif
      #if defined( GL_MODULATE_SUBTRACT_ATIX )
        ADD_CONST_INT( "GL_MODULATE_SUBTRACT_ATIX", GL_MODULATE_SUBTRACT_ATIX );
      #endif
      #if defined( GL_ONE_MINUS_CONSTANT_ALPHA_EXT )
        ADD_CONST_INT( "GL_ONE_MINUS_CONSTANT_ALPHA_EXT", GL_ONE_MINUS_CONSTANT_ALPHA_EXT );
      #endif
      #if defined( GL_TRANSPOSE_MODELVIEW_MATRIX_ARB )
        ADD_CONST_INT( "GL_TRANSPOSE_MODELVIEW_MATRIX_ARB", GL_TRANSPOSE_MODELVIEW_MATRIX_ARB );
      #endif
      #if defined( GL_SAMPLE_BUFFERS_ARB )
        ADD_CONST_INT( "GL_SAMPLE_BUFFERS_ARB", GL_SAMPLE_BUFFERS_ARB );
      #endif
      #if defined( GLX_WINDOW_BIT_SGIX )
        ADD_CONST_INT( "GLX_WINDOW_BIT_SGIX", GLX_WINDOW_BIT_SGIX );
      #endif
      #if defined( GL_RED_BIT_ATI )
        ADD_CONST_INT( "GL_RED_BIT_ATI", GL_RED_BIT_ATI );
      #endif
      #if defined( GLEW_ATIX_point_sprites )
        ADD_CONST_INT( "GLEW_ATIX_point_sprites", GLEW_ATIX_point_sprites );
      #endif
      #if defined( GL_COLOR_INDEX8_EXT )
        ADD_CONST_INT( "GL_COLOR_INDEX8_EXT", GL_COLOR_INDEX8_EXT );
      #endif
      #if defined( GL_ENABLE_BIT )
        ADD_CONST_INT( "GL_ENABLE_BIT", GL_ENABLE_BIT );
      #endif
      #if defined( GL_RGB8_EXT )
        ADD_CONST_INT( "GL_RGB8_EXT", GL_RGB8_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB", GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB );
      #endif
      #if defined( GL_SAMPLER_1D_ARRAY_SHADOW_EXT )
        ADD_CONST_INT( "GL_SAMPLER_1D_ARRAY_SHADOW_EXT", GL_SAMPLER_1D_ARRAY_SHADOW_EXT );
      #endif
      #if defined( GL_OPERAND0_RGB_ARB )
        ADD_CONST_INT( "GL_OPERAND0_RGB_ARB", GL_OPERAND0_RGB_ARB );
      #endif
      #if defined( GL_SWIZZLE_STQ_DQ_ATI )
        ADD_CONST_INT( "GL_SWIZZLE_STQ_DQ_ATI", GL_SWIZZLE_STQ_DQ_ATI );
      #endif
      #if defined( GL_MAP_COLOR )
        ADD_CONST_INT( "GL_MAP_COLOR", GL_MAP_COLOR );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD8_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD8_EXT", GL_OUTPUT_TEXTURE_COORD8_EXT );
      #endif
      #if defined( GL_MAX_VERTEX_ATTRIBS )
        ADD_CONST_INT( "GL_MAX_VERTEX_ATTRIBS", GL_MAX_VERTEX_ATTRIBS );
      #endif
      #if defined( GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS", GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS );
      #endif
      #if defined( GL_CONSTANT )
        ADD_CONST_INT( "GL_CONSTANT", GL_CONSTANT );
      #endif
      #if defined( GL_PACK_IMAGE_HEIGHT_EXT )
        ADD_CONST_INT( "GL_PACK_IMAGE_HEIGHT_EXT", GL_PACK_IMAGE_HEIGHT_EXT );
      #endif
      #if defined( GL_LINE_WIDTH_RANGE )
        ADD_CONST_INT( "GL_LINE_WIDTH_RANGE", GL_LINE_WIDTH_RANGE );
      #endif
      #if defined( GL_XOR )
        ADD_CONST_INT( "GL_XOR", GL_XOR );
      #endif
      #if defined( GL_BLUE_BIT_ATI )
        ADD_CONST_INT( "GL_BLUE_BIT_ATI", GL_BLUE_BIT_ATI );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY15_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY15_NV", GL_VERTEX_ATTRIB_ARRAY15_NV );
      #endif
      #if defined( GLX_AUX9_EXT )
        ADD_CONST_INT( "GLX_AUX9_EXT", GLX_AUX9_EXT );
      #endif
      #if defined( GLX_DEPTH_BUFFER_BIT_SGIX )
        ADD_CONST_INT( "GLX_DEPTH_BUFFER_BIT_SGIX", GLX_DEPTH_BUFFER_BIT_SGIX );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY3_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY3_NV", GL_VERTEX_ATTRIB_ARRAY3_NV );
      #endif
      #if defined( GL_EXT_draw_instanced )
        ADD_CONST_INT( "GL_EXT_draw_instanced", GL_EXT_draw_instanced );
      #endif
      #if defined( GL_VARIABLE_A_NV )
        ADD_CONST_INT( "GL_VARIABLE_A_NV", GL_VARIABLE_A_NV );
      #endif
      #if defined( GL_LESS )
        ADD_CONST_INT( "GL_LESS", GL_LESS );
      #endif
      #if defined( GL_COMBINER_CD_OUTPUT_NV )
        ADD_CONST_INT( "GL_COMBINER_CD_OUTPUT_NV", GL_COMBINER_CD_OUTPUT_NV );
      #endif
      #if defined( GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT )
        ADD_CONST_INT( "GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT );
      #endif
      #if defined( GL_VERSION_3_2 )
        ADD_CONST_INT( "GL_VERSION_3_2", GL_VERSION_3_2 );
      #endif
      #if defined( GL_FRAMEBUFFER_UNDEFINED )
        ADD_CONST_INT( "GL_FRAMEBUFFER_UNDEFINED", GL_FRAMEBUFFER_UNDEFINED );
      #endif
      #if defined( GL_COMBINE_EXT )
        ADD_CONST_INT( "GL_COMBINE_EXT", GL_COMBINE_EXT );
      #endif
      #if defined( GL_TEXTURE_STENCIL_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_STENCIL_SIZE", GL_TEXTURE_STENCIL_SIZE );
      #endif
      #if defined( GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT )
        ADD_CONST_INT( "GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT );
      #endif
      #if defined( GL_EXT_depth_bounds_test )
        ADD_CONST_INT( "GL_EXT_depth_bounds_test", GL_EXT_depth_bounds_test );
      #endif
      #if defined( GL_EMISSION )
        ADD_CONST_INT( "GL_EMISSION", GL_EMISSION );
      #endif
      #if defined( GLEW_3DFX_texture_compression_FXT1 )
        ADD_CONST_INT( "GLEW_3DFX_texture_compression_FXT1", GLEW_3DFX_texture_compression_FXT1 );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD0_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD0_EXT", GL_OUTPUT_TEXTURE_COORD0_EXT );
      #endif
      #if defined( GL_COMPRESSED_LUMINANCE_ALPHA )
        ADD_CONST_INT( "GL_COMPRESSED_LUMINANCE_ALPHA", GL_COMPRESSED_LUMINANCE_ALPHA );
      #endif
      #if defined( GL_MAX_PROGRAM_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_INT_SAMPLER_1D )
        ADD_CONST_INT( "GL_INT_SAMPLER_1D", GL_INT_SAMPLER_1D );
      #endif
      #if defined( GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS )
        ADD_CONST_INT( "GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS", GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS );
      #endif
      #if defined( GL_TEXTURE14_ARB )
        ADD_CONST_INT( "GL_TEXTURE14_ARB", GL_TEXTURE14_ARB );
      #endif
      #if defined( GL_OP_CROSS_PRODUCT_EXT )
        ADD_CONST_INT( "GL_OP_CROSS_PRODUCT_EXT", GL_OP_CROSS_PRODUCT_EXT );
      #endif
      #if defined( GL_LUMINANCE_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_LUMINANCE_EXTENDED_RANGE_SGIX", GL_LUMINANCE_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI", GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI );
      #endif
      #if defined( GL_REGISTER_COMBINERS_NV )
        ADD_CONST_INT( "GL_REGISTER_COMBINERS_NV", GL_REGISTER_COMBINERS_NV );
      #endif
      #if defined( GLEW_EXT_422_pixels )
        ADD_CONST_INT( "GLEW_EXT_422_pixels", GLEW_EXT_422_pixels );
      #endif
      #if defined( GL_STENCIL_INDEX8 )
        ADD_CONST_INT( "GL_STENCIL_INDEX8", GL_STENCIL_INDEX8 );
      #endif
      #if defined( GL_COMBINE4_NV )
        ADD_CONST_INT( "GL_COMBINE4_NV", GL_COMBINE4_NV );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT", GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT );
      #endif
      #if defined( GL_MAX_DRAW_BUFFERS_ARB )
        ADD_CONST_INT( "GL_MAX_DRAW_BUFFERS_ARB", GL_MAX_DRAW_BUFFERS_ARB );
      #endif
      #if defined( GL_ADD_SIGNED_EXT )
        ADD_CONST_INT( "GL_ADD_SIGNED_EXT", GL_ADD_SIGNED_EXT );
      #endif
      #if defined( GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI )
        ADD_CONST_INT( "GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI", GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI );
      #endif
      #if defined( GL_STENCIL_INDEX16_EXT )
        ADD_CONST_INT( "GL_STENCIL_INDEX16_EXT", GL_STENCIL_INDEX16_EXT );
      #endif
      #if defined( GL_ENV_COPY_EXT )
        ADD_CONST_INT( "GL_ENV_COPY_EXT", GL_ENV_COPY_EXT );
      #endif
      #if defined( GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX )
        ADD_CONST_INT( "GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX", GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX );
      #endif
      #if defined( GL_REPEAT )
        ADD_CONST_INT( "GL_REPEAT", GL_REPEAT );
      #endif
      #if defined( GLEW_EXT_pixel_transform )
        ADD_CONST_INT( "GLEW_EXT_pixel_transform", GLEW_EXT_pixel_transform );
      #endif
      #if defined( GL_T2F_C4F_N3F_V3F )
        ADD_CONST_INT( "GL_T2F_C4F_N3F_V3F", GL_T2F_C4F_N3F_V3F );
      #endif
      #if defined( GL_TEXTURE_INTENSITY_TYPE )
        ADD_CONST_INT( "GL_TEXTURE_INTENSITY_TYPE", GL_TEXTURE_INTENSITY_TYPE );
      #endif
      #if defined( GL_OBJECT_DELETE_STATUS_ARB )
        ADD_CONST_INT( "GL_OBJECT_DELETE_STATUS_ARB", GL_OBJECT_DELETE_STATUS_ARB );
      #endif
      #if defined( GL_WEIGHT_ARRAY_SIZE_ARB )
        ADD_CONST_INT( "GL_WEIGHT_ARRAY_SIZE_ARB", GL_WEIGHT_ARRAY_SIZE_ARB );
      #endif
      #if defined( GL_COLOR_TABLE_WIDTH_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_WIDTH_SGI", GL_COLOR_TABLE_WIDTH_SGI );
      #endif
      #if defined( GL_INTENSITY16 )
        ADD_CONST_INT( "GL_INTENSITY16", GL_INTENSITY16 );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB8_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB8_4_NV", GL_MAP1_VERTEX_ATTRIB8_4_NV );
      #endif
      #if defined( GL_VERTEX_SHADER_EXT )
        ADD_CONST_INT( "GL_VERTEX_SHADER_EXT", GL_VERTEX_SHADER_EXT );
      #endif
      #if defined( GL_CLIENT_ALL_ATTRIB_BITS )
        ADD_CONST_INT( "GL_CLIENT_ALL_ATTRIB_BITS", GL_CLIENT_ALL_ATTRIB_BITS );
      #endif
      #if defined( GL_VALIDATE_STATUS )
        ADD_CONST_INT( "GL_VALIDATE_STATUS", GL_VALIDATE_STATUS );
      #endif
      #if defined( GLX_STATIC_GRAY )
        ADD_CONST_INT( "GLX_STATIC_GRAY", GLX_STATIC_GRAY );
      #endif
      #if defined( GL_RG16 )
        ADD_CONST_INT( "GL_RG16", GL_RG16 );
      #endif
      #if defined( GL_EXT_Cg_shader )
        ADD_CONST_INT( "GL_EXT_Cg_shader", GL_EXT_Cg_shader );
      #endif
      #if defined( GLX_FRONT_LEFT_BUFFER_BIT )
        ADD_CONST_INT( "GLX_FRONT_LEFT_BUFFER_BIT", GLX_FRONT_LEFT_BUFFER_BIT );
      #endif
      #if defined( GL_SCISSOR_TEST )
        ADD_CONST_INT( "GL_SCISSOR_TEST", GL_SCISSOR_TEST );
      #endif
      #if defined( GL_UNPACK_SKIP_IMAGES )
        ADD_CONST_INT( "GL_UNPACK_SKIP_IMAGES", GL_UNPACK_SKIP_IMAGES );
      #endif
      #if defined( GL_RGB_SCALE_ARB )
        ADD_CONST_INT( "GL_RGB_SCALE_ARB", GL_RGB_SCALE_ARB );
      #endif
      #if defined( GL_TEXTURE_2D_MULTISAMPLE )
        ADD_CONST_INT( "GL_TEXTURE_2D_MULTISAMPLE", GL_TEXTURE_2D_MULTISAMPLE );
      #endif
      #if defined( GLX_GRAY_SCALE_EXT )
        ADD_CONST_INT( "GLX_GRAY_SCALE_EXT", GLX_GRAY_SCALE_EXT );
      #endif
      #if defined( GL_SAMPLER_1D_ARRAY_SHADOW )
        ADD_CONST_INT( "GL_SAMPLER_1D_ARRAY_SHADOW", GL_SAMPLER_1D_ARRAY_SHADOW );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_1D_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_1D_EXT", GL_UNSIGNED_INT_SAMPLER_1D_EXT );
      #endif
      #if defined( GL_DRAW_BUFFER12_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER12_ARB", GL_DRAW_BUFFER12_ARB );
      #endif
      #if defined( GL_ATOMIC_COUNTER_BARRIER_BIT_EXT )
        ADD_CONST_INT( "GL_ATOMIC_COUNTER_BARRIER_BIT_EXT", GL_ATOMIC_COUNTER_BARRIER_BIT_EXT );
      #endif
      #if defined( GL_VERTEX_PROGRAM_POINT_SIZE_NV )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_POINT_SIZE_NV", GL_VERTEX_PROGRAM_POINT_SIZE_NV );
      #endif
      #if defined( GL_RGB16UI_EXT )
        ADD_CONST_INT( "GL_RGB16UI_EXT", GL_RGB16UI_EXT );
      #endif
      #if defined( GL_COLOR_TABLE_BLUE_SIZE_EXT )
        ADD_CONST_INT( "GL_COLOR_TABLE_BLUE_SIZE_EXT", GL_COLOR_TABLE_BLUE_SIZE_EXT );
      #endif
      #if defined( GLX_PIXMAP_BIT_SGIX )
        ADD_CONST_INT( "GLX_PIXMAP_BIT_SGIX", GLX_PIXMAP_BIT_SGIX );
      #endif
      #if defined( GL_BLEND_EQUATION_ALPHA )
        ADD_CONST_INT( "GL_BLEND_EQUATION_ALPHA", GL_BLEND_EQUATION_ALPHA );
      #endif
      #if defined( GL_COLOR_ATTACHMENT5_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT5_EXT", GL_COLOR_ATTACHMENT5_EXT );
      #endif
      #if defined( GL_RGB10_A2_EXT )
        ADD_CONST_INT( "GL_RGB10_A2_EXT", GL_RGB10_A2_EXT );
      #endif
      #if defined( GL_POST_CONVOLUTION_COLOR_TABLE_SGI )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_COLOR_TABLE_SGI", GL_POST_CONVOLUTION_COLOR_TABLE_SGI );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS", GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS );
      #endif
      #if defined( GL_ONE_MINUS_CONSTANT_COLOR_EXT )
        ADD_CONST_INT( "GL_ONE_MINUS_CONSTANT_COLOR_EXT", GL_ONE_MINUS_CONSTANT_COLOR_EXT );
      #endif
      #if defined( GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI )
        ADD_CONST_INT( "GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI", GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI );
      #endif
      #if defined( GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV )
        ADD_CONST_INT( "GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV", GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV );
      #endif
      #if defined( GL_NORMAL_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_POINTER_EXT", GL_NORMAL_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_MAP_TESSELLATION_NV )
        ADD_CONST_INT( "GL_MAP_TESSELLATION_NV", GL_MAP_TESSELLATION_NV );
      #endif
      #if defined( GL_CONVOLUTION_WIDTH_EXT )
        ADD_CONST_INT( "GL_CONVOLUTION_WIDTH_EXT", GL_CONVOLUTION_WIDTH_EXT );
      #endif
      #if defined( GL_READ_FRAMEBUFFER_BINDING_EXT )
        ADD_CONST_INT( "GL_READ_FRAMEBUFFER_BINDING_EXT", GL_READ_FRAMEBUFFER_BINDING_EXT );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_LIST_IBM )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_LIST_IBM", GL_EDGE_FLAG_ARRAY_LIST_IBM );
      #endif
      #if defined( GL_LOCAL_EXT )
        ADD_CONST_INT( "GL_LOCAL_EXT", GL_LOCAL_EXT );
      #endif
      #if defined( GL_DETAIL_TEXTURE_2D_BINDING_SGIS )
        ADD_CONST_INT( "GL_DETAIL_TEXTURE_2D_BINDING_SGIS", GL_DETAIL_TEXTURE_2D_BINDING_SGIS );
      #endif
      #if defined( GL_ATTACHED_SHADERS )
        ADD_CONST_INT( "GL_ATTACHED_SHADERS", GL_ATTACHED_SHADERS );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE", GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_3D_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_3D_EXT", GL_UNSIGNED_INT_SAMPLER_3D_EXT );
      #endif
      #if defined( GL_MATRIX6_NV )
        ADD_CONST_INT( "GL_MATRIX6_NV", GL_MATRIX6_NV );
      #endif
      #if defined( GL_QUERY_BY_REGION_NO_WAIT )
        ADD_CONST_INT( "GL_QUERY_BY_REGION_NO_WAIT", GL_QUERY_BY_REGION_NO_WAIT );
      #endif
      #if defined( GLX_COLOR_INDEX_TYPE )
        ADD_CONST_INT( "GLX_COLOR_INDEX_TYPE", GLX_COLOR_INDEX_TYPE );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB12_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB12_4_NV", GL_MAP1_VERTEX_ATTRIB12_4_NV );
      #endif
      #if defined( GL_SAMPLE_COVERAGE_INVERT )
        ADD_CONST_INT( "GL_SAMPLE_COVERAGE_INVERT", GL_SAMPLE_COVERAGE_INVERT );
      #endif
      #if defined( GLX_MAX_PBUFFER_HEIGHT_SGIX )
        ADD_CONST_INT( "GLX_MAX_PBUFFER_HEIGHT_SGIX", GLX_MAX_PBUFFER_HEIGHT_SGIX );
      #endif
      #if defined( GL_LINES )
        ADD_CONST_INT( "GL_LINES", GL_LINES );
      #endif
      #if defined( GL_TEXTURE18 )
        ADD_CONST_INT( "GL_TEXTURE18", GL_TEXTURE18 );
      #endif
      #if defined( GL_TEXTURE19 )
        ADD_CONST_INT( "GL_TEXTURE19", GL_TEXTURE19 );
      #endif
      #if defined( GL_TEXTURE16 )
        ADD_CONST_INT( "GL_TEXTURE16", GL_TEXTURE16 );
      #endif
      #if defined( GL_TEXTURE17 )
        ADD_CONST_INT( "GL_TEXTURE17", GL_TEXTURE17 );
      #endif
      #if defined( GL_TEXTURE14 )
        ADD_CONST_INT( "GL_TEXTURE14", GL_TEXTURE14 );
      #endif
      #if defined( GL_TEXTURE15 )
        ADD_CONST_INT( "GL_TEXTURE15", GL_TEXTURE15 );
      #endif
      #if defined( GL_TEXTURE12 )
        ADD_CONST_INT( "GL_TEXTURE12", GL_TEXTURE12 );
      #endif
      #if defined( GL_TEXTURE13 )
        ADD_CONST_INT( "GL_TEXTURE13", GL_TEXTURE13 );
      #endif
      #if defined( GL_TEXTURE10 )
        ADD_CONST_INT( "GL_TEXTURE10", GL_TEXTURE10 );
      #endif
      #if defined( GL_TEXTURE11 )
        ADD_CONST_INT( "GL_TEXTURE11", GL_TEXTURE11 );
      #endif
      #if defined( GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB", GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB );
      #endif
      #if defined( GL_OBJECT_LINE_SGIS )
        ADD_CONST_INT( "GL_OBJECT_LINE_SGIS", GL_OBJECT_LINE_SGIS );
      #endif
      #if defined( GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB )
        ADD_CONST_INT( "GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB", GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB );
      #endif
      #if defined( GL_TEXTURE_SWIZZLE_A_EXT )
        ADD_CONST_INT( "GL_TEXTURE_SWIZZLE_A_EXT", GL_TEXTURE_SWIZZLE_A_EXT );
      #endif
      #if defined( GL_NEGATIVE_W_EXT )
        ADD_CONST_INT( "GL_NEGATIVE_W_EXT", GL_NEGATIVE_W_EXT );
      #endif
      #if defined( GL_3DFX_multisample )
        ADD_CONST_INT( "GL_3DFX_multisample", GL_3DFX_multisample );
      #endif
      #if defined( GL_SECONDARY_INTERPOLATOR_ATI )
        ADD_CONST_INT( "GL_SECONDARY_INTERPOLATOR_ATI", GL_SECONDARY_INTERPOLATOR_ATI );
      #endif
      #if defined( GLEW_EXT_histogram )
        ADD_CONST_INT( "GLEW_EXT_histogram", GLEW_EXT_histogram );
      #endif
      #if defined( GL_RGB )
        ADD_CONST_INT( "GL_RGB", GL_RGB );
      #endif
      #if defined( GLXEW_VERSION_1_3 )
        ADD_CONST_INT( "GLXEW_VERSION_1_3", GLXEW_VERSION_1_3 );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB7_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB7_4_NV", GL_MAP2_VERTEX_ATTRIB7_4_NV );
      #endif
      #if defined( GL_TEXTURE_BASE_LEVEL_SGIS )
        ADD_CONST_INT( "GL_TEXTURE_BASE_LEVEL_SGIS", GL_TEXTURE_BASE_LEVEL_SGIS );
      #endif
      #if defined( GL_TEXTURE_DS_SIZE_NV )
        ADD_CONST_INT( "GL_TEXTURE_DS_SIZE_NV", GL_TEXTURE_DS_SIZE_NV );
      #endif
      #if defined( GL_POST_CONVOLUTION_ALPHA_BIAS_EXT )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_ALPHA_BIAS_EXT", GL_POST_CONVOLUTION_ALPHA_BIAS_EXT );
      #endif
      #if defined( GL_OUTPUT_COLOR0_EXT )
        ADD_CONST_INT( "GL_OUTPUT_COLOR0_EXT", GL_OUTPUT_COLOR0_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_START )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_START", GL_TRANSFORM_FEEDBACK_BUFFER_START );
      #endif
      #if defined( GL_MAX_PROGRAM_TEXEL_OFFSET )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TEXEL_OFFSET", GL_MAX_PROGRAM_TEXEL_OFFSET );
      #endif
      #if defined( GL_STACK_OVERFLOW )
        ADD_CONST_INT( "GL_STACK_OVERFLOW", GL_STACK_OVERFLOW );
      #endif
      #if defined( GL_COMPARE_R_TO_TEXTURE_ARB )
        ADD_CONST_INT( "GL_COMPARE_R_TO_TEXTURE_ARB", GL_COMPARE_R_TO_TEXTURE_ARB );
      #endif
      #if defined( GL_MAP1_VERTEX_4 )
        ADD_CONST_INT( "GL_MAP1_VERTEX_4", GL_MAP1_VERTEX_4 );
      #endif
      #if defined( GL_RECLAIM_MEMORY_HINT_PGI )
        ADD_CONST_INT( "GL_RECLAIM_MEMORY_HINT_PGI", GL_RECLAIM_MEMORY_HINT_PGI );
      #endif
      #if defined( GL_FLOAT_RGBA_NV )
        ADD_CONST_INT( "GL_FLOAT_RGBA_NV", GL_FLOAT_RGBA_NV );
      #endif
      #if defined( GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX )
        ADD_CONST_INT( "GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX", GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX );
      #endif
      #if defined( GLXEW_VERSION_1_0 )
        ADD_CONST_INT( "GLXEW_VERSION_1_0", GLXEW_VERSION_1_0 );
      #endif
      #if defined( GLEW_EXT_multi_draw_arrays )
        ADD_CONST_INT( "GLEW_EXT_multi_draw_arrays", GLEW_EXT_multi_draw_arrays );
      #endif
      #if defined( GL_RGBA32F )
        ADD_CONST_INT( "GL_RGBA32F", GL_RGBA32F );
      #endif
      #if defined( GL_RGBA32I )
        ADD_CONST_INT( "GL_RGBA32I", GL_RGBA32I );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_EXT", GL_TRANSFORM_FEEDBACK_BUFFER_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_TYPE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_TYPE", GL_VERTEX_ATTRIB_ARRAY_TYPE );
      #endif
      #if defined( GL_NORMAL_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_LENGTH_NV", GL_NORMAL_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_COLOR_TABLE_BLUE_SIZE )
        ADD_CONST_INT( "GL_COLOR_TABLE_BLUE_SIZE", GL_COLOR_TABLE_BLUE_SIZE );
      #endif
      #if defined( GLX_X_VISUAL_TYPE_EXT )
        ADD_CONST_INT( "GLX_X_VISUAL_TYPE_EXT", GLX_X_VISUAL_TYPE_EXT );
      #endif
      #if defined( GL_STENCIL_WRITEMASK )
        ADD_CONST_INT( "GL_STENCIL_WRITEMASK", GL_STENCIL_WRITEMASK );
      #endif
      #if defined( GL_RG8 )
        ADD_CONST_INT( "GL_RG8", GL_RG8 );
      #endif
      #if defined( GL_TEXTURE_BINDING_BUFFER_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_BUFFER_EXT", GL_TEXTURE_BINDING_BUFFER_EXT );
      #endif
      #if defined( GL_PERFMON_RESULT_AMD )
        ADD_CONST_INT( "GL_PERFMON_RESULT_AMD", GL_PERFMON_RESULT_AMD );
      #endif
      #if defined( GL_STENCIL_INDEX8_EXT )
        ADD_CONST_INT( "GL_STENCIL_INDEX8_EXT", GL_STENCIL_INDEX8_EXT );
      #endif
      #if defined( GL_EIGHTH_BIT_ATI )
        ADD_CONST_INT( "GL_EIGHTH_BIT_ATI", GL_EIGHTH_BIT_ATI );
      #endif
      #if defined( GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB )
        ADD_CONST_INT( "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB", GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB );
      #endif
      #if defined( GL_RED_INTEGER_EXT )
        ADD_CONST_INT( "GL_RED_INTEGER_EXT", GL_RED_INTEGER_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY8_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY8_NV", GL_VERTEX_ATTRIB_ARRAY8_NV );
      #endif
      #if defined( GL_VARIANT_VALUE_EXT )
        ADD_CONST_INT( "GL_VARIANT_VALUE_EXT", GL_VARIANT_VALUE_EXT );
      #endif
      #if defined( GL_PN_TRIANGLES_POINT_MODE_ATI )
        ADD_CONST_INT( "GL_PN_TRIANGLES_POINT_MODE_ATI", GL_PN_TRIANGLES_POINT_MODE_ATI );
      #endif
      #if defined( GLX_MAX_BLUE_SGIS )
        ADD_CONST_INT( "GLX_MAX_BLUE_SGIS", GLX_MAX_BLUE_SGIS );
      #endif
      #if defined( GLX_TEXTURE_FORMAT_RGBA_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_FORMAT_RGBA_EXT", GLX_TEXTURE_FORMAT_RGBA_EXT );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE );
      #endif
      #if defined( GLX_TEXTURE_2D_BIT_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_2D_BIT_EXT", GLX_TEXTURE_2D_BIT_EXT );
      #endif
      #if defined( GL_MAP_UNSYNCHRONIZED_BIT )
        ADD_CONST_INT( "GL_MAP_UNSYNCHRONIZED_BIT", GL_MAP_UNSYNCHRONIZED_BIT );
      #endif
      #if defined( GL_EXT_vertex_weighting )
        ADD_CONST_INT( "GL_EXT_vertex_weighting", GL_EXT_vertex_weighting );
      #endif
      #if defined( GL_MODELVIEW0_ARB )
        ADD_CONST_INT( "GL_MODELVIEW0_ARB", GL_MODELVIEW0_ARB );
      #endif
      #if defined( GL_PRIMITIVE_RESTART )
        ADD_CONST_INT( "GL_PRIMITIVE_RESTART", GL_PRIMITIVE_RESTART );
      #endif
      #if defined( GLX_DONT_CARE )
        ADD_CONST_INT( "GLX_DONT_CARE", GLX_DONT_CARE );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV", GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV );
      #endif
      #if defined( GL_VERTEX_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_LENGTH_NV", GL_VERTEX_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_UNSIGNED_IDENTITY_NV )
        ADD_CONST_INT( "GL_UNSIGNED_IDENTITY_NV", GL_UNSIGNED_IDENTITY_NV );
      #endif
      #if defined( GL_Y_EXT )
        ADD_CONST_INT( "GL_Y_EXT", GL_Y_EXT );
      #endif
      #if defined( GL_TEXTURE_BINDING_RENDERBUFFER_NV )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_RENDERBUFFER_NV", GL_TEXTURE_BINDING_RENDERBUFFER_NV );
      #endif
      #if defined( GL_MATRIX4_NV )
        ADD_CONST_INT( "GL_MATRIX4_NV", GL_MATRIX4_NV );
      #endif
      #if defined( GL_EXT_cull_vertex )
        ADD_CONST_INT( "GL_EXT_cull_vertex", GL_EXT_cull_vertex );
      #endif
      #if defined( GL_OP_MULTIPLY_MATRIX_EXT )
        ADD_CONST_INT( "GL_OP_MULTIPLY_MATRIX_EXT", GL_OP_MULTIPLY_MATRIX_EXT );
      #endif
      #if defined( GL_SRC_ALPHA )
        ADD_CONST_INT( "GL_SRC_ALPHA", GL_SRC_ALPHA );
      #endif
      #if defined( GL_TEXTURE_3D )
        ADD_CONST_INT( "GL_TEXTURE_3D", GL_TEXTURE_3D );
      #endif
      #if defined( GL_SCALE_BY_ONE_HALF_NV )
        ADD_CONST_INT( "GL_SCALE_BY_ONE_HALF_NV", GL_SCALE_BY_ONE_HALF_NV );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL", GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL );
      #endif
      #if defined( GL_INDEX_ARRAY_POINTER )
        ADD_CONST_INT( "GL_INDEX_ARRAY_POINTER", GL_INDEX_ARRAY_POINTER );
      #endif
      #if defined( GL_DRAW_BUFFER5_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER5_ARB", GL_DRAW_BUFFER5_ARB );
      #endif
      #if defined( GL_BLEND_SRC_RGB_EXT )
        ADD_CONST_INT( "GL_BLEND_SRC_RGB_EXT", GL_BLEND_SRC_RGB_EXT );
      #endif
      #if defined( GL_MIN_GREEN_SGIS )
        ADD_CONST_INT( "GL_MIN_GREEN_SGIS", GL_MIN_GREEN_SGIS );
      #endif
      #if defined( GL_COMBINER_SCALE_NV )
        ADD_CONST_INT( "GL_COMBINER_SCALE_NV", GL_COMBINER_SCALE_NV );
      #endif
      #if defined( GL_TANGENT_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_TANGENT_ARRAY_POINTER_EXT", GL_TANGENT_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_DOT4_ATI )
        ADD_CONST_INT( "GL_DOT4_ATI", GL_DOT4_ATI );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY12_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY12_NV", GL_VERTEX_ATTRIB_ARRAY12_NV );
      #endif
      #if defined( GL_SLICE_ACCUM_SUN )
        ADD_CONST_INT( "GL_SLICE_ACCUM_SUN", GL_SLICE_ACCUM_SUN );
      #endif
      #if defined( GL_OFFSET_TEXTURE_2D_BIAS_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_2D_BIAS_NV", GL_OFFSET_TEXTURE_2D_BIAS_NV );
      #endif
      #if defined( GL_MIN_EXT )
        ADD_CONST_INT( "GL_MIN_EXT", GL_MIN_EXT );
      #endif
      #if defined( GL_TEXTURE_UNSIGNED_REMAP_MODE_NV )
        ADD_CONST_INT( "GL_TEXTURE_UNSIGNED_REMAP_MODE_NV", GL_TEXTURE_UNSIGNED_REMAP_MODE_NV );
      #endif
      #if defined( GLX_X_RENDERABLE_SGIX )
        ADD_CONST_INT( "GLX_X_RENDERABLE_SGIX", GLX_X_RENDERABLE_SGIX );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_STRIDE", GL_SECONDARY_COLOR_ARRAY_STRIDE );
      #endif
      #if defined( GL_RG32UI )
        ADD_CONST_INT( "GL_RG32UI", GL_RG32UI );
      #endif
      #if defined( GL_ALL_CLIENT_ATTRIB_BITS )
        ADD_CONST_INT( "GL_ALL_CLIENT_ATTRIB_BITS", GL_ALL_CLIENT_ATTRIB_BITS );
      #endif
      #if defined( GL_NORMALIZE )
        ADD_CONST_INT( "GL_NORMALIZE", GL_NORMALIZE );
      #endif
      #if defined( GL_GEOMETRY_OUTPUT_TYPE_ARB )
        ADD_CONST_INT( "GL_GEOMETRY_OUTPUT_TYPE_ARB", GL_GEOMETRY_OUTPUT_TYPE_ARB );
      #endif
      #if defined( GL_TEXTURE_LO_SIZE_NV )
        ADD_CONST_INT( "GL_TEXTURE_LO_SIZE_NV", GL_TEXTURE_LO_SIZE_NV );
      #endif
      #if defined( GLEW_EXT_coordinate_frame )
        ADD_CONST_INT( "GLEW_EXT_coordinate_frame", GLEW_EXT_coordinate_frame );
      #endif
      #if defined( GL_SAMPLE_BUFFERS_SGIS )
        ADD_CONST_INT( "GL_SAMPLE_BUFFERS_SGIS", GL_SAMPLE_BUFFERS_SGIS );
      #endif
      #if defined( GLX_EXT_visual_rating )
        ADD_CONST_INT( "GLX_EXT_visual_rating", GLX_EXT_visual_rating );
      #endif
      #if defined( GL_BLUE_SCALE )
        ADD_CONST_INT( "GL_BLUE_SCALE", GL_BLUE_SCALE );
      #endif
      #if defined( GL_MODELVIEW16_ARB )
        ADD_CONST_INT( "GL_MODELVIEW16_ARB", GL_MODELVIEW16_ARB );
      #endif
      #if defined( GL_TEXTURE_INTERNAL_FORMAT )
        ADD_CONST_INT( "GL_TEXTURE_INTERNAL_FORMAT", GL_TEXTURE_INTERNAL_FORMAT );
      #endif
      #if defined( GL_TRANSFORM_HINT_APPLE )
        ADD_CONST_INT( "GL_TRANSFORM_HINT_APPLE", GL_TRANSFORM_HINT_APPLE );
      #endif
      #if defined( GL_INTERLEAVED_ATTRIBS_NV )
        ADD_CONST_INT( "GL_INTERLEAVED_ATTRIBS_NV", GL_INTERLEAVED_ATTRIBS_NV );
      #endif
      #if defined( GL_REG_3_ATI )
        ADD_CONST_INT( "GL_REG_3_ATI", GL_REG_3_ATI );
      #endif
      #if defined( GL_RGB16_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_RGB16_EXTENDED_RANGE_SGIX", GL_RGB16_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_TEXTURE_FOG_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_FOG_SGIX", GL_TEXTURE_FOG_SGIX );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_ALPHA_SCALE )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_ALPHA_SCALE", GL_POST_COLOR_MATRIX_ALPHA_SCALE );
      #endif
      #if defined( GL_FRAMEBUFFER_COMPLETE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_COMPLETE", GL_FRAMEBUFFER_COMPLETE );
      #endif
      #if defined( GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV )
        ADD_CONST_INT( "GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV", GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV );
      #endif
      #if defined( GL_COPY_READ_BUFFER )
        ADD_CONST_INT( "GL_COPY_READ_BUFFER", GL_COPY_READ_BUFFER );
      #endif
      #if defined( GLX_NONE )
        ADD_CONST_INT( "GLX_NONE", GLX_NONE );
      #endif
      #if defined( GL_FOG_COORD_ARRAY_POINTER )
        ADD_CONST_INT( "GL_FOG_COORD_ARRAY_POINTER", GL_FOG_COORD_ARRAY_POINTER );
      #endif
      #if defined( GL_ENV_BLEND_EXT )
        ADD_CONST_INT( "GL_ENV_BLEND_EXT", GL_ENV_BLEND_EXT );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_TYPE_EXT", GL_FOG_COORDINATE_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_VERTEX_ARRAY_SIZE_EXT )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_SIZE_EXT", GL_VERTEX_ARRAY_SIZE_EXT );
      #endif
      #if defined( GL_NUM_FRAGMENT_REGISTERS_ATI )
        ADD_CONST_INT( "GL_NUM_FRAGMENT_REGISTERS_ATI", GL_NUM_FRAGMENT_REGISTERS_ATI );
      #endif
      #if defined( GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI )
        ADD_CONST_INT( "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI", GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI );
      #endif
      #if defined( GL_MATRIX11_ARB )
        ADD_CONST_INT( "GL_MATRIX11_ARB", GL_MATRIX11_ARB );
      #endif
      #if defined( GL_SUBPIXEL_BITS )
        ADD_CONST_INT( "GL_SUBPIXEL_BITS", GL_SUBPIXEL_BITS );
      #endif
      #if defined( GL_NORMAL_ARRAY )
        ADD_CONST_INT( "GL_NORMAL_ARRAY", GL_NORMAL_ARRAY );
      #endif
      #if defined( GL_TEXTURE_RANGE_LENGTH_APPLE )
        ADD_CONST_INT( "GL_TEXTURE_RANGE_LENGTH_APPLE", GL_TEXTURE_RANGE_LENGTH_APPLE );
      #endif
      #if defined( GL_BLEND_EQUATION_RGB )
        ADD_CONST_INT( "GL_BLEND_EQUATION_RGB", GL_BLEND_EQUATION_RGB );
      #endif
      #if defined( GL_PIXEL_UNPACK_BUFFER_EXT )
        ADD_CONST_INT( "GL_PIXEL_UNPACK_BUFFER_EXT", GL_PIXEL_UNPACK_BUFFER_EXT );
      #endif
      #if defined( GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB )
        ADD_CONST_INT( "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB", GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB );
      #endif
      #if defined( GL_NICEST )
        ADD_CONST_INT( "GL_NICEST", GL_NICEST );
      #endif
      #if defined( GL_LUMINANCE16F_ARB )
        ADD_CONST_INT( "GL_LUMINANCE16F_ARB", GL_LUMINANCE16F_ARB );
      #endif
      #if defined( GLX_TRANSPARENT_INDEX_VALUE )
        ADD_CONST_INT( "GLX_TRANSPARENT_INDEX_VALUE", GLX_TRANSPARENT_INDEX_VALUE );
      #endif
      #if defined( GL_PROXY_TEXTURE_RECTANGLE_NV )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_RECTANGLE_NV", GL_PROXY_TEXTURE_RECTANGLE_NV );
      #endif
      #if defined( GL_MODELVIEW )
        ADD_CONST_INT( "GL_MODELVIEW", GL_MODELVIEW );
      #endif
      #if defined( GL_OBJECT_TYPE )
        ADD_CONST_INT( "GL_OBJECT_TYPE", GL_OBJECT_TYPE );
      #endif
      #if defined( GL_C4UB_V3F )
        ADD_CONST_INT( "GL_C4UB_V3F", GL_C4UB_V3F );
      #endif
      #if defined( GL_COLOR4_BIT_PGI )
        ADD_CONST_INT( "GL_COLOR4_BIT_PGI", GL_COLOR4_BIT_PGI );
      #endif
      #if defined( GL_PACK_SKIP_IMAGES )
        ADD_CONST_INT( "GL_PACK_SKIP_IMAGES", GL_PACK_SKIP_IMAGES );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_B_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_B_SIZE", GL_PIXEL_MAP_I_TO_B_SIZE );
      #endif
      #if defined( GL_DEPTH_ATTACHMENT_EXT )
        ADD_CONST_INT( "GL_DEPTH_ATTACHMENT_EXT", GL_DEPTH_ATTACHMENT_EXT );
      #endif
      #if defined( GL_FLOAT_MAT2x3 )
        ADD_CONST_INT( "GL_FLOAT_MAT2x3", GL_FLOAT_MAT2x3 );
      #endif
      #if defined( GL_CLAMP_TO_BORDER_ARB )
        ADD_CONST_INT( "GL_CLAMP_TO_BORDER_ARB", GL_CLAMP_TO_BORDER_ARB );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB", GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB );
      #endif
      #if defined( GL_COMBINE )
        ADD_CONST_INT( "GL_COMBINE", GL_COMBINE );
      #endif
      #if defined( GL_FLOAT_MAT2x4 )
        ADD_CONST_INT( "GL_FLOAT_MAT2x4", GL_FLOAT_MAT2x4 );
      #endif
      #if defined( GLX_PIXMAP_BIT )
        ADD_CONST_INT( "GLX_PIXMAP_BIT", GLX_PIXMAP_BIT );
      #endif
      #if defined( GL_MAX_ASYNC_HISTOGRAM_SGIX )
        ADD_CONST_INT( "GL_MAX_ASYNC_HISTOGRAM_SGIX", GL_MAX_ASYNC_HISTOGRAM_SGIX );
      #endif
      #if defined( GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV )
        ADD_CONST_INT( "GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV", GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV );
      #endif
      #if defined( GLX_AUX0_EXT )
        ADD_CONST_INT( "GLX_AUX0_EXT", GLX_AUX0_EXT );
      #endif
      #if defined( GL_BIAS_BIT_ATI )
        ADD_CONST_INT( "GL_BIAS_BIT_ATI", GL_BIAS_BIT_ATI );
      #endif
      #if defined( GL_INDEX_LOGIC_OP )
        ADD_CONST_INT( "GL_INDEX_LOGIC_OP", GL_INDEX_LOGIC_OP );
      #endif
      #if defined( GL_TEXTURE_BINDING_BUFFER_ARB )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_BUFFER_ARB", GL_TEXTURE_BINDING_BUFFER_ARB );
      #endif
      #if defined( GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV )
        ADD_CONST_INT( "GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV", GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV );
      #endif
      #if defined( GL_PRIMITIVES_GENERATED )
        ADD_CONST_INT( "GL_PRIMITIVES_GENERATED", GL_PRIMITIVES_GENERATED );
      #endif
      #if defined( GLX_PRESERVED_CONTENTS_SGIX )
        ADD_CONST_INT( "GLX_PRESERVED_CONTENTS_SGIX", GLX_PRESERVED_CONTENTS_SGIX );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT", GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT );
      #endif
      #if defined( GLX_BIND_TO_TEXTURE_RGB_ATI )
        ADD_CONST_INT( "GLX_BIND_TO_TEXTURE_RGB_ATI", GLX_BIND_TO_TEXTURE_RGB_ATI );
      #endif
      #if defined( GLEW_EXT_framebuffer_blit )
        ADD_CONST_INT( "GLEW_EXT_framebuffer_blit", GLEW_EXT_framebuffer_blit );
      #endif
      #if defined( GL_TEXTURE_2D_STACK_MESAX )
        ADD_CONST_INT( "GL_TEXTURE_2D_STACK_MESAX", GL_TEXTURE_2D_STACK_MESAX );
      #endif
      #if defined( GL_RED_SNORM )
        ADD_CONST_INT( "GL_RED_SNORM", GL_RED_SNORM );
      #endif
      #if defined( GL_PROGRAM_ERROR_POSITION_ARB )
        ADD_CONST_INT( "GL_PROGRAM_ERROR_POSITION_ARB", GL_PROGRAM_ERROR_POSITION_ARB );
      #endif
      #if defined( GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV", GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV );
      #endif
      #if defined( GL_INVALID_INDEX )
        ADD_CONST_INT( "GL_INVALID_INDEX", GL_INVALID_INDEX );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_TYPE_EXT", GL_TEXTURE_COORD_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_CURRENT_RASTER_SECONDARY_COLOR )
        ADD_CONST_INT( "GL_CURRENT_RASTER_SECONDARY_COLOR", GL_CURRENT_RASTER_SECONDARY_COLOR );
      #endif
      #if defined( GL_ARRAY_OBJECT_OFFSET_ATI )
        ADD_CONST_INT( "GL_ARRAY_OBJECT_OFFSET_ATI", GL_ARRAY_OBJECT_OFFSET_ATI );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_VARYINGS_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_VARYINGS_NV", GL_TRANSFORM_FEEDBACK_VARYINGS_NV );
      #endif
      #if defined( GL_LUMINANCE32F_ARB )
        ADD_CONST_INT( "GL_LUMINANCE32F_ARB", GL_LUMINANCE32F_ARB );
      #endif
      #if defined( GL_COLOR_ATTACHMENT12_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT12_EXT", GL_COLOR_ATTACHMENT12_EXT );
      #endif
      #if defined( GL_COLOR_ARRAY_EXT )
        ADD_CONST_INT( "GL_COLOR_ARRAY_EXT", GL_COLOR_ARRAY_EXT );
      #endif
      #if defined( GL_MAT_DIFFUSE_BIT_PGI )
        ADD_CONST_INT( "GL_MAT_DIFFUSE_BIT_PGI", GL_MAT_DIFFUSE_BIT_PGI );
      #endif
      #if defined( GLEW_3DFX_multisample )
        ADD_CONST_INT( "GLEW_3DFX_multisample", GLEW_3DFX_multisample );
      #endif
      #if defined( GL_EXT_multisample )
        ADD_CONST_INT( "GL_EXT_multisample", GL_EXT_multisample );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_EXT )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_EXT", GL_TEXTURE_CUBE_MAP_EXT );
      #endif
      #if defined( GL_TRANSPOSE_PROJECTION_MATRIX )
        ADD_CONST_INT( "GL_TRANSPOSE_PROJECTION_MATRIX", GL_TRANSPOSE_PROJECTION_MATRIX );
      #endif
      #if defined( GL_TEXTURE_MAX_ANISOTROPY_EXT )
        ADD_CONST_INT( "GL_TEXTURE_MAX_ANISOTROPY_EXT", GL_TEXTURE_MAX_ANISOTROPY_EXT );
      #endif
      #if defined( GL_INTENSITY16UI_EXT )
        ADD_CONST_INT( "GL_INTENSITY16UI_EXT", GL_INTENSITY16UI_EXT );
      #endif
      #if defined( GL_FRAGMENT_LIGHT7_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT7_EXT", GL_FRAGMENT_LIGHT7_EXT );
      #endif
      #if defined( GLX_TRANSPARENT_BLUE_VALUE_EXT )
        ADD_CONST_INT( "GLX_TRANSPARENT_BLUE_VALUE_EXT", GLX_TRANSPARENT_BLUE_VALUE_EXT );
      #endif
      #if defined( GL_COMBINER_MAPPING_NV )
        ADD_CONST_INT( "GL_COMBINER_MAPPING_NV", GL_COMBINER_MAPPING_NV );
      #endif
      #if defined( GL_CLIP_VOLUME_CLIPPING_HINT_EXT )
        ADD_CONST_INT( "GL_CLIP_VOLUME_CLIPPING_HINT_EXT", GL_CLIP_VOLUME_CLIPPING_HINT_EXT );
      #endif
      #if defined( GL_NORMALIZED_RANGE_EXT )
        ADD_CONST_INT( "GL_NORMALIZED_RANGE_EXT", GL_NORMALIZED_RANGE_EXT );
      #endif
      #if defined( GL_CLIENT_VERTEX_ARRAY_BIT )
        ADD_CONST_INT( "GL_CLIENT_VERTEX_ARRAY_BIT", GL_CLIENT_VERTEX_ARRAY_BIT );
      #endif
      #if defined( GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD )
        ADD_CONST_INT( "GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD", GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD );
      #endif
      #if defined( GL_TEXTURE_ENV_SHIFT_EXT )
        ADD_CONST_INT( "GL_TEXTURE_ENV_SHIFT_EXT", GL_TEXTURE_ENV_SHIFT_EXT );
      #endif
      #if defined( GLX_DIRECT_COLOR_EXT )
        ADD_CONST_INT( "GLX_DIRECT_COLOR_EXT", GLX_DIRECT_COLOR_EXT );
      #endif
      #if defined( GL_BGR_EXT )
        ADD_CONST_INT( "GL_BGR_EXT", GL_BGR_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE", GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE );
      #endif
      #if defined( GL_INDEX_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_INDEX_ARRAY_BUFFER_BINDING", GL_INDEX_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GL_TEXTURE_OUTPUT_ALPHA_ATIX )
        ADD_CONST_INT( "GL_TEXTURE_OUTPUT_ALPHA_ATIX", GL_TEXTURE_OUTPUT_ALPHA_ATIX );
      #endif
      #if defined( GL_SLUMINANCE_EXT )
        ADD_CONST_INT( "GL_SLUMINANCE_EXT", GL_SLUMINANCE_EXT );
      #endif
      #if defined( GL_MAX_PROGRAM_TEXEL_OFFSET_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TEXEL_OFFSET_NV", GL_MAX_PROGRAM_TEXEL_OFFSET_NV );
      #endif
      #if defined( GL_EXT_draw_range_elements )
        ADD_CONST_INT( "GL_EXT_draw_range_elements", GL_EXT_draw_range_elements );
      #endif
      #if defined( GL_TEXTURE_LOD_BIAS )
        ADD_CONST_INT( "GL_TEXTURE_LOD_BIAS", GL_TEXTURE_LOD_BIAS );
      #endif
      #if defined( GL_INDEX_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_INDEX_ARRAY_POINTER_EXT", GL_INDEX_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_VERSION_1_3_DEPRECATED )
        ADD_CONST_INT( "GL_VERSION_1_3_DEPRECATED", GL_VERSION_1_3_DEPRECATED );
      #endif
      #if defined( GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT", GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT );
      #endif
      #if defined( GL_TEXCOORD2_BIT_PGI )
        ADD_CONST_INT( "GL_TEXCOORD2_BIT_PGI", GL_TEXCOORD2_BIT_PGI );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER", GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE", GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE );
      #endif
      #if defined( GLX_EXT_import_context )
        ADD_CONST_INT( "GLX_EXT_import_context", GLX_EXT_import_context );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_START_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_START_NV", GL_TRANSFORM_FEEDBACK_BUFFER_START_NV );
      #endif
      #if defined( GL_EXT_blend_subtract )
        ADD_CONST_INT( "GL_EXT_blend_subtract", GL_EXT_blend_subtract );
      #endif
      #if defined( GL_SINGLE_COLOR_EXT )
        ADD_CONST_INT( "GL_SINGLE_COLOR_EXT", GL_SINGLE_COLOR_EXT );
      #endif
      #if defined( GL_CONTEXT_PROFILE_MASK )
        ADD_CONST_INT( "GL_CONTEXT_PROFILE_MASK", GL_CONTEXT_PROFILE_MASK );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT", GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT );
      #endif
      #if defined( GL_TEXTURE_1D_ARRAY_EXT )
        ADD_CONST_INT( "GL_TEXTURE_1D_ARRAY_EXT", GL_TEXTURE_1D_ARRAY_EXT );
      #endif
      #if defined( GLEW_EXT_blend_logic_op )
        ADD_CONST_INT( "GLEW_EXT_blend_logic_op", GLEW_EXT_blend_logic_op );
      #endif
      #if defined( GL_CLAMP_VERTEX_COLOR_ARB )
        ADD_CONST_INT( "GL_CLAMP_VERTEX_COLOR_ARB", GL_CLAMP_VERTEX_COLOR_ARB );
      #endif
      #if defined( GL_MAX_GENERAL_COMBINERS_NV )
        ADD_CONST_INT( "GL_MAX_GENERAL_COMBINERS_NV", GL_MAX_GENERAL_COMBINERS_NV );
      #endif
      #if defined( GL_TEXTURE_MAX_LEVEL_SGIS )
        ADD_CONST_INT( "GL_TEXTURE_MAX_LEVEL_SGIS", GL_TEXTURE_MAX_LEVEL_SGIS );
      #endif
      #if defined( GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT )
        ADD_CONST_INT( "GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_NV", GL_TRANSFORM_FEEDBACK_BUFFER_NV );
      #endif
      #if defined( GL_EMBOSS_CONSTANT_NV )
        ADD_CONST_INT( "GL_EMBOSS_CONSTANT_NV", GL_EMBOSS_CONSTANT_NV );
      #endif
      #if defined( GL_QUERY_RESULT )
        ADD_CONST_INT( "GL_QUERY_RESULT", GL_QUERY_RESULT );
      #endif
      #if defined( GL_PROGRAM_NATIVE_TEMPORARIES_ARB )
        ADD_CONST_INT( "GL_PROGRAM_NATIVE_TEMPORARIES_ARB", GL_PROGRAM_NATIVE_TEMPORARIES_ARB );
      #endif
      #if defined( GL_R16_SNORM )
        ADD_CONST_INT( "GL_R16_SNORM", GL_R16_SNORM );
      #endif
      #if defined( GL_TEXTURE_BLUE_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BLUE_SIZE_EXT", GL_TEXTURE_BLUE_SIZE_EXT );
      #endif
      #if defined( GL_FENCE_CONDITION_NV )
        ADD_CONST_INT( "GL_FENCE_CONDITION_NV", GL_FENCE_CONDITION_NV );
      #endif
      #if defined( GL_VERTEX_SHADER_OPTIMIZED_EXT )
        ADD_CONST_INT( "GL_VERTEX_SHADER_OPTIMIZED_EXT", GL_VERTEX_SHADER_OPTIMIZED_EXT );
      #endif
      #if defined( GLX_VIDEO_RESIZE_SUN )
        ADD_CONST_INT( "GLX_VIDEO_RESIZE_SUN", GLX_VIDEO_RESIZE_SUN );
      #endif
      #if defined( GL_RGB12_EXT )
        ADD_CONST_INT( "GL_RGB12_EXT", GL_RGB12_EXT );
      #endif
      #if defined( GL_FLOAT )
        ADD_CONST_INT( "GL_FLOAT", GL_FLOAT );
      #endif
      #if defined( GL_EXT_shadow_funcs )
        ADD_CONST_INT( "GL_EXT_shadow_funcs", GL_EXT_shadow_funcs );
      #endif
      #if defined( GL_SOURCE2_RGB_ARB )
        ADD_CONST_INT( "GL_SOURCE2_RGB_ARB", GL_SOURCE2_RGB_ARB );
      #endif
      #if defined( GL_TEXTURE10_ARB )
        ADD_CONST_INT( "GL_TEXTURE10_ARB", GL_TEXTURE10_ARB );
      #endif
      #if defined( GL_OP_SUB_EXT )
        ADD_CONST_INT( "GL_OP_SUB_EXT", GL_OP_SUB_EXT );
      #endif
      #if defined( GLX_NON_CONFORMANT_CONFIG )
        ADD_CONST_INT( "GLX_NON_CONFORMANT_CONFIG", GLX_NON_CONFORMANT_CONFIG );
      #endif
      #if defined( GL_COLOR_ATTACHMENT1_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT1_EXT", GL_COLOR_ATTACHMENT1_EXT );
      #endif
      #if defined( GL_R1UI_T2F_V3F_SUN )
        ADD_CONST_INT( "GL_R1UI_T2F_V3F_SUN", GL_R1UI_T2F_V3F_SUN );
      #endif
      #if defined( GL_CONVOLUTION_FILTER_SCALE_EXT )
        ADD_CONST_INT( "GL_CONVOLUTION_FILTER_SCALE_EXT", GL_CONVOLUTION_FILTER_SCALE_EXT );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT", GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT );
      #endif
      #if defined( GL_RGB16_SNORM )
        ADD_CONST_INT( "GL_RGB16_SNORM", GL_RGB16_SNORM );
      #endif
      #if defined( GL_INTENSITY_FLOAT32_APPLE )
        ADD_CONST_INT( "GL_INTENSITY_FLOAT32_APPLE", GL_INTENSITY_FLOAT32_APPLE );
      #endif
      #if defined( GL_MAX_VERTEX_UNIFORM_BLOCKS )
        ADD_CONST_INT( "GL_MAX_VERTEX_UNIFORM_BLOCKS", GL_MAX_VERTEX_UNIFORM_BLOCKS );
      #endif
      #if defined( GL_DRAW_BUFFER15_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER15_ARB", GL_DRAW_BUFFER15_ARB );
      #endif
      #if defined( GL_MODELVIEW26_ARB )
        ADD_CONST_INT( "GL_MODELVIEW26_ARB", GL_MODELVIEW26_ARB );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD30_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD30_EXT", GL_OUTPUT_TEXTURE_COORD30_EXT );
      #endif
      #if defined( GL_COLOR_TABLE_FORMAT )
        ADD_CONST_INT( "GL_COLOR_TABLE_FORMAT", GL_COLOR_TABLE_FORMAT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD1_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD1_EXT", GL_OUTPUT_TEXTURE_COORD1_EXT );
      #endif
      #if defined( GL_EXT_index_func )
        ADD_CONST_INT( "GL_EXT_index_func", GL_EXT_index_func );
      #endif
      #if defined( GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT", GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT );
      #endif
      #if defined( GL_ELEMENT_ARRAY_UNIFIED_NV )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_UNIFIED_NV", GL_ELEMENT_ARRAY_UNIFIED_NV );
      #endif
      #if defined( GL_COLOR_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_COLOR_ARRAY_ADDRESS_NV", GL_COLOR_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_POINTER )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_POINTER", GL_EDGE_FLAG_ARRAY_POINTER );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB5_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB5_4_NV", GL_MAP1_VERTEX_ATTRIB5_4_NV );
      #endif
      #if defined( GL_WIDE_LINE_HINT_PGI )
        ADD_CONST_INT( "GL_WIDE_LINE_HINT_PGI", GL_WIDE_LINE_HINT_PGI );
      #endif
      #if defined( GL_ALPHA_MAX_CLAMP_INGR )
        ADD_CONST_INT( "GL_ALPHA_MAX_CLAMP_INGR", GL_ALPHA_MAX_CLAMP_INGR );
      #endif
      #if defined( GL_TEXTURE_MAX_CLAMP_T_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_MAX_CLAMP_T_SGIX", GL_TEXTURE_MAX_CLAMP_T_SGIX );
      #endif
      #if defined( GL_MINMAX_EXT )
        ADD_CONST_INT( "GL_MINMAX_EXT", GL_MINMAX_EXT );
      #endif
      #if defined( GL_MAX_LIST_NESTING )
        ADD_CONST_INT( "GL_MAX_LIST_NESTING", GL_MAX_LIST_NESTING );
      #endif
      #if defined( GL_POINT_SIZE_MIN_EXT )
        ADD_CONST_INT( "GL_POINT_SIZE_MIN_EXT", GL_POINT_SIZE_MIN_EXT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD15_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD15_EXT", GL_OUTPUT_TEXTURE_COORD15_EXT );
      #endif
      #if defined( GL_SUBTRACT_ARB )
        ADD_CONST_INT( "GL_SUBTRACT_ARB", GL_SUBTRACT_ARB );
      #endif
      #if defined( GL_LUMINANCE16_ALPHA16_EXT )
        ADD_CONST_INT( "GL_LUMINANCE16_ALPHA16_EXT", GL_LUMINANCE16_ALPHA16_EXT );
      #endif
      #if defined( GLX_EXT_scene_marker )
        ADD_CONST_INT( "GLX_EXT_scene_marker", GLX_EXT_scene_marker );
      #endif
      #if defined( GL_UNPACK_CLIENT_STORAGE_APPLE )
        ADD_CONST_INT( "GL_UNPACK_CLIENT_STORAGE_APPLE", GL_UNPACK_CLIENT_STORAGE_APPLE );
      #endif
      #if defined( GL_4PASS_2_SGIS )
        ADD_CONST_INT( "GL_4PASS_2_SGIS", GL_4PASS_2_SGIS );
      #endif
      #if defined( GL_EXT_color_subtable )
        ADD_CONST_INT( "GL_EXT_color_subtable", GL_EXT_color_subtable );
      #endif
      #if defined( GL_DRAW_BUFFER2_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER2_ARB", GL_DRAW_BUFFER2_ARB );
      #endif
      #if defined( GL_TEXTURE_STENCIL_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_STENCIL_SIZE_EXT", GL_TEXTURE_STENCIL_SIZE_EXT );
      #endif
      #if defined( GL_FOG_DISTANCE_MODE_NV )
        ADD_CONST_INT( "GL_FOG_DISTANCE_MODE_NV", GL_FOG_DISTANCE_MODE_NV );
      #endif
      #if defined( GL_COLOR_ARRAY )
        ADD_CONST_INT( "GL_COLOR_ARRAY", GL_COLOR_ARRAY );
      #endif
      #if defined( GL_CONVOLUTION_2D )
        ADD_CONST_INT( "GL_CONVOLUTION_2D", GL_CONVOLUTION_2D );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB15_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB15_NV", GL_EVAL_VERTEX_ATTRIB15_NV );
      #endif
      #if defined( GL_ZOOM_Y )
        ADD_CONST_INT( "GL_ZOOM_Y", GL_ZOOM_Y );
      #endif
      #if defined( GL_ZOOM_X )
        ADD_CONST_INT( "GL_ZOOM_X", GL_ZOOM_X );
      #endif
      #if defined( GL_ATTENUATION_EXT )
        ADD_CONST_INT( "GL_ATTENUATION_EXT", GL_ATTENUATION_EXT );
      #endif
      #if defined( GL_RENDERBUFFER_SAMPLES )
        ADD_CONST_INT( "GL_RENDERBUFFER_SAMPLES", GL_RENDERBUFFER_SAMPLES );
      #endif
      #if defined( GLX_EXT_framebuffer_sRGB )
        ADD_CONST_INT( "GLX_EXT_framebuffer_sRGB", GLX_EXT_framebuffer_sRGB );
      #endif
      #if defined( GL_FIRST_VERTEX_CONVENTION_EXT )
        ADD_CONST_INT( "GL_FIRST_VERTEX_CONVENTION_EXT", GL_FIRST_VERTEX_CONVENTION_EXT );
      #endif
      #if defined( GL_HINT_BIT )
        ADD_CONST_INT( "GL_HINT_BIT", GL_HINT_BIT );
      #endif
      #if defined( GLX_LEVEL )
        ADD_CONST_INT( "GLX_LEVEL", GLX_LEVEL );
      #endif
      #if defined( GLEW_EXT_stencil_two_side )
        ADD_CONST_INT( "GLEW_EXT_stencil_two_side", GLEW_EXT_stencil_two_side );
      #endif
      #if defined( GL_OP_ROUND_EXT )
        ADD_CONST_INT( "GL_OP_ROUND_EXT", GL_OP_ROUND_EXT );
      #endif
      #if defined( GL_MODELVIEW25_ARB )
        ADD_CONST_INT( "GL_MODELVIEW25_ARB", GL_MODELVIEW25_ARB );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD23_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD23_EXT", GL_OUTPUT_TEXTURE_COORD23_EXT );
      #endif
      #if defined( GL_PROGRAM_ERROR_POSITION_NV )
        ADD_CONST_INT( "GL_PROGRAM_ERROR_POSITION_NV", GL_PROGRAM_ERROR_POSITION_NV );
      #endif
      #if defined( GL_DYNAMIC_ATI )
        ADD_CONST_INT( "GL_DYNAMIC_ATI", GL_DYNAMIC_ATI );
      #endif
      #if defined( GL_POST_CONVOLUTION_BLUE_SCALE )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_BLUE_SCALE", GL_POST_CONVOLUTION_BLUE_SCALE );
      #endif
      #if defined( GL_GREEN_INTEGER )
        ADD_CONST_INT( "GL_GREEN_INTEGER", GL_GREEN_INTEGER );
      #endif
      #if defined( GL_COLOR_ARRAY_POINTER )
        ADD_CONST_INT( "GL_COLOR_ARRAY_POINTER", GL_COLOR_ARRAY_POINTER );
      #endif
      #if defined( GL_TEXTURE_DEPTH_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_DEPTH_SIZE", GL_TEXTURE_DEPTH_SIZE );
      #endif
      #if defined( GL_FLOAT_MAT3x2 )
        ADD_CONST_INT( "GL_FLOAT_MAT3x2", GL_FLOAT_MAT3x2 );
      #endif
      #if defined( GL_RESAMPLE_DECIMATE_OML )
        ADD_CONST_INT( "GL_RESAMPLE_DECIMATE_OML", GL_RESAMPLE_DECIMATE_OML );
      #endif
      #if defined( GL_FLOAT_MAT3x4 )
        ADD_CONST_INT( "GL_FLOAT_MAT3x4", GL_FLOAT_MAT3x4 );
      #endif
      #if defined( GL_TEXTURE_OUTPUT_RGB_ATIX )
        ADD_CONST_INT( "GL_TEXTURE_OUTPUT_RGB_ATIX", GL_TEXTURE_OUTPUT_RGB_ATIX );
      #endif
      #if defined( GL_DRAW_BUFFER11_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER11_ATI", GL_DRAW_BUFFER11_ATI );
      #endif
      #if defined( GL_TEXTURE_UPDATE_BARRIER_BIT_EXT )
        ADD_CONST_INT( "GL_TEXTURE_UPDATE_BARRIER_BIT_EXT", GL_TEXTURE_UPDATE_BARRIER_BIT_EXT );
      #endif
      #if defined( GL_OP_FLOOR_EXT )
        ADD_CONST_INT( "GL_OP_FLOOR_EXT", GL_OP_FLOOR_EXT );
      #endif
      #if defined( GLX_DOUBLEBUFFER )
        ADD_CONST_INT( "GLX_DOUBLEBUFFER", GLX_DOUBLEBUFFER );
      #endif
      #if defined( GL_ALPHA16F_ARB )
        ADD_CONST_INT( "GL_ALPHA16F_ARB", GL_ALPHA16F_ARB );
      #endif
      #if defined( GL_COMPRESSED_RGBA )
        ADD_CONST_INT( "GL_COMPRESSED_RGBA", GL_COMPRESSED_RGBA );
      #endif
      #if defined( GL_HALF_BIAS_NEGATE_NV )
        ADD_CONST_INT( "GL_HALF_BIAS_NEGATE_NV", GL_HALF_BIAS_NEGATE_NV );
      #endif
      #if defined( GL_REPLACEMENT_CODE_SUN )
        ADD_CONST_INT( "GL_REPLACEMENT_CODE_SUN", GL_REPLACEMENT_CODE_SUN );
      #endif
      #if defined( GL_TEXTURE22_ARB )
        ADD_CONST_INT( "GL_TEXTURE22_ARB", GL_TEXTURE22_ARB );
      #endif
      #if defined( GL_CLIENT_ATTRIB_STACK_DEPTH )
        ADD_CONST_INT( "GL_CLIENT_ATTRIB_STACK_DEPTH", GL_CLIENT_ATTRIB_STACK_DEPTH );
      #endif
      #if defined( GL_SIGNED_LUMINANCE_ALPHA_NV )
        ADD_CONST_INT( "GL_SIGNED_LUMINANCE_ALPHA_NV", GL_SIGNED_LUMINANCE_ALPHA_NV );
      #endif
      #if defined( GL_SIGNED_HILO_NV )
        ADD_CONST_INT( "GL_SIGNED_HILO_NV", GL_SIGNED_HILO_NV );
      #endif
      #if defined( GL_COLOR_ARRAY_COUNT_EXT )
        ADD_CONST_INT( "GL_COLOR_ARRAY_COUNT_EXT", GL_COLOR_ARRAY_COUNT_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT", GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT );
      #endif
      #if defined( GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX", GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX );
      #endif
      #if defined( GL_UNSIGNED_SHORT_5_5_5_1 )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_5_5_5_1", GL_UNSIGNED_SHORT_5_5_5_1 );
      #endif
      #if defined( GL_EXT_paletted_texture )
        ADD_CONST_INT( "GL_EXT_paletted_texture", GL_EXT_paletted_texture );
      #endif
      #if defined( GL_TEXTURE_COMPONENTS )
        ADD_CONST_INT( "GL_TEXTURE_COMPONENTS", GL_TEXTURE_COMPONENTS );
      #endif
      #if defined( GL_QUERY_NO_WAIT )
        ADD_CONST_INT( "GL_QUERY_NO_WAIT", GL_QUERY_NO_WAIT );
      #endif
      #if defined( GL_RENDERBUFFER_BLUE_SIZE_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_BLUE_SIZE_EXT", GL_RENDERBUFFER_BLUE_SIZE_EXT );
      #endif
      #if defined( GL_GEOMETRY_SHADER_EXT )
        ADD_CONST_INT( "GL_GEOMETRY_SHADER_EXT", GL_GEOMETRY_SHADER_EXT );
      #endif
      #if defined( GL_UNPACK_SWAP_BYTES )
        ADD_CONST_INT( "GL_UNPACK_SWAP_BYTES", GL_UNPACK_SWAP_BYTES );
      #endif
      #if defined( GL_COLOR_ARRAY_SIZE_EXT )
        ADD_CONST_INT( "GL_COLOR_ARRAY_SIZE_EXT", GL_COLOR_ARRAY_SIZE_EXT );
      #endif
      #if defined( GL_HALF_FLOAT_NV )
        ADD_CONST_INT( "GL_HALF_FLOAT_NV", GL_HALF_FLOAT_NV );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_EXT )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_EXT", GL_FOG_COORDINATE_ARRAY_EXT );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_COUNT_EXT )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_COUNT_EXT", GL_EDGE_FLAG_ARRAY_COUNT_EXT );
      #endif
      #if defined( GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS )
        ADD_CONST_INT( "GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS", GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS );
      #endif
      #if defined( GL_UNSIGNED_SHORT_5_5_5_1_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_5_5_5_1_EXT", GL_UNSIGNED_SHORT_5_5_5_1_EXT );
      #endif
      #if defined( GLX_GRAY_SCALE )
        ADD_CONST_INT( "GLX_GRAY_SCALE", GLX_GRAY_SCALE );
      #endif
      #if defined( GL_PALETTE8_R5_G6_B5_OES )
        ADD_CONST_INT( "GL_PALETTE8_R5_G6_B5_OES", GL_PALETTE8_R5_G6_B5_OES );
      #endif
      #if defined( GLEW_EXT_separate_specular_color )
        ADD_CONST_INT( "GLEW_EXT_separate_specular_color", GLEW_EXT_separate_specular_color );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_MODE )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_MODE", GL_TRANSFORM_FEEDBACK_BUFFER_MODE );
      #endif
      #if defined( GL_BITMAP_TOKEN )
        ADD_CONST_INT( "GL_BITMAP_TOKEN", GL_BITMAP_TOKEN );
      #endif
      #if defined( GL_FEEDBACK_BUFFER_POINTER )
        ADD_CONST_INT( "GL_FEEDBACK_BUFFER_POINTER", GL_FEEDBACK_BUFFER_POINTER );
      #endif
      #if defined( GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT", GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT );
      #endif
      #if defined( GL_VERTEX_STREAM7_ATI )
        ADD_CONST_INT( "GL_VERTEX_STREAM7_ATI", GL_VERTEX_STREAM7_ATI );
      #endif
      #if defined( GLX_BAD_CONTEXT )
        ADD_CONST_INT( "GLX_BAD_CONTEXT", GLX_BAD_CONTEXT );
      #endif
      #if defined( GL_PROXY_TEXTURE_CUBE_MAP )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_CUBE_MAP", GL_PROXY_TEXTURE_CUBE_MAP );
      #endif
      #if defined( GL_LINE_TOKEN )
        ADD_CONST_INT( "GL_LINE_TOKEN", GL_LINE_TOKEN );
      #endif
      #if defined( GL_PRIMARY_COLOR_EXT )
        ADD_CONST_INT( "GL_PRIMARY_COLOR_EXT", GL_PRIMARY_COLOR_EXT );
      #endif
      #if defined( GL_CURRENT_FOG_COORDINATE )
        ADD_CONST_INT( "GL_CURRENT_FOG_COORDINATE", GL_CURRENT_FOG_COORDINATE );
      #endif
      #if defined( GLX_WINDOW_SGIX )
        ADD_CONST_INT( "GLX_WINDOW_SGIX", GLX_WINDOW_SGIX );
      #endif
      #if defined( GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_REND_screen_coordinates )
        ADD_CONST_INT( "GL_REND_screen_coordinates", GL_REND_screen_coordinates );
      #endif
      #if defined( GL_FLOAT_VEC3 )
        ADD_CONST_INT( "GL_FLOAT_VEC3", GL_FLOAT_VEC3 );
      #endif
      #if defined( GL_NUM_LOOPBACK_COMPONENTS_ATI )
        ADD_CONST_INT( "GL_NUM_LOOPBACK_COMPONENTS_ATI", GL_NUM_LOOPBACK_COMPONENTS_ATI );
      #endif
      #if defined( GL_MIN_ALPHA_SGIS )
        ADD_CONST_INT( "GL_MIN_ALPHA_SGIS", GL_MIN_ALPHA_SGIS );
      #endif
      #if defined( GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET", GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET );
      #endif
      #if defined( GL_RGB_INTEGER )
        ADD_CONST_INT( "GL_RGB_INTEGER", GL_RGB_INTEGER );
      #endif
      #if defined( GLX_BAD_VISUAL )
        ADD_CONST_INT( "GLX_BAD_VISUAL", GLX_BAD_VISUAL );
      #endif
      #if defined( GL_MIN_FRAGMENT_INTERPOLATION_OFFSET )
        ADD_CONST_INT( "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET", GL_MIN_FRAGMENT_INTERPOLATION_OFFSET );
      #endif
      #if defined( GL_MULT )
        ADD_CONST_INT( "GL_MULT", GL_MULT );
      #endif
      #if defined( GL_STENCIL_CLEAR_VALUE )
        ADD_CONST_INT( "GL_STENCIL_CLEAR_VALUE", GL_STENCIL_CLEAR_VALUE );
      #endif
      #if defined( GL_DOT3_RGB_ARB )
        ADD_CONST_INT( "GL_DOT3_RGB_ARB", GL_DOT3_RGB_ARB );
      #endif
      #if defined( GL_POINT_SPRITE_ARB )
        ADD_CONST_INT( "GL_POINT_SPRITE_ARB", GL_POINT_SPRITE_ARB );
      #endif
      #if defined( GL_PIXEL_PACK_BUFFER_ARB )
        ADD_CONST_INT( "GL_PIXEL_PACK_BUFFER_ARB", GL_PIXEL_PACK_BUFFER_ARB );
      #endif
      #if defined( GL_VIBRANCE_SCALE_NV )
        ADD_CONST_INT( "GL_VIBRANCE_SCALE_NV", GL_VIBRANCE_SCALE_NV );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT", GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT );
      #endif
      #if defined( GL_ALPHA_SIGNED_SGIX )
        ADD_CONST_INT( "GL_ALPHA_SIGNED_SGIX", GL_ALPHA_SIGNED_SGIX );
      #endif
      #if defined( GL_MODELVIEW24_ARB )
        ADD_CONST_INT( "GL_MODELVIEW24_ARB", GL_MODELVIEW24_ARB );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT", GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT );
      #endif
      #if defined( GL_SRC2_RGB )
        ADD_CONST_INT( "GL_SRC2_RGB", GL_SRC2_RGB );
      #endif
      #if defined( GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB", GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB );
      #endif
      #if defined( GL_R1UI_C4UB_V3F_SUN )
        ADD_CONST_INT( "GL_R1UI_C4UB_V3F_SUN", GL_R1UI_C4UB_V3F_SUN );
      #endif
      #if defined( GLX_TEXTURE_CUBE_MAP_POSITIVE_X_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_CUBE_MAP_POSITIVE_X_ATI", GLX_TEXTURE_CUBE_MAP_POSITIVE_X_ATI );
      #endif
      #if defined( GL_FRAGMENT_SHADER )
        ADD_CONST_INT( "GL_FRAGMENT_SHADER", GL_FRAGMENT_SHADER );
      #endif
      #if defined( GL_UNSIGNED_INT_2_10_10_10_REV )
        ADD_CONST_INT( "GL_UNSIGNED_INT_2_10_10_10_REV", GL_UNSIGNED_INT_2_10_10_10_REV );
      #endif
      #if defined( GLX_3DFX_multisample )
        ADD_CONST_INT( "GLX_3DFX_multisample", GLX_3DFX_multisample );
      #endif
      #if defined( GL_ALPHA8_EXT )
        ADD_CONST_INT( "GL_ALPHA8_EXT", GL_ALPHA8_EXT );
      #endif
      #if defined( GL_OUTPUT_POINT_SIZE_ATIX )
        ADD_CONST_INT( "GL_OUTPUT_POINT_SIZE_ATIX", GL_OUTPUT_POINT_SIZE_ATIX );
      #endif
      #if defined( GL_TRANSPOSE_PROJECTION_MATRIX_ARB )
        ADD_CONST_INT( "GL_TRANSPOSE_PROJECTION_MATRIX_ARB", GL_TRANSPOSE_PROJECTION_MATRIX_ARB );
      #endif
      #if defined( GL_VIEWPORT )
        ADD_CONST_INT( "GL_VIEWPORT", GL_VIEWPORT );
      #endif
      #if defined( GL_MAX_FRAGMENT_INTERPOLATION_OFFSET )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET", GL_MAX_FRAGMENT_INTERPOLATION_OFFSET );
      #endif
      #if defined( GL_DEPTH_TEXTURE_MODE_ARB )
        ADD_CONST_INT( "GL_DEPTH_TEXTURE_MODE_ARB", GL_DEPTH_TEXTURE_MODE_ARB );
      #endif
      #if defined( GLX_DAMAGED_SGIX )
        ADD_CONST_INT( "GLX_DAMAGED_SGIX", GLX_DAMAGED_SGIX );
      #endif
      #if defined( GL_MATRIX3_NV )
        ADD_CONST_INT( "GL_MATRIX3_NV", GL_MATRIX3_NV );
      #endif
      #if defined( GL_ALLOW_DRAW_OBJ_HINT_PGI )
        ADD_CONST_INT( "GL_ALLOW_DRAW_OBJ_HINT_PGI", GL_ALLOW_DRAW_OBJ_HINT_PGI );
      #endif
      #if defined( GL_RGB8I )
        ADD_CONST_INT( "GL_RGB8I", GL_RGB8I );
      #endif
      #if defined( GL_REG_5_ATI )
        ADD_CONST_INT( "GL_REG_5_ATI", GL_REG_5_ATI );
      #endif
      #if defined( GL_DRAW_BUFFER7_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER7_ARB", GL_DRAW_BUFFER7_ARB );
      #endif
      #if defined( GLEW_EXT_stencil_wrap )
        ADD_CONST_INT( "GLEW_EXT_stencil_wrap", GLEW_EXT_stencil_wrap );
      #endif
      #if defined( GL_COLOR_TABLE_LUMINANCE_SIZE )
        ADD_CONST_INT( "GL_COLOR_TABLE_LUMINANCE_SIZE", GL_COLOR_TABLE_LUMINANCE_SIZE );
      #endif
      #if defined( GL_VERTEX_ARRAY_COUNT_EXT )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_COUNT_EXT", GL_VERTEX_ARRAY_COUNT_EXT );
      #endif
      #if defined( GL_BLEND_SRC )
        ADD_CONST_INT( "GL_BLEND_SRC", GL_BLEND_SRC );
      #endif
      #if defined( GLX_LARGEST_PBUFFER_SGIX )
        ADD_CONST_INT( "GLX_LARGEST_PBUFFER_SGIX", GLX_LARGEST_PBUFFER_SGIX );
      #endif
      #if defined( GL_DS_SCALE_NV )
        ADD_CONST_INT( "GL_DS_SCALE_NV", GL_DS_SCALE_NV );
      #endif
      #if defined( GLXEW_EXT_import_context )
        ADD_CONST_INT( "GLXEW_EXT_import_context", GLXEW_EXT_import_context );
      #endif
      #if defined( GL_FOG_SPECULAR_TEXTURE_WIN )
        ADD_CONST_INT( "GL_FOG_SPECULAR_TEXTURE_WIN", GL_FOG_SPECULAR_TEXTURE_WIN );
      #endif
      #if defined( GL_COPY_PIXEL_TOKEN )
        ADD_CONST_INT( "GL_COPY_PIXEL_TOKEN", GL_COPY_PIXEL_TOKEN );
      #endif
      #if defined( GLEW_EXT_geometry_shader4 )
        ADD_CONST_INT( "GLEW_EXT_geometry_shader4", GLEW_EXT_geometry_shader4 );
      #endif
      #if defined( GLX_SAMPLE_BUFFERS_ARB )
        ADD_CONST_INT( "GLX_SAMPLE_BUFFERS_ARB", GLX_SAMPLE_BUFFERS_ARB );
      #endif
      #if defined( GL_INT_SAMPLER_2D_RECT )
        ADD_CONST_INT( "GL_INT_SAMPLER_2D_RECT", GL_INT_SAMPLER_2D_RECT );
      #endif
      #if defined( GL_PALETTE8_RGBA4_OES )
        ADD_CONST_INT( "GL_PALETTE8_RGBA4_OES", GL_PALETTE8_RGBA4_OES );
      #endif
      #if defined( GL_TEXTURE_MATERIAL_FACE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_MATERIAL_FACE_EXT", GL_TEXTURE_MATERIAL_FACE_EXT );
      #endif
      #if defined( GL_ONE_EXT )
        ADD_CONST_INT( "GL_ONE_EXT", GL_ONE_EXT );
      #endif
      #if defined( GL_DEPTH24_STENCIL8 )
        ADD_CONST_INT( "GL_DEPTH24_STENCIL8", GL_DEPTH24_STENCIL8 );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI", GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI );
      #endif
      #if defined( GL_MODELVIEW7_ARB )
        ADD_CONST_INT( "GL_MODELVIEW7_ARB", GL_MODELVIEW7_ARB );
      #endif
      #if defined( GL_INDEX_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_INDEX_ARRAY_STRIDE_EXT", GL_INDEX_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT", GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT );
      #endif
      #if defined( GL_MAX_TEXTURE_LOD_BIAS_EXT )
        ADD_CONST_INT( "GL_MAX_TEXTURE_LOD_BIAS_EXT", GL_MAX_TEXTURE_LOD_BIAS_EXT );
      #endif
      #if defined( GL_TEXTURE_COMPRESSED_ARB )
        ADD_CONST_INT( "GL_TEXTURE_COMPRESSED_ARB", GL_TEXTURE_COMPRESSED_ARB );
      #endif
      #if defined( GL_FUNC_ADD_EXT )
        ADD_CONST_INT( "GL_FUNC_ADD_EXT", GL_FUNC_ADD_EXT );
      #endif
      #if defined( GL_TEXTURE16_ARB )
        ADD_CONST_INT( "GL_TEXTURE16_ARB", GL_TEXTURE16_ARB );
      #endif
      #if defined( GL_COLOR_INDEX )
        ADD_CONST_INT( "GL_COLOR_INDEX", GL_COLOR_INDEX );
      #endif
      #if defined( GL_MAP2_NORMAL )
        ADD_CONST_INT( "GL_MAP2_NORMAL", GL_MAP2_NORMAL );
      #endif
      #if defined( GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX )
        ADD_CONST_INT( "GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX", GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX );
      #endif
      #if defined( GL_NORMAL_ARRAY_POINTER )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_POINTER", GL_NORMAL_ARRAY_POINTER );
      #endif
      #if defined( GL_MAX_EVAL_ORDER )
        ADD_CONST_INT( "GL_MAX_EVAL_ORDER", GL_MAX_EVAL_ORDER );
      #endif
      #if defined( GL_OFFSET_TEXTURE_BIAS_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_BIAS_NV", GL_OFFSET_TEXTURE_BIAS_NV );
      #endif
      #if defined( GLEW_EXT_texture_compression_latc )
        ADD_CONST_INT( "GLEW_EXT_texture_compression_latc", GLEW_EXT_texture_compression_latc );
      #endif
      #if defined( GL_SAMPLER_2D_RECT_SHADOW_ARB )
        ADD_CONST_INT( "GL_SAMPLER_2D_RECT_SHADOW_ARB", GL_SAMPLER_2D_RECT_SHADOW_ARB );
      #endif
      #if defined( GL_TEXTURE_COMPARE_MODE )
        ADD_CONST_INT( "GL_TEXTURE_COMPARE_MODE", GL_TEXTURE_COMPARE_MODE );
      #endif
      #if defined( GL_WRITE_PIXEL_DATA_RANGE_NV )
        ADD_CONST_INT( "GL_WRITE_PIXEL_DATA_RANGE_NV", GL_WRITE_PIXEL_DATA_RANGE_NV );
      #endif
      #if defined( GL_WEIGHT_ARRAY_ARB )
        ADD_CONST_INT( "GL_WEIGHT_ARRAY_ARB", GL_WEIGHT_ARRAY_ARB );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE", GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM", GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM );
      #endif
      #if defined( GLX_BUFFER_SIZE )
        ADD_CONST_INT( "GLX_BUFFER_SIZE", GLX_BUFFER_SIZE );
      #endif
      #if defined( GL_FUNC_REVERSE_SUBTRACT_EXT )
        ADD_CONST_INT( "GL_FUNC_REVERSE_SUBTRACT_EXT", GL_FUNC_REVERSE_SUBTRACT_EXT );
      #endif
      #if defined( GL_DEPENDENT_AR_TEXTURE_2D_NV )
        ADD_CONST_INT( "GL_DEPENDENT_AR_TEXTURE_2D_NV", GL_DEPENDENT_AR_TEXTURE_2D_NV );
      #endif
      #if defined( GL_COMPRESSED_LUMINANCE_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_LUMINANCE_ARB", GL_COMPRESSED_LUMINANCE_ARB );
      #endif
      #if defined( GL_MAP_WRITE_BIT )
        ADD_CONST_INT( "GL_MAP_WRITE_BIT", GL_MAP_WRITE_BIT );
      #endif
      #if defined( GL_SHADE_MODEL )
        ADD_CONST_INT( "GL_SHADE_MODEL", GL_SHADE_MODEL );
      #endif
      #if defined( GL_GENERATE_MIPMAP_HINT_SGIS )
        ADD_CONST_INT( "GL_GENERATE_MIPMAP_HINT_SGIS", GL_GENERATE_MIPMAP_HINT_SGIS );
      #endif
      #if defined( GL_COMPRESSED_SLUMINANCE )
        ADD_CONST_INT( "GL_COMPRESSED_SLUMINANCE", GL_COMPRESSED_SLUMINANCE );
      #endif
      #if defined( GL_RGBA_DXT5_S3TC )
        ADD_CONST_INT( "GL_RGBA_DXT5_S3TC", GL_RGBA_DXT5_S3TC );
      #endif
      #if defined( GLX_VIDEO_OUT_ALPHA_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_ALPHA_NV", GLX_VIDEO_OUT_ALPHA_NV );
      #endif
      #if defined( GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI )
        ADD_CONST_INT( "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI", GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI );
      #endif
      #if defined( GL_EXT_stencil_clear_tag )
        ADD_CONST_INT( "GL_EXT_stencil_clear_tag", GL_EXT_stencil_clear_tag );
      #endif
      #if defined( GL_ALL_STATIC_DATA_IBM )
        ADD_CONST_INT( "GL_ALL_STATIC_DATA_IBM", GL_ALL_STATIC_DATA_IBM );
      #endif
      #if defined( GL_RGBA16F_ARB )
        ADD_CONST_INT( "GL_RGBA16F_ARB", GL_RGBA16F_ARB );
      #endif
      #if defined( GL_HISTOGRAM_SINK_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_SINK_EXT", GL_HISTOGRAM_SINK_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY14_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY14_NV", GL_VERTEX_ATTRIB_ARRAY14_NV );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB14_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB14_4_NV", GL_MAP1_VERTEX_ATTRIB14_4_NV );
      #endif
      #if defined( GL_INDEX_SHIFT )
        ADD_CONST_INT( "GL_INDEX_SHIFT", GL_INDEX_SHIFT );
      #endif
      #if defined( GLX_CONTEXT_DEBUG_BIT_ARB )
        ADD_CONST_INT( "GLX_CONTEXT_DEBUG_BIT_ARB", GLX_CONTEXT_DEBUG_BIT_ARB );
      #endif
      #if defined( GL_COLOR_SUM_EXT )
        ADD_CONST_INT( "GL_COLOR_SUM_EXT", GL_COLOR_SUM_EXT );
      #endif
      #if defined( GL_TRIANGLES_ADJACENCY_EXT )
        ADD_CONST_INT( "GL_TRIANGLES_ADJACENCY_EXT", GL_TRIANGLES_ADJACENCY_EXT );
      #endif
      #if defined( GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD )
        ADD_CONST_INT( "GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD", GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD );
      #endif
      #if defined( GL_SRC0_RGB )
        ADD_CONST_INT( "GL_SRC0_RGB", GL_SRC0_RGB );
      #endif
      #if defined( GL_BGRA_INTEGER_EXT )
        ADD_CONST_INT( "GL_BGRA_INTEGER_EXT", GL_BGRA_INTEGER_EXT );
      #endif
      #if defined( GLX_SAMPLES_SGIS )
        ADD_CONST_INT( "GLX_SAMPLES_SGIS", GLX_SAMPLES_SGIS );
      #endif
      #if defined( GL_STREAM_READ )
        ADD_CONST_INT( "GL_STREAM_READ", GL_STREAM_READ );
      #endif
      #if defined( GL_LINEAR )
        ADD_CONST_INT( "GL_LINEAR", GL_LINEAR );
      #endif
      #if defined( GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV", GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV );
      #endif
      #if defined( GL_MINMAX_SINK )
        ADD_CONST_INT( "GL_MINMAX_SINK", GL_MINMAX_SINK );
      #endif
      #if defined( GL_VERTEX_ARRAY )
        ADD_CONST_INT( "GL_VERTEX_ARRAY", GL_VERTEX_ARRAY );
      #endif
      #if defined( GL_RGBA4_S3TC )
        ADD_CONST_INT( "GL_RGBA4_S3TC", GL_RGBA4_S3TC );
      #endif
      #if defined( GL_STRICT_DEPTHFUNC_HINT_PGI )
        ADD_CONST_INT( "GL_STRICT_DEPTHFUNC_HINT_PGI", GL_STRICT_DEPTHFUNC_HINT_PGI );
      #endif
      #if defined( GL_STENCIL_INDEX )
        ADD_CONST_INT( "GL_STENCIL_INDEX", GL_STENCIL_INDEX );
      #endif
      #if defined( GL_PROGRAM_TEMPORARIES_ARB )
        ADD_CONST_INT( "GL_PROGRAM_TEMPORARIES_ARB", GL_PROGRAM_TEMPORARIES_ARB );
      #endif
      #if defined( GL_TEXTURE_GREEN_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_GREEN_SIZE_EXT", GL_TEXTURE_GREEN_SIZE_EXT );
      #endif
      #if defined( GL_SEPARATE_ATTRIBS_NV )
        ADD_CONST_INT( "GL_SEPARATE_ATTRIBS_NV", GL_SEPARATE_ATTRIBS_NV );
      #endif
      #if defined( GL_GREATER )
        ADD_CONST_INT( "GL_GREATER", GL_GREATER );
      #endif
      #if defined( GL_MAX_GEOMETRY_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS", GL_MAX_GEOMETRY_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_ENABLED )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_ENABLED", GL_VERTEX_ATTRIB_ARRAY_ENABLED );
      #endif
      #if defined( GL_GREEN_MAX_CLAMP_INGR )
        ADD_CONST_INT( "GL_GREEN_MAX_CLAMP_INGR", GL_GREEN_MAX_CLAMP_INGR );
      #endif
      #if defined( GL_MAX_TEXTURE_IMAGE_UNITS )
        ADD_CONST_INT( "GL_MAX_TEXTURE_IMAGE_UNITS", GL_MAX_TEXTURE_IMAGE_UNITS );
      #endif
      #if defined( GL_LUMINANCE_ALPHA32F_ARB )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA32F_ARB", GL_LUMINANCE_ALPHA32F_ARB );
      #endif
      #if defined( GL_VERTEX_PROGRAM_BINDING_NV )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_BINDING_NV", GL_VERTEX_PROGRAM_BINDING_NV );
      #endif
      #if defined( GL_FRONT_FACE )
        ADD_CONST_INT( "GL_FRONT_FACE", GL_FRONT_FACE );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI", GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI );
      #endif
      #if defined( GL_REPLACE )
        ADD_CONST_INT( "GL_REPLACE", GL_REPLACE );
      #endif
      #if defined( GL_QUERY_RESULT_ARB )
        ADD_CONST_INT( "GL_QUERY_RESULT_ARB", GL_QUERY_RESULT_ARB );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_STRIDE", GL_VERTEX_ATTRIB_ARRAY_STRIDE );
      #endif
      #if defined( GLEW_EXT_draw_buffers2 )
        ADD_CONST_INT( "GLEW_EXT_draw_buffers2", GLEW_EXT_draw_buffers2 );
      #endif
      #if defined( GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS", GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE", GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE );
      #endif
      #if defined( GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT", GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT );
      #endif
      #if defined( GL_CONVOLUTION_BORDER_MODE_EXT )
        ADD_CONST_INT( "GL_CONVOLUTION_BORDER_MODE_EXT", GL_CONVOLUTION_BORDER_MODE_EXT );
      #endif
      #if defined( GL_REDUCE_EXT )
        ADD_CONST_INT( "GL_REDUCE_EXT", GL_REDUCE_EXT );
      #endif
      #if defined( GL_MINMAX_SINK_EXT )
        ADD_CONST_INT( "GL_MINMAX_SINK_EXT", GL_MINMAX_SINK_EXT );
      #endif
      #if defined( GL_OPERAND2_ALPHA_ARB )
        ADD_CONST_INT( "GL_OPERAND2_ALPHA_ARB", GL_OPERAND2_ALPHA_ARB );
      #endif
      #if defined( GL_VERTEX_STREAM3_ATI )
        ADD_CONST_INT( "GL_VERTEX_STREAM3_ATI", GL_VERTEX_STREAM3_ATI );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT", GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT );
      #endif
      #if defined( GL_EXT_vertex_array )
        ADD_CONST_INT( "GL_EXT_vertex_array", GL_EXT_vertex_array );
      #endif
      #if defined( GL_TANGENT_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_TANGENT_ARRAY_TYPE_EXT", GL_TANGENT_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_2D )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_2D", GL_UNSIGNED_INT_SAMPLER_2D );
      #endif
      #if defined( GL_ACCUM_CLEAR_VALUE )
        ADD_CONST_INT( "GL_ACCUM_CLEAR_VALUE", GL_ACCUM_CLEAR_VALUE );
      #endif
      #if defined( GL_RGB_SCALE_EXT )
        ADD_CONST_INT( "GL_RGB_SCALE_EXT", GL_RGB_SCALE_EXT );
      #endif
      #if defined( GL_PROXY_TEXTURE_1D_ARRAY_EXT )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_1D_ARRAY_EXT", GL_PROXY_TEXTURE_1D_ARRAY_EXT );
      #endif
      #if defined( GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT", GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT );
      #endif
      #if defined( GL_SECONDARY_COLOR_ATIX )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ATIX", GL_SECONDARY_COLOR_ATIX );
      #endif
      #if defined( GL_SAMPLER_1D_SHADOW_ARB )
        ADD_CONST_INT( "GL_SAMPLER_1D_SHADOW_ARB", GL_SAMPLER_1D_SHADOW_ARB );
      #endif
      #if defined( GL_RENDERBUFFER_BINDING )
        ADD_CONST_INT( "GL_RENDERBUFFER_BINDING", GL_RENDERBUFFER_BINDING );
      #endif
      #if defined( GL_TEXTURE_STACK_DEPTH )
        ADD_CONST_INT( "GL_TEXTURE_STACK_DEPTH", GL_TEXTURE_STACK_DEPTH );
      #endif
      #if defined( GL_RGB5_EXT )
        ADD_CONST_INT( "GL_RGB5_EXT", GL_RGB5_EXT );
      #endif
      #if defined( GLX_SHARE_CONTEXT_EXT )
        ADD_CONST_INT( "GLX_SHARE_CONTEXT_EXT", GLX_SHARE_CONTEXT_EXT );
      #endif
      #if defined( GL_AVERAGE_EXT )
        ADD_CONST_INT( "GL_AVERAGE_EXT", GL_AVERAGE_EXT );
      #endif
      #if defined( GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS", GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_R16UI )
        ADD_CONST_INT( "GL_R16UI", GL_R16UI );
      #endif
      #if defined( GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN )
        ADD_CONST_INT( "GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN", GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN );
      #endif
      #if defined( GL_CONVOLUTION_1D )
        ADD_CONST_INT( "GL_CONVOLUTION_1D", GL_CONVOLUTION_1D );
      #endif
      #if defined( GL_BLEND )
        ADD_CONST_INT( "GL_BLEND", GL_BLEND );
      #endif
      #if defined( GL_FEEDBACK_BUFFER_TYPE )
        ADD_CONST_INT( "GL_FEEDBACK_BUFFER_TYPE", GL_FEEDBACK_BUFFER_TYPE );
      #endif
      #if defined( GL_QUERY_RESULT_AVAILABLE_NV )
        ADD_CONST_INT( "GL_QUERY_RESULT_AVAILABLE_NV", GL_QUERY_RESULT_AVAILABLE_NV );
      #endif
      #if defined( GL_MAP1_TEXTURE_COORD_3 )
        ADD_CONST_INT( "GL_MAP1_TEXTURE_COORD_3", GL_MAP1_TEXTURE_COORD_3 );
      #endif
      #if defined( GL_COLOR_TABLE_GREEN_SIZE )
        ADD_CONST_INT( "GL_COLOR_TABLE_GREEN_SIZE", GL_COLOR_TABLE_GREEN_SIZE );
      #endif
      #if defined( GL_MAP1_TEXTURE_COORD_1 )
        ADD_CONST_INT( "GL_MAP1_TEXTURE_COORD_1", GL_MAP1_TEXTURE_COORD_1 );
      #endif
      #if defined( GL_UNSIGNED_SHORT )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT", GL_UNSIGNED_SHORT );
      #endif
      #if defined( GL_INTENSITY_SNORM )
        ADD_CONST_INT( "GL_INTENSITY_SNORM", GL_INTENSITY_SNORM );
      #endif
      #if defined( GL_POLYGON_OFFSET_EXT )
        ADD_CONST_INT( "GL_POLYGON_OFFSET_EXT", GL_POLYGON_OFFSET_EXT );
      #endif
      #if defined( GL_MIN )
        ADD_CONST_INT( "GL_MIN", GL_MIN );
      #endif
      #if defined( GL_MAP1_TEXTURE_COORD_4 )
        ADD_CONST_INT( "GL_MAP1_TEXTURE_COORD_4", GL_MAP1_TEXTURE_COORD_4 );
      #endif
      #if defined( GLX_ACCUM_GREEN_SIZE )
        ADD_CONST_INT( "GLX_ACCUM_GREEN_SIZE", GLX_ACCUM_GREEN_SIZE );
      #endif
      #if defined( GL_COMPRESSED_SRGB_ALPHA )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB_ALPHA", GL_COMPRESSED_SRGB_ALPHA );
      #endif
      #if defined( GL_INT_SAMPLER_BUFFER_AMD )
        ADD_CONST_INT( "GL_INT_SAMPLER_BUFFER_AMD", GL_INT_SAMPLER_BUFFER_AMD );
      #endif
      #if defined( GL_ONE_MINUS_SRC_COLOR )
        ADD_CONST_INT( "GL_ONE_MINUS_SRC_COLOR", GL_ONE_MINUS_SRC_COLOR );
      #endif
      #if defined( GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB", GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB );
      #endif
      #if defined( GL_MAX_VERTEX_SHADER_LOCALS_EXT )
        ADD_CONST_INT( "GL_MAX_VERTEX_SHADER_LOCALS_EXT", GL_MAX_VERTEX_SHADER_LOCALS_EXT );
      #endif
      #if defined( GL_INTENSITY12 )
        ADD_CONST_INT( "GL_INTENSITY12", GL_INTENSITY12 );
      #endif
      #if defined( GL_FUNC_SUBTRACT_EXT )
        ADD_CONST_INT( "GL_FUNC_SUBTRACT_EXT", GL_FUNC_SUBTRACT_EXT );
      #endif
      #if defined( GLX_BAD_ATTRIBUTE )
        ADD_CONST_INT( "GLX_BAD_ATTRIBUTE", GLX_BAD_ATTRIBUTE );
      #endif
      #if defined( GL_C4UB_V2F )
        ADD_CONST_INT( "GL_C4UB_V2F", GL_C4UB_V2F );
      #endif
      #if defined( GL_OCCLUSION_TEST_HP )
        ADD_CONST_INT( "GL_OCCLUSION_TEST_HP", GL_OCCLUSION_TEST_HP );
      #endif
      #if defined( GL_MAP2_TANGENT_EXT )
        ADD_CONST_INT( "GL_MAP2_TANGENT_EXT", GL_MAP2_TANGENT_EXT );
      #endif
      #if defined( GL_DRAW_BUFFER1_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER1_ATI", GL_DRAW_BUFFER1_ATI );
      #endif
      #if defined( GL_SAMPLE_MASK_EXT )
        ADD_CONST_INT( "GL_SAMPLE_MASK_EXT", GL_SAMPLE_MASK_EXT );
      #endif
      #if defined( GL_LIST_MODE )
        ADD_CONST_INT( "GL_LIST_MODE", GL_LIST_MODE );
      #endif
      #if defined( GL_POST_CONVOLUTION_RED_SCALE )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_RED_SCALE", GL_POST_CONVOLUTION_RED_SCALE );
      #endif
      #if defined( GLX_BACK_RIGHT_BUFFER_BIT_SGIX )
        ADD_CONST_INT( "GLX_BACK_RIGHT_BUFFER_BIT_SGIX", GLX_BACK_RIGHT_BUFFER_BIT_SGIX );
      #endif
      #if defined( GL_COORD_REPLACE_NV )
        ADD_CONST_INT( "GL_COORD_REPLACE_NV", GL_COORD_REPLACE_NV );
      #endif
      #if defined( GLEW_EXT_texture_integer )
        ADD_CONST_INT( "GLEW_EXT_texture_integer", GLEW_EXT_texture_integer );
      #endif
      #if defined( GL_MAX_PROGRAM_CALL_DEPTH_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_CALL_DEPTH_NV", GL_MAX_PROGRAM_CALL_DEPTH_NV );
      #endif
      #if defined( GL_ACTIVE_VARYINGS_NV )
        ADD_CONST_INT( "GL_ACTIVE_VARYINGS_NV", GL_ACTIVE_VARYINGS_NV );
      #endif
      #if defined( GL_VERTEX_PROGRAM_POINT_SIZE )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_POINT_SIZE", GL_VERTEX_PROGRAM_POINT_SIZE );
      #endif
      #if defined( GL_UNSIGNED_SHORT_8_8_REV_APPLE )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_8_8_REV_APPLE", GL_UNSIGNED_SHORT_8_8_REV_APPLE );
      #endif
      #if defined( GL_OPERAND2_RGB )
        ADD_CONST_INT( "GL_OPERAND2_RGB", GL_OPERAND2_RGB );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB2_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB2_4_NV", GL_MAP2_VERTEX_ATTRIB2_4_NV );
      #endif
      #if defined( GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP )
        ADD_CONST_INT( "GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP", GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP );
      #endif
      #if defined( GL_DEPTH_STENCIL_TO_RGBA_NV )
        ADD_CONST_INT( "GL_DEPTH_STENCIL_TO_RGBA_NV", GL_DEPTH_STENCIL_TO_RGBA_NV );
      #endif
      #if defined( GL_EXT_texture_env_dot3 )
        ADD_CONST_INT( "GL_EXT_texture_env_dot3", GL_EXT_texture_env_dot3 );
      #endif
      #if defined( GL_SRGB_ALPHA )
        ADD_CONST_INT( "GL_SRGB_ALPHA", GL_SRGB_ALPHA );
      #endif
      #if defined( GL_DRAW_BUFFER9_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER9_ARB", GL_DRAW_BUFFER9_ARB );
      #endif
      #if defined( GL_TEXTURE_SWIZZLE_B_EXT )
        ADD_CONST_INT( "GL_TEXTURE_SWIZZLE_B_EXT", GL_TEXTURE_SWIZZLE_B_EXT );
      #endif
      #if defined( GL_DOUBLE_EXT )
        ADD_CONST_INT( "GL_DOUBLE_EXT", GL_DOUBLE_EXT );
      #endif
      #if defined( GL_EXT_texture_shared_exponent )
        ADD_CONST_INT( "GL_EXT_texture_shared_exponent", GL_EXT_texture_shared_exponent );
      #endif
      #if defined( GL_PACK_SKIP_ROWS )
        ADD_CONST_INT( "GL_PACK_SKIP_ROWS", GL_PACK_SKIP_ROWS );
      #endif
      #if defined( GL_MAX_DRAW_BUFFERS_ATI )
        ADD_CONST_INT( "GL_MAX_DRAW_BUFFERS_ATI", GL_MAX_DRAW_BUFFERS_ATI );
      #endif
      #if defined( GL_MAX_TEXTURE_UNITS )
        ADD_CONST_INT( "GL_MAX_TEXTURE_UNITS", GL_MAX_TEXTURE_UNITS );
      #endif
      #if defined( GL_SLUMINANCE8 )
        ADD_CONST_INT( "GL_SLUMINANCE8", GL_SLUMINANCE8 );
      #endif
      #if defined( GLX_SWAP_INTERVAL_EXT )
        ADD_CONST_INT( "GLX_SWAP_INTERVAL_EXT", GLX_SWAP_INTERVAL_EXT );
      #endif
      #if defined( GL_RGBA_FLOAT16_ATI )
        ADD_CONST_INT( "GL_RGBA_FLOAT16_ATI", GL_RGBA_FLOAT16_ATI );
      #endif
      #if defined( GL_LOGIC_OP )
        ADD_CONST_INT( "GL_LOGIC_OP", GL_LOGIC_OP );
      #endif
      #if defined( GL_DRAW_BUFFER6_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER6_ARB", GL_DRAW_BUFFER6_ARB );
      #endif
      #if defined( GL_MAP1_COLOR_4 )
        ADD_CONST_INT( "GL_MAP1_COLOR_4", GL_MAP1_COLOR_4 );
      #endif
      #if defined( GL_GEOMETRY_SHADER )
        ADD_CONST_INT( "GL_GEOMETRY_SHADER", GL_GEOMETRY_SHADER );
      #endif
      #if defined( GL_RG32F )
        ADD_CONST_INT( "GL_RG32F", GL_RG32F );
      #endif
      #if defined( GL_COMBINER3_NV )
        ADD_CONST_INT( "GL_COMBINER3_NV", GL_COMBINER3_NV );
      #endif
      #if defined( GL_LUMINANCE8_EXT )
        ADD_CONST_INT( "GL_LUMINANCE8_EXT", GL_LUMINANCE8_EXT );
      #endif
      #if defined( GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS", GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS );
      #endif
      #if defined( GL_TEXTURE_RECTANGLE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_RECTANGLE_ARB", GL_TEXTURE_RECTANGLE_ARB );
      #endif
      #if defined( GL_VERTEX_ARRAY_LIST_IBM )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_LIST_IBM", GL_VERTEX_ARRAY_LIST_IBM );
      #endif
      #if defined( GL_BLEND_COLOR )
        ADD_CONST_INT( "GL_BLEND_COLOR", GL_BLEND_COLOR );
      #endif
      #if defined( GL_ALPHA_BITS )
        ADD_CONST_INT( "GL_ALPHA_BITS", GL_ALPHA_BITS );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_STRIDE_EXT", GL_TEXTURE_COORD_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_BUFFER_OBJECT_APPLE )
        ADD_CONST_INT( "GL_BUFFER_OBJECT_APPLE", GL_BUFFER_OBJECT_APPLE );
      #endif
      #if defined( GL_SAMPLER_2D_ARRAY_SHADOW_EXT )
        ADD_CONST_INT( "GL_SAMPLER_2D_ARRAY_SHADOW_EXT", GL_SAMPLER_2D_ARRAY_SHADOW_EXT );
      #endif
      #if defined( GL_ONE_MINUS_CONSTANT_ALPHA )
        ADD_CONST_INT( "GL_ONE_MINUS_CONSTANT_ALPHA", GL_ONE_MINUS_CONSTANT_ALPHA );
      #endif
      #if defined( GL_NEAREST_MIPMAP_LINEAR )
        ADD_CONST_INT( "GL_NEAREST_MIPMAP_LINEAR", GL_NEAREST_MIPMAP_LINEAR );
      #endif
      #if defined( GL_SRC2_ALPHA )
        ADD_CONST_INT( "GL_SRC2_ALPHA", GL_SRC2_ALPHA );
      #endif
      #if defined( GLEW_EXT_texture_compression_dxt1 )
        ADD_CONST_INT( "GLEW_EXT_texture_compression_dxt1", GLEW_EXT_texture_compression_dxt1 );
      #endif
      #if defined( GL_MULTISAMPLE_BIT_EXT )
        ADD_CONST_INT( "GL_MULTISAMPLE_BIT_EXT", GL_MULTISAMPLE_BIT_EXT );
      #endif
      #if defined( GLEW_EXT_draw_range_elements )
        ADD_CONST_INT( "GLEW_EXT_draw_range_elements", GLEW_EXT_draw_range_elements );
      #endif
      #if defined( GL_MODELVIEW14_ARB )
        ADD_CONST_INT( "GL_MODELVIEW14_ARB", GL_MODELVIEW14_ARB );
      #endif
      #if defined( GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER );
      #endif
      #if defined( GLX_SWAP_COPY_OML )
        ADD_CONST_INT( "GLX_SWAP_COPY_OML", GLX_SWAP_COPY_OML );
      #endif
      #if defined( GL_FOG_END )
        ADD_CONST_INT( "GL_FOG_END", GL_FOG_END );
      #endif
      #if defined( GL_BLEND_SRC_ALPHA_EXT )
        ADD_CONST_INT( "GL_BLEND_SRC_ALPHA_EXT", GL_BLEND_SRC_ALPHA_EXT );
      #endif
      #if defined( GL_TEXTURE3_ARB )
        ADD_CONST_INT( "GL_TEXTURE3_ARB", GL_TEXTURE3_ARB );
      #endif
      #if defined( GL_ZERO_EXT )
        ADD_CONST_INT( "GL_ZERO_EXT", GL_ZERO_EXT );
      #endif
      #if defined( GL_INTENSITY32F_ARB )
        ADD_CONST_INT( "GL_INTENSITY32F_ARB", GL_INTENSITY32F_ARB );
      #endif
      #if defined( GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI )
        ADD_CONST_INT( "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI", GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI );
      #endif
      #if defined( GL_ALLOW_DRAW_MEM_HINT_PGI )
        ADD_CONST_INT( "GL_ALLOW_DRAW_MEM_HINT_PGI", GL_ALLOW_DRAW_MEM_HINT_PGI );
      #endif
      #if defined( GL_HISTOGRAM_WIDTH_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_WIDTH_EXT", GL_HISTOGRAM_WIDTH_EXT );
      #endif
      #if defined( GL_SOURCE0_RGB_ARB )
        ADD_CONST_INT( "GL_SOURCE0_RGB_ARB", GL_SOURCE0_RGB_ARB );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT", GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT );
      #endif
      #if defined( GL_MODELVIEW10_ARB )
        ADD_CONST_INT( "GL_MODELVIEW10_ARB", GL_MODELVIEW10_ARB );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB10_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB10_4_NV", GL_MAP1_VERTEX_ATTRIB10_4_NV );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB7_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB7_4_NV", GL_MAP1_VERTEX_ATTRIB7_4_NV );
      #endif
      #if defined( GL_NORMAL_ARRAY_LIST_STRIDE_IBM )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_LIST_STRIDE_IBM", GL_NORMAL_ARRAY_LIST_STRIDE_IBM );
      #endif
      #if defined( GL_EXT_geometry_shader4 )
        ADD_CONST_INT( "GL_EXT_geometry_shader4", GL_EXT_geometry_shader4 );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_STRIDE_EXT", GL_EDGE_FLAG_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_TYPE )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_TYPE", GL_FOG_COORDINATE_ARRAY_TYPE );
      #endif
      #if defined( GLEW_EXT_cmyka )
        ADD_CONST_INT( "GLEW_EXT_cmyka", GLEW_EXT_cmyka );
      #endif
      #if defined( GL_ALPHA_MIN_SGIX )
        ADD_CONST_INT( "GL_ALPHA_MIN_SGIX", GL_ALPHA_MIN_SGIX );
      #endif
      #if defined( GL_SAMPLES_PASSED )
        ADD_CONST_INT( "GL_SAMPLES_PASSED", GL_SAMPLES_PASSED );
      #endif
      #if defined( GL_TEXTURE_BINDING_RECTANGLE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_RECTANGLE_ARB", GL_TEXTURE_BINDING_RECTANGLE_ARB );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY13_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY13_NV", GL_VERTEX_ATTRIB_ARRAY13_NV );
      #endif
      #if defined( GL_TEXTURE_FIXED_SAMPLE_LOCATIONS )
        ADD_CONST_INT( "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS", GL_TEXTURE_FIXED_SAMPLE_LOCATIONS );
      #endif
      #if defined( GL_CG_VERTEX_SHADER_EXT )
        ADD_CONST_INT( "GL_CG_VERTEX_SHADER_EXT", GL_CG_VERTEX_SHADER_EXT );
      #endif
      #if defined( GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB", GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_COLOR_TABLE_INTENSITY_SIZE_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_INTENSITY_SIZE_SGI", GL_COLOR_TABLE_INTENSITY_SIZE_SGI );
      #endif
      #if defined( GL_SEPARATE_ATTRIBS )
        ADD_CONST_INT( "GL_SEPARATE_ATTRIBS", GL_SEPARATE_ATTRIBS );
      #endif
      #if defined( GL_CURRENT_FOG_COORD )
        ADD_CONST_INT( "GL_CURRENT_FOG_COORD", GL_CURRENT_FOG_COORD );
      #endif
      #if defined( GL_PROGRAM_TEX_INDIRECTIONS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_TEX_INDIRECTIONS_ARB", GL_PROGRAM_TEX_INDIRECTIONS_ARB );
      #endif
      #if defined( GL_LUMINANCE16_SIGNED_SGIX )
        ADD_CONST_INT( "GL_LUMINANCE16_SIGNED_SGIX", GL_LUMINANCE16_SIGNED_SGIX );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB", GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB );
      #endif
      #if defined( GLX_TRANSPARENT_GREEN_VALUE )
        ADD_CONST_INT( "GLX_TRANSPARENT_GREEN_VALUE", GLX_TRANSPARENT_GREEN_VALUE );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB0_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB0_4_NV", GL_MAP2_VERTEX_ATTRIB0_4_NV );
      #endif
      #if defined( GL_TEXTURE_COLOR_TABLE_SGI )
        ADD_CONST_INT( "GL_TEXTURE_COLOR_TABLE_SGI", GL_TEXTURE_COLOR_TABLE_SGI );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB5_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB5_NV", GL_EVAL_VERTEX_ATTRIB5_NV );
      #endif
      #if defined( GL_CONVOLUTION_FORMAT )
        ADD_CONST_INT( "GL_CONVOLUTION_FORMAT", GL_CONVOLUTION_FORMAT );
      #endif
      #if defined( GL_ATTRIB_ARRAY_POINTER_NV )
        ADD_CONST_INT( "GL_ATTRIB_ARRAY_POINTER_NV", GL_ATTRIB_ARRAY_POINTER_NV );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB1_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB1_4_NV", GL_MAP1_VERTEX_ATTRIB1_4_NV );
      #endif
      #if defined( GL_PROXY_TEXTURE_2D_STACK_MESAX )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_2D_STACK_MESAX", GL_PROXY_TEXTURE_2D_STACK_MESAX );
      #endif
      #if defined( GL_PRIMITIVE_RESTART_NV )
        ADD_CONST_INT( "GL_PRIMITIVE_RESTART_NV", GL_PRIMITIVE_RESTART_NV );
      #endif
      #if defined( GL_FRAGMENT_DEPTH_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_DEPTH_EXT", GL_FRAGMENT_DEPTH_EXT );
      #endif
      #if defined( GL_TEXTURE_HEIGHT )
        ADD_CONST_INT( "GL_TEXTURE_HEIGHT", GL_TEXTURE_HEIGHT );
      #endif
      #if defined( GL_DEPTH_COMPONENT16_ARB )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT16_ARB", GL_DEPTH_COMPONENT16_ARB );
      #endif
      #if defined( GL_MAP_ATTRIB_U_ORDER_NV )
        ADD_CONST_INT( "GL_MAP_ATTRIB_U_ORDER_NV", GL_MAP_ATTRIB_U_ORDER_NV );
      #endif
      #if defined( GL_RGBA16I )
        ADD_CONST_INT( "GL_RGBA16I", GL_RGBA16I );
      #endif
      #if defined( GL_DOT_PRODUCT_TEXTURE_2D_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_TEXTURE_2D_NV", GL_DOT_PRODUCT_TEXTURE_2D_NV );
      #endif
      #if defined( GLXEW_EXT_visual_info )
        ADD_CONST_INT( "GLXEW_EXT_visual_info", GLXEW_EXT_visual_info );
      #endif
      #if defined( GL_RGBA16F )
        ADD_CONST_INT( "GL_RGBA16F", GL_RGBA16F );
      #endif
      #if defined( GL_COMBINER_COMPONENT_USAGE_NV )
        ADD_CONST_INT( "GL_COMBINER_COMPONENT_USAGE_NV", GL_COMBINER_COMPONENT_USAGE_NV );
      #endif
      #if defined( GL_POST_CONVOLUTION_RED_BIAS )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_RED_BIAS", GL_POST_CONVOLUTION_RED_BIAS );
      #endif
      #if defined( GL_SAMPLER_1D )
        ADD_CONST_INT( "GL_SAMPLER_1D", GL_SAMPLER_1D );
      #endif
      #if defined( GL_CLAMP_TO_EDGE_EXT )
        ADD_CONST_INT( "GL_CLAMP_TO_EDGE_EXT", GL_CLAMP_TO_EDGE_EXT );
      #endif
      #if defined( GL_MAX_VERTEX_VARYING_COMPONENTS_ARB )
        ADD_CONST_INT( "GL_MAX_VERTEX_VARYING_COMPONENTS_ARB", GL_MAX_VERTEX_VARYING_COMPONENTS_ARB );
      #endif
      #if defined( GL_REPLACE_EXT )
        ADD_CONST_INT( "GL_REPLACE_EXT", GL_REPLACE_EXT );
      #endif
      #if defined( GL_RGBA_FLOAT_MODE_ARB )
        ADD_CONST_INT( "GL_RGBA_FLOAT_MODE_ARB", GL_RGBA_FLOAT_MODE_ARB );
      #endif
      #if defined( GLX_AUX4_EXT )
        ADD_CONST_INT( "GLX_AUX4_EXT", GLX_AUX4_EXT );
      #endif
      #if defined( GL_OFFSET_TEXTURE_SCALE_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_SCALE_NV", GL_OFFSET_TEXTURE_SCALE_NV );
      #endif
      #if defined( GLX_ALPHA_SIZE )
        ADD_CONST_INT( "GLX_ALPHA_SIZE", GLX_ALPHA_SIZE );
      #endif
      #if defined( GL_INCR_WRAP_EXT )
        ADD_CONST_INT( "GL_INCR_WRAP_EXT", GL_INCR_WRAP_EXT );
      #endif
      #if defined( GL_COLOR_TABLE_LUMINANCE_SIZE_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI", GL_COLOR_TABLE_LUMINANCE_SIZE_SGI );
      #endif
      #if defined( GL_RED )
        ADD_CONST_INT( "GL_RED", GL_RED );
      #endif
      #if defined( GL_MAX_RED_SGIS )
        ADD_CONST_INT( "GL_MAX_RED_SGIS", GL_MAX_RED_SGIS );
      #endif
      #if defined( GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT )
        ADD_CONST_INT( "GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT", GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT );
      #endif
      #if defined( GL_DEPTH_STENCIL_EXT )
        ADD_CONST_INT( "GL_DEPTH_STENCIL_EXT", GL_DEPTH_STENCIL_EXT );
      #endif
      #if defined( GL_POLYGON_OFFSET_LINE )
        ADD_CONST_INT( "GL_POLYGON_OFFSET_LINE", GL_POLYGON_OFFSET_LINE );
      #endif
      #if defined( GL_FUNC_REVERSE_SUBTRACT )
        ADD_CONST_INT( "GL_FUNC_REVERSE_SUBTRACT", GL_FUNC_REVERSE_SUBTRACT );
      #endif
      #if defined( GLEW_EXT_blend_color )
        ADD_CONST_INT( "GLEW_EXT_blend_color", GLEW_EXT_blend_color );
      #endif
      #if defined( GL_PRESERVE_ATI )
        ADD_CONST_INT( "GL_PRESERVE_ATI", GL_PRESERVE_ATI );
      #endif
      #if defined( GLX_FRONT_LEFT_EXT )
        ADD_CONST_INT( "GLX_FRONT_LEFT_EXT", GLX_FRONT_LEFT_EXT );
      #endif
      #if defined( GL_DSDT_MAG_VIB_NV )
        ADD_CONST_INT( "GL_DSDT_MAG_VIB_NV", GL_DSDT_MAG_VIB_NV );
      #endif
      #if defined( GL_NEGATIVE_Y_EXT )
        ADD_CONST_INT( "GL_NEGATIVE_Y_EXT", GL_NEGATIVE_Y_EXT );
      #endif
      #if defined( GLX_STATIC_COLOR )
        ADD_CONST_INT( "GLX_STATIC_COLOR", GLX_STATIC_COLOR );
      #endif
      #if defined( GL_COLOR_TABLE_ALPHA_SIZE_EXT )
        ADD_CONST_INT( "GL_COLOR_TABLE_ALPHA_SIZE_EXT", GL_COLOR_TABLE_ALPHA_SIZE_EXT );
      #endif
      #if defined( GL_COMPRESSED_RGBA_S3TC_DXT1_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT", GL_COMPRESSED_RGBA_S3TC_DXT1_EXT );
      #endif
      #if defined( GL_GREEN )
        ADD_CONST_INT( "GL_GREEN", GL_GREEN );
      #endif
      #if defined( GL_MAGNITUDE_SCALE_NV )
        ADD_CONST_INT( "GL_MAGNITUDE_SCALE_NV", GL_MAGNITUDE_SCALE_NV );
      #endif
      #if defined( GL_BACK_SECONDARY_COLOR_NV )
        ADD_CONST_INT( "GL_BACK_SECONDARY_COLOR_NV", GL_BACK_SECONDARY_COLOR_NV );
      #endif
      #if defined( GL_RGB4_S3TC )
        ADD_CONST_INT( "GL_RGB4_S3TC", GL_RGB4_S3TC );
      #endif
      #if defined( GL_STENCIL_BACK_PASS_DEPTH_PASS )
        ADD_CONST_INT( "GL_STENCIL_BACK_PASS_DEPTH_PASS", GL_STENCIL_BACK_PASS_DEPTH_PASS );
      #endif
      #if defined( GL_OPERAND1_ALPHA_EXT )
        ADD_CONST_INT( "GL_OPERAND1_ALPHA_EXT", GL_OPERAND1_ALPHA_EXT );
      #endif
      #if defined( GL_MAP2_TEXTURE_COORD_1 )
        ADD_CONST_INT( "GL_MAP2_TEXTURE_COORD_1", GL_MAP2_TEXTURE_COORD_1 );
      #endif
      #if defined( GL_MAP2_TEXTURE_COORD_2 )
        ADD_CONST_INT( "GL_MAP2_TEXTURE_COORD_2", GL_MAP2_TEXTURE_COORD_2 );
      #endif
      #if defined( GL_MAP2_TEXTURE_COORD_3 )
        ADD_CONST_INT( "GL_MAP2_TEXTURE_COORD_3", GL_MAP2_TEXTURE_COORD_3 );
      #endif
      #if defined( GL_MAP2_TEXTURE_COORD_4 )
        ADD_CONST_INT( "GL_MAP2_TEXTURE_COORD_4", GL_MAP2_TEXTURE_COORD_4 );
      #endif
      #if defined( GL_VERTEX_DATA_HINT_PGI )
        ADD_CONST_INT( "GL_VERTEX_DATA_HINT_PGI", GL_VERTEX_DATA_HINT_PGI );
      #endif
      #if defined( GL_4_BYTES )
        ADD_CONST_INT( "GL_4_BYTES", GL_4_BYTES );
      #endif
      #if defined( GL_MAX_MODELVIEW_STACK_DEPTH )
        ADD_CONST_INT( "GL_MAX_MODELVIEW_STACK_DEPTH", GL_MAX_MODELVIEW_STACK_DEPTH );
      #endif
      #if defined( GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS", GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS );
      #endif
      #if defined( GL_CONVOLUTION_WIDTH )
        ADD_CONST_INT( "GL_CONVOLUTION_WIDTH", GL_CONVOLUTION_WIDTH );
      #endif
      #if defined( GL_RGBA16_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_RGBA16_EXTENDED_RANGE_SGIX", GL_RGBA16_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_RGB_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_RGB_EXTENDED_RANGE_SGIX", GL_RGB_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_CON_1_ATI )
        ADD_CONST_INT( "GL_CON_1_ATI", GL_CON_1_ATI );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV", GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GL_VERTEX_SOURCE_ATI )
        ADD_CONST_INT( "GL_VERTEX_SOURCE_ATI", GL_VERTEX_SOURCE_ATI );
      #endif
      #if defined( GLX_TRANSPARENT_INDEX_VALUE_EXT )
        ADD_CONST_INT( "GLX_TRANSPARENT_INDEX_VALUE_EXT", GLX_TRANSPARENT_INDEX_VALUE_EXT );
      #endif
      #if defined( GL_MATRIX29_ARB )
        ADD_CONST_INT( "GL_MATRIX29_ARB", GL_MATRIX29_ARB );
      #endif
      #if defined( GL_UNSIGNED_INT_8_8_8_8_REV )
        ADD_CONST_INT( "GL_UNSIGNED_INT_8_8_8_8_REV", GL_UNSIGNED_INT_8_8_8_8_REV );
      #endif
      #if defined( GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT", GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_OBJECT_SHADER_SOURCE_LENGTH_ARB )
        ADD_CONST_INT( "GL_OBJECT_SHADER_SOURCE_LENGTH_ARB", GL_OBJECT_SHADER_SOURCE_LENGTH_ARB );
      #endif
      #if defined( GL_VERTEX_STREAM4_ATI )
        ADD_CONST_INT( "GL_VERTEX_STREAM4_ATI", GL_VERTEX_STREAM4_ATI );
      #endif
      #if defined( GL_TEXTURE_BINDING_RECTANGLE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_RECTANGLE_EXT", GL_TEXTURE_BINDING_RECTANGLE_EXT );
      #endif
      #if defined( GL_LUMINANCE_SNORM )
        ADD_CONST_INT( "GL_LUMINANCE_SNORM", GL_LUMINANCE_SNORM );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI", GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI );
      #endif
      #if defined( GL_MAX_COMBINED_UNIFORM_BLOCKS )
        ADD_CONST_INT( "GL_MAX_COMBINED_UNIFORM_BLOCKS", GL_MAX_COMBINED_UNIFORM_BLOCKS );
      #endif
      #if defined( GL_TEXTURE_ENV_MODE )
        ADD_CONST_INT( "GL_TEXTURE_ENV_MODE", GL_TEXTURE_ENV_MODE );
      #endif
      #if defined( GL_DOT_PRODUCT_TEXTURE_1D_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_TEXTURE_1D_NV", GL_DOT_PRODUCT_TEXTURE_1D_NV );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB7_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB7_NV", GL_EVAL_VERTEX_ATTRIB7_NV );
      #endif
      #if defined( GL_UNSIGNED_SHORT_4_4_4_4_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_4_4_4_4_EXT", GL_UNSIGNED_SHORT_4_4_4_4_EXT );
      #endif
      #if defined( GL_DST_COLOR )
        ADD_CONST_INT( "GL_DST_COLOR", GL_DST_COLOR );
      #endif
      #if defined( GL_DOT3_ATI )
        ADD_CONST_INT( "GL_DOT3_ATI", GL_DOT3_ATI );
      #endif
      #if defined( GL_MAX_SAMPLES_EXT )
        ADD_CONST_INT( "GL_MAX_SAMPLES_EXT", GL_MAX_SAMPLES_EXT );
      #endif
      #if defined( GL_REG_4_ATI )
        ADD_CONST_INT( "GL_REG_4_ATI", GL_REG_4_ATI );
      #endif
      #if defined( GL_DRAW_BUFFER5_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER5_ATI", GL_DRAW_BUFFER5_ATI );
      #endif
      #if defined( GL_UNSIGNED_INT )
        ADD_CONST_INT( "GL_UNSIGNED_INT", GL_UNSIGNED_INT );
      #endif
      #if defined( GLEW_VERSION_3_2 )
        ADD_CONST_INT( "GLEW_VERSION_3_2", GLEW_VERSION_3_2 );
      #endif
      #if defined( GLEW_VERSION_3_1 )
        ADD_CONST_INT( "GLEW_VERSION_3_1", GLEW_VERSION_3_1 );
      #endif
      #if defined( GLEW_VERSION_3_0 )
        ADD_CONST_INT( "GLEW_VERSION_3_0", GLEW_VERSION_3_0 );
      #endif
      #if defined( GL_TRANSPOSE_CURRENT_MATRIX_ARB )
        ADD_CONST_INT( "GL_TRANSPOSE_CURRENT_MATRIX_ARB", GL_TRANSPOSE_CURRENT_MATRIX_ARB );
      #endif
      #if defined( GL_V3F )
        ADD_CONST_INT( "GL_V3F", GL_V3F );
      #endif
      #if defined( GL_S3_s3tc )
        ADD_CONST_INT( "GL_S3_s3tc", GL_S3_s3tc );
      #endif
      #if defined( GL_DOT3_RGB )
        ADD_CONST_INT( "GL_DOT3_RGB", GL_DOT3_RGB );
      #endif
      #if defined( GL_REFLECTION_MAP_EXT )
        ADD_CONST_INT( "GL_REFLECTION_MAP_EXT", GL_REFLECTION_MAP_EXT );
      #endif
      #if defined( GL_INT_SAMPLER_2D_RECT_EXT )
        ADD_CONST_INT( "GL_INT_SAMPLER_2D_RECT_EXT", GL_INT_SAMPLER_2D_RECT_EXT );
      #endif
      #if defined( GL_LUMINANCE16 )
        ADD_CONST_INT( "GL_LUMINANCE16", GL_LUMINANCE16 );
      #endif
      #if defined( GL_VERTEX4_BIT_PGI )
        ADD_CONST_INT( "GL_VERTEX4_BIT_PGI", GL_VERTEX4_BIT_PGI );
      #endif
      #if defined( GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES", GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES );
      #endif
      #if defined( GL_POST_CONVOLUTION_ALPHA_SCALE )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_ALPHA_SCALE", GL_POST_CONVOLUTION_ALPHA_SCALE );
      #endif
      #if defined( GL_LUMINANCE12 )
        ADD_CONST_INT( "GL_LUMINANCE12", GL_LUMINANCE12 );
      #endif
      #if defined( GLX_STEREO )
        ADD_CONST_INT( "GLX_STEREO", GLX_STEREO );
      #endif
      #if defined( GL_RG16_SNORM )
        ADD_CONST_INT( "GL_RG16_SNORM", GL_RG16_SNORM );
      #endif
      #if defined( GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN )
        ADD_CONST_INT( "GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN", GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN );
      #endif
      #if defined( GL_EXT_index_material )
        ADD_CONST_INT( "GL_EXT_index_material", GL_EXT_index_material );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT", GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT );
      #endif
      #if defined( GL_CURRENT_RASTER_COLOR )
        ADD_CONST_INT( "GL_CURRENT_RASTER_COLOR", GL_CURRENT_RASTER_COLOR );
      #endif
      #if defined( GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT )
        ADD_CONST_INT( "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT", GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT );
      #endif
      #if defined( GL_QUERY_COUNTER_BITS )
        ADD_CONST_INT( "GL_QUERY_COUNTER_BITS", GL_QUERY_COUNTER_BITS );
      #endif
      #if defined( GL_MODULATE )
        ADD_CONST_INT( "GL_MODULATE", GL_MODULATE );
      #endif
      #if defined( GL_RG_INTEGER )
        ADD_CONST_INT( "GL_RG_INTEGER", GL_RG_INTEGER );
      #endif
      #if defined( GL_SOURCE0_ALPHA_EXT )
        ADD_CONST_INT( "GL_SOURCE0_ALPHA_EXT", GL_SOURCE0_ALPHA_EXT );
      #endif
      #if defined( GL_FOG_COORD_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_FOG_COORD_ARRAY_BUFFER_BINDING", GL_FOG_COORD_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GLXEW_VERSION_1_1 )
        ADD_CONST_INT( "GLXEW_VERSION_1_1", GLXEW_VERSION_1_1 );
      #endif
      #if defined( GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV", GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV );
      #endif
      #if defined( GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX", GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX );
      #endif
      #if defined( GL_COLOR_ARRAY_LIST_STRIDE_IBM )
        ADD_CONST_INT( "GL_COLOR_ARRAY_LIST_STRIDE_IBM", GL_COLOR_ARRAY_LIST_STRIDE_IBM );
      #endif
      #if defined( GL_RENDERBUFFER_HEIGHT )
        ADD_CONST_INT( "GL_RENDERBUFFER_HEIGHT", GL_RENDERBUFFER_HEIGHT );
      #endif
      #if defined( GL_LUMINANCE_FLOAT32_ATI )
        ADD_CONST_INT( "GL_LUMINANCE_FLOAT32_ATI", GL_LUMINANCE_FLOAT32_ATI );
      #endif
      #if defined( GL_INTERLEAVED_ATTRIBS )
        ADD_CONST_INT( "GL_INTERLEAVED_ATTRIBS", GL_INTERLEAVED_ATTRIBS );
      #endif
      #if defined( GL_TEXTURE_ALPHA_TYPE )
        ADD_CONST_INT( "GL_TEXTURE_ALPHA_TYPE", GL_TEXTURE_ALPHA_TYPE );
      #endif
      #if defined( GL_EXT_texture_mirror_clamp )
        ADD_CONST_INT( "GL_EXT_texture_mirror_clamp", GL_EXT_texture_mirror_clamp );
      #endif
      #if defined( GLX_HEIGHT )
        ADD_CONST_INT( "GLX_HEIGHT", GLX_HEIGHT );
      #endif
      #if defined( GLEW_PGI_misc_hints )
        ADD_CONST_INT( "GLEW_PGI_misc_hints", GLEW_PGI_misc_hints );
      #endif
      #if defined( GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB", GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_BLUE )
        ADD_CONST_INT( "GL_BLUE", GL_BLUE );
      #endif
      #if defined( GLEW_VERSION_1_5 )
        ADD_CONST_INT( "GLEW_VERSION_1_5", GLEW_VERSION_1_5 );
      #endif
      #if defined( GLEW_VERSION_1_4 )
        ADD_CONST_INT( "GLEW_VERSION_1_4", GLEW_VERSION_1_4 );
      #endif
      #if defined( GL_RGBA4_EXT )
        ADD_CONST_INT( "GL_RGBA4_EXT", GL_RGBA4_EXT );
      #endif
      #if defined( GL_COLOR_ATTACHMENT2_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT2_EXT", GL_COLOR_ATTACHMENT2_EXT );
      #endif
      #if defined( GLEW_VERSION_1_1 )
        ADD_CONST_INT( "GLEW_VERSION_1_1", GLEW_VERSION_1_1 );
      #endif
      #if defined( GL_MAX_VARYING_FLOATS_ARB )
        ADD_CONST_INT( "GL_MAX_VARYING_FLOATS_ARB", GL_MAX_VARYING_FLOATS_ARB );
      #endif
      #if defined( GLEW_VERSION_1_3 )
        ADD_CONST_INT( "GLEW_VERSION_1_3", GLEW_VERSION_1_3 );
      #endif
      #if defined( GLEW_VERSION_1_2 )
        ADD_CONST_INT( "GLEW_VERSION_1_2", GLEW_VERSION_1_2 );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS", GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS );
      #endif
      #if defined( GL_SRGB_EXT )
        ADD_CONST_INT( "GL_SRGB_EXT", GL_SRGB_EXT );
      #endif
      #if defined( GL_SOURCE3_RGB_NV )
        ADD_CONST_INT( "GL_SOURCE3_RGB_NV", GL_SOURCE3_RGB_NV );
      #endif
      #if defined( GL_COLOR_ATTACHMENT7_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT7_EXT", GL_COLOR_ATTACHMENT7_EXT );
      #endif
      #if defined( GL_TEXTURE_BLUE_TYPE )
        ADD_CONST_INT( "GL_TEXTURE_BLUE_TYPE", GL_TEXTURE_BLUE_TYPE );
      #endif
      #if defined( GL_C4F_N3F_V3F )
        ADD_CONST_INT( "GL_C4F_N3F_V3F", GL_C4F_N3F_V3F );
      #endif
      #if defined( GLX_TEXTURE_FORMAT_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_FORMAT_ATI", GLX_TEXTURE_FORMAT_ATI );
      #endif
      #if defined( GL_CURRENT_BINORMAL_EXT )
        ADD_CONST_INT( "GL_CURRENT_BINORMAL_EXT", GL_CURRENT_BINORMAL_EXT );
      #endif
      #if defined( GL_T4F_V4F )
        ADD_CONST_INT( "GL_T4F_V4F", GL_T4F_V4F );
      #endif
      #if defined( GL_STREAM_COPY )
        ADD_CONST_INT( "GL_STREAM_COPY", GL_STREAM_COPY );
      #endif
      #if defined( GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB", GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_SOURCE0_RGB )
        ADD_CONST_INT( "GL_SOURCE0_RGB", GL_SOURCE0_RGB );
      #endif
      #if defined( GL_SIGNED_ALPHA8_NV )
        ADD_CONST_INT( "GL_SIGNED_ALPHA8_NV", GL_SIGNED_ALPHA8_NV );
      #endif
      #if defined( GL_EYE_PLANE )
        ADD_CONST_INT( "GL_EYE_PLANE", GL_EYE_PLANE );
      #endif
      #if defined( GL_SAMPLER_2D_RECT_ARB )
        ADD_CONST_INT( "GL_SAMPLER_2D_RECT_ARB", GL_SAMPLER_2D_RECT_ARB );
      #endif
      #if defined( GL_MAX_TEXTURE_COORDS_NV )
        ADD_CONST_INT( "GL_MAX_TEXTURE_COORDS_NV", GL_MAX_TEXTURE_COORDS_NV );
      #endif
      #if defined( GL_MATRIX18_ARB )
        ADD_CONST_INT( "GL_MATRIX18_ARB", GL_MATRIX18_ARB );
      #endif
      #if defined( GL_SAMPLER_BUFFER_EXT )
        ADD_CONST_INT( "GL_SAMPLER_BUFFER_EXT", GL_SAMPLER_BUFFER_EXT );
      #endif
      #if defined( GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV )
        ADD_CONST_INT( "GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV", GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV );
      #endif
      #if defined( GL_TEXTURE_2D_MULTISAMPLE_ARRAY )
        ADD_CONST_INT( "GL_TEXTURE_2D_MULTISAMPLE_ARRAY", GL_TEXTURE_2D_MULTISAMPLE_ARRAY );
      #endif
      #if defined( GL_DRAW_FRAMEBUFFER_EXT )
        ADD_CONST_INT( "GL_DRAW_FRAMEBUFFER_EXT", GL_DRAW_FRAMEBUFFER_EXT );
      #endif
      #if defined( GL_POINT_SMOOTH_HINT )
        ADD_CONST_INT( "GL_POINT_SMOOTH_HINT", GL_POINT_SMOOTH_HINT );
      #endif
      #if defined( GL_EXT_histogram )
        ADD_CONST_INT( "GL_EXT_histogram", GL_EXT_histogram );
      #endif
      #if defined( GLX_TRANSPARENT_RED_VALUE )
        ADD_CONST_INT( "GLX_TRANSPARENT_RED_VALUE", GLX_TRANSPARENT_RED_VALUE );
      #endif
      #if defined( GL_RGB8UI_EXT )
        ADD_CONST_INT( "GL_RGB8UI_EXT", GL_RGB8UI_EXT );
      #endif
      #if defined( GL_CLIP_FAR_HINT_PGI )
        ADD_CONST_INT( "GL_CLIP_FAR_HINT_PGI", GL_CLIP_FAR_HINT_PGI );
      #endif
      #if defined( GL_REG_0_ATI )
        ADD_CONST_INT( "GL_REG_0_ATI", GL_REG_0_ATI );
      #endif
      #if defined( GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB", GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB );
      #endif
      #if defined( GL_ORDER )
        ADD_CONST_INT( "GL_ORDER", GL_ORDER );
      #endif
      #if defined( GL_SAMPLER_CUBE_SHADOW_EXT )
        ADD_CONST_INT( "GL_SAMPLER_CUBE_SHADOW_EXT", GL_SAMPLER_CUBE_SHADOW_EXT );
      #endif
      #if defined( GL_VIBRANCE_BIAS_NV )
        ADD_CONST_INT( "GL_VIBRANCE_BIAS_NV", GL_VIBRANCE_BIAS_NV );
      #endif
      #if defined( GLX_AUX0_ATI )
        ADD_CONST_INT( "GLX_AUX0_ATI", GLX_AUX0_ATI );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE", GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE );
      #endif
      #if defined( GLX_FRONT_RIGHT_BUFFER_BIT )
        ADD_CONST_INT( "GLX_FRONT_RIGHT_BUFFER_BIT", GLX_FRONT_RIGHT_BUFFER_BIT );
      #endif
      #if defined( GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI )
        ADD_CONST_INT( "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI", GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI );
      #endif
      #if defined( GL_ATTRIB_ARRAY_TYPE_NV )
        ADD_CONST_INT( "GL_ATTRIB_ARRAY_TYPE_NV", GL_ATTRIB_ARRAY_TYPE_NV );
      #endif
      #if defined( GL_REFLECTION_MAP_ARB )
        ADD_CONST_INT( "GL_REFLECTION_MAP_ARB", GL_REFLECTION_MAP_ARB );
      #endif
      #if defined( GL_STORAGE_SHARED_APPLE )
        ADD_CONST_INT( "GL_STORAGE_SHARED_APPLE", GL_STORAGE_SHARED_APPLE );
      #endif
      #if defined( GL_SOURCE1_RGB_ARB )
        ADD_CONST_INT( "GL_SOURCE1_RGB_ARB", GL_SOURCE1_RGB_ARB );
      #endif
      #if defined( GL_VERTEX23_BIT_PGI )
        ADD_CONST_INT( "GL_VERTEX23_BIT_PGI", GL_VERTEX23_BIT_PGI );
      #endif
      #if defined( GL_INT_SAMPLER_2D_ARRAY_EXT )
        ADD_CONST_INT( "GL_INT_SAMPLER_2D_ARRAY_EXT", GL_INT_SAMPLER_2D_ARRAY_EXT );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB15_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB15_4_NV", GL_MAP1_VERTEX_ATTRIB15_4_NV );
      #endif
      #if defined( GL_OBJECT_COMPILE_STATUS_ARB )
        ADD_CONST_INT( "GL_OBJECT_COMPILE_STATUS_ARB", GL_OBJECT_COMPILE_STATUS_ARB );
      #endif
      #if defined( GL_TEXTURE11_ARB )
        ADD_CONST_INT( "GL_TEXTURE11_ARB", GL_TEXTURE11_ARB );
      #endif
      #if defined( GL_FASTEST )
        ADD_CONST_INT( "GL_FASTEST", GL_FASTEST );
      #endif
      #if defined( GL_EXT_vertex_shader )
        ADD_CONST_INT( "GL_EXT_vertex_shader", GL_EXT_vertex_shader );
      #endif
      #if defined( GL_LUMINANCE8 )
        ADD_CONST_INT( "GL_LUMINANCE8", GL_LUMINANCE8 );
      #endif
      #if defined( GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV )
        ADD_CONST_INT( "GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV", GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV );
      #endif
      #if defined( GLX_FRONT_RIGHT_BUFFER_BIT_SGIX )
        ADD_CONST_INT( "GLX_FRONT_RIGHT_BUFFER_BIT_SGIX", GLX_FRONT_RIGHT_BUFFER_BIT_SGIX );
      #endif
      #if defined( GL_LUMINANCE4 )
        ADD_CONST_INT( "GL_LUMINANCE4", GL_LUMINANCE4 );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_TYPE )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_TYPE", GL_TEXTURE_COORD_ARRAY_TYPE );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED", GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED );
      #endif
      #if defined( GLX_TEXTURE_CUBE_MAP_NEGATIVE_Z_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_CUBE_MAP_NEGATIVE_Z_ATI", GLX_TEXTURE_CUBE_MAP_NEGATIVE_Z_ATI );
      #endif
      #if defined( GLEW_EXT_light_texture )
        ADD_CONST_INT( "GLEW_EXT_light_texture", GLEW_EXT_light_texture );
      #endif
      #if defined( GL_EXT_texture_env )
        ADD_CONST_INT( "GL_EXT_texture_env", GL_EXT_texture_env );
      #endif
      #if defined( GL_OFFSET_TEXTURE_RECTANGLE_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_RECTANGLE_NV", GL_OFFSET_TEXTURE_RECTANGLE_NV );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB", GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB );
      #endif
      #if defined( GL_ALPHA16_SNORM )
        ADD_CONST_INT( "GL_ALPHA16_SNORM", GL_ALPHA16_SNORM );
      #endif
      #if defined( GL_INDEX_BIT_PGI )
        ADD_CONST_INT( "GL_INDEX_BIT_PGI", GL_INDEX_BIT_PGI );
      #endif
      #if defined( GL_DRAW_BUFFER8_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER8_ATI", GL_DRAW_BUFFER8_ATI );
      #endif
      #if defined( GL_SAMPLE_MASK_VALUE_SGIS )
        ADD_CONST_INT( "GL_SAMPLE_MASK_VALUE_SGIS", GL_SAMPLE_MASK_VALUE_SGIS );
      #endif
      #if defined( GL_CLIENT_PIXEL_STORE_BIT )
        ADD_CONST_INT( "GL_CLIENT_PIXEL_STORE_BIT", GL_CLIENT_PIXEL_STORE_BIT );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_Y )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y", GL_TEXTURE_CUBE_MAP_NEGATIVE_Y );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_X )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_X", GL_TEXTURE_CUBE_MAP_NEGATIVE_X );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_Z )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z", GL_TEXTURE_CUBE_MAP_NEGATIVE_Z );
      #endif
      #if defined( GL_POLYGON_BIT )
        ADD_CONST_INT( "GL_POLYGON_BIT", GL_POLYGON_BIT );
      #endif
      #if defined( GL_LERP_ATI )
        ADD_CONST_INT( "GL_LERP_ATI", GL_LERP_ATI );
      #endif
      #if defined( GL_EXT_fog_coord )
        ADD_CONST_INT( "GL_EXT_fog_coord", GL_EXT_fog_coord );
      #endif
      #if defined( GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS )
        ADD_CONST_INT( "GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS", GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS );
      #endif
      #if defined( GL_PIXEL_TRANSFORM_2D_EXT )
        ADD_CONST_INT( "GL_PIXEL_TRANSFORM_2D_EXT", GL_PIXEL_TRANSFORM_2D_EXT );
      #endif
      #if defined( GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB", GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB );
      #endif
      #if defined( GL_INDEX_BITS )
        ADD_CONST_INT( "GL_INDEX_BITS", GL_INDEX_BITS );
      #endif
      #if defined( GL_INTENSITY8_EXT )
        ADD_CONST_INT( "GL_INTENSITY8_EXT", GL_INTENSITY8_EXT );
      #endif
      #if defined( GL_SAMPLER_CUBE_ARB )
        ADD_CONST_INT( "GL_SAMPLER_CUBE_ARB", GL_SAMPLER_CUBE_ARB );
      #endif
      #if defined( GL_POST_CONVOLUTION_ALPHA_SCALE_EXT )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_ALPHA_SCALE_EXT", GL_POST_CONVOLUTION_ALPHA_SCALE_EXT );
      #endif
      #if defined( GLXEW_EXT_framebuffer_sRGB )
        ADD_CONST_INT( "GLXEW_EXT_framebuffer_sRGB", GLXEW_EXT_framebuffer_sRGB );
      #endif
      #if defined( GL_CURRENT_NORMAL )
        ADD_CONST_INT( "GL_CURRENT_NORMAL", GL_CURRENT_NORMAL );
      #endif
      #if defined( GL_PROGRAM_OBJECT_ARB )
        ADD_CONST_INT( "GL_PROGRAM_OBJECT_ARB", GL_PROGRAM_OBJECT_ARB );
      #endif
      #if defined( GL_INT_SAMPLER_RENDERBUFFER_NV )
        ADD_CONST_INT( "GL_INT_SAMPLER_RENDERBUFFER_NV", GL_INT_SAMPLER_RENDERBUFFER_NV );
      #endif
      #if defined( GL_FLOAT_R16_NV )
        ADD_CONST_INT( "GL_FLOAT_R16_NV", GL_FLOAT_R16_NV );
      #endif
      #if defined( GL_COMPRESSED_SIGNED_RED_RGTC1 )
        ADD_CONST_INT( "GL_COMPRESSED_SIGNED_RED_RGTC1", GL_COMPRESSED_SIGNED_RED_RGTC1 );
      #endif
      #if defined( GL_FRAGMENT_DEPTH )
        ADD_CONST_INT( "GL_FRAGMENT_DEPTH", GL_FRAGMENT_DEPTH );
      #endif
      #if defined( GL_MAX_SHADER_BUFFER_ADDRESS_NV )
        ADD_CONST_INT( "GL_MAX_SHADER_BUFFER_ADDRESS_NV", GL_MAX_SHADER_BUFFER_ADDRESS_NV );
      #endif
      #if defined( GL_NATIVE_GRAPHICS_END_HINT_PGI )
        ADD_CONST_INT( "GL_NATIVE_GRAPHICS_END_HINT_PGI", GL_NATIVE_GRAPHICS_END_HINT_PGI );
      #endif
      #if defined( GL_TEXTURE5_ARB )
        ADD_CONST_INT( "GL_TEXTURE5_ARB", GL_TEXTURE5_ARB );
      #endif
      #if defined( GL_SRC0_ALPHA )
        ADD_CONST_INT( "GL_SRC0_ALPHA", GL_SRC0_ALPHA );
      #endif
      #if defined( GLX_HYPERPIPE_DISPLAY_PIPE_SGIX )
        ADD_CONST_INT( "GLX_HYPERPIPE_DISPLAY_PIPE_SGIX", GLX_HYPERPIPE_DISPLAY_PIPE_SGIX );
      #endif
      #if defined( GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS )
        ADD_CONST_INT( "GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS", GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS );
      #endif
      #if defined( GL_LUMINANCE_ALPHA_SIGNED_SGIX )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA_SIGNED_SGIX", GL_LUMINANCE_ALPHA_SIGNED_SGIX );
      #endif
      #if defined( GL_PRESENT_TIME_NV )
        ADD_CONST_INT( "GL_PRESENT_TIME_NV", GL_PRESENT_TIME_NV );
      #endif
      #if defined( GL_LUMINANCE_FLOAT16_ATI )
        ADD_CONST_INT( "GL_LUMINANCE_FLOAT16_ATI", GL_LUMINANCE_FLOAT16_ATI );
      #endif
      #if defined( GL_4PASS_3_SGIS )
        ADD_CONST_INT( "GL_4PASS_3_SGIS", GL_4PASS_3_SGIS );
      #endif
      #if defined( GL_TEXTURE_WIDTH )
        ADD_CONST_INT( "GL_TEXTURE_WIDTH", GL_TEXTURE_WIDTH );
      #endif
      #if defined( GL_UNIFORM_SIZE )
        ADD_CONST_INT( "GL_UNIFORM_SIZE", GL_UNIFORM_SIZE );
      #endif
      #if defined( GL_READ_ONLY_ARB )
        ADD_CONST_INT( "GL_READ_ONLY_ARB", GL_READ_ONLY_ARB );
      #endif
      #if defined( GL_POINT_SPRITE )
        ADD_CONST_INT( "GL_POINT_SPRITE", GL_POINT_SPRITE );
      #endif
      #if defined( GL_FLOAT_MAT4x2 )
        ADD_CONST_INT( "GL_FLOAT_MAT4x2", GL_FLOAT_MAT4x2 );
      #endif
      #if defined( GL_SHADER_SOURCE_LENGTH )
        ADD_CONST_INT( "GL_SHADER_SOURCE_LENGTH", GL_SHADER_SOURCE_LENGTH );
      #endif
      #if defined( GL_DOT3_RGBA )
        ADD_CONST_INT( "GL_DOT3_RGBA", GL_DOT3_RGBA );
      #endif
      #if defined( GL_DRAW_BUFFER4_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER4_ARB", GL_DRAW_BUFFER4_ARB );
      #endif
      #if defined( GL_MAX_ASYNC_DRAW_PIXELS_SGIX )
        ADD_CONST_INT( "GL_MAX_ASYNC_DRAW_PIXELS_SGIX", GL_MAX_ASYNC_DRAW_PIXELS_SGIX );
      #endif
      #if defined( GL_TEXTURE2_ARB )
        ADD_CONST_INT( "GL_TEXTURE2_ARB", GL_TEXTURE2_ARB );
      #endif
      #if defined( GL_COMPRESSED_RG )
        ADD_CONST_INT( "GL_COMPRESSED_RG", GL_COMPRESSED_RG );
      #endif
      #if defined( GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB", GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB );
      #endif
      #if defined( GL_FRAGMENT_PROGRAM_BINDING_NV )
        ADD_CONST_INT( "GL_FRAGMENT_PROGRAM_BINDING_NV", GL_FRAGMENT_PROGRAM_BINDING_NV );
      #endif
      #if defined( GL_TEXTURE_NORMAL_EXT )
        ADD_CONST_INT( "GL_TEXTURE_NORMAL_EXT", GL_TEXTURE_NORMAL_EXT );
      #endif
      #if defined( GL_POLYGON_OFFSET_UNITS )
        ADD_CONST_INT( "GL_POLYGON_OFFSET_UNITS", GL_POLYGON_OFFSET_UNITS );
      #endif
      #if defined( GL_MAX_COLOR_TEXTURE_SAMPLES )
        ADD_CONST_INT( "GL_MAX_COLOR_TEXTURE_SAMPLES", GL_MAX_COLOR_TEXTURE_SAMPLES );
      #endif
      #if defined( GL_RENDERBUFFER_COLOR_SAMPLES_NV )
        ADD_CONST_INT( "GL_RENDERBUFFER_COLOR_SAMPLES_NV", GL_RENDERBUFFER_COLOR_SAMPLES_NV );
      #endif
      #if defined( GL_SAMPLE_MASK_INVERT_EXT )
        ADD_CONST_INT( "GL_SAMPLE_MASK_INVERT_EXT", GL_SAMPLE_MASK_INVERT_EXT );
      #endif
      #if defined( GL_OUT_OF_MEMORY )
        ADD_CONST_INT( "GL_OUT_OF_MEMORY", GL_OUT_OF_MEMORY );
      #endif
      #if defined( GL_EXT_texture_env_add )
        ADD_CONST_INT( "GL_EXT_texture_env_add", GL_EXT_texture_env_add );
      #endif
      #if defined( GL_TEXTURE30_ARB )
        ADD_CONST_INT( "GL_TEXTURE30_ARB", GL_TEXTURE30_ARB );
      #endif
      #if defined( GL_COMPRESSED_INTENSITY_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_INTENSITY_ARB", GL_COMPRESSED_INTENSITY_ARB );
      #endif
      #if defined( GLX_DRAWABLE_TYPE_SGIX )
        ADD_CONST_INT( "GLX_DRAWABLE_TYPE_SGIX", GLX_DRAWABLE_TYPE_SGIX );
      #endif
      #if defined( GLEW_EXT_texture_sRGB )
        ADD_CONST_INT( "GLEW_EXT_texture_sRGB", GLEW_EXT_texture_sRGB );
      #endif
      #if defined( GL_NORMAL_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_STRIDE", GL_NORMAL_ARRAY_STRIDE );
      #endif
      #if defined( GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV )
        ADD_CONST_INT( "GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV", GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV );
      #endif
      #if defined( GLEW_EXT_depth_bounds_test )
        ADD_CONST_INT( "GLEW_EXT_depth_bounds_test", GLEW_EXT_depth_bounds_test );
      #endif
      #if defined( GL_COMPRESSED_LUMINANCE_ALPHA_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_LUMINANCE_ALPHA_ARB", GL_COMPRESSED_LUMINANCE_ALPHA_ARB );
      #endif
      #if defined( GL_VERTEX_SHADER_INSTRUCTIONS_EXT )
        ADD_CONST_INT( "GL_VERTEX_SHADER_INSTRUCTIONS_EXT", GL_VERTEX_SHADER_INSTRUCTIONS_EXT );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS", GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS );
      #endif
      #if defined( GL_LUMINANCE12_ALPHA12_EXT )
        ADD_CONST_INT( "GL_LUMINANCE12_ALPHA12_EXT", GL_LUMINANCE12_ALPHA12_EXT );
      #endif
      #if defined( GL_EVAL_2D_NV )
        ADD_CONST_INT( "GL_EVAL_2D_NV", GL_EVAL_2D_NV );
      #endif
      #if defined( GL_GEOMETRY_OUTPUT_TYPE )
        ADD_CONST_INT( "GL_GEOMETRY_OUTPUT_TYPE", GL_GEOMETRY_OUTPUT_TYPE );
      #endif
      #if defined( GL_RASTERIZER_DISCARD )
        ADD_CONST_INT( "GL_RASTERIZER_DISCARD", GL_RASTERIZER_DISCARD );
      #endif
      #if defined( GL_ATIX_texture_env_route )
        ADD_CONST_INT( "GL_ATIX_texture_env_route", GL_ATIX_texture_env_route );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB11_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB11_4_NV", GL_MAP2_VERTEX_ATTRIB11_4_NV );
      #endif
      #if defined( GL_COLOR_INDEX1_EXT )
        ADD_CONST_INT( "GL_COLOR_INDEX1_EXT", GL_COLOR_INDEX1_EXT );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING", GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GL_RENDERBUFFER_SAMPLES_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_SAMPLES_EXT", GL_RENDERBUFFER_SAMPLES_EXT );
      #endif
      #if defined( GL_MODELVIEW12_ARB )
        ADD_CONST_INT( "GL_MODELVIEW12_ARB", GL_MODELVIEW12_ARB );
      #endif
      #if defined( GL_LINES_ADJACENCY_EXT )
        ADD_CONST_INT( "GL_LINES_ADJACENCY_EXT", GL_LINES_ADJACENCY_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB", GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB );
      #endif
      #if defined( GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER );
      #endif
      #if defined( GL_PRIMARY_COLOR_NV )
        ADD_CONST_INT( "GL_PRIMARY_COLOR_NV", GL_PRIMARY_COLOR_NV );
      #endif
      #if defined( GLEW_EXT_draw_instanced )
        ADD_CONST_INT( "GLEW_EXT_draw_instanced", GLEW_EXT_draw_instanced );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE", GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB12_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB12_4_NV", GL_MAP2_VERTEX_ATTRIB12_4_NV );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_VARYINGS_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_VARYINGS_EXT", GL_TRANSFORM_FEEDBACK_VARYINGS_EXT );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY", GL_EDGE_FLAG_ARRAY );
      #endif
      #if defined( GL_INT_SAMPLER_2D_MULTISAMPLE )
        ADD_CONST_INT( "GL_INT_SAMPLER_2D_MULTISAMPLE", GL_INT_SAMPLER_2D_MULTISAMPLE );
      #endif
      #if defined( GL_RETURN )
        ADD_CONST_INT( "GL_RETURN", GL_RETURN );
      #endif
      #if defined( GL_STENCIL_TEST )
        ADD_CONST_INT( "GL_STENCIL_TEST", GL_STENCIL_TEST );
      #endif
      #if defined( GL_ALPHA32UI_EXT )
        ADD_CONST_INT( "GL_ALPHA32UI_EXT", GL_ALPHA32UI_EXT );
      #endif
      #if defined( GLX_STENCIL_SIZE )
        ADD_CONST_INT( "GLX_STENCIL_SIZE", GLX_STENCIL_SIZE );
      #endif
      #if defined( GLEW_INGR_color_clamp )
        ADD_CONST_INT( "GLEW_INGR_color_clamp", GLEW_INGR_color_clamp );
      #endif
      #if defined( GL_WEIGHT_ARRAY_TYPE_ARB )
        ADD_CONST_INT( "GL_WEIGHT_ARRAY_TYPE_ARB", GL_WEIGHT_ARRAY_TYPE_ARB );
      #endif
      #if defined( GLEW_EXT_blend_equation_separate )
        ADD_CONST_INT( "GLEW_EXT_blend_equation_separate", GLEW_EXT_blend_equation_separate );
      #endif
      #if defined( GL_R11F_G11F_B10F )
        ADD_CONST_INT( "GL_R11F_G11F_B10F", GL_R11F_G11F_B10F );
      #endif
      #if defined( GL_PROGRAM_RESULT_COMPONENTS_NV )
        ADD_CONST_INT( "GL_PROGRAM_RESULT_COMPONENTS_NV", GL_PROGRAM_RESULT_COMPONENTS_NV );
      #endif
      #if defined( GL_W_EXT )
        ADD_CONST_INT( "GL_W_EXT", GL_W_EXT );
      #endif
      #if defined( GLEW_EXT_texture_edge_clamp )
        ADD_CONST_INT( "GLEW_EXT_texture_edge_clamp", GLEW_EXT_texture_edge_clamp );
      #endif
      #if defined( GL_INVERT )
        ADD_CONST_INT( "GL_INVERT", GL_INVERT );
      #endif
      #if defined( GL_PROXY_TEXTURE_1D )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_1D", GL_PROXY_TEXTURE_1D );
      #endif
      #if defined( GL_UNIFORM_BUFFER_EXT )
        ADD_CONST_INT( "GL_UNIFORM_BUFFER_EXT", GL_UNIFORM_BUFFER_EXT );
      #endif
      #if defined( GL_PRESENT_DURATION_NV )
        ADD_CONST_INT( "GL_PRESENT_DURATION_NV", GL_PRESENT_DURATION_NV );
      #endif
      #if defined( GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV )
        ADD_CONST_INT( "GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV", GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV );
      #endif
      #if defined( GL_DSDT_MAG_NV )
        ADD_CONST_INT( "GL_DSDT_MAG_NV", GL_DSDT_MAG_NV );
      #endif
      #if defined( GLX_RGBA_FLOAT_BIT )
        ADD_CONST_INT( "GLX_RGBA_FLOAT_BIT", GLX_RGBA_FLOAT_BIT );
      #endif
      #if defined( GL_DEPTH_COMPONENT32F )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT32F", GL_DEPTH_COMPONENT32F );
      #endif
      #if defined( GL_DRAW_BUFFER11_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER11_ARB", GL_DRAW_BUFFER11_ARB );
      #endif
      #if defined( GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB )
        ADD_CONST_INT( "GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB", GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB );
      #endif
      #if defined( GL_RGBA_SIGNED_SGIX )
        ADD_CONST_INT( "GL_RGBA_SIGNED_SGIX", GL_RGBA_SIGNED_SGIX );
      #endif
      #if defined( GL_CLIENT_ACTIVE_TEXTURE_ARB )
        ADD_CONST_INT( "GL_CLIENT_ACTIVE_TEXTURE_ARB", GL_CLIENT_ACTIVE_TEXTURE_ARB );
      #endif
      #if defined( GL_VIEWPORT_BIT )
        ADD_CONST_INT( "GL_VIEWPORT_BIT", GL_VIEWPORT_BIT );
      #endif
      #if defined( GL_PACK_ROW_BYTES_APPLE )
        ADD_CONST_INT( "GL_PACK_ROW_BYTES_APPLE", GL_PACK_ROW_BYTES_APPLE );
      #endif
      #if defined( GL_NORMAL_BIT_PGI )
        ADD_CONST_INT( "GL_NORMAL_BIT_PGI", GL_NORMAL_BIT_PGI );
      #endif
      #if defined( GL_TEXTURE_MAX_CLAMP_R_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_MAX_CLAMP_R_SGIX", GL_TEXTURE_MAX_CLAMP_R_SGIX );
      #endif
      #if defined( GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS", GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS );
      #endif
      #if defined( GL_FRAGMENT_LIGHT0_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT0_EXT", GL_FRAGMENT_LIGHT0_EXT );
      #endif
      #if defined( GL_PGI_vertex_hints )
        ADD_CONST_INT( "GL_PGI_vertex_hints", GL_PGI_vertex_hints );
      #endif
      #if defined( GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS", GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS );
      #endif
      #if defined( GLX_NO_EXTENSION )
        ADD_CONST_INT( "GLX_NO_EXTENSION", GLX_NO_EXTENSION );
      #endif
      #if defined( GL_SAMPLE_ALPHA_TO_MASK_EXT )
        ADD_CONST_INT( "GL_SAMPLE_ALPHA_TO_MASK_EXT", GL_SAMPLE_ALPHA_TO_MASK_EXT );
      #endif
      #if defined( GL_PREVIOUS_EXT )
        ADD_CONST_INT( "GL_PREVIOUS_EXT", GL_PREVIOUS_EXT );
      #endif
      #if defined( GL_UNIFORM_BUFFER_SIZE )
        ADD_CONST_INT( "GL_UNIFORM_BUFFER_SIZE", GL_UNIFORM_BUFFER_SIZE );
      #endif
      #if defined( GL_FENCE_APPLE )
        ADD_CONST_INT( "GL_FENCE_APPLE", GL_FENCE_APPLE );
      #endif
      #if defined( GL_FRAME_NV )
        ADD_CONST_INT( "GL_FRAME_NV", GL_FRAME_NV );
      #endif
      #if defined( GL_VERSION_1_4_DEPRECATED )
        ADD_CONST_INT( "GL_VERSION_1_4_DEPRECATED", GL_VERSION_1_4_DEPRECATED );
      #endif
      #if defined( GL_RED_BITS )
        ADD_CONST_INT( "GL_RED_BITS", GL_RED_BITS );
      #endif
      #if defined( GL_TEXTURE17_ARB )
        ADD_CONST_INT( "GL_TEXTURE17_ARB", GL_TEXTURE17_ARB );
      #endif
      #if defined( GLX_WIDTH )
        ADD_CONST_INT( "GLX_WIDTH", GLX_WIDTH );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB5_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB5_4_NV", GL_MAP2_VERTEX_ATTRIB5_4_NV );
      #endif
      #if defined( GL_TEXTURE_BUFFER_FORMAT )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER_FORMAT", GL_TEXTURE_BUFFER_FORMAT );
      #endif
      #if defined( GL_IDENTITY_NV )
        ADD_CONST_INT( "GL_IDENTITY_NV", GL_IDENTITY_NV );
      #endif
      #if defined( GL_TEXTURE_LEQUAL_R_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_LEQUAL_R_SGIX", GL_TEXTURE_LEQUAL_R_SGIX );
      #endif
      #if defined( GL_TRACK_MATRIX_TRANSFORM_NV )
        ADD_CONST_INT( "GL_TRACK_MATRIX_TRANSFORM_NV", GL_TRACK_MATRIX_TRANSFORM_NV );
      #endif
      #if defined( GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS )
        ADD_CONST_INT( "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS", GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT", GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_BUFFERS )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_BUFFERS", GL_MAX_TRANSFORM_FEEDBACK_BUFFERS );
      #endif
      #if defined( GLX_SAVED )
        ADD_CONST_INT( "GLX_SAVED", GLX_SAVED );
      #endif
      #if defined( GL_MAGNITUDE_BIAS_NV )
        ADD_CONST_INT( "GL_MAGNITUDE_BIAS_NV", GL_MAGNITUDE_BIAS_NV );
      #endif
      #if defined( GL_RGBA2_EXT )
        ADD_CONST_INT( "GL_RGBA2_EXT", GL_RGBA2_EXT );
      #endif
      #if defined( GL_DOT3_RGBA_EXT )
        ADD_CONST_INT( "GL_DOT3_RGBA_EXT", GL_DOT3_RGBA_EXT );
      #endif
      #if defined( GL_VERTEX_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_TYPE_EXT", GL_VERTEX_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_VARIANT_DATATYPE_EXT )
        ADD_CONST_INT( "GL_VARIANT_DATATYPE_EXT", GL_VARIANT_DATATYPE_EXT );
      #endif
      #if defined( GL_ACTIVE_UNIFORM_BLOCKS )
        ADD_CONST_INT( "GL_ACTIVE_UNIFORM_BLOCKS", GL_ACTIVE_UNIFORM_BLOCKS );
      #endif
      #if defined( GLX_AUX8_EXT )
        ADD_CONST_INT( "GLX_AUX8_EXT", GLX_AUX8_EXT );
      #endif
      #if defined( GL_GEOMETRY_SHADER_ARB )
        ADD_CONST_INT( "GL_GEOMETRY_SHADER_ARB", GL_GEOMETRY_SHADER_ARB );
      #endif
      #if defined( GL_SHADER_OBJECT_ARB )
        ADD_CONST_INT( "GL_SHADER_OBJECT_ARB", GL_SHADER_OBJECT_ARB );
      #endif
      #if defined( GL_422_REV_EXT )
        ADD_CONST_INT( "GL_422_REV_EXT", GL_422_REV_EXT );
      #endif
      #if defined( GL_POINT_SIZE_MIN_ARB )
        ADD_CONST_INT( "GL_POINT_SIZE_MIN_ARB", GL_POINT_SIZE_MIN_ARB );
      #endif
      #if defined( GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_RGB16I )
        ADD_CONST_INT( "GL_RGB16I", GL_RGB16I );
      #endif
      #if defined( GL_CURRENT_MATRIX_INDEX_ARB )
        ADD_CONST_INT( "GL_CURRENT_MATRIX_INDEX_ARB", GL_CURRENT_MATRIX_INDEX_ARB );
      #endif
      #if defined( GL_TEXTURE_2D_STACK_BINDING_MESAX )
        ADD_CONST_INT( "GL_TEXTURE_2D_STACK_BINDING_MESAX", GL_TEXTURE_2D_STACK_BINDING_MESAX );
      #endif
      #if defined( GL_RGB16F )
        ADD_CONST_INT( "GL_RGB16F", GL_RGB16F );
      #endif
      #if defined( GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT", GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT );
      #endif
      #if defined( GL_SMOOTH_LINE_WIDTH_RANGE )
        ADD_CONST_INT( "GL_SMOOTH_LINE_WIDTH_RANGE", GL_SMOOTH_LINE_WIDTH_RANGE );
      #endif
      #if defined( GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX", GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX );
      #endif
      #if defined( GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV", GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV );
      #endif
      #if defined( GL_TEXTURE_MULTI_BUFFER_HINT_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX", GL_TEXTURE_MULTI_BUFFER_HINT_SGIX );
      #endif
      #if defined( GL_FOG_BIT )
        ADD_CONST_INT( "GL_FOG_BIT", GL_FOG_BIT );
      #endif
      #if defined( GL_MAX_PROGRAM_MATRICES_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_MATRICES_ARB", GL_MAX_PROGRAM_MATRICES_ARB );
      #endif
      #if defined( GL_CURRENT_PALETTE_MATRIX_ARB )
        ADD_CONST_INT( "GL_CURRENT_PALETTE_MATRIX_ARB", GL_CURRENT_PALETTE_MATRIX_ARB );
      #endif
      #if defined( GL_COLOR_ATTACHMENT4_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT4_EXT", GL_COLOR_ATTACHMENT4_EXT );
      #endif
      #if defined( GL_MATRIX_INDEX_ARRAY_POINTER_ARB )
        ADD_CONST_INT( "GL_MATRIX_INDEX_ARRAY_POINTER_ARB", GL_MATRIX_INDEX_ARRAY_POINTER_ARB );
      #endif
      #if defined( GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB )
        ADD_CONST_INT( "GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB", GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_STRIDE_EXT", GL_FOG_COORDINATE_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_ALL_ATTRIB_BITS )
        ADD_CONST_INT( "GL_ALL_ATTRIB_BITS", GL_ALL_ATTRIB_BITS );
      #endif
      #if defined( GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER );
      #endif
      #if defined( GL_POST_TEXTURE_FILTER_SCALE_SGIX )
        ADD_CONST_INT( "GL_POST_TEXTURE_FILTER_SCALE_SGIX", GL_POST_TEXTURE_FILTER_SCALE_SGIX );
      #endif
      #if defined( GL_MATRIX8_ARB )
        ADD_CONST_INT( "GL_MATRIX8_ARB", GL_MATRIX8_ARB );
      #endif
      #if defined( GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB )
        ADD_CONST_INT( "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB", GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB );
      #endif
      #if defined( GL_EDGE_FLAG_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_EDGE_FLAG_ARRAY_ADDRESS_NV", GL_EDGE_FLAG_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GL_CONDITION_SATISFIED )
        ADD_CONST_INT( "GL_CONDITION_SATISFIED", GL_CONDITION_SATISFIED );
      #endif
      #if defined( GL_SUB_ATI )
        ADD_CONST_INT( "GL_SUB_ATI", GL_SUB_ATI );
      #endif
      #if defined( GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT )
        ADD_CONST_INT( "GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT", GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT );
      #endif
      #if defined( GL_UNSIGNED_NORMALIZED_ARB )
        ADD_CONST_INT( "GL_UNSIGNED_NORMALIZED_ARB", GL_UNSIGNED_NORMALIZED_ARB );
      #endif
      #if defined( GL_DEPTH32F_STENCIL8_NV )
        ADD_CONST_INT( "GL_DEPTH32F_STENCIL8_NV", GL_DEPTH32F_STENCIL8_NV );
      #endif
      #if defined( GL_GENERIC_ATTRIB_NV )
        ADD_CONST_INT( "GL_GENERIC_ATTRIB_NV", GL_GENERIC_ATTRIB_NV );
      #endif
      #if defined( GL_SAMPLES_ARB )
        ADD_CONST_INT( "GL_SAMPLES_ARB", GL_SAMPLES_ARB );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_POINTER )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_POINTER", GL_SECONDARY_COLOR_ARRAY_POINTER );
      #endif
      #if defined( GL_BGR_INTEGER_EXT )
        ADD_CONST_INT( "GL_BGR_INTEGER_EXT", GL_BGR_INTEGER_EXT );
      #endif
      #if defined( GL_TEXTURE_COMPARE_MODE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_COMPARE_MODE_ARB", GL_TEXTURE_COMPARE_MODE_ARB );
      #endif
      #if defined( GLX_HYPERPIPE_ID_SGIX )
        ADD_CONST_INT( "GLX_HYPERPIPE_ID_SGIX", GLX_HYPERPIPE_ID_SGIX );
      #endif
      #if defined( GLX_TEXTURE_1D_BIT_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_1D_BIT_EXT", GLX_TEXTURE_1D_BIT_EXT );
      #endif
      #if defined( GL_CLIP_NEAR_HINT_PGI )
        ADD_CONST_INT( "GL_CLIP_NEAR_HINT_PGI", GL_CLIP_NEAR_HINT_PGI );
      #endif
      #if defined( GL_INTERLACE_READ_OML )
        ADD_CONST_INT( "GL_INTERLACE_READ_OML", GL_INTERLACE_READ_OML );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD18_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD18_EXT", GL_OUTPUT_TEXTURE_COORD18_EXT );
      #endif
      #if defined( GL_PREVIOUS_ARB )
        ADD_CONST_INT( "GL_PREVIOUS_ARB", GL_PREVIOUS_ARB );
      #endif
      #if defined( GL_TEXTURE_1D_ARRAY )
        ADD_CONST_INT( "GL_TEXTURE_1D_ARRAY", GL_TEXTURE_1D_ARRAY );
      #endif
      #if defined( GL_CURRENT_VERTEX_ATTRIB_ARB )
        ADD_CONST_INT( "GL_CURRENT_VERTEX_ATTRIB_ARB", GL_CURRENT_VERTEX_ATTRIB_ARB );
      #endif
      #if defined( GL_EXT_point_parameters )
        ADD_CONST_INT( "GL_EXT_point_parameters", GL_EXT_point_parameters );
      #endif
      #if defined( GLX_USE_GL )
        ADD_CONST_INT( "GLX_USE_GL", GLX_USE_GL );
      #endif
      #if defined( GL_READ_FRAMEBUFFER_BINDING )
        ADD_CONST_INT( "GL_READ_FRAMEBUFFER_BINDING", GL_READ_FRAMEBUFFER_BINDING );
      #endif
      #if defined( GL_VERTEX_SHADER_ARB )
        ADD_CONST_INT( "GL_VERTEX_SHADER_ARB", GL_VERTEX_SHADER_ARB );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_LAYERED )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_LAYERED", GL_FRAMEBUFFER_ATTACHMENT_LAYERED );
      #endif
      #if defined( GL_PIXEL_PACK_BUFFER_EXT )
        ADD_CONST_INT( "GL_PIXEL_PACK_BUFFER_EXT", GL_PIXEL_PACK_BUFFER_EXT );
      #endif
      #if defined( GL_COORD_REPLACE )
        ADD_CONST_INT( "GL_COORD_REPLACE", GL_COORD_REPLACE );
      #endif
      #if defined( GL_SAMPLE_BUFFERS_3DFX )
        ADD_CONST_INT( "GL_SAMPLE_BUFFERS_3DFX", GL_SAMPLE_BUFFERS_3DFX );
      #endif
      #if defined( GL_VERTEX_CONSISTENT_HINT_PGI )
        ADD_CONST_INT( "GL_VERTEX_CONSISTENT_HINT_PGI", GL_VERTEX_CONSISTENT_HINT_PGI );
      #endif
      #if defined( GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT )
        ADD_CONST_INT( "GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT );
      #endif
      #if defined( GL_RGBA2 )
        ADD_CONST_INT( "GL_RGBA2", GL_RGBA2 );
      #endif
      #if defined( GL_VERTEX_PROGRAM_NV )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_NV", GL_VERTEX_PROGRAM_NV );
      #endif
      #if defined( GL_RGBA4 )
        ADD_CONST_INT( "GL_RGBA4", GL_RGBA4 );
      #endif
      #if defined( GL_MULTISAMPLE_BIT )
        ADD_CONST_INT( "GL_MULTISAMPLE_BIT", GL_MULTISAMPLE_BIT );
      #endif
      #if defined( GL_MAX_VERTEX_ATTRIBS_ARB )
        ADD_CONST_INT( "GL_MAX_VERTEX_ATTRIBS_ARB", GL_MAX_VERTEX_ATTRIBS_ARB );
      #endif
      #if defined( GLX_BACK_RIGHT_BUFFER_BIT )
        ADD_CONST_INT( "GLX_BACK_RIGHT_BUFFER_BIT", GLX_BACK_RIGHT_BUFFER_BIT );
      #endif
      #if defined( GL_RGBA8 )
        ADD_CONST_INT( "GL_RGBA8", GL_RGBA8 );
      #endif
      #if defined( GLX_EXTENDED_RANGE_SGIS )
        ADD_CONST_INT( "GLX_EXTENDED_RANGE_SGIS", GLX_EXTENDED_RANGE_SGIS );
      #endif
      #if defined( GL_COMBINER_AB_OUTPUT_NV )
        ADD_CONST_INT( "GL_COMBINER_AB_OUTPUT_NV", GL_COMBINER_AB_OUTPUT_NV );
      #endif
      #if defined( GL_INFO_LOG_LENGTH )
        ADD_CONST_INT( "GL_INFO_LOG_LENGTH", GL_INFO_LOG_LENGTH );
      #endif
      #if defined( GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT", GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT );
      #endif
      #if defined( GL_DRAW_BUFFER10_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER10_ATI", GL_DRAW_BUFFER10_ATI );
      #endif
      #if defined( GL_RESET_NOTIFICATION_STRATEGY_ARB )
        ADD_CONST_INT( "GL_RESET_NOTIFICATION_STRATEGY_ARB", GL_RESET_NOTIFICATION_STRATEGY_ARB );
      #endif
      #if defined( GLEW_EXT_texture_env )
        ADD_CONST_INT( "GLEW_EXT_texture_env", GLEW_EXT_texture_env );
      #endif
      #if defined( GL_EXT_framebuffer_sRGB )
        ADD_CONST_INT( "GL_EXT_framebuffer_sRGB", GL_EXT_framebuffer_sRGB );
      #endif
      #if defined( GL_COMBINE_RGB_ARB )
        ADD_CONST_INT( "GL_COMBINE_RGB_ARB", GL_COMBINE_RGB_ARB );
      #endif
      #if defined( GL_LUMINANCE_ALPHA_FLOAT16_ATI )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA_FLOAT16_ATI", GL_LUMINANCE_ALPHA_FLOAT16_ATI );
      #endif
      #if defined( GL_SRGB8 )
        ADD_CONST_INT( "GL_SRGB8", GL_SRGB8 );
      #endif
      #if defined( GL_RENDERBUFFER_STENCIL_SIZE )
        ADD_CONST_INT( "GL_RENDERBUFFER_STENCIL_SIZE", GL_RENDERBUFFER_STENCIL_SIZE );
      #endif
      #if defined( GL_CONST_EYE_NV )
        ADD_CONST_INT( "GL_CONST_EYE_NV", GL_CONST_EYE_NV );
      #endif
      #if defined( GL_SRGB_ALPHA_EXT )
        ADD_CONST_INT( "GL_SRGB_ALPHA_EXT", GL_SRGB_ALPHA_EXT );
      #endif
      #if defined( GL_RGB16I_EXT )
        ADD_CONST_INT( "GL_RGB16I_EXT", GL_RGB16I_EXT );
      #endif
      #if defined( GL_RESCALE_NORMAL )
        ADD_CONST_INT( "GL_RESCALE_NORMAL", GL_RESCALE_NORMAL );
      #endif
      #if defined( GLX_ACCUM_BLUE_SIZE )
        ADD_CONST_INT( "GLX_ACCUM_BLUE_SIZE", GLX_ACCUM_BLUE_SIZE );
      #endif
      #if defined( GL_ALWAYS_SOFT_HINT_PGI )
        ADD_CONST_INT( "GL_ALWAYS_SOFT_HINT_PGI", GL_ALWAYS_SOFT_HINT_PGI );
      #endif
      #if defined( GL_FIELDS_NV )
        ADD_CONST_INT( "GL_FIELDS_NV", GL_FIELDS_NV );
      #endif
      #if defined( GL_POINT_SIZE_GRANULARITY )
        ADD_CONST_INT( "GL_POINT_SIZE_GRANULARITY", GL_POINT_SIZE_GRANULARITY );
      #endif
      #if defined( GL_LOCAL_CONSTANT_EXT )
        ADD_CONST_INT( "GL_LOCAL_CONSTANT_EXT", GL_LOCAL_CONSTANT_EXT );
      #endif
      #if defined( GL_PERSPECTIVE_CORRECTION_HINT )
        ADD_CONST_INT( "GL_PERSPECTIVE_CORRECTION_HINT", GL_PERSPECTIVE_CORRECTION_HINT );
      #endif
      #if defined( GL_VERSION_2_0 )
        ADD_CONST_INT( "GL_VERSION_2_0", GL_VERSION_2_0 );
      #endif
      #if defined( GL_VERSION_2_1 )
        ADD_CONST_INT( "GL_VERSION_2_1", GL_VERSION_2_1 );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY11_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY11_NV", GL_VERTEX_ATTRIB_ARRAY11_NV );
      #endif
      #if defined( GL_SAMPLE_POSITION_NV )
        ADD_CONST_INT( "GL_SAMPLE_POSITION_NV", GL_SAMPLE_POSITION_NV );
      #endif
      #if defined( GLX_PBUFFER_CLOBBER_MASK )
        ADD_CONST_INT( "GLX_PBUFFER_CLOBBER_MASK", GLX_PBUFFER_CLOBBER_MASK );
      #endif
      #if defined( GL_MAP_READ_BIT )
        ADD_CONST_INT( "GL_MAP_READ_BIT", GL_MAP_READ_BIT );
      #endif
      #if defined( GL_SPOT_DIRECTION )
        ADD_CONST_INT( "GL_SPOT_DIRECTION", GL_SPOT_DIRECTION );
      #endif
      #if defined( GL_ACTIVE_ATTRIBUTES )
        ADD_CONST_INT( "GL_ACTIVE_ATTRIBUTES", GL_ACTIVE_ATTRIBUTES );
      #endif
      #if defined( GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV )
        ADD_CONST_INT( "GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV", GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV );
      #endif
      #if defined( GL_VERTEX_ARRAY_LIST_STRIDE_IBM )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_LIST_STRIDE_IBM", GL_VERTEX_ARRAY_LIST_STRIDE_IBM );
      #endif
      #if defined( GL_VERTEX_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_ADDRESS_NV", GL_VERTEX_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GL_PALETTE4_RGBA8_OES )
        ADD_CONST_INT( "GL_PALETTE4_RGBA8_OES", GL_PALETTE4_RGBA8_OES );
      #endif
      #if defined( GL_NUM_PASSES_ATI )
        ADD_CONST_INT( "GL_NUM_PASSES_ATI", GL_NUM_PASSES_ATI );
      #endif
      #if defined( GL_LINE_BIT )
        ADD_CONST_INT( "GL_LINE_BIT", GL_LINE_BIT );
      #endif
      #if defined( GL_TEXTURE20_ARB )
        ADD_CONST_INT( "GL_TEXTURE20_ARB", GL_TEXTURE20_ARB );
      #endif
      #if defined( GL_TEXTURE_LUMINANCE_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_LUMINANCE_SIZE_EXT", GL_TEXTURE_LUMINANCE_SIZE_EXT );
      #endif
      #if defined( GL_T2F_N3F_V3F )
        ADD_CONST_INT( "GL_T2F_N3F_V3F", GL_T2F_N3F_V3F );
      #endif
      #if defined( GL_COMBINER4_NV )
        ADD_CONST_INT( "GL_COMBINER4_NV", GL_COMBINER4_NV );
      #endif
      #if defined( GL_TRANSFORM_BIT )
        ADD_CONST_INT( "GL_TRANSFORM_BIT", GL_TRANSFORM_BIT );
      #endif
      #if defined( GL_RELEASED_APPLE )
        ADD_CONST_INT( "GL_RELEASED_APPLE", GL_RELEASED_APPLE );
      #endif
      #if defined( GL_CURRENT_OCCLUSION_QUERY_ID_NV )
        ADD_CONST_INT( "GL_CURRENT_OCCLUSION_QUERY_ID_NV", GL_CURRENT_OCCLUSION_QUERY_ID_NV );
      #endif
      #if defined( GL_INTENSITY16I_EXT )
        ADD_CONST_INT( "GL_INTENSITY16I_EXT", GL_INTENSITY16I_EXT );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB3_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB3_4_NV", GL_MAP1_VERTEX_ATTRIB3_4_NV );
      #endif
      #if defined( GL_MODELVIEW9_ARB )
        ADD_CONST_INT( "GL_MODELVIEW9_ARB", GL_MODELVIEW9_ARB );
      #endif
      #if defined( GL_TEXTURE_RED_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_RED_SIZE_EXT", GL_TEXTURE_RED_SIZE_EXT );
      #endif
      #if defined( GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT", GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT );
      #endif
      #if defined( GLX_TEXTURE_1D_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_1D_EXT", GLX_TEXTURE_1D_EXT );
      #endif
      #if defined( GL_EXT_gpu_shader4 )
        ADD_CONST_INT( "GL_EXT_gpu_shader4", GL_EXT_gpu_shader4 );
      #endif
      #if defined( GL_3D_COLOR )
        ADD_CONST_INT( "GL_3D_COLOR", GL_3D_COLOR );
      #endif
      #if defined( GL_DISTANCE_ATTENUATION_EXT )
        ADD_CONST_INT( "GL_DISTANCE_ATTENUATION_EXT", GL_DISTANCE_ATTENUATION_EXT );
      #endif
      #if defined( GL_TEXTURE_GEN_T )
        ADD_CONST_INT( "GL_TEXTURE_GEN_T", GL_TEXTURE_GEN_T );
      #endif
      #if defined( GL_STENCIL_PASS_DEPTH_PASS )
        ADD_CONST_INT( "GL_STENCIL_PASS_DEPTH_PASS", GL_STENCIL_PASS_DEPTH_PASS );
      #endif
      #if defined( GL_TEXTURE_GEN_R )
        ADD_CONST_INT( "GL_TEXTURE_GEN_R", GL_TEXTURE_GEN_R );
      #endif
      #if defined( GL_TEXTURE_GEN_Q )
        ADD_CONST_INT( "GL_TEXTURE_GEN_Q", GL_TEXTURE_GEN_Q );
      #endif
      #if defined( GL_SAMPLE_SHADING_ARB )
        ADD_CONST_INT( "GL_SAMPLE_SHADING_ARB", GL_SAMPLE_SHADING_ARB );
      #endif
      #if defined( GL_DRAW_BUFFER10_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER10_ARB", GL_DRAW_BUFFER10_ARB );
      #endif
      #if defined( GL_ALPHA12 )
        ADD_CONST_INT( "GL_ALPHA12", GL_ALPHA12 );
      #endif
      #if defined( GL_DRAW_FRAMEBUFFER_BINDING_EXT )
        ADD_CONST_INT( "GL_DRAW_FRAMEBUFFER_BINDING_EXT", GL_DRAW_FRAMEBUFFER_BINDING_EXT );
      #endif
      #if defined( GL_ALPHA16 )
        ADD_CONST_INT( "GL_ALPHA16", GL_ALPHA16 );
      #endif
      #if defined( GLX_NONE_EXT )
        ADD_CONST_INT( "GLX_NONE_EXT", GLX_NONE_EXT );
      #endif
      #if defined( GL_DEPTH_CLAMP_NV )
        ADD_CONST_INT( "GL_DEPTH_CLAMP_NV", GL_DEPTH_CLAMP_NV );
      #endif
      #if defined( GL_POLYGON_SMOOTH )
        ADD_CONST_INT( "GL_POLYGON_SMOOTH", GL_POLYGON_SMOOTH );
      #endif
      #if defined( GL_POINT_FADE_THRESHOLD_SIZE_ARB )
        ADD_CONST_INT( "GL_POINT_FADE_THRESHOLD_SIZE_ARB", GL_POINT_FADE_THRESHOLD_SIZE_ARB );
      #endif
      #if defined( GL_TRANSPOSE_MODELVIEW_MATRIX )
        ADD_CONST_INT( "GL_TRANSPOSE_MODELVIEW_MATRIX", GL_TRANSPOSE_MODELVIEW_MATRIX );
      #endif
      #if defined( GL_FRAMEBUFFER_UNSUPPORTED_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_UNSUPPORTED_EXT", GL_FRAMEBUFFER_UNSUPPORTED_EXT );
      #endif
      #if defined( GLX_FBCONFIG_ID )
        ADD_CONST_INT( "GLX_FBCONFIG_ID", GLX_FBCONFIG_ID );
      #endif
      #if defined( GL_POINT_SIZE_MIN )
        ADD_CONST_INT( "GL_POINT_SIZE_MIN", GL_POINT_SIZE_MIN );
      #endif
      #if defined( GL_RGBA12 )
        ADD_CONST_INT( "GL_RGBA12", GL_RGBA12 );
      #endif
      #if defined( GL_GENERATE_MIPMAP_HINT )
        ADD_CONST_INT( "GL_GENERATE_MIPMAP_HINT", GL_GENERATE_MIPMAP_HINT );
      #endif
      #if defined( GL_RGBA16 )
        ADD_CONST_INT( "GL_RGBA16", GL_RGBA16 );
      #endif
      #if defined( GL_MAP1_NORMAL )
        ADD_CONST_INT( "GL_MAP1_NORMAL", GL_MAP1_NORMAL );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_LIST_IBM )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_LIST_IBM", GL_SECONDARY_COLOR_ARRAY_LIST_IBM );
      #endif
      #if defined( GL_YCBCR_422_APPLE )
        ADD_CONST_INT( "GL_YCBCR_422_APPLE", GL_YCBCR_422_APPLE );
      #endif
      #if defined( GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV", GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV );
      #endif
      #if defined( GL_COLOR_ARRAY_TYPE )
        ADD_CONST_INT( "GL_COLOR_ARRAY_TYPE", GL_COLOR_ARRAY_TYPE );
      #endif
      #if defined( GL_COMPRESSED_RGB_FXT1_3DFX )
        ADD_CONST_INT( "GL_COMPRESSED_RGB_FXT1_3DFX", GL_COMPRESSED_RGB_FXT1_3DFX );
      #endif
      #if defined( GL_HALF_BIT_ATI )
        ADD_CONST_INT( "GL_HALF_BIT_ATI", GL_HALF_BIT_ATI );
      #endif
      #if defined( GL_LUMINANCE32I_EXT )
        ADD_CONST_INT( "GL_LUMINANCE32I_EXT", GL_LUMINANCE32I_EXT );
      #endif
      #if defined( GLX_Y_INVERTED_EXT )
        ADD_CONST_INT( "GLX_Y_INVERTED_EXT", GLX_Y_INVERTED_EXT );
      #endif
      #if defined( GL_RGB5_A1 )
        ADD_CONST_INT( "GL_RGB5_A1", GL_RGB5_A1 );
      #endif
      #if defined( GL_DEPTH_ATTACHMENT )
        ADD_CONST_INT( "GL_DEPTH_ATTACHMENT", GL_DEPTH_ATTACHMENT );
      #endif
      #if defined( GL_TEXTURE_ALPHA_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_ALPHA_SIZE", GL_TEXTURE_ALPHA_SIZE );
      #endif
      #if defined( GL_SECONDARY_COLOR_NV )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_NV", GL_SECONDARY_COLOR_NV );
      #endif
      #if defined( GL_SOURCE1_ALPHA_EXT )
        ADD_CONST_INT( "GL_SOURCE1_ALPHA_EXT", GL_SOURCE1_ALPHA_EXT );
      #endif
      #if defined( GL_OPERAND1_RGB_EXT )
        ADD_CONST_INT( "GL_OPERAND1_RGB_EXT", GL_OPERAND1_RGB_EXT );
      #endif
      #if defined( GL_FOG_HINT )
        ADD_CONST_INT( "GL_FOG_HINT", GL_FOG_HINT );
      #endif
      #if defined( GLEW_EXT_texture_object )
        ADD_CONST_INT( "GLEW_EXT_texture_object", GLEW_EXT_texture_object );
      #endif
      #if defined( GL_COMP_BIT_ATI )
        ADD_CONST_INT( "GL_COMP_BIT_ATI", GL_COMP_BIT_ATI );
      #endif
      #if defined( GL_TEXTURE_GEQUAL_R_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_GEQUAL_R_SGIX", GL_TEXTURE_GEQUAL_R_SGIX );
      #endif
      #if defined( GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV )
        ADD_CONST_INT( "GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV", GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV );
      #endif
      #if defined( GL_DEPTH_COMPONENT32_SGIX )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT32_SGIX", GL_DEPTH_COMPONENT32_SGIX );
      #endif
      #if defined( GL_VIDEO_COLOR_CONVERSION_MATRIX_NV )
        ADD_CONST_INT( "GL_VIDEO_COLOR_CONVERSION_MATRIX_NV", GL_VIDEO_COLOR_CONVERSION_MATRIX_NV );
      #endif
      #if defined( GL_FLOAT_MAT2_ARB )
        ADD_CONST_INT( "GL_FLOAT_MAT2_ARB", GL_FLOAT_MAT2_ARB );
      #endif
      #if defined( GL_FRAMEBUFFER_COMPLETE_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_COMPLETE_EXT", GL_FRAMEBUFFER_COMPLETE_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT64_AMD )
        ADD_CONST_INT( "GL_UNSIGNED_INT64_AMD", GL_UNSIGNED_INT64_AMD );
      #endif
      #if defined( GL_LINEAR_MIPMAP_NEAREST )
        ADD_CONST_INT( "GL_LINEAR_MIPMAP_NEAREST", GL_LINEAR_MIPMAP_NEAREST );
      #endif
      #if defined( GL_DEPENDENT_GB_TEXTURE_2D_NV )
        ADD_CONST_INT( "GL_DEPENDENT_GB_TEXTURE_2D_NV", GL_DEPENDENT_GB_TEXTURE_2D_NV );
      #endif
      #if defined( GL_FOG_COORD_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_FOG_COORD_ARRAY_LENGTH_NV", GL_FOG_COORD_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_RGB10_A2 )
        ADD_CONST_INT( "GL_RGB10_A2", GL_RGB10_A2 );
      #endif
      #if defined( GLX_AUX2_EXT )
        ADD_CONST_INT( "GLX_AUX2_EXT", GLX_AUX2_EXT );
      #endif
      #if defined( GLEW_EXT_bgra )
        ADD_CONST_INT( "GLEW_EXT_bgra", GLEW_EXT_bgra );
      #endif
      #if defined( GL_VERTEX_ARRAY_RANGE_POINTER_NV )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_RANGE_POINTER_NV", GL_VERTEX_ARRAY_RANGE_POINTER_NV );
      #endif
      #if defined( GL_READ_FRAMEBUFFER_EXT )
        ADD_CONST_INT( "GL_READ_FRAMEBUFFER_EXT", GL_READ_FRAMEBUFFER_EXT );
      #endif
      #if defined( GL_LUMINANCE8UI_EXT )
        ADD_CONST_INT( "GL_LUMINANCE8UI_EXT", GL_LUMINANCE8UI_EXT );
      #endif
      #if defined( GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS )
        ADD_CONST_INT( "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS", GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS );
      #endif
      #if defined( GL_NORMAL_ARRAY_LIST_IBM )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_LIST_IBM", GL_NORMAL_ARRAY_LIST_IBM );
      #endif
      #if defined( GL_PROXY_COLOR_TABLE_SGI )
        ADD_CONST_INT( "GL_PROXY_COLOR_TABLE_SGI", GL_PROXY_COLOR_TABLE_SGI );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB13_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB13_4_NV", GL_MAP1_VERTEX_ATTRIB13_4_NV );
      #endif
      #if defined( GL_FOG_COORD_ARRAY_TYPE )
        ADD_CONST_INT( "GL_FOG_COORD_ARRAY_TYPE", GL_FOG_COORD_ARRAY_TYPE );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD14_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD14_EXT", GL_OUTPUT_TEXTURE_COORD14_EXT );
      #endif
      #if defined( GLX_SAMPLES_ARB )
        ADD_CONST_INT( "GLX_SAMPLES_ARB", GLX_SAMPLES_ARB );
      #endif
      #if defined( GL_SAMPLE_ALPHA_TO_ONE_ARB )
        ADD_CONST_INT( "GL_SAMPLE_ALPHA_TO_ONE_ARB", GL_SAMPLE_ALPHA_TO_ONE_ARB );
      #endif
      #if defined( GLEW_EXT_rescale_normal )
        ADD_CONST_INT( "GLEW_EXT_rescale_normal", GLEW_EXT_rescale_normal );
      #endif
      #if defined( GLX_AUX7_EXT )
        ADD_CONST_INT( "GLX_AUX7_EXT", GLX_AUX7_EXT );
      #endif
      #if defined( GL_DT_SCALE_NV )
        ADD_CONST_INT( "GL_DT_SCALE_NV", GL_DT_SCALE_NV );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_A_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_A_SIZE", GL_PIXEL_MAP_I_TO_A_SIZE );
      #endif
      #if defined( GL_UNSIGNED_NORMALIZED )
        ADD_CONST_INT( "GL_UNSIGNED_NORMALIZED", GL_UNSIGNED_NORMALIZED );
      #endif
      #if defined( GL_SMOOTH_POINT_SIZE_GRANULARITY )
        ADD_CONST_INT( "GL_SMOOTH_POINT_SIZE_GRANULARITY", GL_SMOOTH_POINT_SIZE_GRANULARITY );
      #endif
      #if defined( GL_CLAMP_VERTEX_COLOR )
        ADD_CONST_INT( "GL_CLAMP_VERTEX_COLOR", GL_CLAMP_VERTEX_COLOR );
      #endif
      #if defined( GL_INVARIANT_DATATYPE_EXT )
        ADD_CONST_INT( "GL_INVARIANT_DATATYPE_EXT", GL_INVARIANT_DATATYPE_EXT );
      #endif
      #if defined( GL_MAP2_INDEX )
        ADD_CONST_INT( "GL_MAP2_INDEX", GL_MAP2_INDEX );
      #endif
      #if defined( GLEW_EXT_fragment_lighting )
        ADD_CONST_INT( "GLEW_EXT_fragment_lighting", GLEW_EXT_fragment_lighting );
      #endif
      #if defined( GL_PIXEL_UNPACK_BUFFER_BINDING_EXT )
        ADD_CONST_INT( "GL_PIXEL_UNPACK_BUFFER_BINDING_EXT", GL_PIXEL_UNPACK_BUFFER_BINDING_EXT );
      #endif
      #if defined( GL_MAX_MAP_TESSELLATION_NV )
        ADD_CONST_INT( "GL_MAX_MAP_TESSELLATION_NV", GL_MAX_MAP_TESSELLATION_NV );
      #endif
      #if defined( GLX_TRANSPARENT_GREEN_VALUE_EXT )
        ADD_CONST_INT( "GLX_TRANSPARENT_GREEN_VALUE_EXT", GLX_TRANSPARENT_GREEN_VALUE_EXT );
      #endif
      #if defined( GLX_COLOR_INDEX_BIT )
        ADD_CONST_INT( "GLX_COLOR_INDEX_BIT", GLX_COLOR_INDEX_BIT );
      #endif
      #if defined( GL_NOTEQUAL )
        ADD_CONST_INT( "GL_NOTEQUAL", GL_NOTEQUAL );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY", GL_TEXTURE_COORD_ARRAY );
      #endif
      #if defined( GL_TEXTURE_SWIZZLE_RGBA_EXT )
        ADD_CONST_INT( "GL_TEXTURE_SWIZZLE_RGBA_EXT", GL_TEXTURE_SWIZZLE_RGBA_EXT );
      #endif
      #if defined( GL_COLOR_TABLE_GREEN_SIZE_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_GREEN_SIZE_SGI", GL_COLOR_TABLE_GREEN_SIZE_SGI );
      #endif
      #if defined( GL_FLOAT_32_UNSIGNED_INT_24_8_REV )
        ADD_CONST_INT( "GL_FLOAT_32_UNSIGNED_INT_24_8_REV", GL_FLOAT_32_UNSIGNED_INT_24_8_REV );
      #endif
      #if defined( GL_COMPRESSED_ALPHA_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_ALPHA_ARB", GL_COMPRESSED_ALPHA_ARB );
      #endif
      #if defined( GL_MAP2_GRID_DOMAIN )
        ADD_CONST_INT( "GL_MAP2_GRID_DOMAIN", GL_MAP2_GRID_DOMAIN );
      #endif
      #if defined( GL_INT_SAMPLER_1D_ARRAY )
        ADD_CONST_INT( "GL_INT_SAMPLER_1D_ARRAY", GL_INT_SAMPLER_1D_ARRAY );
      #endif
      #if defined( GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS )
        ADD_CONST_INT( "GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS", GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS );
      #endif
      #if defined( GL_SEPARATE_SPECULAR_COLOR_EXT )
        ADD_CONST_INT( "GL_SEPARATE_SPECULAR_COLOR_EXT", GL_SEPARATE_SPECULAR_COLOR_EXT );
      #endif
      #if defined( GL_TEXTURE_RED_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_RED_SIZE", GL_TEXTURE_RED_SIZE );
      #endif
      #if defined( GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV )
        ADD_CONST_INT( "GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV", GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV );
      #endif
      #if defined( GL_OBJECT_LINEAR )
        ADD_CONST_INT( "GL_OBJECT_LINEAR", GL_OBJECT_LINEAR );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD3_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD3_EXT", GL_OUTPUT_TEXTURE_COORD3_EXT );
      #endif
      #if defined( GL_MODELVIEW11_ARB )
        ADD_CONST_INT( "GL_MODELVIEW11_ARB", GL_MODELVIEW11_ARB );
      #endif
      #if defined( GL_SIGNED_IDENTITY_NV )
        ADD_CONST_INT( "GL_SIGNED_IDENTITY_NV", GL_SIGNED_IDENTITY_NV );
      #endif
      #if defined( GL_CURRENT_ATTRIB_NV )
        ADD_CONST_INT( "GL_CURRENT_ATTRIB_NV", GL_CURRENT_ATTRIB_NV );
      #endif
      #if defined( GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI )
        ADD_CONST_INT( "GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI", GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI );
      #endif
      #if defined( GL_COLOR_ATTACHMENT14_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT14_EXT", GL_COLOR_ATTACHMENT14_EXT );
      #endif
      #if defined( GL_CURRENT_QUERY_ARB )
        ADD_CONST_INT( "GL_CURRENT_QUERY_ARB", GL_CURRENT_QUERY_ARB );
      #endif
      #if defined( GL_NORMAL_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_TYPE_EXT", GL_NORMAL_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_RGBA12_EXT )
        ADD_CONST_INT( "GL_RGBA12_EXT", GL_RGBA12_EXT );
      #endif
      #if defined( GL_FRAGMENT_INTERPOLATION_OFFSET_BITS )
        ADD_CONST_INT( "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS", GL_FRAGMENT_INTERPOLATION_OFFSET_BITS );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP1_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP1_APPLE", GL_VERTEX_ATTRIB_MAP1_APPLE );
      #endif
      #if defined( GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV )
        ADD_CONST_INT( "GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV", GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV );
      #endif
      #if defined( GL_OPERAND2_ALPHA_EXT )
        ADD_CONST_INT( "GL_OPERAND2_ALPHA_EXT", GL_OPERAND2_ALPHA_EXT );
      #endif
      #if defined( GL_TEXTURE_FLOAT_COMPONENTS_NV )
        ADD_CONST_INT( "GL_TEXTURE_FLOAT_COMPONENTS_NV", GL_TEXTURE_FLOAT_COMPONENTS_NV );
      #endif
      #if defined( GL_CONVOLUTION_BORDER_COLOR )
        ADD_CONST_INT( "GL_CONVOLUTION_BORDER_COLOR", GL_CONVOLUTION_BORDER_COLOR );
      #endif
      #if defined( GL_FRAGMENT_SHADER_ARB )
        ADD_CONST_INT( "GL_FRAGMENT_SHADER_ARB", GL_FRAGMENT_SHADER_ARB );
      #endif
      #if defined( GLXEW_EXT_texture_from_pixmap )
        ADD_CONST_INT( "GLXEW_EXT_texture_from_pixmap", GLXEW_EXT_texture_from_pixmap );
      #endif
      #if defined( GL_SATURATE_BIT_ATI )
        ADD_CONST_INT( "GL_SATURATE_BIT_ATI", GL_SATURATE_BIT_ATI );
      #endif
      #if defined( GL_OBJECT_DISTANCE_TO_LINE_SGIS )
        ADD_CONST_INT( "GL_OBJECT_DISTANCE_TO_LINE_SGIS", GL_OBJECT_DISTANCE_TO_LINE_SGIS );
      #endif
      #if defined( GL_EXT_cmyka )
        ADD_CONST_INT( "GL_EXT_cmyka", GL_EXT_cmyka );
      #endif
      #if defined( GL_TEXTURE_SHARED_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_SHARED_SIZE", GL_TEXTURE_SHARED_SIZE );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD28_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD28_EXT", GL_OUTPUT_TEXTURE_COORD28_EXT );
      #endif
      #if defined( GL_LUMINANCE8_ALPHA8 )
        ADD_CONST_INT( "GL_LUMINANCE8_ALPHA8", GL_LUMINANCE8_ALPHA8 );
      #endif
      #if defined( GL_RENDERBUFFER_DEPTH_SIZE )
        ADD_CONST_INT( "GL_RENDERBUFFER_DEPTH_SIZE", GL_RENDERBUFFER_DEPTH_SIZE );
      #endif
      #if defined( GL_COMBINER_CD_DOT_PRODUCT_NV )
        ADD_CONST_INT( "GL_COMBINER_CD_DOT_PRODUCT_NV", GL_COMBINER_CD_DOT_PRODUCT_NV );
      #endif
      #if defined( GL_SLUMINANCE_ALPHA )
        ADD_CONST_INT( "GL_SLUMINANCE_ALPHA", GL_SLUMINANCE_ALPHA );
      #endif
      #if defined( GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS )
        ADD_CONST_INT( "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS", GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_POINTER_EXT", GL_TEXTURE_COORD_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_SPOT_EXPONENT )
        ADD_CONST_INT( "GL_SPOT_EXPONENT", GL_SPOT_EXPONENT );
      #endif
      #if defined( GLEW_EXT_texture_snorm )
        ADD_CONST_INT( "GLEW_EXT_texture_snorm", GLEW_EXT_texture_snorm );
      #endif
      #if defined( GL_SWIZZLE_STQ_ATI )
        ADD_CONST_INT( "GL_SWIZZLE_STQ_ATI", GL_SWIZZLE_STQ_ATI );
      #endif
      #if defined( GL_SHORT )
        ADD_CONST_INT( "GL_SHORT", GL_SHORT );
      #endif
      #if defined( GL_FRAGMENT_LIGHTING_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHTING_EXT", GL_FRAGMENT_LIGHTING_EXT );
      #endif
      #if defined( GL_CURRENT_SECONDARY_COLOR_EXT )
        ADD_CONST_INT( "GL_CURRENT_SECONDARY_COLOR_EXT", GL_CURRENT_SECONDARY_COLOR_EXT );
      #endif
      #if defined( GL_PERFMON_RESULT_AVAILABLE_AMD )
        ADD_CONST_INT( "GL_PERFMON_RESULT_AVAILABLE_AMD", GL_PERFMON_RESULT_AVAILABLE_AMD );
      #endif
      #if defined( GL_STENCIL_BACK_FUNC_ATI )
        ADD_CONST_INT( "GL_STENCIL_BACK_FUNC_ATI", GL_STENCIL_BACK_FUNC_ATI );
      #endif
      #if defined( GL_MAX_VERTEX_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_VERTEX_UNIFORM_COMPONENTS", GL_MAX_VERTEX_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_MAX_PROGRAM_TEMPORARIES_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TEMPORARIES_ARB", GL_MAX_PROGRAM_TEMPORARIES_ARB );
      #endif
      #if defined( GL_VERTEX_ARRAY_EXT )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_EXT", GL_VERTEX_ARRAY_EXT );
      #endif
      #if defined( GL_SAMPLE_ALPHA_TO_MASK_SGIS )
        ADD_CONST_INT( "GL_SAMPLE_ALPHA_TO_MASK_SGIS", GL_SAMPLE_ALPHA_TO_MASK_SGIS );
      #endif
      #if defined( GL_DEPTH_TEXTURE_MODE )
        ADD_CONST_INT( "GL_DEPTH_TEXTURE_MODE", GL_DEPTH_TEXTURE_MODE );
      #endif
      #if defined( GL_TEXTURE_ENV0_EXT )
        ADD_CONST_INT( "GL_TEXTURE_ENV0_EXT", GL_TEXTURE_ENV0_EXT );
      #endif
      #if defined( GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB", GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB );
      #endif
      #if defined( GL_UNSIGNED_INT_10F_11F_11F_REV )
        ADD_CONST_INT( "GL_UNSIGNED_INT_10F_11F_11F_REV", GL_UNSIGNED_INT_10F_11F_11F_REV );
      #endif
      #if defined( GLX_CONFIG_CAVEAT )
        ADD_CONST_INT( "GLX_CONFIG_CAVEAT", GLX_CONFIG_CAVEAT );
      #endif
      #if defined( GL_LUMINANCE16_SNORM )
        ADD_CONST_INT( "GL_LUMINANCE16_SNORM", GL_LUMINANCE16_SNORM );
      #endif
      #if defined( GL_KTX_STENCIL_REGION )
        ADD_CONST_INT( "GL_KTX_STENCIL_REGION", GL_KTX_STENCIL_REGION );
      #endif
      #if defined( GL_TEXTURE_SHADER_NV )
        ADD_CONST_INT( "GL_TEXTURE_SHADER_NV", GL_TEXTURE_SHADER_NV );
      #endif
      #if defined( GL_STATIC_DRAW )
        ADD_CONST_INT( "GL_STATIC_DRAW", GL_STATIC_DRAW );
      #endif
      #if defined( GL_RENDERBUFFER )
        ADD_CONST_INT( "GL_RENDERBUFFER", GL_RENDERBUFFER );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV", GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV );
      #endif
      #if defined( GL_TEXTURE_BORDER_VALUES_NV )
        ADD_CONST_INT( "GL_TEXTURE_BORDER_VALUES_NV", GL_TEXTURE_BORDER_VALUES_NV );
      #endif
      #if defined( GL_VERTEX_STATE_PROGRAM_NV )
        ADD_CONST_INT( "GL_VERTEX_STATE_PROGRAM_NV", GL_VERTEX_STATE_PROGRAM_NV );
      #endif
      #if defined( GLX_VIDEO_OUT_FRAME_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_FRAME_NV", GLX_VIDEO_OUT_FRAME_NV );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE", GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE );
      #endif
      #if defined( GLX_MAX_SWAP_INTERVAL_EXT )
        ADD_CONST_INT( "GLX_MAX_SWAP_INTERVAL_EXT", GLX_MAX_SWAP_INTERVAL_EXT );
      #endif
      #if defined( GL_INTENSITY16_EXT )
        ADD_CONST_INT( "GL_INTENSITY16_EXT", GL_INTENSITY16_EXT );
      #endif
      #if defined( GL_VBO_FREE_MEMORY_ATI )
        ADD_CONST_INT( "GL_VBO_FREE_MEMORY_ATI", GL_VBO_FREE_MEMORY_ATI );
      #endif
      #if defined( GL_INDEX_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_INDEX_ARRAY_TYPE_EXT", GL_INDEX_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT", GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT );
      #endif
      #if defined( GL_SOURCE0_ALPHA_ARB )
        ADD_CONST_INT( "GL_SOURCE0_ALPHA_ARB", GL_SOURCE0_ALPHA_ARB );
      #endif
      #if defined( GL_PER_STAGE_CONSTANTS_NV )
        ADD_CONST_INT( "GL_PER_STAGE_CONSTANTS_NV", GL_PER_STAGE_CONSTANTS_NV );
      #endif
      #if defined( GL_SAMPLER_3D )
        ADD_CONST_INT( "GL_SAMPLER_3D", GL_SAMPLER_3D );
      #endif
      #if defined( GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB );
      #endif
      #if defined( GLX_EXT_fbconfig_packed_float )
        ADD_CONST_INT( "GLX_EXT_fbconfig_packed_float", GLX_EXT_fbconfig_packed_float );
      #endif
      #if defined( GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET )
        ADD_CONST_INT( "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET", GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET );
      #endif
      #if defined( GL_OR_INVERTED )
        ADD_CONST_INT( "GL_OR_INVERTED", GL_OR_INVERTED );
      #endif
      #if defined( GL_TEXTURE_GREEN_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_GREEN_SIZE", GL_TEXTURE_GREEN_SIZE );
      #endif
      #if defined( GL_COLOR_TABLE_INTENSITY_SIZE_EXT )
        ADD_CONST_INT( "GL_COLOR_TABLE_INTENSITY_SIZE_EXT", GL_COLOR_TABLE_INTENSITY_SIZE_EXT );
      #endif
      #if defined( GL_PIXEL_MAG_FILTER_EXT )
        ADD_CONST_INT( "GL_PIXEL_MAG_FILTER_EXT", GL_PIXEL_MAG_FILTER_EXT );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB11_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB11_NV", GL_EVAL_VERTEX_ATTRIB11_NV );
      #endif
      #if defined( GL_BUFFER_USAGE_ARB )
        ADD_CONST_INT( "GL_BUFFER_USAGE_ARB", GL_BUFFER_USAGE_ARB );
      #endif
      #if defined( GL_NORMAL_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_ADDRESS_NV", GL_NORMAL_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GL_CURRENT_RASTER_NORMAL_EXT )
        ADD_CONST_INT( "GL_CURRENT_RASTER_NORMAL_EXT", GL_CURRENT_RASTER_NORMAL_EXT );
      #endif
      #if defined( GL_TEXTURE_MAX_LOD_SGIS )
        ADD_CONST_INT( "GL_TEXTURE_MAX_LOD_SGIS", GL_TEXTURE_MAX_LOD_SGIS );
      #endif
      #if defined( GL_POINT_SPRITE_CULL_CENTER_ATIX )
        ADD_CONST_INT( "GL_POINT_SPRITE_CULL_CENTER_ATIX", GL_POINT_SPRITE_CULL_CENTER_ATIX );
      #endif
      #if defined( GL_CW )
        ADD_CONST_INT( "GL_CW", GL_CW );
      #endif
      #if defined( GL_INTENSITY4 )
        ADD_CONST_INT( "GL_INTENSITY4", GL_INTENSITY4 );
      #endif
      #if defined( GL_TEXTURE_MATERIAL_PARAMETER_EXT )
        ADD_CONST_INT( "GL_TEXTURE_MATERIAL_PARAMETER_EXT", GL_TEXTURE_MATERIAL_PARAMETER_EXT );
      #endif
      #if defined( GLX_CONTEXT_MINOR_VERSION_ARB )
        ADD_CONST_INT( "GLX_CONTEXT_MINOR_VERSION_ARB", GLX_CONTEXT_MINOR_VERSION_ARB );
      #endif
      #if defined( GL_INTENSITY8 )
        ADD_CONST_INT( "GL_INTENSITY8", GL_INTENSITY8 );
      #endif
      #if defined( GL_DEPTH_STENCIL_TO_BGRA_NV )
        ADD_CONST_INT( "GL_DEPTH_STENCIL_TO_BGRA_NV", GL_DEPTH_STENCIL_TO_BGRA_NV );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_ADDRESS_NV", GL_TEXTURE_COORD_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GLX_TRANSPARENT_TYPE )
        ADD_CONST_INT( "GLX_TRANSPARENT_TYPE", GLX_TRANSPARENT_TYPE );
      #endif
      #if defined( GL_REFLECTION_MAP_NV )
        ADD_CONST_INT( "GL_REFLECTION_MAP_NV", GL_REFLECTION_MAP_NV );
      #endif
      #if defined( GL_SIGNED_LUMINANCE8_ALPHA8_NV )
        ADD_CONST_INT( "GL_SIGNED_LUMINANCE8_ALPHA8_NV", GL_SIGNED_LUMINANCE8_ALPHA8_NV );
      #endif
      #if defined( GLX_AUX1_ATI )
        ADD_CONST_INT( "GLX_AUX1_ATI", GLX_AUX1_ATI );
      #endif
      #if defined( GL_INTENSITY_EXT )
        ADD_CONST_INT( "GL_INTENSITY_EXT", GL_INTENSITY_EXT );
      #endif
      #if defined( GL_FOG_COORD_SRC )
        ADD_CONST_INT( "GL_FOG_COORD_SRC", GL_FOG_COORD_SRC );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_I_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_I_SIZE", GL_PIXEL_MAP_I_TO_I_SIZE );
      #endif
      #if defined( GL_UNSIGNED_SHORT_8_8_APPLE )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_8_8_APPLE", GL_UNSIGNED_SHORT_8_8_APPLE );
      #endif
      #if defined( GL_SAMPLE_COVERAGE_ARB )
        ADD_CONST_INT( "GL_SAMPLE_COVERAGE_ARB", GL_SAMPLE_COVERAGE_ARB );
      #endif
      #if defined( GL_DECAL )
        ADD_CONST_INT( "GL_DECAL", GL_DECAL );
      #endif
      #if defined( GL_2PASS_1_EXT )
        ADD_CONST_INT( "GL_2PASS_1_EXT", GL_2PASS_1_EXT );
      #endif
      #if defined( GL_2D )
        ADD_CONST_INT( "GL_2D", GL_2D );
      #endif
      #if defined( GL_SELECTION_BUFFER_POINTER )
        ADD_CONST_INT( "GL_SELECTION_BUFFER_POINTER", GL_SELECTION_BUFFER_POINTER );
      #endif
      #if defined( GL_SWIZZLE_STR_DR_ATI )
        ADD_CONST_INT( "GL_SWIZZLE_STR_DR_ATI", GL_SWIZZLE_STR_DR_ATI );
      #endif
      #if defined( GL_COLOR_TABLE_RED_SIZE_EXT )
        ADD_CONST_INT( "GL_COLOR_TABLE_RED_SIZE_EXT", GL_COLOR_TABLE_RED_SIZE_EXT );
      #endif
      #if defined( GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV )
        ADD_CONST_INT( "GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV", GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE", GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE );
      #endif
      #if defined( GL_INTENSITY8_SNORM )
        ADD_CONST_INT( "GL_INTENSITY8_SNORM", GL_INTENSITY8_SNORM );
      #endif
      #if defined( GL_SAMPLES )
        ADD_CONST_INT( "GL_SAMPLES", GL_SAMPLES );
      #endif
      #if defined( GL_LUMINANCE_ALPHA_FLOAT16_APPLE )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA_FLOAT16_APPLE", GL_LUMINANCE_ALPHA_FLOAT16_APPLE );
      #endif
      #if defined( GL_FRAMEBUFFER_BINDING_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_BINDING_EXT", GL_FRAMEBUFFER_BINDING_EXT );
      #endif
      #if defined( GL_VERTEX_PROGRAM_POINT_SIZE_ARB )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_POINT_SIZE_ARB", GL_VERTEX_PROGRAM_POINT_SIZE_ARB );
      #endif
      #if defined( GL_MAX_FRAGMENT_LIGHTS_EXT )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_LIGHTS_EXT", GL_MAX_FRAGMENT_LIGHTS_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_VEC2 )
        ADD_CONST_INT( "GL_UNSIGNED_INT_VEC2", GL_UNSIGNED_INT_VEC2 );
      #endif
      #if defined( GL_UNSIGNED_INT_VEC3 )
        ADD_CONST_INT( "GL_UNSIGNED_INT_VEC3", GL_UNSIGNED_INT_VEC3 );
      #endif
      #if defined( GL_UNSIGNED_INT_VEC4 )
        ADD_CONST_INT( "GL_UNSIGNED_INT_VEC4", GL_UNSIGNED_INT_VEC4 );
      #endif
      #if defined( GL_UNSIGNED_SHORT_5_6_5 )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_5_6_5", GL_UNSIGNED_SHORT_5_6_5 );
      #endif
      #if defined( GLEW_EXT_texture_env_add )
        ADD_CONST_INT( "GLEW_EXT_texture_env_add", GLEW_EXT_texture_env_add );
      #endif
      #if defined( GL_RGBA16UI_EXT )
        ADD_CONST_INT( "GL_RGBA16UI_EXT", GL_RGBA16UI_EXT );
      #endif
      #if defined( GL_MATRIX21_ARB )
        ADD_CONST_INT( "GL_MATRIX21_ARB", GL_MATRIX21_ARB );
      #endif
      #if defined( GL_BUFFER_SERIALIZED_MODIFY_APPLE )
        ADD_CONST_INT( "GL_BUFFER_SERIALIZED_MODIFY_APPLE", GL_BUFFER_SERIALIZED_MODIFY_APPLE );
      #endif
      #if defined( GL_R1UI_V3F_SUN )
        ADD_CONST_INT( "GL_R1UI_V3F_SUN", GL_R1UI_V3F_SUN );
      #endif
      #if defined( GL_MAX_VARYING_COMPONENTS_EXT )
        ADD_CONST_INT( "GL_MAX_VARYING_COMPONENTS_EXT", GL_MAX_VARYING_COMPONENTS_EXT );
      #endif
      #if defined( GL_LUMINANCE_INTEGER_EXT )
        ADD_CONST_INT( "GL_LUMINANCE_INTEGER_EXT", GL_LUMINANCE_INTEGER_EXT );
      #endif
      #if defined( GL_HISTOGRAM_RED_SIZE_EXT )
        ADD_CONST_INT( "GL_HISTOGRAM_RED_SIZE_EXT", GL_HISTOGRAM_RED_SIZE_EXT );
      #endif
      #if defined( GL_RGBA_MODE )
        ADD_CONST_INT( "GL_RGBA_MODE", GL_RGBA_MODE );
      #endif
      #if defined( GL_REG_1_ATI )
        ADD_CONST_INT( "GL_REG_1_ATI", GL_REG_1_ATI );
      #endif
      #if defined( GL_NEGATIVE_Z_EXT )
        ADD_CONST_INT( "GL_NEGATIVE_Z_EXT", GL_NEGATIVE_Z_EXT );
      #endif
      #if defined( GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV )
        ADD_CONST_INT( "GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV", GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV );
      #endif
      #if defined( GL_ELEMENT_ARRAY_POINTER_ATI )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_POINTER_ATI", GL_ELEMENT_ARRAY_POINTER_ATI );
      #endif
      #if defined( GL_CONSTANT_COLOR1_NV )
        ADD_CONST_INT( "GL_CONSTANT_COLOR1_NV", GL_CONSTANT_COLOR1_NV );
      #endif
      #if defined( GLEW_OML_resample )
        ADD_CONST_INT( "GLEW_OML_resample", GLEW_OML_resample );
      #endif
      #if defined( GL_4PASS_0_EXT )
        ADD_CONST_INT( "GL_4PASS_0_EXT", GL_4PASS_0_EXT );
      #endif
      #if defined( GL_RGB32UI )
        ADD_CONST_INT( "GL_RGB32UI", GL_RGB32UI );
      #endif
      #if defined( GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB", GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB );
      #endif
      #if defined( GL_GREEN_INTEGER_EXT )
        ADD_CONST_INT( "GL_GREEN_INTEGER_EXT", GL_GREEN_INTEGER_EXT );
      #endif
      #if defined( GL_TEXTURE4_ARB )
        ADD_CONST_INT( "GL_TEXTURE4_ARB", GL_TEXTURE4_ARB );
      #endif
      #if defined( GLX_CONTEXT_FLAGS_ARB )
        ADD_CONST_INT( "GLX_CONTEXT_FLAGS_ARB", GLX_CONTEXT_FLAGS_ARB );
      #endif
      #if defined( GL_PROXY_TEXTURE_RECTANGLE )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_RECTANGLE", GL_PROXY_TEXTURE_RECTANGLE );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_ALPHA_BIAS )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_ALPHA_BIAS", GL_POST_COLOR_MATRIX_ALPHA_BIAS );
      #endif
      #if defined( GL_STENCIL_BACK_FAIL_ATI )
        ADD_CONST_INT( "GL_STENCIL_BACK_FAIL_ATI", GL_STENCIL_BACK_FAIL_ATI );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV", GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV );
      #endif
      #if defined( GL_MATRIX_INDEX_ARRAY_TYPE_ARB )
        ADD_CONST_INT( "GL_MATRIX_INDEX_ARRAY_TYPE_ARB", GL_MATRIX_INDEX_ARRAY_TYPE_ARB );
      #endif
      #if defined( GL_QUERY_BY_REGION_NO_WAIT_NV )
        ADD_CONST_INT( "GL_QUERY_BY_REGION_NO_WAIT_NV", GL_QUERY_BY_REGION_NO_WAIT_NV );
      #endif
      #if defined( GL_EXT_texture_cube_map )
        ADD_CONST_INT( "GL_EXT_texture_cube_map", GL_EXT_texture_cube_map );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS", GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS );
      #endif
      #if defined( GL_TEXTURE_COMPRESSION_HINT )
        ADD_CONST_INT( "GL_TEXTURE_COMPRESSION_HINT", GL_TEXTURE_COMPRESSION_HINT );
      #endif
      #if defined( GL_RG8UI )
        ADD_CONST_INT( "GL_RG8UI", GL_RG8UI );
      #endif
      #if defined( GL_TEXTURE8 )
        ADD_CONST_INT( "GL_TEXTURE8", GL_TEXTURE8 );
      #endif
      #if defined( GL_TEXTURE9 )
        ADD_CONST_INT( "GL_TEXTURE9", GL_TEXTURE9 );
      #endif
      #if defined( GL_EXT_index_array_formats )
        ADD_CONST_INT( "GL_EXT_index_array_formats", GL_EXT_index_array_formats );
      #endif
      #if defined( GL_TEXTURE4 )
        ADD_CONST_INT( "GL_TEXTURE4", GL_TEXTURE4 );
      #endif
      #if defined( GL_TEXTURE5 )
        ADD_CONST_INT( "GL_TEXTURE5", GL_TEXTURE5 );
      #endif
      #if defined( GL_TEXTURE6 )
        ADD_CONST_INT( "GL_TEXTURE6", GL_TEXTURE6 );
      #endif
      #if defined( GL_TEXTURE7 )
        ADD_CONST_INT( "GL_TEXTURE7", GL_TEXTURE7 );
      #endif
      #if defined( GL_TEXTURE0 )
        ADD_CONST_INT( "GL_TEXTURE0", GL_TEXTURE0 );
      #endif
      #if defined( GL_LINEAR_MIPMAP_LINEAR )
        ADD_CONST_INT( "GL_LINEAR_MIPMAP_LINEAR", GL_LINEAR_MIPMAP_LINEAR );
      #endif
      #if defined( GL_TEXTURE2 )
        ADD_CONST_INT( "GL_TEXTURE2", GL_TEXTURE2 );
      #endif
      #if defined( GL_TEXTURE3 )
        ADD_CONST_INT( "GL_TEXTURE3", GL_TEXTURE3 );
      #endif
      #if defined( GL_FLOAT_VEC2_ARB )
        ADD_CONST_INT( "GL_FLOAT_VEC2_ARB", GL_FLOAT_VEC2_ARB );
      #endif
      #if defined( GL_BOOL_VEC4 )
        ADD_CONST_INT( "GL_BOOL_VEC4", GL_BOOL_VEC4 );
      #endif
      #if defined( GL_COMBINER0_NV )
        ADD_CONST_INT( "GL_COMBINER0_NV", GL_COMBINER0_NV );
      #endif
      #if defined( GL_RENDERBUFFER_BINDING_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_BINDING_EXT", GL_RENDERBUFFER_BINDING_EXT );
      #endif
      #if defined( GL_BOOL_VEC3 )
        ADD_CONST_INT( "GL_BOOL_VEC3", GL_BOOL_VEC3 );
      #endif
      #if defined( GL_BOOL_VEC2 )
        ADD_CONST_INT( "GL_BOOL_VEC2", GL_BOOL_VEC2 );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY0_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY0_NV", GL_VERTEX_ATTRIB_ARRAY0_NV );
      #endif
      #if defined( GL_OBJECT_VALIDATE_STATUS_ARB )
        ADD_CONST_INT( "GL_OBJECT_VALIDATE_STATUS_ARB", GL_OBJECT_VALIDATE_STATUS_ARB );
      #endif
      #if defined( GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS", GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS );
      #endif
      #if defined( GL_COLOR_MATERIAL_PARAMETER )
        ADD_CONST_INT( "GL_COLOR_MATERIAL_PARAMETER", GL_COLOR_MATERIAL_PARAMETER );
      #endif
      #if defined( GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS )
        ADD_CONST_INT( "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS", GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS );
      #endif
      #if defined( GL_RESAMPLE_REPLICATE_SGIX )
        ADD_CONST_INT( "GL_RESAMPLE_REPLICATE_SGIX", GL_RESAMPLE_REPLICATE_SGIX );
      #endif
      #if defined( GL_EXT_multi_draw_arrays )
        ADD_CONST_INT( "GL_EXT_multi_draw_arrays", GL_EXT_multi_draw_arrays );
      #endif
      #if defined( GL_ONE )
        ADD_CONST_INT( "GL_ONE", GL_ONE );
      #endif
      #if defined( GL_EXT_misc_attribute )
        ADD_CONST_INT( "GL_EXT_misc_attribute", GL_EXT_misc_attribute );
      #endif
      #if defined( GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV", GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV );
      #endif
      #if defined( GL_OP_MADD_EXT )
        ADD_CONST_INT( "GL_OP_MADD_EXT", GL_OP_MADD_EXT );
      #endif
      #if defined( GLX_AUX1_EXT )
        ADD_CONST_INT( "GLX_AUX1_EXT", GLX_AUX1_EXT );
      #endif
      #if defined( GL_SRGB8_ALPHA8_EXT )
        ADD_CONST_INT( "GL_SRGB8_ALPHA8_EXT", GL_SRGB8_ALPHA8_EXT );
      #endif
      #if defined( GL_COLOR_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_COLOR_ARRAY_POINTER_EXT", GL_COLOR_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_VECTOR_EXT )
        ADD_CONST_INT( "GL_VECTOR_EXT", GL_VECTOR_EXT );
      #endif
      #if defined( GL_R1UI_C3F_V3F_SUN )
        ADD_CONST_INT( "GL_R1UI_C3F_V3F_SUN", GL_R1UI_C3F_V3F_SUN );
      #endif
      #if defined( GL_SAMPLE_MASK_VALUE_EXT )
        ADD_CONST_INT( "GL_SAMPLE_MASK_VALUE_EXT", GL_SAMPLE_MASK_VALUE_EXT );
      #endif
      #if defined( GL_UNPACK_IMAGE_HEIGHT )
        ADD_CONST_INT( "GL_UNPACK_IMAGE_HEIGHT", GL_UNPACK_IMAGE_HEIGHT );
      #endif
      #if defined( GLX_TEXTURE_CUBE_MAP_POSITIVE_Z_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_CUBE_MAP_POSITIVE_Z_ATI", GLX_TEXTURE_CUBE_MAP_POSITIVE_Z_ATI );
      #endif
      #if defined( GL_OUTPUT_VERTEX_EXT )
        ADD_CONST_INT( "GL_OUTPUT_VERTEX_EXT", GL_OUTPUT_VERTEX_EXT );
      #endif
      #if defined( GL_TRIANGLE_STRIP )
        ADD_CONST_INT( "GL_TRIANGLE_STRIP", GL_TRIANGLE_STRIP );
      #endif
      #if defined( GL_N3F_V3F )
        ADD_CONST_INT( "GL_N3F_V3F", GL_N3F_V3F );
      #endif
      #if defined( GL_PROGRAM_BINARY_RETRIEVABLE_HINT )
        ADD_CONST_INT( "GL_PROGRAM_BINARY_RETRIEVABLE_HINT", GL_PROGRAM_BINARY_RETRIEVABLE_HINT );
      #endif
      #if defined( GL_FRONT_LEFT )
        ADD_CONST_INT( "GL_FRONT_LEFT", GL_FRONT_LEFT );
      #endif
      #if defined( GLX_ACCUM_BUFFER_BIT_SGIX )
        ADD_CONST_INT( "GLX_ACCUM_BUFFER_BIT_SGIX", GLX_ACCUM_BUFFER_BIT_SGIX );
      #endif
      #if defined( GL_DRAW_PIXELS_APPLE )
        ADD_CONST_INT( "GL_DRAW_PIXELS_APPLE", GL_DRAW_PIXELS_APPLE );
      #endif
      #if defined( GL_CLAMP )
        ADD_CONST_INT( "GL_CLAMP", GL_CLAMP );
      #endif
      #if defined( GL_PERCENTAGE_AMD )
        ADD_CONST_INT( "GL_PERCENTAGE_AMD", GL_PERCENTAGE_AMD );
      #endif
      #if defined( GL_EMBOSS_LIGHT_NV )
        ADD_CONST_INT( "GL_EMBOSS_LIGHT_NV", GL_EMBOSS_LIGHT_NV );
      #endif
      #if defined( GL_RESCALE_NORMAL_EXT )
        ADD_CONST_INT( "GL_RESCALE_NORMAL_EXT", GL_RESCALE_NORMAL_EXT );
      #endif
      #if defined( GL_INDEX_OFFSET )
        ADD_CONST_INT( "GL_INDEX_OFFSET", GL_INDEX_OFFSET );
      #endif
      #if defined( GL_POST_TEXTURE_FILTER_BIAS_SGIX )
        ADD_CONST_INT( "GL_POST_TEXTURE_FILTER_BIAS_SGIX", GL_POST_TEXTURE_FILTER_BIAS_SGIX );
      #endif
      #if defined( GL_INTENSITY )
        ADD_CONST_INT( "GL_INTENSITY", GL_INTENSITY );
      #endif
      #if defined( GL_EXT_convolution )
        ADD_CONST_INT( "GL_EXT_convolution", GL_EXT_convolution );
      #endif
      #if defined( GL_R1UI_C4F_N3F_V3F_SUN )
        ADD_CONST_INT( "GL_R1UI_C4F_N3F_V3F_SUN", GL_R1UI_C4F_N3F_V3F_SUN );
      #endif
      #if defined( GL_LUMINANCE_ALPHA_SNORM )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA_SNORM", GL_LUMINANCE_ALPHA_SNORM );
      #endif
      #if defined( GL_VERTEX_ARRAY_BINDING )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_BINDING", GL_VERTEX_ARRAY_BINDING );
      #endif
      #if defined( GL_TIMEOUT_EXPIRED )
        ADD_CONST_INT( "GL_TIMEOUT_EXPIRED", GL_TIMEOUT_EXPIRED );
      #endif
      #if defined( GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY )
        ADD_CONST_INT( "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY );
      #endif
      #if defined( GL_CON_7_ATI )
        ADD_CONST_INT( "GL_CON_7_ATI", GL_CON_7_ATI );
      #endif
      #if defined( GLX_VERSION_1_3 )
        ADD_CONST_INT( "GLX_VERSION_1_3", GLX_VERSION_1_3 );
      #endif
      #if defined( GL_COMPRESSED_RGBA_BPTC_UNORM_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_RGBA_BPTC_UNORM_ARB", GL_COMPRESSED_RGBA_BPTC_UNORM_ARB );
      #endif
      #if defined( GL_VERTEX_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_BUFFER_BINDING_ARB", GL_VERTEX_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_STENCIL_FUNC )
        ADD_CONST_INT( "GL_STENCIL_FUNC", GL_STENCIL_FUNC );
      #endif
      #if defined( GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT", GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT );
      #endif
      #if defined( GL_TEXTURE_ENV )
        ADD_CONST_INT( "GL_TEXTURE_ENV", GL_TEXTURE_ENV );
      #endif
      #if defined( GL_COLOR_ATTACHMENT15_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT15_EXT", GL_COLOR_ATTACHMENT15_EXT );
      #endif
      #if defined( GL_DRAW_BUFFER8_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER8_ARB", GL_DRAW_BUFFER8_ARB );
      #endif
      #if defined( GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT )
        ADD_CONST_INT( "GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT", GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT );
      #endif
      #if defined( GL_DECR )
        ADD_CONST_INT( "GL_DECR", GL_DECR );
      #endif
      #if defined( GL_BACK )
        ADD_CONST_INT( "GL_BACK", GL_BACK );
      #endif
      #if defined( GL_PRIMITIVE_RESTART_INDEX_NV )
        ADD_CONST_INT( "GL_PRIMITIVE_RESTART_INDEX_NV", GL_PRIMITIVE_RESTART_INDEX_NV );
      #endif
      #if defined( GL_TABLE_TOO_LARGE )
        ADD_CONST_INT( "GL_TABLE_TOO_LARGE", GL_TABLE_TOO_LARGE );
      #endif
      #if defined( GL_PROXY_TEXTURE_CUBE_MAP_EXT )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_CUBE_MAP_EXT", GL_PROXY_TEXTURE_CUBE_MAP_EXT );
      #endif
      #if defined( GL_VERTEX_BLEND_ARB )
        ADD_CONST_INT( "GL_VERTEX_BLEND_ARB", GL_VERTEX_BLEND_ARB );
      #endif
      #if defined( GL_INT )
        ADD_CONST_INT( "GL_INT", GL_INT );
      #endif
      #if defined( GL_MODELVIEW2_ARB )
        ADD_CONST_INT( "GL_MODELVIEW2_ARB", GL_MODELVIEW2_ARB );
      #endif
      #if defined( GL_ENV_MODULATE_EXT )
        ADD_CONST_INT( "GL_ENV_MODULATE_EXT", GL_ENV_MODULATE_EXT );
      #endif
      #if defined( GL_MAX_VERTEX_STREAMS_ATI )
        ADD_CONST_INT( "GL_MAX_VERTEX_STREAMS_ATI", GL_MAX_VERTEX_STREAMS_ATI );
      #endif
      #if defined( GL_CLIP_DISTANCE1 )
        ADD_CONST_INT( "GL_CLIP_DISTANCE1", GL_CLIP_DISTANCE1 );
      #endif
      #if defined( GL_CLIP_DISTANCE0 )
        ADD_CONST_INT( "GL_CLIP_DISTANCE0", GL_CLIP_DISTANCE0 );
      #endif
      #if defined( GL_CLIP_DISTANCE3 )
        ADD_CONST_INT( "GL_CLIP_DISTANCE3", GL_CLIP_DISTANCE3 );
      #endif
      #if defined( GL_CLIP_DISTANCE2 )
        ADD_CONST_INT( "GL_CLIP_DISTANCE2", GL_CLIP_DISTANCE2 );
      #endif
      #if defined( GL_CLIP_DISTANCE5 )
        ADD_CONST_INT( "GL_CLIP_DISTANCE5", GL_CLIP_DISTANCE5 );
      #endif
      #if defined( GL_CLIP_DISTANCE4 )
        ADD_CONST_INT( "GL_CLIP_DISTANCE4", GL_CLIP_DISTANCE4 );
      #endif
      #if defined( GL_MINOR_VERSION )
        ADD_CONST_INT( "GL_MINOR_VERSION", GL_MINOR_VERSION );
      #endif
      #if defined( GL_PIXEL_MAP_G_TO_G_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_G_TO_G_SIZE", GL_PIXEL_MAP_G_TO_G_SIZE );
      #endif
      #if defined( GL_COMPRESSED_RGBA_S3TC_DXT5_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT", GL_COMPRESSED_RGBA_S3TC_DXT5_EXT );
      #endif
      #if defined( GL_MAX_PROGRAM_RESULT_COMPONENTS_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_RESULT_COMPONENTS_NV", GL_MAX_PROGRAM_RESULT_COMPONENTS_NV );
      #endif
      #if defined( GL_VERTEX_SHADER_VARIANTS_EXT )
        ADD_CONST_INT( "GL_VERTEX_SHADER_VARIANTS_EXT", GL_VERTEX_SHADER_VARIANTS_EXT );
      #endif
      #if defined( GL_FRONT_AND_BACK )
        ADD_CONST_INT( "GL_FRONT_AND_BACK", GL_FRONT_AND_BACK );
      #endif
      #if defined( GLX_SAMPLES_3DFX )
        ADD_CONST_INT( "GLX_SAMPLES_3DFX", GLX_SAMPLES_3DFX );
      #endif
      #if defined( GLEW_EXT_subtexture )
        ADD_CONST_INT( "GLEW_EXT_subtexture", GLEW_EXT_subtexture );
      #endif
      #if defined( GLX_PIPE_RECT_LIMITS_SGIX )
        ADD_CONST_INT( "GLX_PIPE_RECT_LIMITS_SGIX", GLX_PIPE_RECT_LIMITS_SGIX );
      #endif
      #if defined( GLEW_EXT_clip_volume_hint )
        ADD_CONST_INT( "GLEW_EXT_clip_volume_hint", GLEW_EXT_clip_volume_hint );
      #endif
      #if defined( GL_COMPRESSED_RG_RGTC2 )
        ADD_CONST_INT( "GL_COMPRESSED_RG_RGTC2", GL_COMPRESSED_RG_RGTC2 );
      #endif
      #if defined( GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_EXPAND_NEGATE_NV )
        ADD_CONST_INT( "GL_EXPAND_NEGATE_NV", GL_EXPAND_NEGATE_NV );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_SIZE_EXT", GL_TEXTURE_COORD_ARRAY_SIZE_EXT );
      #endif
      #if defined( GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV )
        ADD_CONST_INT( "GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV", GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI", GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI );
      #endif
      #if defined( GL_PROXY_TEXTURE_1D_STACK_MESAX )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_1D_STACK_MESAX", GL_PROXY_TEXTURE_1D_STACK_MESAX );
      #endif
      #if defined( GL_SYNC_FENCE )
        ADD_CONST_INT( "GL_SYNC_FENCE", GL_SYNC_FENCE );
      #endif
      #if defined( GL_MODELVIEW0_EXT )
        ADD_CONST_INT( "GL_MODELVIEW0_EXT", GL_MODELVIEW0_EXT );
      #endif
      #if defined( GL_EXT_shared_texture_palette )
        ADD_CONST_INT( "GL_EXT_shared_texture_palette", GL_EXT_shared_texture_palette );
      #endif
      #if defined( GL_EXT_texture_array )
        ADD_CONST_INT( "GL_EXT_texture_array", GL_EXT_texture_array );
      #endif
      #if defined( GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT", GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_RGB8_SNORM )
        ADD_CONST_INT( "GL_RGB8_SNORM", GL_RGB8_SNORM );
      #endif
      #if defined( GL_UNPACK_SKIP_PIXELS )
        ADD_CONST_INT( "GL_UNPACK_SKIP_PIXELS", GL_UNPACK_SKIP_PIXELS );
      #endif
      #if defined( GL_OPERAND1_RGB_ARB )
        ADD_CONST_INT( "GL_OPERAND1_RGB_ARB", GL_OPERAND1_RGB_ARB );
      #endif
      #if defined( GL_COLOR_MATRIX_STACK_DEPTH_SGI )
        ADD_CONST_INT( "GL_COLOR_MATRIX_STACK_DEPTH_SGI", GL_COLOR_MATRIX_STACK_DEPTH_SGI );
      #endif
      #if defined( GLX_TEXTURE_CUBE_MAP_POSITIVE_Y_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_CUBE_MAP_POSITIVE_Y_ATI", GLX_TEXTURE_CUBE_MAP_POSITIVE_Y_ATI );
      #endif
      #if defined( GLEW_EXT_packed_float )
        ADD_CONST_INT( "GLEW_EXT_packed_float", GLEW_EXT_packed_float );
      #endif
      #if defined( GL_UNSIGNED_SHORT_4_4_4_4 )
        ADD_CONST_INT( "GL_UNSIGNED_SHORT_4_4_4_4", GL_UNSIGNED_SHORT_4_4_4_4 );
      #endif
      #if defined( GL_DEPTH_COMPONENT32_ARB )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT32_ARB", GL_DEPTH_COMPONENT32_ARB );
      #endif
      #if defined( GL_LO_BIAS_NV )
        ADD_CONST_INT( "GL_LO_BIAS_NV", GL_LO_BIAS_NV );
      #endif
      #if defined( GL_COMBINER1_NV )
        ADD_CONST_INT( "GL_COMBINER1_NV", GL_COMBINER1_NV );
      #endif
      #if defined( GL_NO_ERROR )
        ADD_CONST_INT( "GL_NO_ERROR", GL_NO_ERROR );
      #endif
      #if defined( GL_CON_4_ATI )
        ADD_CONST_INT( "GL_CON_4_ATI", GL_CON_4_ATI );
      #endif
      #if defined( GL_MODULATE_ADD_ATI )
        ADD_CONST_INT( "GL_MODULATE_ADD_ATI", GL_MODULATE_ADD_ATI );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB8_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB8_NV", GL_EVAL_VERTEX_ATTRIB8_NV );
      #endif
      #if defined( GL_CURRENT_SECONDARY_COLOR )
        ADD_CONST_INT( "GL_CURRENT_SECONDARY_COLOR", GL_CURRENT_SECONDARY_COLOR );
      #endif
      #if defined( GL_DEPTH_COMPONENT32F_NV )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT32F_NV", GL_DEPTH_COMPONENT32F_NV );
      #endif
      #if defined( GL_RGBA16UI )
        ADD_CONST_INT( "GL_RGBA16UI", GL_RGBA16UI );
      #endif
      #if defined( GLX_AUX5_ATI )
        ADD_CONST_INT( "GLX_AUX5_ATI", GLX_AUX5_ATI );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_ARB )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_ARB", GL_TEXTURE_CUBE_MAP_ARB );
      #endif
      #if defined( GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX", GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_INTENSITY12_EXT )
        ADD_CONST_INT( "GL_INTENSITY12_EXT", GL_INTENSITY12_EXT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD5_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD5_EXT", GL_OUTPUT_TEXTURE_COORD5_EXT );
      #endif
      #if defined( GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT )
        ADD_CONST_INT( "GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT );
      #endif
      #if defined( GL_EXT_secondary_color )
        ADD_CONST_INT( "GL_EXT_secondary_color", GL_EXT_secondary_color );
      #endif
      #if defined( GL_TEXTURE_BINDING_2D_ARRAY )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_2D_ARRAY", GL_TEXTURE_BINDING_2D_ARRAY );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT );
      #endif
      #if defined( GL_MAX_DRAW_BUFFERS )
        ADD_CONST_INT( "GL_MAX_DRAW_BUFFERS", GL_MAX_DRAW_BUFFERS );
      #endif
      #if defined( GL_MODELVIEW21_ARB )
        ADD_CONST_INT( "GL_MODELVIEW21_ARB", GL_MODELVIEW21_ARB );
      #endif
      #if defined( GL_RENDERBUFFER_RED_SIZE_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_RED_SIZE_EXT", GL_RENDERBUFFER_RED_SIZE_EXT );
      #endif
      #if defined( GLX_BAD_SCREEN )
        ADD_CONST_INT( "GLX_BAD_SCREEN", GLX_BAD_SCREEN );
      #endif
      #if defined( GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE )
        ADD_CONST_INT( "GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE", GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE );
      #endif
      #if defined( GLEW_EXT_index_texture )
        ADD_CONST_INT( "GLEW_EXT_index_texture", GLEW_EXT_index_texture );
      #endif
      #if defined( GL_R32UI )
        ADD_CONST_INT( "GL_R32UI", GL_R32UI );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY", GL_SECONDARY_COLOR_ARRAY );
      #endif
      #if defined( GL_RGBA8_EXT )
        ADD_CONST_INT( "GL_RGBA8_EXT", GL_RGBA8_EXT );
      #endif
      #if defined( GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV )
        ADD_CONST_INT( "GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV", GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV );
      #endif
      #if defined( GLX_BAD_HYPERPIPE_CONFIG_SGIX )
        ADD_CONST_INT( "GLX_BAD_HYPERPIPE_CONFIG_SGIX", GLX_BAD_HYPERPIPE_CONFIG_SGIX );
      #endif
      #if defined( GL_CURRENT_INDEX )
        ADD_CONST_INT( "GL_CURRENT_INDEX", GL_CURRENT_INDEX );
      #endif
      #if defined( GL_ENV_SUBTRACT_EXT )
        ADD_CONST_INT( "GL_ENV_SUBTRACT_EXT", GL_ENV_SUBTRACT_EXT );
      #endif
      #if defined( GLX_DEPTH_SIZE )
        ADD_CONST_INT( "GLX_DEPTH_SIZE", GLX_DEPTH_SIZE );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BINDING_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BINDING_NV", GL_TRANSFORM_FEEDBACK_BINDING_NV );
      #endif
      #if defined( GL_BLEND_EQUATION_ALPHA_EXT )
        ADD_CONST_INT( "GL_BLEND_EQUATION_ALPHA_EXT", GL_BLEND_EQUATION_ALPHA_EXT );
      #endif
      #if defined( GL_COLOR_TABLE_ALPHA_SIZE )
        ADD_CONST_INT( "GL_COLOR_TABLE_ALPHA_SIZE", GL_COLOR_TABLE_ALPHA_SIZE );
      #endif
      #if defined( GL_E_TIMES_F_NV )
        ADD_CONST_INT( "GL_E_TIMES_F_NV", GL_E_TIMES_F_NV );
      #endif
      #if defined( GL_COLOR_ATTACHMENT9_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT9_EXT", GL_COLOR_ATTACHMENT9_EXT );
      #endif
      #if defined( GL_ALPHA16_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_ALPHA16_EXTENDED_RANGE_SGIX", GL_ALPHA16_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_TEXT_FRAGMENT_SHADER_ATI )
        ADD_CONST_INT( "GL_TEXT_FRAGMENT_SHADER_ATI", GL_TEXT_FRAGMENT_SHADER_ATI );
      #endif
      #if defined( GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB", GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB );
      #endif
      #if defined( GL_MAJOR_VERSION )
        ADD_CONST_INT( "GL_MAJOR_VERSION", GL_MAJOR_VERSION );
      #endif
      #if defined( GL_4PASS_1_SGIS )
        ADD_CONST_INT( "GL_4PASS_1_SGIS", GL_4PASS_1_SGIS );
      #endif
      #if defined( GL_INTENSITY16_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_INTENSITY16_EXTENDED_RANGE_SGIX", GL_INTENSITY16_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_REFLECTION_MAP )
        ADD_CONST_INT( "GL_REFLECTION_MAP", GL_REFLECTION_MAP );
      #endif
      #if defined( GL_LUMINANCE32UI_EXT )
        ADD_CONST_INT( "GL_LUMINANCE32UI_EXT", GL_LUMINANCE32UI_EXT );
      #endif
      #if defined( GL_BGR_INTEGER )
        ADD_CONST_INT( "GL_BGR_INTEGER", GL_BGR_INTEGER );
      #endif
      #if defined( GL_CONVOLUTION_HEIGHT_EXT )
        ADD_CONST_INT( "GL_CONVOLUTION_HEIGHT_EXT", GL_CONVOLUTION_HEIGHT_EXT );
      #endif
      #if defined( GL_MATRIX2_NV )
        ADD_CONST_INT( "GL_MATRIX2_NV", GL_MATRIX2_NV );
      #endif
      #if defined( GL_PROXY_TEXTURE_3D )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_3D", GL_PROXY_TEXTURE_3D );
      #endif
      #if defined( GL_PARALLEL_ARRAYS_INTEL )
        ADD_CONST_INT( "GL_PARALLEL_ARRAYS_INTEL", GL_PARALLEL_ARRAYS_INTEL );
      #endif
      #if defined( GLX_BAD_HYPERPIPE_SGIX )
        ADD_CONST_INT( "GLX_BAD_HYPERPIPE_SGIX", GLX_BAD_HYPERPIPE_SGIX );
      #endif
      #if defined( GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB", GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB );
      #endif
      #if defined( GL_UNIFORM_BUFFER_BINDING )
        ADD_CONST_INT( "GL_UNIFORM_BUFFER_BINDING", GL_UNIFORM_BUFFER_BINDING );
      #endif
      #if defined( GL_UNIFORM_TYPE )
        ADD_CONST_INT( "GL_UNIFORM_TYPE", GL_UNIFORM_TYPE );
      #endif
      #if defined( GL_DELETE_STATUS )
        ADD_CONST_INT( "GL_DELETE_STATUS", GL_DELETE_STATUS );
      #endif
      #if defined( GL_EXT_pixel_transform_color_table )
        ADD_CONST_INT( "GL_EXT_pixel_transform_color_table", GL_EXT_pixel_transform_color_table );
      #endif
      #if defined( GL_RENDERBUFFER_COVERAGE_SAMPLES_NV )
        ADD_CONST_INT( "GL_RENDERBUFFER_COVERAGE_SAMPLES_NV", GL_RENDERBUFFER_COVERAGE_SAMPLES_NV );
      #endif
      #if defined( GLX_SLOW_CONFIG )
        ADD_CONST_INT( "GLX_SLOW_CONFIG", GLX_SLOW_CONFIG );
      #endif
      #if defined( GL_POINT_BIT )
        ADD_CONST_INT( "GL_POINT_BIT", GL_POINT_BIT );
      #endif
      #if defined( GL_LUMINANCE8_ALPHA8_SNORM )
        ADD_CONST_INT( "GL_LUMINANCE8_ALPHA8_SNORM", GL_LUMINANCE8_ALPHA8_SNORM );
      #endif
      #if defined( GL_COLOR_ATTACHMENT13_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT13_EXT", GL_COLOR_ATTACHMENT13_EXT );
      #endif
      #if defined( GL_EXT_gpu_program_parameters )
        ADD_CONST_INT( "GL_EXT_gpu_program_parameters", GL_EXT_gpu_program_parameters );
      #endif
      #if defined( GL_DRAW_BUFFER7_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER7_ATI", GL_DRAW_BUFFER7_ATI );
      #endif
      #if defined( GL_SIGNED_LUMINANCE8_NV )
        ADD_CONST_INT( "GL_SIGNED_LUMINANCE8_NV", GL_SIGNED_LUMINANCE8_NV );
      #endif
      #if defined( GLX_OML_swap_method )
        ADD_CONST_INT( "GLX_OML_swap_method", GLX_OML_swap_method );
      #endif
      #if defined( GL_GLOBAL_ALPHA_SUN )
        ADD_CONST_INT( "GL_GLOBAL_ALPHA_SUN", GL_GLOBAL_ALPHA_SUN );
      #endif
      #if defined( GLEW_EXT_blend_minmax )
        ADD_CONST_INT( "GLEW_EXT_blend_minmax", GLEW_EXT_blend_minmax );
      #endif
      #if defined( GL_3D )
        ADD_CONST_INT( "GL_3D", GL_3D );
      #endif
      #if defined( GL_MAP_INVALIDATE_BUFFER_BIT )
        ADD_CONST_INT( "GL_MAP_INVALIDATE_BUFFER_BIT", GL_MAP_INVALIDATE_BUFFER_BIT );
      #endif
      #if defined( GL_MODELVIEW4_ARB )
        ADD_CONST_INT( "GL_MODELVIEW4_ARB", GL_MODELVIEW4_ARB );
      #endif
      #if defined( GL_UNSIGNED_INT_5_9_9_9_REV )
        ADD_CONST_INT( "GL_UNSIGNED_INT_5_9_9_9_REV", GL_UNSIGNED_INT_5_9_9_9_REV );
      #endif
      #if defined( GL_DEPTH_TEST )
        ADD_CONST_INT( "GL_DEPTH_TEST", GL_DEPTH_TEST );
      #endif
      #if defined( GL_OPERAND3_ALPHA_NV )
        ADD_CONST_INT( "GL_OPERAND3_ALPHA_NV", GL_OPERAND3_ALPHA_NV );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_POINTER )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_POINTER", GL_VERTEX_ATTRIB_ARRAY_POINTER );
      #endif
      #if defined( GL_MULTISAMPLE )
        ADD_CONST_INT( "GL_MULTISAMPLE", GL_MULTISAMPLE );
      #endif
      #if defined( GL_COLOR_TABLE_WIDTH )
        ADD_CONST_INT( "GL_COLOR_TABLE_WIDTH", GL_COLOR_TABLE_WIDTH );
      #endif
      #if defined( GL_TEXTURE_RED_TYPE )
        ADD_CONST_INT( "GL_TEXTURE_RED_TYPE", GL_TEXTURE_RED_TYPE );
      #endif
      #if defined( GLEW_3DFX_tbuffer )
        ADD_CONST_INT( "GLEW_3DFX_tbuffer", GLEW_3DFX_tbuffer );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_POINTER_EXT", GL_SECONDARY_COLOR_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN", GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN );
      #endif
      #if defined( GL_CONSTANT_ALPHA_EXT )
        ADD_CONST_INT( "GL_CONSTANT_ALPHA_EXT", GL_CONSTANT_ALPHA_EXT );
      #endif
      #if defined( GL_FUNC_SUBTRACT )
        ADD_CONST_INT( "GL_FUNC_SUBTRACT", GL_FUNC_SUBTRACT );
      #endif
      #if defined( GL_VERTEX_PROGRAM_TWO_SIDE )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_TWO_SIDE", GL_VERTEX_PROGRAM_TWO_SIDE );
      #endif
      #if defined( GL_SAMPLER_BUFFER )
        ADD_CONST_INT( "GL_SAMPLER_BUFFER", GL_SAMPLER_BUFFER );
      #endif
      #if defined( GLX_AUX3_EXT )
        ADD_CONST_INT( "GLX_AUX3_EXT", GLX_AUX3_EXT );
      #endif
      #if defined( GLEW_EXT_abgr )
        ADD_CONST_INT( "GLEW_EXT_abgr", GLEW_EXT_abgr );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING", GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING );
      #endif
      #if defined( GL_BUFFER_ACCESS_ARB )
        ADD_CONST_INT( "GL_BUFFER_ACCESS_ARB", GL_BUFFER_ACCESS_ARB );
      #endif
      #if defined( GL_CLAMP_TO_BORDER_SGIS )
        ADD_CONST_INT( "GL_CLAMP_TO_BORDER_SGIS", GL_CLAMP_TO_BORDER_SGIS );
      #endif
      #if defined( GL_CLAMP_TO_BORDER )
        ADD_CONST_INT( "GL_CLAMP_TO_BORDER", GL_CLAMP_TO_BORDER );
      #endif
      #if defined( GL_COLOR_ATTACHMENT15 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT15", GL_COLOR_ATTACHMENT15 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT14 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT14", GL_COLOR_ATTACHMENT14 );
      #endif
      #if defined( GL_DEPTH_RANGE )
        ADD_CONST_INT( "GL_DEPTH_RANGE", GL_DEPTH_RANGE );
      #endif
      #if defined( GL_COLOR_ATTACHMENT11 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT11", GL_COLOR_ATTACHMENT11 );
      #endif
      #if defined( GL_CLAMP_TO_EDGE )
        ADD_CONST_INT( "GL_CLAMP_TO_EDGE", GL_CLAMP_TO_EDGE );
      #endif
      #if defined( GL_COLOR_ATTACHMENT13 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT13", GL_COLOR_ATTACHMENT13 );
      #endif
      #if defined( GL_COLOR_ATTACHMENT12 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT12", GL_COLOR_ATTACHMENT12 );
      #endif
      #if defined( GL_NEAREST )
        ADD_CONST_INT( "GL_NEAREST", GL_NEAREST );
      #endif
      #if defined( GL_ALPHA16_SIGNED_SGIX )
        ADD_CONST_INT( "GL_ALPHA16_SIGNED_SGIX", GL_ALPHA16_SIGNED_SGIX );
      #endif
      #if defined( GL_COLOR_ARRAY_LIST_IBM )
        ADD_CONST_INT( "GL_COLOR_ARRAY_LIST_IBM", GL_COLOR_ARRAY_LIST_IBM );
      #endif
      #if defined( GL_MAX_RENDERBUFFER_SIZE_EXT )
        ADD_CONST_INT( "GL_MAX_RENDERBUFFER_SIZE_EXT", GL_MAX_RENDERBUFFER_SIZE_EXT );
      #endif
      #if defined( GL_TEXTURE_MAG_SIZE_NV )
        ADD_CONST_INT( "GL_TEXTURE_MAG_SIZE_NV", GL_TEXTURE_MAG_SIZE_NV );
      #endif
      #if defined( GL_MAX_RATIONAL_EVAL_ORDER_NV )
        ADD_CONST_INT( "GL_MAX_RATIONAL_EVAL_ORDER_NV", GL_MAX_RATIONAL_EVAL_ORDER_NV );
      #endif
      #if defined( GL_RENDERBUFFER_GREEN_SIZE )
        ADD_CONST_INT( "GL_RENDERBUFFER_GREEN_SIZE", GL_RENDERBUFFER_GREEN_SIZE );
      #endif
      #if defined( GL_INTENSITY_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_INTENSITY_EXTENDED_RANGE_SGIX", GL_INTENSITY_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_LUMINANCE16_EXTENDED_RANGE_SGIX )
        ADD_CONST_INT( "GL_LUMINANCE16_EXTENDED_RANGE_SGIX", GL_LUMINANCE16_EXTENDED_RANGE_SGIX );
      #endif
      #if defined( GL_PIXEL_MAP_S_TO_S_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_S_TO_S_SIZE", GL_PIXEL_MAP_S_TO_S_SIZE );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT );
      #endif
      #if defined( GL_SWIZZLE_STRQ_ATI )
        ADD_CONST_INT( "GL_SWIZZLE_STRQ_ATI", GL_SWIZZLE_STRQ_ATI );
      #endif
      #if defined( GLX_DEPTH_BUFFER_BIT )
        ADD_CONST_INT( "GLX_DEPTH_BUFFER_BIT", GLX_DEPTH_BUFFER_BIT );
      #endif
      #if defined( GL_FRONT_RIGHT )
        ADD_CONST_INT( "GL_FRONT_RIGHT", GL_FRONT_RIGHT );
      #endif
      #if defined( GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES )
        ADD_CONST_INT( "GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES", GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES );
      #endif
      #if defined( GL_UNSIGNED_INT_10_10_10_2_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_10_10_10_2_EXT", GL_UNSIGNED_INT_10_10_10_2_EXT );
      #endif
      #if defined( GL_RENDERBUFFER_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_EXT", GL_RENDERBUFFER_EXT );
      #endif
      #if defined( GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS", GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_DYNAMIC_DRAW_ARB )
        ADD_CONST_INT( "GL_DYNAMIC_DRAW_ARB", GL_DYNAMIC_DRAW_ARB );
      #endif
      #if defined( GL_CONTINUOUS_AMD )
        ADD_CONST_INT( "GL_CONTINUOUS_AMD", GL_CONTINUOUS_AMD );
      #endif
      #if defined( GL_POINT_SMOOTH )
        ADD_CONST_INT( "GL_POINT_SMOOTH", GL_POINT_SMOOTH );
      #endif
      #if defined( GL_DEPTH_CLEAR_VALUE )
        ADD_CONST_INT( "GL_DEPTH_CLEAR_VALUE", GL_DEPTH_CLEAR_VALUE );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT", GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT );
      #endif
      #if defined( GL_GEOMETRY_INPUT_TYPE )
        ADD_CONST_INT( "GL_GEOMETRY_INPUT_TYPE", GL_GEOMETRY_INPUT_TYPE );
      #endif
      #if defined( GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV", GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV );
      #endif
      #if defined( GL_PROGRAM_ERROR_STRING_NV )
        ADD_CONST_INT( "GL_PROGRAM_ERROR_STRING_NV", GL_PROGRAM_ERROR_STRING_NV );
      #endif
      #if defined( GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB", GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE );
      #endif
      #if defined( GLX_VERSION_1_4 )
        ADD_CONST_INT( "GLX_VERSION_1_4", GLX_VERSION_1_4 );
      #endif
      #if defined( GL_CURRENT_BIT )
        ADD_CONST_INT( "GL_CURRENT_BIT", GL_CURRENT_BIT );
      #endif
      #if defined( GL_PROXY_TEXTURE_COLOR_TABLE_SGI )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_COLOR_TABLE_SGI", GL_PROXY_TEXTURE_COLOR_TABLE_SGI );
      #endif
      #if defined( GLX_VERSION_1_0 )
        ADD_CONST_INT( "GLX_VERSION_1_0", GLX_VERSION_1_0 );
      #endif
      #if defined( GLX_VERSION_1_2 )
        ADD_CONST_INT( "GLX_VERSION_1_2", GLX_VERSION_1_2 );
      #endif
      #if defined( GL_RGBA32F_ARB )
        ADD_CONST_INT( "GL_RGBA32F_ARB", GL_RGBA32F_ARB );
      #endif
      #if defined( GL_RGB_SIGNED_SGIX )
        ADD_CONST_INT( "GL_RGB_SIGNED_SGIX", GL_RGB_SIGNED_SGIX );
      #endif
      #if defined( GL_DRAW_BUFFER9_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER9_ATI", GL_DRAW_BUFFER9_ATI );
      #endif
      #if defined( GL_BLEND_COLOR_EXT )
        ADD_CONST_INT( "GL_BLEND_COLOR_EXT", GL_BLEND_COLOR_EXT );
      #endif
      #if defined( GL_MIRRORED_REPEAT )
        ADD_CONST_INT( "GL_MIRRORED_REPEAT", GL_MIRRORED_REPEAT );
      #endif
      #if defined( GL_SIGNED_RGBA8_NV )
        ADD_CONST_INT( "GL_SIGNED_RGBA8_NV", GL_SIGNED_RGBA8_NV );
      #endif
      #if defined( GL_PRIMITIVE_RESTART_INDEX )
        ADD_CONST_INT( "GL_PRIMITIVE_RESTART_INDEX", GL_PRIMITIVE_RESTART_INDEX );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT", GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT );
      #endif
      #if defined( GL_RESAMPLE_DECIMATE_SGIX )
        ADD_CONST_INT( "GL_RESAMPLE_DECIMATE_SGIX", GL_RESAMPLE_DECIMATE_SGIX );
      #endif
      #if defined( GL_MATRIX2_ARB )
        ADD_CONST_INT( "GL_MATRIX2_ARB", GL_MATRIX2_ARB );
      #endif
      #if defined( GL_ONE_MINUS_DST_COLOR )
        ADD_CONST_INT( "GL_ONE_MINUS_DST_COLOR", GL_ONE_MINUS_DST_COLOR );
      #endif
      #if defined( GL_LUMINANCE_SIGNED_SGIX )
        ADD_CONST_INT( "GL_LUMINANCE_SIGNED_SGIX", GL_LUMINANCE_SIGNED_SGIX );
      #endif
      #if defined( GL_UNDEFINED_APPLE )
        ADD_CONST_INT( "GL_UNDEFINED_APPLE", GL_UNDEFINED_APPLE );
      #endif
      #if defined( GL_KTX_BACK_REGION )
        ADD_CONST_INT( "GL_KTX_BACK_REGION", GL_KTX_BACK_REGION );
      #endif
      #if defined( GL_ACCUM_ALPHA_BITS )
        ADD_CONST_INT( "GL_ACCUM_ALPHA_BITS", GL_ACCUM_ALPHA_BITS );
      #endif
      #if defined( GLX_AUX_BUFFERS_BIT )
        ADD_CONST_INT( "GLX_AUX_BUFFERS_BIT", GLX_AUX_BUFFERS_BIT );
      #endif
      #if defined( GL_TEXTURE19_ARB )
        ADD_CONST_INT( "GL_TEXTURE19_ARB", GL_TEXTURE19_ARB );
      #endif
      #if defined( GL_NUM_INSTRUCTIONS_TOTAL_ATI )
        ADD_CONST_INT( "GL_NUM_INSTRUCTIONS_TOTAL_ATI", GL_NUM_INSTRUCTIONS_TOTAL_ATI );
      #endif
      #if defined( GL_POINT_SIZE_MAX_EXT )
        ADD_CONST_INT( "GL_POINT_SIZE_MAX_EXT", GL_POINT_SIZE_MAX_EXT );
      #endif
      #if defined( GL_COLOR_BUFFER_BIT )
        ADD_CONST_INT( "GL_COLOR_BUFFER_BIT", GL_COLOR_BUFFER_BIT );
      #endif
      #if defined( GLX_FLOAT_COMPONENTS_NV )
        ADD_CONST_INT( "GLX_FLOAT_COMPONENTS_NV", GLX_FLOAT_COMPONENTS_NV );
      #endif
      #if defined( GL_UNPACK_RESAMPLE_SGIX )
        ADD_CONST_INT( "GL_UNPACK_RESAMPLE_SGIX", GL_UNPACK_RESAMPLE_SGIX );
      #endif
      #if defined( GL_SPOT_CUTOFF )
        ADD_CONST_INT( "GL_SPOT_CUTOFF", GL_SPOT_CUTOFF );
      #endif
      #if defined( GL_COLOR_FLOAT_APPLE )
        ADD_CONST_INT( "GL_COLOR_FLOAT_APPLE", GL_COLOR_FLOAT_APPLE );
      #endif
      #if defined( GL_SAMPLER_2D )
        ADD_CONST_INT( "GL_SAMPLER_2D", GL_SAMPLER_2D );
      #endif
      #if defined( GL_INVALID_VALUE )
        ADD_CONST_INT( "GL_INVALID_VALUE", GL_INVALID_VALUE );
      #endif
      #if defined( GL_COLOR_TABLE_FORMAT_EXT )
        ADD_CONST_INT( "GL_COLOR_TABLE_FORMAT_EXT", GL_COLOR_TABLE_FORMAT_EXT );
      #endif
      #if defined( GLX_AUX7_ATI )
        ADD_CONST_INT( "GLX_AUX7_ATI", GLX_AUX7_ATI );
      #endif
      #if defined( GL_NEAREST_MIPMAP_NEAREST )
        ADD_CONST_INT( "GL_NEAREST_MIPMAP_NEAREST", GL_NEAREST_MIPMAP_NEAREST );
      #endif
      #if defined( GL_COMPRESSED_SLUMINANCE_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SLUMINANCE_EXT", GL_COMPRESSED_SLUMINANCE_EXT );
      #endif
      #if defined( GL_SLUMINANCE8_EXT )
        ADD_CONST_INT( "GL_SLUMINANCE8_EXT", GL_SLUMINANCE8_EXT );
      #endif
      #if defined( GL_R8I )
        ADD_CONST_INT( "GL_R8I", GL_R8I );
      #endif
      #if defined( GLEW_S3_s3tc )
        ADD_CONST_INT( "GLEW_S3_s3tc", GLEW_S3_s3tc );
      #endif
      #if defined( GL_ELEMENT_ARRAY_BUFFER_ARB )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_BUFFER_ARB", GL_ELEMENT_ARRAY_BUFFER_ARB );
      #endif
      #if defined( GL_SWIZZLE_STR_ATI )
        ADD_CONST_INT( "GL_SWIZZLE_STR_ATI", GL_SWIZZLE_STR_ATI );
      #endif
      #if defined( GL_CONTEXT_COMPATIBILITY_PROFILE_BIT )
        ADD_CONST_INT( "GL_CONTEXT_COMPATIBILITY_PROFILE_BIT", GL_CONTEXT_COMPATIBILITY_PROFILE_BIT );
      #endif
      #if defined( GL_SINGLE_COLOR )
        ADD_CONST_INT( "GL_SINGLE_COLOR", GL_SINGLE_COLOR );
      #endif
      #if defined( GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB", GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB );
      #endif
      #if defined( GL_UNPACK_SKIP_IMAGES_EXT )
        ADD_CONST_INT( "GL_UNPACK_SKIP_IMAGES_EXT", GL_UNPACK_SKIP_IMAGES_EXT );
      #endif
      #if defined( GLX_TRUE_COLOR_EXT )
        ADD_CONST_INT( "GLX_TRUE_COLOR_EXT", GLX_TRUE_COLOR_EXT );
      #endif
      #if defined( GL_FLOAT_VEC3_ARB )
        ADD_CONST_INT( "GL_FLOAT_VEC3_ARB", GL_FLOAT_VEC3_ARB );
      #endif
      #if defined( GLX_RENDER_TYPE )
        ADD_CONST_INT( "GLX_RENDER_TYPE", GLX_RENDER_TYPE );
      #endif
      #if defined( GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY", GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB9_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB9_4_NV", GL_MAP2_VERTEX_ATTRIB9_4_NV );
      #endif
      #if defined( GLX_BIND_TO_MIPMAP_TEXTURE_EXT )
        ADD_CONST_INT( "GLX_BIND_TO_MIPMAP_TEXTURE_EXT", GLX_BIND_TO_MIPMAP_TEXTURE_EXT );
      #endif
      #if defined( GL_ELEMENT_ARRAY_POINTER_APPLE )
        ADD_CONST_INT( "GL_ELEMENT_ARRAY_POINTER_APPLE", GL_ELEMENT_ARRAY_POINTER_APPLE );
      #endif
      #if defined( GL_COLOR_TABLE_WIDTH_EXT )
        ADD_CONST_INT( "GL_COLOR_TABLE_WIDTH_EXT", GL_COLOR_TABLE_WIDTH_EXT );
      #endif
      #if defined( GL_RGBA8I_EXT )
        ADD_CONST_INT( "GL_RGBA8I_EXT", GL_RGBA8I_EXT );
      #endif
      #if defined( GLX_TRANSPARENT_RGB )
        ADD_CONST_INT( "GLX_TRANSPARENT_RGB", GLX_TRANSPARENT_RGB );
      #endif
      #if defined( GL_MATRIX3_ARB )
        ADD_CONST_INT( "GL_MATRIX3_ARB", GL_MATRIX3_ARB );
      #endif
      #if defined( GL_MAT_SHININESS_BIT_PGI )
        ADD_CONST_INT( "GL_MAT_SHININESS_BIT_PGI", GL_MAT_SHININESS_BIT_PGI );
      #endif
      #if defined( GL_INTENSITY_FLOAT32_ATI )
        ADD_CONST_INT( "GL_INTENSITY_FLOAT32_ATI", GL_INTENSITY_FLOAT32_ATI );
      #endif
      #if defined( GLX_MIN_RED_SGIS )
        ADD_CONST_INT( "GLX_MIN_RED_SGIS", GLX_MIN_RED_SGIS );
      #endif
      #if defined( GL_EXT_scene_marker )
        ADD_CONST_INT( "GL_EXT_scene_marker", GL_EXT_scene_marker );
      #endif
      #if defined( GLX_VISUAL_ID )
        ADD_CONST_INT( "GLX_VISUAL_ID", GLX_VISUAL_ID );
      #endif
      #if defined( GLX_COLOR_INDEX_TYPE_SGIX )
        ADD_CONST_INT( "GLX_COLOR_INDEX_TYPE_SGIX", GLX_COLOR_INDEX_TYPE_SGIX );
      #endif
      #if defined( GL_AND_INVERTED )
        ADD_CONST_INT( "GL_AND_INVERTED", GL_AND_INVERTED );
      #endif
      #if defined( GL_TEXTURE_POINT_SPRITE_ATIX )
        ADD_CONST_INT( "GL_TEXTURE_POINT_SPRITE_ATIX", GL_TEXTURE_POINT_SPRITE_ATIX );
      #endif
      #if defined( GL_ACCUM_BLUE_BITS )
        ADD_CONST_INT( "GL_ACCUM_BLUE_BITS", GL_ACCUM_BLUE_BITS );
      #endif
      #if defined( GL_CULL_FACE )
        ADD_CONST_INT( "GL_CULL_FACE", GL_CULL_FACE );
      #endif
      #if defined( GLEW_EXT_framebuffer_multisample )
        ADD_CONST_INT( "GLEW_EXT_framebuffer_multisample", GLEW_EXT_framebuffer_multisample );
      #endif
      #if defined( GL_FRAMEBUFFER_SRGB )
        ADD_CONST_INT( "GL_FRAMEBUFFER_SRGB", GL_FRAMEBUFFER_SRGB );
      #endif
      #if defined( GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB )
        ADD_CONST_INT( "GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB", GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_TYPE )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_TYPE", GL_SECONDARY_COLOR_ARRAY_TYPE );
      #endif
      #if defined( GL_EXT_timer_query )
        ADD_CONST_INT( "GL_EXT_timer_query", GL_EXT_timer_query );
      #endif
      #if defined( GL_BUMP_ENVMAP_ATI )
        ADD_CONST_INT( "GL_BUMP_ENVMAP_ATI", GL_BUMP_ENVMAP_ATI );
      #endif
      #if defined( GL_FOG_OFFSET_VALUE_SGIX )
        ADD_CONST_INT( "GL_FOG_OFFSET_VALUE_SGIX", GL_FOG_OFFSET_VALUE_SGIX );
      #endif
      #if defined( GL_POLYGON_OFFSET_POINT )
        ADD_CONST_INT( "GL_POLYGON_OFFSET_POINT", GL_POLYGON_OFFSET_POINT );
      #endif
      #if defined( GL_LUMINANCE12_EXT )
        ADD_CONST_INT( "GL_LUMINANCE12_EXT", GL_LUMINANCE12_EXT );
      #endif
      #if defined( GL_COMBINE_ALPHA )
        ADD_CONST_INT( "GL_COMBINE_ALPHA", GL_COMBINE_ALPHA );
      #endif
      #if defined( GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX", GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX );
      #endif
      #if defined( GL_RIGHT )
        ADD_CONST_INT( "GL_RIGHT", GL_RIGHT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD31_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD31_EXT", GL_OUTPUT_TEXTURE_COORD31_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_2D_ARRAY )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY", GL_UNSIGNED_INT_SAMPLER_2D_ARRAY );
      #endif
      #if defined( GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB )
        ADD_CONST_INT( "GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB", GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE", GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE );
      #endif
      #if defined( GL_2PASS_0_EXT )
        ADD_CONST_INT( "GL_2PASS_0_EXT", GL_2PASS_0_EXT );
      #endif
      #if defined( GL_QUARTER_BIT_ATI )
        ADD_CONST_INT( "GL_QUARTER_BIT_ATI", GL_QUARTER_BIT_ATI );
      #endif
      #if defined( GL_ALPHA8UI_EXT )
        ADD_CONST_INT( "GL_ALPHA8UI_EXT", GL_ALPHA8UI_EXT );
      #endif
      #if defined( GL_DEPTH_COMPONENT16 )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT16", GL_DEPTH_COMPONENT16 );
      #endif
      #if defined( GL_EXT_bindable_uniform )
        ADD_CONST_INT( "GL_EXT_bindable_uniform", GL_EXT_bindable_uniform );
      #endif
      #if defined( GL_MAX_SAMPLE_MASK_WORDS )
        ADD_CONST_INT( "GL_MAX_SAMPLE_MASK_WORDS", GL_MAX_SAMPLE_MASK_WORDS );
      #endif
      #if defined( GL_UNSIGNALED )
        ADD_CONST_INT( "GL_UNSIGNALED", GL_UNSIGNALED );
      #endif
      #if defined( GLEW_ATIX_vertex_shader_output_point_size )
        ADD_CONST_INT( "GLEW_ATIX_vertex_shader_output_point_size", GLEW_ATIX_vertex_shader_output_point_size );
      #endif
      #if defined( GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT )
        ADD_CONST_INT( "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT", GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT );
      #endif
      #if defined( GL_RGB32I )
        ADD_CONST_INT( "GL_RGB32I", GL_RGB32I );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD26_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD26_EXT", GL_OUTPUT_TEXTURE_COORD26_EXT );
      #endif
      #if defined( GLX_CUBE_MAP_FACE_ATI )
        ADD_CONST_INT( "GLX_CUBE_MAP_FACE_ATI", GLX_CUBE_MAP_FACE_ATI );
      #endif
      #if defined( GL_MATRIX13_ARB )
        ADD_CONST_INT( "GL_MATRIX13_ARB", GL_MATRIX13_ARB );
      #endif
      #if defined( GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH )
        ADD_CONST_INT( "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH", GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH );
      #endif
      #if defined( GL_BGRA_INTEGER )
        ADD_CONST_INT( "GL_BGRA_INTEGER", GL_BGRA_INTEGER );
      #endif
      #if defined( GL_ALPHA12_EXT )
        ADD_CONST_INT( "GL_ALPHA12_EXT", GL_ALPHA12_EXT );
      #endif
      #if defined( GL_R1UI_N3F_V3F_SUN )
        ADD_CONST_INT( "GL_R1UI_N3F_V3F_SUN", GL_R1UI_N3F_V3F_SUN );
      #endif
      #if defined( GL_RGB32F )
        ADD_CONST_INT( "GL_RGB32F", GL_RGB32F );
      #endif
      #if defined( GL_COLOR_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_COLOR_ARRAY_BUFFER_BINDING_ARB", GL_COLOR_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_MODELVIEW1_ARB )
        ADD_CONST_INT( "GL_MODELVIEW1_ARB", GL_MODELVIEW1_ARB );
      #endif
      #if defined( GL_ONE_MINUS_SRC_ALPHA )
        ADD_CONST_INT( "GL_ONE_MINUS_SRC_ALPHA", GL_ONE_MINUS_SRC_ALPHA );
      #endif
      #if defined( GL_COMPRESSED_SLUMINANCE_ALPHA_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SLUMINANCE_ALPHA_EXT", GL_COMPRESSED_SLUMINANCE_ALPHA_EXT );
      #endif
      #if defined( GL_PROGRAM_BINDING_ARB )
        ADD_CONST_INT( "GL_PROGRAM_BINDING_ARB", GL_PROGRAM_BINDING_ARB );
      #endif
      #if defined( GL_SOURCE2_RGB_EXT )
        ADD_CONST_INT( "GL_SOURCE2_RGB_EXT", GL_SOURCE2_RGB_EXT );
      #endif
      #if defined( GL_TEXTURE_BINDING_CUBE_MAP_ARB )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_CUBE_MAP_ARB", GL_TEXTURE_BINDING_CUBE_MAP_ARB );
      #endif
      #if defined( GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT", GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT );
      #endif
      #if defined( GLX_PBUFFER_BIT_SGIX )
        ADD_CONST_INT( "GLX_PBUFFER_BIT_SGIX", GLX_PBUFFER_BIT_SGIX );
      #endif
      #if defined( GL_MAX_INTENSITY_SGIS )
        ADD_CONST_INT( "GL_MAX_INTENSITY_SGIS", GL_MAX_INTENSITY_SGIS );
      #endif
      #if defined( GL_PIXEL_MAP_I_TO_G_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_I_TO_G_SIZE", GL_PIXEL_MAP_I_TO_G_SIZE );
      #endif
      #if defined( GL_MAP2_GRID_SEGMENTS )
        ADD_CONST_INT( "GL_MAP2_GRID_SEGMENTS", GL_MAP2_GRID_SEGMENTS );
      #endif
      #if defined( GL_PROGRAM_POINT_SIZE )
        ADD_CONST_INT( "GL_PROGRAM_POINT_SIZE", GL_PROGRAM_POINT_SIZE );
      #endif
      #if defined( GL_EXT_texture_perturb_normal )
        ADD_CONST_INT( "GL_EXT_texture_perturb_normal", GL_EXT_texture_perturb_normal );
      #endif
      #if defined( GL_POST_CONVOLUTION_BLUE_SCALE_EXT )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_BLUE_SCALE_EXT", GL_POST_CONVOLUTION_BLUE_SCALE_EXT );
      #endif
      #if defined( GL_INDEX_ARRAY_ADDRESS_NV )
        ADD_CONST_INT( "GL_INDEX_ARRAY_ADDRESS_NV", GL_INDEX_ARRAY_ADDRESS_NV );
      #endif
      #if defined( GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT )
        ADD_CONST_INT( "GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT", GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_VEC2_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_VEC2_EXT", GL_UNSIGNED_INT_VEC2_EXT );
      #endif
      #if defined( GL_RGB4_EXT )
        ADD_CONST_INT( "GL_RGB4_EXT", GL_RGB4_EXT );
      #endif
      #if defined( GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB )
        ADD_CONST_INT( "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB", GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB );
      #endif
      #if defined( GLX_BLUE_SIZE )
        ADD_CONST_INT( "GLX_BLUE_SIZE", GLX_BLUE_SIZE );
      #endif
      #if defined( GL_DISCRETE_AMD )
        ADD_CONST_INT( "GL_DISCRETE_AMD", GL_DISCRETE_AMD );
      #endif
      #if defined( GLX_MAX_GREEN_SGIS )
        ADD_CONST_INT( "GLX_MAX_GREEN_SGIS", GLX_MAX_GREEN_SGIS );
      #endif
      #if defined( GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV", GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV );
      #endif
      #if defined( GL_ALPHA16_EXT )
        ADD_CONST_INT( "GL_ALPHA16_EXT", GL_ALPHA16_EXT );
      #endif
      #if defined( GL_EYE_RADIAL_NV )
        ADD_CONST_INT( "GL_EYE_RADIAL_NV", GL_EYE_RADIAL_NV );
      #endif
      #if defined( GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX )
        ADD_CONST_INT( "GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX", GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX );
      #endif
      #if defined( GL_DYNAMIC_COPY_ARB )
        ADD_CONST_INT( "GL_DYNAMIC_COPY_ARB", GL_DYNAMIC_COPY_ARB );
      #endif
      #if defined( GL_MAP1_GRID_SEGMENTS )
        ADD_CONST_INT( "GL_MAP1_GRID_SEGMENTS", GL_MAP1_GRID_SEGMENTS );
      #endif
      #if defined( GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT )
        ADD_CONST_INT( "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT", GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT );
      #endif
      #if defined( GL_ATTRIB_STACK_DEPTH )
        ADD_CONST_INT( "GL_ATTRIB_STACK_DEPTH", GL_ATTRIB_STACK_DEPTH );
      #endif
      #if defined( GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV", GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV );
      #endif
      #if defined( GL_FLOAT_MAT4_ARB )
        ADD_CONST_INT( "GL_FLOAT_MAT4_ARB", GL_FLOAT_MAT4_ARB );
      #endif
      #if defined( GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP )
        ADD_CONST_INT( "GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP", GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP );
      #endif
      #if defined( GL_UNSIGNED_INT_S8_S8_8_8_NV )
        ADD_CONST_INT( "GL_UNSIGNED_INT_S8_S8_8_8_NV", GL_UNSIGNED_INT_S8_S8_8_8_NV );
      #endif
      #if defined( GL_MAX_RECTANGLE_TEXTURE_SIZE_NV )
        ADD_CONST_INT( "GL_MAX_RECTANGLE_TEXTURE_SIZE_NV", GL_MAX_RECTANGLE_TEXTURE_SIZE_NV );
      #endif
      #if defined( GL_PHONG_HINT_WIN )
        ADD_CONST_INT( "GL_PHONG_HINT_WIN", GL_PHONG_HINT_WIN );
      #endif
      #if defined( GL_MAP2_BINORMAL_EXT )
        ADD_CONST_INT( "GL_MAP2_BINORMAL_EXT", GL_MAP2_BINORMAL_EXT );
      #endif
      #if defined( GL_TEXTURE_LUMINANCE_SIZE )
        ADD_CONST_INT( "GL_TEXTURE_LUMINANCE_SIZE", GL_TEXTURE_LUMINANCE_SIZE );
      #endif
      #if defined( GL_BLUE_BIAS )
        ADD_CONST_INT( "GL_BLUE_BIAS", GL_BLUE_BIAS );
      #endif
      #if defined( GL_COLOR_ATTACHMENT0_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT0_EXT", GL_COLOR_ATTACHMENT0_EXT );
      #endif
      #if defined( GLX_SWAP_UNDEFINED_OML )
        ADD_CONST_INT( "GLX_SWAP_UNDEFINED_OML", GLX_SWAP_UNDEFINED_OML );
      #endif
      #if defined( GLXEW_OML_sync_control )
        ADD_CONST_INT( "GLXEW_OML_sync_control", GLXEW_OML_sync_control );
      #endif
      #if defined( GL_MAX_FRAGMENT_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS", GL_MAX_FRAGMENT_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_UNIFORM_BLOCK_NAME_LENGTH )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_NAME_LENGTH", GL_UNIFORM_BLOCK_NAME_LENGTH );
      #endif
      #if defined( GLEW_EXT_vertex_weighting )
        ADD_CONST_INT( "GLEW_EXT_vertex_weighting", GLEW_EXT_vertex_weighting );
      #endif
      #if defined( GL_FRAMEBUFFER_DEFAULT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_DEFAULT", GL_FRAMEBUFFER_DEFAULT );
      #endif
      #if defined( GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL", GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL );
      #endif
      #if defined( GL_EXT_pixel_buffer_object )
        ADD_CONST_INT( "GL_EXT_pixel_buffer_object", GL_EXT_pixel_buffer_object );
      #endif
      #if defined( GL_TEXTURE_BINDING_RECTANGLE )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_RECTANGLE", GL_TEXTURE_BINDING_RECTANGLE );
      #endif
      #if defined( GL_LINE_SMOOTH_HINT )
        ADD_CONST_INT( "GL_LINE_SMOOTH_HINT", GL_LINE_SMOOTH_HINT );
      #endif
      #if defined( GL_COLOR_ATTACHMENT10 )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT10", GL_COLOR_ATTACHMENT10 );
      #endif
      #if defined( GL_FRONT )
        ADD_CONST_INT( "GL_FRONT", GL_FRONT );
      #endif
      #if defined( GL_UNSIGNED_INT_5_9_9_9_REV_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_5_9_9_9_REV_EXT", GL_UNSIGNED_INT_5_9_9_9_REV_EXT );
      #endif
      #if defined( GLEW_EXT_blend_subtract )
        ADD_CONST_INT( "GLEW_EXT_blend_subtract", GLEW_EXT_blend_subtract );
      #endif
      #if defined( GL_CULL_VERTEX_IBM )
        ADD_CONST_INT( "GL_CULL_VERTEX_IBM", GL_CULL_VERTEX_IBM );
      #endif
      #if defined( GL_SELECT )
        ADD_CONST_INT( "GL_SELECT", GL_SELECT );
      #endif
      #if defined( GL_AMBIENT )
        ADD_CONST_INT( "GL_AMBIENT", GL_AMBIENT );
      #endif
      #if defined( GLX_PBUFFER_BIT )
        ADD_CONST_INT( "GLX_PBUFFER_BIT", GLX_PBUFFER_BIT );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_LENGTH_NV )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_LENGTH_NV", GL_SECONDARY_COLOR_ARRAY_LENGTH_NV );
      #endif
      #if defined( GL_TRIANGLE_MESH_SUN )
        ADD_CONST_INT( "GL_TRIANGLE_MESH_SUN", GL_TRIANGLE_MESH_SUN );
      #endif
      #if defined( GL_EXT_blend_minmax )
        ADD_CONST_INT( "GL_EXT_blend_minmax", GL_EXT_blend_minmax );
      #endif
      #if defined( GL_INTENSITY16F_ARB )
        ADD_CONST_INT( "GL_INTENSITY16F_ARB", GL_INTENSITY16F_ARB );
      #endif
      #if defined( GL_NUM_EXTENSIONS )
        ADD_CONST_INT( "GL_NUM_EXTENSIONS", GL_NUM_EXTENSIONS );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV", GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV );
      #endif
      #if defined( GL_PURGEABLE_APPLE )
        ADD_CONST_INT( "GL_PURGEABLE_APPLE", GL_PURGEABLE_APPLE );
      #endif
      #if defined( GL_FRAMEBUFFER_BINDING )
        ADD_CONST_INT( "GL_FRAMEBUFFER_BINDING", GL_FRAMEBUFFER_BINDING );
      #endif
      #if defined( GL_NORMAL_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_BUFFER_BINDING", GL_NORMAL_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB4_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB4_NV", GL_EVAL_VERTEX_ATTRIB4_NV );
      #endif
      #if defined( GLX_WINDOW_BIT )
        ADD_CONST_INT( "GLX_WINDOW_BIT", GLX_WINDOW_BIT );
      #endif
      #if defined( GL_SET )
        ADD_CONST_INT( "GL_SET", GL_SET );
      #endif
      #if defined( GL_BUFFER_GPU_ADDRESS_NV )
        ADD_CONST_INT( "GL_BUFFER_GPU_ADDRESS_NV", GL_BUFFER_GPU_ADDRESS_NV );
      #endif
      #if defined( GLX_VERSION )
        ADD_CONST_INT( "GLX_VERSION", GLX_VERSION );
      #endif
      #if defined( GLX_AUX_BUFFERS_BIT_SGIX )
        ADD_CONST_INT( "GLX_AUX_BUFFERS_BIT_SGIX", GLX_AUX_BUFFERS_BIT_SGIX );
      #endif
      #if defined( GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV", GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV );
      #endif
      #if defined( GLX_PSEUDO_COLOR )
        ADD_CONST_INT( "GLX_PSEUDO_COLOR", GLX_PSEUDO_COLOR );
      #endif
      #if defined( GL_RED_MIN_CLAMP_INGR )
        ADD_CONST_INT( "GL_RED_MIN_CLAMP_INGR", GL_RED_MIN_CLAMP_INGR );
      #endif
      #if defined( GL_POST_CONVOLUTION_RED_BIAS_EXT )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_RED_BIAS_EXT", GL_POST_CONVOLUTION_RED_BIAS_EXT );
      #endif
      #if defined( GL_MAT_AMBIENT_BIT_PGI )
        ADD_CONST_INT( "GL_MAT_AMBIENT_BIT_PGI", GL_MAT_AMBIENT_BIT_PGI );
      #endif
      #if defined( GL_DEPTH_FUNC )
        ADD_CONST_INT( "GL_DEPTH_FUNC", GL_DEPTH_FUNC );
      #endif
      #if defined( GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX )
        ADD_CONST_INT( "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX", GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX );
      #endif
      #if defined( GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT", GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT );
      #endif
      #if defined( GL_RESAMPLE_REPLICATE_OML )
        ADD_CONST_INT( "GL_RESAMPLE_REPLICATE_OML", GL_RESAMPLE_REPLICATE_OML );
      #endif
      #if defined( GL_INVALID_ENUM )
        ADD_CONST_INT( "GL_INVALID_ENUM", GL_INVALID_ENUM );
      #endif
      #if defined( GL_HALF_APPLE )
        ADD_CONST_INT( "GL_HALF_APPLE", GL_HALF_APPLE );
      #endif
      #if defined( GL_STENCIL_BACK_VALUE_MASK )
        ADD_CONST_INT( "GL_STENCIL_BACK_VALUE_MASK", GL_STENCIL_BACK_VALUE_MASK );
      #endif
      #if defined( GL_COLOR_MATRIX_STACK_DEPTH )
        ADD_CONST_INT( "GL_COLOR_MATRIX_STACK_DEPTH", GL_COLOR_MATRIX_STACK_DEPTH );
      #endif
      #if defined( GL_NUM_FILL_STREAMS_NV )
        ADD_CONST_INT( "GL_NUM_FILL_STREAMS_NV", GL_NUM_FILL_STREAMS_NV );
      #endif
      #if defined( GL_MATRIX5_ARB )
        ADD_CONST_INT( "GL_MATRIX5_ARB", GL_MATRIX5_ARB );
      #endif
      #if defined( GL_DEPTH_BUFFER_FLOAT_MODE_NV )
        ADD_CONST_INT( "GL_DEPTH_BUFFER_FLOAT_MODE_NV", GL_DEPTH_BUFFER_FLOAT_MODE_NV );
      #endif
      #if defined( GL_DEPTH_COMPONENT )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT", GL_DEPTH_COMPONENT );
      #endif
      #if defined( GL_SPARE0_NV )
        ADD_CONST_INT( "GL_SPARE0_NV", GL_SPARE0_NV );
      #endif
      #if defined( GL_FOG_START )
        ADD_CONST_INT( "GL_FOG_START", GL_FOG_START );
      #endif
      #if defined( GL_WAIT_FAILED )
        ADD_CONST_INT( "GL_WAIT_FAILED", GL_WAIT_FAILED );
      #endif
      #if defined( GL_DECR_WRAP_EXT )
        ADD_CONST_INT( "GL_DECR_WRAP_EXT", GL_DECR_WRAP_EXT );
      #endif
      #if defined( GL_READ_PIXEL_DATA_RANGE_POINTER_NV )
        ADD_CONST_INT( "GL_READ_PIXEL_DATA_RANGE_POINTER_NV", GL_READ_PIXEL_DATA_RANGE_POINTER_NV );
      #endif
      #if defined( GL_OBJECT_BUFFER_USAGE_ATI )
        ADD_CONST_INT( "GL_OBJECT_BUFFER_USAGE_ATI", GL_OBJECT_BUFFER_USAGE_ATI );
      #endif
      #if defined( GL_PROGRAM_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_INSTRUCTIONS_ARB", GL_PROGRAM_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_ARRAY_ELEMENT_LOCK_FIRST_EXT )
        ADD_CONST_INT( "GL_ARRAY_ELEMENT_LOCK_FIRST_EXT", GL_ARRAY_ELEMENT_LOCK_FIRST_EXT );
      #endif
      #if defined( GL_PREFER_DOUBLEBUFFER_HINT_PGI )
        ADD_CONST_INT( "GL_PREFER_DOUBLEBUFFER_HINT_PGI", GL_PREFER_DOUBLEBUFFER_HINT_PGI );
      #endif
      #if defined( GL_LUMINANCE4_ALPHA4_EXT )
        ADD_CONST_INT( "GL_LUMINANCE4_ALPHA4_EXT", GL_LUMINANCE4_ALPHA4_EXT );
      #endif
      #if defined( GL_COMPARE_REF_TO_TEXTURE )
        ADD_CONST_INT( "GL_COMPARE_REF_TO_TEXTURE", GL_COMPARE_REF_TO_TEXTURE );
      #endif
      #if defined( GL_PROJECTION_STACK_DEPTH )
        ADD_CONST_INT( "GL_PROJECTION_STACK_DEPTH", GL_PROJECTION_STACK_DEPTH );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE", GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE );
      #endif
      #if defined( GL_TRUE )
        ADD_CONST_INT( "GL_TRUE", GL_TRUE );
      #endif
      #if defined( GL_TEXTURE_MIN_FILTER )
        ADD_CONST_INT( "GL_TEXTURE_MIN_FILTER", GL_TEXTURE_MIN_FILTER );
      #endif
      #if defined( GL_TEXTURE_BINDING_1D_ARRAY_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_1D_ARRAY_EXT", GL_TEXTURE_BINDING_1D_ARRAY_EXT );
      #endif
      #if defined( GL_STACK_UNDERFLOW )
        ADD_CONST_INT( "GL_STACK_UNDERFLOW", GL_STACK_UNDERFLOW );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_TYPE_EXT )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_TYPE_EXT", GL_SECONDARY_COLOR_ARRAY_TYPE_EXT );
      #endif
      #if defined( GL_CONVOLUTION_FILTER_BIAS_EXT )
        ADD_CONST_INT( "GL_CONVOLUTION_FILTER_BIAS_EXT", GL_CONVOLUTION_FILTER_BIAS_EXT );
      #endif
      #if defined( GL_MULTISAMPLE_BIT_3DFX )
        ADD_CONST_INT( "GL_MULTISAMPLE_BIT_3DFX", GL_MULTISAMPLE_BIT_3DFX );
      #endif
      #if defined( GL_AUX0 )
        ADD_CONST_INT( "GL_AUX0", GL_AUX0 );
      #endif
      #if defined( GL_AUX3 )
        ADD_CONST_INT( "GL_AUX3", GL_AUX3 );
      #endif
      #if defined( GL_AUX2 )
        ADD_CONST_INT( "GL_AUX2", GL_AUX2 );
      #endif
      #if defined( GL_VERTEX_ARRAY_RANGE_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_RANGE_APPLE", GL_VERTEX_ARRAY_RANGE_APPLE );
      #endif
      #if defined( GL_MAP1_TANGENT_EXT )
        ADD_CONST_INT( "GL_MAP1_TANGENT_EXT", GL_MAP1_TANGENT_EXT );
      #endif
      #if defined( GL_COLOR_ATTACHMENT6_EXT )
        ADD_CONST_INT( "GL_COLOR_ATTACHMENT6_EXT", GL_COLOR_ATTACHMENT6_EXT );
      #endif
      #if defined( GL_DEPTH_STENCIL_ATTACHMENT )
        ADD_CONST_INT( "GL_DEPTH_STENCIL_ATTACHMENT", GL_DEPTH_STENCIL_ATTACHMENT );
      #endif
      #if defined( GL_PRIMARY_COLOR_ARB )
        ADD_CONST_INT( "GL_PRIMARY_COLOR_ARB", GL_PRIMARY_COLOR_ARB );
      #endif
      #if defined( GL_ADD )
        ADD_CONST_INT( "GL_ADD", GL_ADD );
      #endif
      #if defined( GL_OFFSET_TEXTURE_MATRIX_NV )
        ADD_CONST_INT( "GL_OFFSET_TEXTURE_MATRIX_NV", GL_OFFSET_TEXTURE_MATRIX_NV );
      #endif
      #if defined( GL_VERSION_1_2_DEPRECATED )
        ADD_CONST_INT( "GL_VERSION_1_2_DEPRECATED", GL_VERSION_1_2_DEPRECATED );
      #endif
      #if defined( GL_DOT_PRODUCT_TEXTURE_3D_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_TEXTURE_3D_NV", GL_DOT_PRODUCT_TEXTURE_3D_NV );
      #endif
      #if defined( GL_MODELVIEW_STACK_DEPTH )
        ADD_CONST_INT( "GL_MODELVIEW_STACK_DEPTH", GL_MODELVIEW_STACK_DEPTH );
      #endif
      #if defined( GL_INTERLACE_READ_INGR )
        ADD_CONST_INT( "GL_INTERLACE_READ_INGR", GL_INTERLACE_READ_INGR );
      #endif
      #if defined( GL_CONSERVE_MEMORY_HINT_PGI )
        ADD_CONST_INT( "GL_CONSERVE_MEMORY_HINT_PGI", GL_CONSERVE_MEMORY_HINT_PGI );
      #endif
      #if defined( GL_FLOAT_MAT4x3 )
        ADD_CONST_INT( "GL_FLOAT_MAT4x3", GL_FLOAT_MAT4x3 );
      #endif
      #if defined( GL_OP_MIN_EXT )
        ADD_CONST_INT( "GL_OP_MIN_EXT", GL_OP_MIN_EXT );
      #endif
      #if defined( GL_MIRRORED_REPEAT_ARB )
        ADD_CONST_INT( "GL_MIRRORED_REPEAT_ARB", GL_MIRRORED_REPEAT_ARB );
      #endif
      #if defined( GL_FLOAT_R32_NV )
        ADD_CONST_INT( "GL_FLOAT_R32_NV", GL_FLOAT_R32_NV );
      #endif
      #if defined( GL_COMBINER5_NV )
        ADD_CONST_INT( "GL_COMBINER5_NV", GL_COMBINER5_NV );
      #endif
      #if defined( GL_CND0_ATI )
        ADD_CONST_INT( "GL_CND0_ATI", GL_CND0_ATI );
      #endif
      #if defined( GL_UNPACK_ALIGNMENT )
        ADD_CONST_INT( "GL_UNPACK_ALIGNMENT", GL_UNPACK_ALIGNMENT );
      #endif
      #if defined( GL_PROXY_POST_CONVOLUTION_COLOR_TABLE )
        ADD_CONST_INT( "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE", GL_PROXY_POST_CONVOLUTION_COLOR_TABLE );
      #endif
      #if defined( GLX_MIN_ALPHA_SGIS )
        ADD_CONST_INT( "GLX_MIN_ALPHA_SGIS", GLX_MIN_ALPHA_SGIS );
      #endif
      #if defined( GL_TEXTURE_RECTANGLE_NV )
        ADD_CONST_INT( "GL_TEXTURE_RECTANGLE_NV", GL_TEXTURE_RECTANGLE_NV );
      #endif
      #if defined( GL_ATTRIB_ARRAY_SIZE_NV )
        ADD_CONST_INT( "GL_ATTRIB_ARRAY_SIZE_NV", GL_ATTRIB_ARRAY_SIZE_NV );
      #endif
      #if defined( GLX_ACCUM_RED_SIZE )
        ADD_CONST_INT( "GLX_ACCUM_RED_SIZE", GLX_ACCUM_RED_SIZE );
      #endif
      #if defined( GL_2PASS_1_SGIS )
        ADD_CONST_INT( "GL_2PASS_1_SGIS", GL_2PASS_1_SGIS );
      #endif
      #if defined( GL_WEIGHT_ARRAY_POINTER_ARB )
        ADD_CONST_INT( "GL_WEIGHT_ARRAY_POINTER_ARB", GL_WEIGHT_ARRAY_POINTER_ARB );
      #endif
      #if defined( GL_EXT_stencil_wrap )
        ADD_CONST_INT( "GL_EXT_stencil_wrap", GL_EXT_stencil_wrap );
      #endif
      #if defined( GL_RGB32F_ARB )
        ADD_CONST_INT( "GL_RGB32F_ARB", GL_RGB32F_ARB );
      #endif
      #if defined( GL_RG8_SNORM )
        ADD_CONST_INT( "GL_RG8_SNORM", GL_RG8_SNORM );
      #endif
      #if defined( GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT", GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB", GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB );
      #endif
      #if defined( GL_MATRIX28_ARB )
        ADD_CONST_INT( "GL_MATRIX28_ARB", GL_MATRIX28_ARB );
      #endif
      #if defined( GL_POST_CONVOLUTION_GREEN_BIAS )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_GREEN_BIAS", GL_POST_CONVOLUTION_GREEN_BIAS );
      #endif
      #if defined( GLXEW_EXT_fbconfig_packed_float )
        ADD_CONST_INT( "GLXEW_EXT_fbconfig_packed_float", GLXEW_EXT_fbconfig_packed_float );
      #endif
      #if defined( GL_MAP2_VERTEX_ATTRIB8_4_NV )
        ADD_CONST_INT( "GL_MAP2_VERTEX_ATTRIB8_4_NV", GL_MAP2_VERTEX_ATTRIB8_4_NV );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV", GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB", GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB );
      #endif
      #if defined( GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL", GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL );
      #endif
      #if defined( GL_POLYGON_STIPPLE )
        ADD_CONST_INT( "GL_POLYGON_STIPPLE", GL_POLYGON_STIPPLE );
      #endif
      #if defined( GL_MATERIAL_SIDE_HINT_PGI )
        ADD_CONST_INT( "GL_MATERIAL_SIDE_HINT_PGI", GL_MATERIAL_SIDE_HINT_PGI );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY10_NV )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY10_NV", GL_VERTEX_ATTRIB_ARRAY10_NV );
      #endif
      #if defined( GL_OP_DOT3_EXT )
        ADD_CONST_INT( "GL_OP_DOT3_EXT", GL_OP_DOT3_EXT );
      #endif
      #if defined( GL_LUMINANCE12_ALPHA12 )
        ADD_CONST_INT( "GL_LUMINANCE12_ALPHA12", GL_LUMINANCE12_ALPHA12 );
      #endif
      #if defined( GL_SCALE_BY_FOUR_NV )
        ADD_CONST_INT( "GL_SCALE_BY_FOUR_NV", GL_SCALE_BY_FOUR_NV );
      #endif
      #if defined( GL_LUMINANCE16UI_EXT )
        ADD_CONST_INT( "GL_LUMINANCE16UI_EXT", GL_LUMINANCE16UI_EXT );
      #endif
      #if defined( GL_PIXEL_PACK_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_PIXEL_PACK_BUFFER_BINDING_ARB", GL_PIXEL_PACK_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_GEOMETRY_INPUT_TYPE_EXT )
        ADD_CONST_INT( "GL_GEOMETRY_INPUT_TYPE_EXT", GL_GEOMETRY_INPUT_TYPE_EXT );
      #endif
      #if defined( GL_MAX_VERTEX_OUTPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_VERTEX_OUTPUT_COMPONENTS", GL_MAX_VERTEX_OUTPUT_COMPONENTS );
      #endif
      #if defined( GL_KEEP )
        ADD_CONST_INT( "GL_KEEP", GL_KEEP );
      #endif
      #if defined( GL_UNSIGNED_INT_24_8_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_24_8_EXT", GL_UNSIGNED_INT_24_8_EXT );
      #endif
      #if defined( GL_ARRAY_OBJECT_BUFFER_ATI )
        ADD_CONST_INT( "GL_ARRAY_OBJECT_BUFFER_ATI", GL_ARRAY_OBJECT_BUFFER_ATI );
      #endif
      #if defined( GL_SIGNED_NEGATE_NV )
        ADD_CONST_INT( "GL_SIGNED_NEGATE_NV", GL_SIGNED_NEGATE_NV );
      #endif
      #if defined( GL_PROXY_TEXTURE_2D )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_2D", GL_PROXY_TEXTURE_2D );
      #endif
      #if defined( GL_PROGRAM_STRING_NV )
        ADD_CONST_INT( "GL_PROGRAM_STRING_NV", GL_PROGRAM_STRING_NV );
      #endif
      #if defined( GL_FOG_PATCHY_FACTOR_SGIX )
        ADD_CONST_INT( "GL_FOG_PATCHY_FACTOR_SGIX", GL_FOG_PATCHY_FACTOR_SGIX );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_RED_BIAS_SGI )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_RED_BIAS_SGI", GL_POST_COLOR_MATRIX_RED_BIAS_SGI );
      #endif
      #if defined( GL_8X_BIT_ATI )
        ADD_CONST_INT( "GL_8X_BIT_ATI", GL_8X_BIT_ATI );
      #endif
      #if defined( GL_CONSTANT_ARB )
        ADD_CONST_INT( "GL_CONSTANT_ARB", GL_CONSTANT_ARB );
      #endif
      #if defined( GL_OPERAND2_RGB_EXT )
        ADD_CONST_INT( "GL_OPERAND2_RGB_EXT", GL_OPERAND2_RGB_EXT );
      #endif
      #if defined( GL_MATRIX_EXT )
        ADD_CONST_INT( "GL_MATRIX_EXT", GL_MATRIX_EXT );
      #endif
      #if defined( GL_OR )
        ADD_CONST_INT( "GL_OR", GL_OR );
      #endif
      #if defined( GL_VERTEX_ARRAY_TYPE )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_TYPE", GL_VERTEX_ARRAY_TYPE );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER );
      #endif
      #if defined( GL_MAP2_VERTEX_3 )
        ADD_CONST_INT( "GL_MAP2_VERTEX_3", GL_MAP2_VERTEX_3 );
      #endif
      #if defined( GL_NUM_INSTRUCTIONS_PER_PASS_ATI )
        ADD_CONST_INT( "GL_NUM_INSTRUCTIONS_PER_PASS_ATI", GL_NUM_INSTRUCTIONS_PER_PASS_ATI );
      #endif
      #if defined( GL_LUMINANCE16_ALPHA16_SIGNED_SGIX )
        ADD_CONST_INT( "GL_LUMINANCE16_ALPHA16_SIGNED_SGIX", GL_LUMINANCE16_ALPHA16_SIGNED_SGIX );
      #endif
      #if defined( GL_EYE_PLANE_ABSOLUTE_NV )
        ADD_CONST_INT( "GL_EYE_PLANE_ABSOLUTE_NV", GL_EYE_PLANE_ABSOLUTE_NV );
      #endif
      #if defined( GL_CONVOLUTION_HEIGHT )
        ADD_CONST_INT( "GL_CONVOLUTION_HEIGHT", GL_CONVOLUTION_HEIGHT );
      #endif
      #if defined( GLEW_EXT_paletted_texture )
        ADD_CONST_INT( "GLEW_EXT_paletted_texture", GLEW_EXT_paletted_texture );
      #endif
      #if defined( GL_SAMPLER_1D_ARRAY )
        ADD_CONST_INT( "GL_SAMPLER_1D_ARRAY", GL_SAMPLER_1D_ARRAY );
      #endif
      #if defined( GL_POST_CONVOLUTION_BLUE_BIAS )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_BLUE_BIAS", GL_POST_CONVOLUTION_BLUE_BIAS );
      #endif
      #if defined( GL_EXT_vertex_array_bgra )
        ADD_CONST_INT( "GL_EXT_vertex_array_bgra", GL_EXT_vertex_array_bgra );
      #endif
      #if defined( GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI )
        ADD_CONST_INT( "GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI", GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI );
      #endif
      #if defined( GL_LINE_LOOP )
        ADD_CONST_INT( "GL_LINE_LOOP", GL_LINE_LOOP );
      #endif
      #if defined( GL_PACK_INVERT_MESA )
        ADD_CONST_INT( "GL_PACK_INVERT_MESA", GL_PACK_INVERT_MESA );
      #endif
      #if defined( GL_DSDT8_MAG8_INTENSITY8_NV )
        ADD_CONST_INT( "GL_DSDT8_MAG8_INTENSITY8_NV", GL_DSDT8_MAG8_INTENSITY8_NV );
      #endif
      #if defined( GL_TEXTURE6_ARB )
        ADD_CONST_INT( "GL_TEXTURE6_ARB", GL_TEXTURE6_ARB );
      #endif
      #if defined( GL_PROGRAM_ALU_INSTRUCTIONS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_ALU_INSTRUCTIONS_ARB", GL_PROGRAM_ALU_INSTRUCTIONS_ARB );
      #endif
      #if defined( GL_COLOR_TABLE_SCALE )
        ADD_CONST_INT( "GL_COLOR_TABLE_SCALE", GL_COLOR_TABLE_SCALE );
      #endif
      #if defined( GLX_SCREEN )
        ADD_CONST_INT( "GLX_SCREEN", GLX_SCREEN );
      #endif
      #if defined( GL_COLOR_INDEX2_EXT )
        ADD_CONST_INT( "GL_COLOR_INDEX2_EXT", GL_COLOR_INDEX2_EXT );
      #endif
      #if defined( GL_BACK_RIGHT )
        ADD_CONST_INT( "GL_BACK_RIGHT", GL_BACK_RIGHT );
      #endif
      #if defined( GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS", GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_INT_SAMPLER_CUBE_EXT )
        ADD_CONST_INT( "GL_INT_SAMPLER_CUBE_EXT", GL_INT_SAMPLER_CUBE_EXT );
      #endif
      #if defined( GL_EXT_blend_equation_separate )
        ADD_CONST_INT( "GL_EXT_blend_equation_separate", GL_EXT_blend_equation_separate );
      #endif
      #if defined( GLEW_INGR_interlace_read )
        ADD_CONST_INT( "GLEW_INGR_interlace_read", GLEW_INGR_interlace_read );
      #endif
      #if defined( GLX_VIDEO_OUT_DEPTH_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_DEPTH_NV", GLX_VIDEO_OUT_DEPTH_NV );
      #endif
      #if defined( GL_TEXTURE_LOD_BIAS_EXT )
        ADD_CONST_INT( "GL_TEXTURE_LOD_BIAS_EXT", GL_TEXTURE_LOD_BIAS_EXT );
      #endif
      #if defined( GLX_SYNC_SWAP_SGIX )
        ADD_CONST_INT( "GLX_SYNC_SWAP_SGIX", GLX_SYNC_SWAP_SGIX );
      #endif
      #if defined( GL_R3_G3_B2 )
        ADD_CONST_INT( "GL_R3_G3_B2", GL_R3_G3_B2 );
      #endif
      #if defined( GL_SLUMINANCE8_ALPHA8 )
        ADD_CONST_INT( "GL_SLUMINANCE8_ALPHA8", GL_SLUMINANCE8_ALPHA8 );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD", GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD );
      #endif
      #if defined( GL_LUMINANCE4_ALPHA4 )
        ADD_CONST_INT( "GL_LUMINANCE4_ALPHA4", GL_LUMINANCE4_ALPHA4 );
      #endif
      #if defined( GL_UNIFORM_OFFSET )
        ADD_CONST_INT( "GL_UNIFORM_OFFSET", GL_UNIFORM_OFFSET );
      #endif
      #if defined( GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB", GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB );
      #endif
      #if defined( GLEW_EXT_compiled_vertex_array )
        ADD_CONST_INT( "GLEW_EXT_compiled_vertex_array", GLEW_EXT_compiled_vertex_array );
      #endif
      #if defined( GL_TEXTURE1 )
        ADD_CONST_INT( "GL_TEXTURE1", GL_TEXTURE1 );
      #endif
      #if defined( GL_VERTEX_SHADER_INVARIANTS_EXT )
        ADD_CONST_INT( "GL_VERTEX_SHADER_INVARIANTS_EXT", GL_VERTEX_SHADER_INVARIANTS_EXT );
      #endif
      #if defined( GL_OBJECT_PLANE )
        ADD_CONST_INT( "GL_OBJECT_PLANE", GL_OBJECT_PLANE );
      #endif
      #if defined( GL_LUMINANCE_FLOAT16_APPLE )
        ADD_CONST_INT( "GL_LUMINANCE_FLOAT16_APPLE", GL_LUMINANCE_FLOAT16_APPLE );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_LIST_IBM )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_LIST_IBM", GL_TEXTURE_COORD_ARRAY_LIST_IBM );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_CUBE )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_CUBE", GL_UNSIGNED_INT_SAMPLER_CUBE );
      #endif
      #if defined( GLX_TRANSPARENT_ALPHA_VALUE_EXT )
        ADD_CONST_INT( "GLX_TRANSPARENT_ALPHA_VALUE_EXT", GLX_TRANSPARENT_ALPHA_VALUE_EXT );
      #endif
      #if defined( GL_HISTOGRAM_BLUE_SIZE )
        ADD_CONST_INT( "GL_HISTOGRAM_BLUE_SIZE", GL_HISTOGRAM_BLUE_SIZE );
      #endif
      #if defined( GL_SAMPLES_3DFX )
        ADD_CONST_INT( "GL_SAMPLES_3DFX", GL_SAMPLES_3DFX );
      #endif
      #if defined( GL_FUNC_ADD )
        ADD_CONST_INT( "GL_FUNC_ADD", GL_FUNC_ADD );
      #endif
      #if defined( GL_COLOR_SUM )
        ADD_CONST_INT( "GL_COLOR_SUM", GL_COLOR_SUM );
      #endif
      #if defined( GL_COMBINE_ALPHA_ARB )
        ADD_CONST_INT( "GL_COMBINE_ALPHA_ARB", GL_COMBINE_ALPHA_ARB );
      #endif
      #if defined( GL_BUFFER_ACCESS )
        ADD_CONST_INT( "GL_BUFFER_ACCESS", GL_BUFFER_ACCESS );
      #endif
      #if defined( GL_EYE_POINT_SGIS )
        ADD_CONST_INT( "GL_EYE_POINT_SGIS", GL_EYE_POINT_SGIS );
      #endif
      #if defined( GLEW_EXT_provoking_vertex )
        ADD_CONST_INT( "GLEW_EXT_provoking_vertex", GLEW_EXT_provoking_vertex );
      #endif
      #if defined( GL_LINES_ADJACENCY )
        ADD_CONST_INT( "GL_LINES_ADJACENCY", GL_LINES_ADJACENCY );
      #endif
      #if defined( GL_POLYGON_OFFSET_FACTOR_EXT )
        ADD_CONST_INT( "GL_POLYGON_OFFSET_FACTOR_EXT", GL_POLYGON_OFFSET_FACTOR_EXT );
      #endif
      #if defined( GL_MVP_MATRIX_EXT )
        ADD_CONST_INT( "GL_MVP_MATRIX_EXT", GL_MVP_MATRIX_EXT );
      #endif
      #if defined( GL_NORMAL_ARRAY_COUNT_EXT )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_COUNT_EXT", GL_NORMAL_ARRAY_COUNT_EXT );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_RED_SCALE )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_RED_SCALE", GL_POST_COLOR_MATRIX_RED_SCALE );
      #endif
      #if defined( GLX_3DFX_FULLSCREEN_MODE_MESA )
        ADD_CONST_INT( "GLX_3DFX_FULLSCREEN_MODE_MESA", GLX_3DFX_FULLSCREEN_MODE_MESA );
      #endif
      #if defined( GL_VERTEX_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_STRIDE", GL_VERTEX_ARRAY_STRIDE );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT );
      #endif
      #if defined( GL_DOT_PRODUCT_PASS_THROUGH_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_PASS_THROUGH_NV", GL_DOT_PRODUCT_PASS_THROUGH_NV );
      #endif
      #if defined( GL_EXT_packed_depth_stencil )
        ADD_CONST_INT( "GL_EXT_packed_depth_stencil", GL_EXT_packed_depth_stencil );
      #endif
      #if defined( GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV )
        ADD_CONST_INT( "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV", GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV );
      #endif
      #if defined( GL_OCCLUSION_TEST_RESULT_HP )
        ADD_CONST_INT( "GL_OCCLUSION_TEST_RESULT_HP", GL_OCCLUSION_TEST_RESULT_HP );
      #endif
      #if defined( GL_TEXTURE_BUFFER_ARB )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER_ARB", GL_TEXTURE_BUFFER_ARB );
      #endif
      #if defined( GL_MAP1_VERTEX_ATTRIB4_4_NV )
        ADD_CONST_INT( "GL_MAP1_VERTEX_ATTRIB4_4_NV", GL_MAP1_VERTEX_ATTRIB4_4_NV );
      #endif
      #if defined( GL_MATRIX27_ARB )
        ADD_CONST_INT( "GL_MATRIX27_ARB", GL_MATRIX27_ARB );
      #endif
      #if defined( GL_UNPACK_CMYK_HINT_EXT )
        ADD_CONST_INT( "GL_UNPACK_CMYK_HINT_EXT", GL_UNPACK_CMYK_HINT_EXT );
      #endif
      #if defined( GL_422_AVERAGE_EXT )
        ADD_CONST_INT( "GL_422_AVERAGE_EXT", GL_422_AVERAGE_EXT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD16_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD16_EXT", GL_OUTPUT_TEXTURE_COORD16_EXT );
      #endif
      #if defined( GLEW_EXT_direct_state_access )
        ADD_CONST_INT( "GLEW_EXT_direct_state_access", GLEW_EXT_direct_state_access );
      #endif
      #if defined( GL_HISTOGRAM_RED_SIZE )
        ADD_CONST_INT( "GL_HISTOGRAM_RED_SIZE", GL_HISTOGRAM_RED_SIZE );
      #endif
      #if defined( GLEW_EXT_texture_compression_s3tc )
        ADD_CONST_INT( "GLEW_EXT_texture_compression_s3tc", GLEW_EXT_texture_compression_s3tc );
      #endif
      #if defined( GL_QUERY_NO_WAIT_NV )
        ADD_CONST_INT( "GL_QUERY_NO_WAIT_NV", GL_QUERY_NO_WAIT_NV );
      #endif
      #if defined( GL_VOLATILE_APPLE )
        ADD_CONST_INT( "GL_VOLATILE_APPLE", GL_VOLATILE_APPLE );
      #endif
      #if defined( GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV )
        ADD_CONST_INT( "GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV", GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV );
      #endif
      #if defined( GL_ADD_ATI )
        ADD_CONST_INT( "GL_ADD_ATI", GL_ADD_ATI );
      #endif
      #if defined( GL_RGB_422_APPLE )
        ADD_CONST_INT( "GL_RGB_422_APPLE", GL_RGB_422_APPLE );
      #endif
      #if defined( GL_MODELVIEW1_STACK_DEPTH_EXT )
        ADD_CONST_INT( "GL_MODELVIEW1_STACK_DEPTH_EXT", GL_MODELVIEW1_STACK_DEPTH_EXT );
      #endif
      #if defined( GL_DEBUG_CATEGORY_DEPRECATION_AMD )
        ADD_CONST_INT( "GL_DEBUG_CATEGORY_DEPRECATION_AMD", GL_DEBUG_CATEGORY_DEPRECATION_AMD );
      #endif
      #if defined( GL_STENCIL_BACK_FUNC )
        ADD_CONST_INT( "GL_STENCIL_BACK_FUNC", GL_STENCIL_BACK_FUNC );
      #endif
      #if defined( GL_POLYGON_SMOOTH_HINT )
        ADD_CONST_INT( "GL_POLYGON_SMOOTH_HINT", GL_POLYGON_SMOOTH_HINT );
      #endif
      #if defined( GL_INDEX )
        ADD_CONST_INT( "GL_INDEX", GL_INDEX );
      #endif
      #if defined( GL_LUMINANCE8_ALPHA8_EXT )
        ADD_CONST_INT( "GL_LUMINANCE8_ALPHA8_EXT", GL_LUMINANCE8_ALPHA8_EXT );
      #endif
      #if defined( GL_PALETTE8_RGBA8_OES )
        ADD_CONST_INT( "GL_PALETTE8_RGBA8_OES", GL_PALETTE8_RGBA8_OES );
      #endif
      #if defined( GL_FRAGMENT_FOG_SGIX )
        ADD_CONST_INT( "GL_FRAGMENT_FOG_SGIX", GL_FRAGMENT_FOG_SGIX );
      #endif
      #if defined( GL_VARIANT_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_VARIANT_ARRAY_STRIDE_EXT", GL_VARIANT_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GL_SEPARABLE_2D )
        ADD_CONST_INT( "GL_SEPARABLE_2D", GL_SEPARABLE_2D );
      #endif
      #if defined( GL_TEXTURE_COMPARE_OPERATOR_SGIX )
        ADD_CONST_INT( "GL_TEXTURE_COMPARE_OPERATOR_SGIX", GL_TEXTURE_COMPARE_OPERATOR_SGIX );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV", GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT", GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT );
      #endif
      #if defined( GL_MATRIX0_ARB )
        ADD_CONST_INT( "GL_MATRIX0_ARB", GL_MATRIX0_ARB );
      #endif
      #if defined( GL_EXT_blend_func_separate )
        ADD_CONST_INT( "GL_EXT_blend_func_separate", GL_EXT_blend_func_separate );
      #endif
      #if defined( GL_DOMAIN )
        ADD_CONST_INT( "GL_DOMAIN", GL_DOMAIN );
      #endif
      #if defined( GL_TEXTURE_PRIORITY_EXT )
        ADD_CONST_INT( "GL_TEXTURE_PRIORITY_EXT", GL_TEXTURE_PRIORITY_EXT );
      #endif
      #if defined( GL_COMBINER7_NV )
        ADD_CONST_INT( "GL_COMBINER7_NV", GL_COMBINER7_NV );
      #endif
      #if defined( GL_EXT_compiled_vertex_array )
        ADD_CONST_INT( "GL_EXT_compiled_vertex_array", GL_EXT_compiled_vertex_array );
      #endif
      #if defined( GL_CURRENT_TIME_NV )
        ADD_CONST_INT( "GL_CURRENT_TIME_NV", GL_CURRENT_TIME_NV );
      #endif
      #if defined( GL_RGB10_EXT )
        ADD_CONST_INT( "GL_RGB10_EXT", GL_RGB10_EXT );
      #endif
      #if defined( GL_MAX_TRACK_MATRICES_NV )
        ADD_CONST_INT( "GL_MAX_TRACK_MATRICES_NV", GL_MAX_TRACK_MATRICES_NV );
      #endif
      #if defined( GLX_SWAP_EXCHANGE_OML )
        ADD_CONST_INT( "GLX_SWAP_EXCHANGE_OML", GLX_SWAP_EXCHANGE_OML );
      #endif
      #if defined( GL_COLOR_TABLE_INTENSITY_SIZE )
        ADD_CONST_INT( "GL_COLOR_TABLE_INTENSITY_SIZE", GL_COLOR_TABLE_INTENSITY_SIZE );
      #endif
      #if defined( GL_INVERSE_TRANSPOSE_NV )
        ADD_CONST_INT( "GL_INVERSE_TRANSPOSE_NV", GL_INVERSE_TRANSPOSE_NV );
      #endif
      #if defined( GL_DRAW_FRAMEBUFFER_BINDING )
        ADD_CONST_INT( "GL_DRAW_FRAMEBUFFER_BINDING", GL_DRAW_FRAMEBUFFER_BINDING );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD13_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD13_EXT", GL_OUTPUT_TEXTURE_COORD13_EXT );
      #endif
      #if defined( GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT )
        ADD_CONST_INT( "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT", GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT );
      #endif
      #if defined( GL_EMBOSS_MAP_NV )
        ADD_CONST_INT( "GL_EMBOSS_MAP_NV", GL_EMBOSS_MAP_NV );
      #endif
      #if defined( GL_BOOL_ARB )
        ADD_CONST_INT( "GL_BOOL_ARB", GL_BOOL_ARB );
      #endif
      #if defined( GL_MATRIX22_ARB )
        ADD_CONST_INT( "GL_MATRIX22_ARB", GL_MATRIX22_ARB );
      #endif
      #if defined( GLX_SAVED_SGIX )
        ADD_CONST_INT( "GLX_SAVED_SGIX", GLX_SAVED_SGIX );
      #endif
      #if defined( GL_PROGRAM_MATRIX_EXT )
        ADD_CONST_INT( "GL_PROGRAM_MATRIX_EXT", GL_PROGRAM_MATRIX_EXT );
      #endif
      #if defined( GL_TRIANGLES )
        ADD_CONST_INT( "GL_TRIANGLES", GL_TRIANGLES );
      #endif
      #if defined( GL_SAMPLER_2D_ARRAY_SHADOW )
        ADD_CONST_INT( "GL_SAMPLER_2D_ARRAY_SHADOW", GL_SAMPLER_2D_ARRAY_SHADOW );
      #endif
      #if defined( GLX_CONTEXT_MAJOR_VERSION_ARB )
        ADD_CONST_INT( "GLX_CONTEXT_MAJOR_VERSION_ARB", GLX_CONTEXT_MAJOR_VERSION_ARB );
      #endif
      #if defined( GL_BLEND_EQUATION_RGB_EXT )
        ADD_CONST_INT( "GL_BLEND_EQUATION_RGB_EXT", GL_BLEND_EQUATION_RGB_EXT );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT", GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT );
      #endif
      #if defined( GL_ASYNC_MARKER_SGIX )
        ADD_CONST_INT( "GL_ASYNC_MARKER_SGIX", GL_ASYNC_MARKER_SGIX );
      #endif
      #if defined( GL_READ_PIXEL_DATA_RANGE_NV )
        ADD_CONST_INT( "GL_READ_PIXEL_DATA_RANGE_NV", GL_READ_PIXEL_DATA_RANGE_NV );
      #endif
      #if defined( GL_NORMAL_ARRAY_STRIDE_EXT )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_STRIDE_EXT", GL_NORMAL_ARRAY_STRIDE_EXT );
      #endif
      #if defined( GLEW_EXT_texture_swizzle )
        ADD_CONST_INT( "GLEW_EXT_texture_swizzle", GLEW_EXT_texture_swizzle );
      #endif
      #if defined( GLEW_EXT_texture_shared_exponent )
        ADD_CONST_INT( "GLEW_EXT_texture_shared_exponent", GLEW_EXT_texture_shared_exponent );
      #endif
      #if defined( GL_VERTEX_PRECLIP_SGIX )
        ADD_CONST_INT( "GL_VERTEX_PRECLIP_SGIX", GL_VERTEX_PRECLIP_SGIX );
      #endif
      #if defined( GL_SLUMINANCE )
        ADD_CONST_INT( "GL_SLUMINANCE", GL_SLUMINANCE );
      #endif
      #if defined( GL_SRGB8_ALPHA8 )
        ADD_CONST_INT( "GL_SRGB8_ALPHA8", GL_SRGB8_ALPHA8 );
      #endif
      #if defined( GL_GLOBAL_ALPHA_FACTOR_SUN )
        ADD_CONST_INT( "GL_GLOBAL_ALPHA_FACTOR_SUN", GL_GLOBAL_ALPHA_FACTOR_SUN );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB", GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB );
      #endif
      #if defined( GL_WRITE_ONLY_ARB )
        ADD_CONST_INT( "GL_WRITE_ONLY_ARB", GL_WRITE_ONLY_ARB );
      #endif
      #if defined( GL_SAMPLER_2D_ARRAY )
        ADD_CONST_INT( "GL_SAMPLER_2D_ARRAY", GL_SAMPLER_2D_ARRAY );
      #endif
      #if defined( GL_DRAW_BUFFER13_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER13_ATI", GL_DRAW_BUFFER13_ATI );
      #endif
      #if defined( GLX_MIN_BLUE_SGIS )
        ADD_CONST_INT( "GLX_MIN_BLUE_SGIS", GLX_MIN_BLUE_SGIS );
      #endif
      #if defined( GL_RENDERER )
        ADD_CONST_INT( "GL_RENDERER", GL_RENDERER );
      #endif
      #if defined( GL_COLOR_TABLE_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_SGI", GL_COLOR_TABLE_SGI );
      #endif
      #if defined( GL_MAX_VARYING_FLOATS )
        ADD_CONST_INT( "GL_MAX_VARYING_FLOATS", GL_MAX_VARYING_FLOATS );
      #endif
      #if defined( GL_VERTEX_STREAM1_ATI )
        ADD_CONST_INT( "GL_VERTEX_STREAM1_ATI", GL_VERTEX_STREAM1_ATI );
      #endif
      #if defined( GL_SAMPLE_BUFFERS_EXT )
        ADD_CONST_INT( "GL_SAMPLE_BUFFERS_EXT", GL_SAMPLE_BUFFERS_EXT );
      #endif
      #if defined( GLX_BACK_LEFT_EXT )
        ADD_CONST_INT( "GLX_BACK_LEFT_EXT", GLX_BACK_LEFT_EXT );
      #endif
      #if defined( GL_PIXEL_MAP_B_TO_B )
        ADD_CONST_INT( "GL_PIXEL_MAP_B_TO_B", GL_PIXEL_MAP_B_TO_B );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_LIST_IBM )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_LIST_IBM", GL_FOG_COORDINATE_ARRAY_LIST_IBM );
      #endif
      #if defined( GL_SIGNED_LUMINANCE_NV )
        ADD_CONST_INT( "GL_SIGNED_LUMINANCE_NV", GL_SIGNED_LUMINANCE_NV );
      #endif
      #if defined( GL_TEXTURE_BUFFER_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER_EXT", GL_TEXTURE_BUFFER_EXT );
      #endif
      #if defined( GL_PIXEL_MAP_R_TO_R_SIZE )
        ADD_CONST_INT( "GL_PIXEL_MAP_R_TO_R_SIZE", GL_PIXEL_MAP_R_TO_R_SIZE );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB9_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB9_NV", GL_EVAL_VERTEX_ATTRIB9_NV );
      #endif
      #if defined( GL_PALETTE8_RGB5_A1_OES )
        ADD_CONST_INT( "GL_PALETTE8_RGB5_A1_OES", GL_PALETTE8_RGB5_A1_OES );
      #endif
      #if defined( GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM )
        ADD_CONST_INT( "GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM", GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM );
      #endif
      #if defined( GL_QUERY_COUNTER_BITS_ARB )
        ADD_CONST_INT( "GL_QUERY_COUNTER_BITS_ARB", GL_QUERY_COUNTER_BITS_ARB );
      #endif
      #if defined( GL_COLOR_TABLE_RED_SIZE )
        ADD_CONST_INT( "GL_COLOR_TABLE_RED_SIZE", GL_COLOR_TABLE_RED_SIZE );
      #endif
      #if defined( GL_REPLACEMENT_CODE_ARRAY_SUN )
        ADD_CONST_INT( "GL_REPLACEMENT_CODE_ARRAY_SUN", GL_REPLACEMENT_CODE_ARRAY_SUN );
      #endif
      #if defined( GL_COLOR_LOGIC_OP )
        ADD_CONST_INT( "GL_COLOR_LOGIC_OP", GL_COLOR_LOGIC_OP );
      #endif
      #if defined( GL_TEXTURE_POINT_ONE_COORD_ATIX )
        ADD_CONST_INT( "GL_TEXTURE_POINT_ONE_COORD_ATIX", GL_TEXTURE_POINT_ONE_COORD_ATIX );
      #endif
      #if defined( GLX_SAMPLE_BUFFERS_SGIS )
        ADD_CONST_INT( "GLX_SAMPLE_BUFFERS_SGIS", GLX_SAMPLE_BUFFERS_SGIS );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH", GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH );
      #endif
      #if defined( GL_UNIFORM_BLOCK_INDEX )
        ADD_CONST_INT( "GL_UNIFORM_BLOCK_INDEX", GL_UNIFORM_BLOCK_INDEX );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD27_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD27_EXT", GL_OUTPUT_TEXTURE_COORD27_EXT );
      #endif
      #if defined( GLEW_EXT_texture_compression_rgtc )
        ADD_CONST_INT( "GLEW_EXT_texture_compression_rgtc", GLEW_EXT_texture_compression_rgtc );
      #endif
      #if defined( GL_TEXTURE_BUFFER_FORMAT_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BUFFER_FORMAT_EXT", GL_TEXTURE_BUFFER_FORMAT_EXT );
      #endif
      #if defined( GL_EXT_copy_texture )
        ADD_CONST_INT( "GL_EXT_copy_texture", GL_EXT_copy_texture );
      #endif
      #if defined( GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI )
        ADD_CONST_INT( "GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI", GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB2_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB2_NV", GL_EVAL_VERTEX_ATTRIB2_NV );
      #endif
      #if defined( GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT )
        ADD_CONST_INT( "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT );
      #endif
      #if defined( GL_ENV_ADD_EXT )
        ADD_CONST_INT( "GL_ENV_ADD_EXT", GL_ENV_ADD_EXT );
      #endif
      #if defined( GL_SPHERE_MAP )
        ADD_CONST_INT( "GL_SPHERE_MAP", GL_SPHERE_MAP );
      #endif
      #if defined( GL_COMPRESSED_TEXTURE_FORMATS_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_TEXTURE_FORMATS_ARB", GL_COMPRESSED_TEXTURE_FORMATS_ARB );
      #endif
      #if defined( GL_INTERLACE_OML )
        ADD_CONST_INT( "GL_INTERLACE_OML", GL_INTERLACE_OML );
      #endif
      #if defined( GL_ARRAY_BUFFER_ARB )
        ADD_CONST_INT( "GL_ARRAY_BUFFER_ARB", GL_ARRAY_BUFFER_ARB );
      #endif
      #if defined( GL_X_EXT )
        ADD_CONST_INT( "GL_X_EXT", GL_X_EXT );
      #endif
      #if defined( GL_OPERAND0_ALPHA_EXT )
        ADD_CONST_INT( "GL_OPERAND0_ALPHA_EXT", GL_OPERAND0_ALPHA_EXT );
      #endif
      #if defined( GL_RGB_SCALE )
        ADD_CONST_INT( "GL_RGB_SCALE", GL_RGB_SCALE );
      #endif
      #if defined( GL_HI_SCALE_NV )
        ADD_CONST_INT( "GL_HI_SCALE_NV", GL_HI_SCALE_NV );
      #endif
      #if defined( GL_GEOMETRY_VERTICES_OUT_ARB )
        ADD_CONST_INT( "GL_GEOMETRY_VERTICES_OUT_ARB", GL_GEOMETRY_VERTICES_OUT_ARB );
      #endif
      #if defined( GL_BINORMAL_ARRAY_EXT )
        ADD_CONST_INT( "GL_BINORMAL_ARRAY_EXT", GL_BINORMAL_ARRAY_EXT );
      #endif
      #if defined( GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB )
        ADD_CONST_INT( "GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB", GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB );
      #endif
      #if defined( GL_MAD_ATI )
        ADD_CONST_INT( "GL_MAD_ATI", GL_MAD_ATI );
      #endif
      #if defined( GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB )
        ADD_CONST_INT( "GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB", GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB );
      #endif
      #if defined( GL_OP_SET_GE_EXT )
        ADD_CONST_INT( "GL_OP_SET_GE_EXT", GL_OP_SET_GE_EXT );
      #endif
      #if defined( GL_RGB_FLOAT16_ATI )
        ADD_CONST_INT( "GL_RGB_FLOAT16_ATI", GL_RGB_FLOAT16_ATI );
      #endif
      #if defined( GL_ACTIVE_VERTEX_UNITS_ARB )
        ADD_CONST_INT( "GL_ACTIVE_VERTEX_UNITS_ARB", GL_ACTIVE_VERTEX_UNITS_ARB );
      #endif
      #if defined( GL_NUM_GENERAL_COMBINERS_NV )
        ADD_CONST_INT( "GL_NUM_GENERAL_COMBINERS_NV", GL_NUM_GENERAL_COMBINERS_NV );
      #endif
      #if defined( GL_EXT_texture )
        ADD_CONST_INT( "GL_EXT_texture", GL_EXT_texture );
      #endif
      #if defined( GL_MOV_ATI )
        ADD_CONST_INT( "GL_MOV_ATI", GL_MOV_ATI );
      #endif
      #if defined( GL_CURRENT_RASTER_INDEX )
        ADD_CONST_INT( "GL_CURRENT_RASTER_INDEX", GL_CURRENT_RASTER_INDEX );
      #endif
      #if defined( GL_TEXTURE_DEPTH_SIZE_ARB )
        ADD_CONST_INT( "GL_TEXTURE_DEPTH_SIZE_ARB", GL_TEXTURE_DEPTH_SIZE_ARB );
      #endif
      #if defined( GL_MODELVIEW_PROJECTION_NV )
        ADD_CONST_INT( "GL_MODELVIEW_PROJECTION_NV", GL_MODELVIEW_PROJECTION_NV );
      #endif
      #if defined( GLX_EVENT_MASK )
        ADD_CONST_INT( "GLX_EVENT_MASK", GLX_EVENT_MASK );
      #endif
      #if defined( GL_COMPRESSED_SRGB )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB", GL_COMPRESSED_SRGB );
      #endif
      #if defined( GL_OFFSET_HILO_TEXTURE_2D_NV )
        ADD_CONST_INT( "GL_OFFSET_HILO_TEXTURE_2D_NV", GL_OFFSET_HILO_TEXTURE_2D_NV );
      #endif
      #if defined( GL_TEXTURE_DEPTH_TYPE )
        ADD_CONST_INT( "GL_TEXTURE_DEPTH_TYPE", GL_TEXTURE_DEPTH_TYPE );
      #endif
      #if defined( GL_COMPRESSED_SLUMINANCE_ALPHA )
        ADD_CONST_INT( "GL_COMPRESSED_SLUMINANCE_ALPHA", GL_COMPRESSED_SLUMINANCE_ALPHA );
      #endif
      #if defined( GLX_AUX4_ATI )
        ADD_CONST_INT( "GLX_AUX4_ATI", GLX_AUX4_ATI );
      #endif
      #if defined( GLX_CONTEXT_CORE_PROFILE_BIT_ARB )
        ADD_CONST_INT( "GLX_CONTEXT_CORE_PROFILE_BIT_ARB", GLX_CONTEXT_CORE_PROFILE_BIT_ARB );
      #endif
      #if defined( GL_DRAW_BUFFER15_ATI )
        ADD_CONST_INT( "GL_DRAW_BUFFER15_ATI", GL_DRAW_BUFFER15_ATI );
      #endif
      #if defined( GL_DEPTH_COMPONENT24_SGIX )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT24_SGIX", GL_DEPTH_COMPONENT24_SGIX );
      #endif
      #if defined( GLX_TEXTURE_CUBE_MAP_NEGATIVE_Y_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_CUBE_MAP_NEGATIVE_Y_ATI", GLX_TEXTURE_CUBE_MAP_NEGATIVE_Y_ATI );
      #endif
      #if defined( GL_EQUIV )
        ADD_CONST_INT( "GL_EQUIV", GL_EQUIV );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB", GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_EXT_coordinate_frame )
        ADD_CONST_INT( "GL_EXT_coordinate_frame", GL_EXT_coordinate_frame );
      #endif
      #if defined( GL_RENDERBUFFER_GREEN_SIZE_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_GREEN_SIZE_EXT", GL_RENDERBUFFER_GREEN_SIZE_EXT );
      #endif
      #if defined( GL_LUMINANCE )
        ADD_CONST_INT( "GL_LUMINANCE", GL_LUMINANCE );
      #endif
      #if defined( GL_HISTOGRAM_FORMAT )
        ADD_CONST_INT( "GL_HISTOGRAM_FORMAT", GL_HISTOGRAM_FORMAT );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB13_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB13_NV", GL_EVAL_VERTEX_ATTRIB13_NV );
      #endif
      #if defined( GL_TEXTURE23_ARB )
        ADD_CONST_INT( "GL_TEXTURE23_ARB", GL_TEXTURE23_ARB );
      #endif
      #if defined( GL_COLOR_SUM_CLAMP_NV )
        ADD_CONST_INT( "GL_COLOR_SUM_CLAMP_NV", GL_COLOR_SUM_CLAMP_NV );
      #endif
      #if defined( GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB )
        ADD_CONST_INT( "GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB", GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB );
      #endif
      #if defined( GL_BACK_PRIMARY_COLOR_NV )
        ADD_CONST_INT( "GL_BACK_PRIMARY_COLOR_NV", GL_BACK_PRIMARY_COLOR_NV );
      #endif
      #if defined( GL_QUAD_STRIP )
        ADD_CONST_INT( "GL_QUAD_STRIP", GL_QUAD_STRIP );
      #endif
      #if defined( GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV", GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV );
      #endif
      #if defined( GL_TEXTURE_RENDERBUFFER_NV )
        ADD_CONST_INT( "GL_TEXTURE_RENDERBUFFER_NV", GL_TEXTURE_RENDERBUFFER_NV );
      #endif
      #if defined( GL_LUMINANCE16I_EXT )
        ADD_CONST_INT( "GL_LUMINANCE16I_EXT", GL_LUMINANCE16I_EXT );
      #endif
      #if defined( GL_BUMP_ROT_MATRIX_ATI )
        ADD_CONST_INT( "GL_BUMP_ROT_MATRIX_ATI", GL_BUMP_ROT_MATRIX_ATI );
      #endif
      #if defined( GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS", GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS );
      #endif
      #if defined( GL_ACCUM )
        ADD_CONST_INT( "GL_ACCUM", GL_ACCUM );
      #endif
      #if defined( GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT )
        ADD_CONST_INT( "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT", GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT );
      #endif
      #if defined( GL_SOURCE1_RGB_EXT )
        ADD_CONST_INT( "GL_SOURCE1_RGB_EXT", GL_SOURCE1_RGB_EXT );
      #endif
      #if defined( GL_FORCE_BLUE_TO_ONE_NV )
        ADD_CONST_INT( "GL_FORCE_BLUE_TO_ONE_NV", GL_FORCE_BLUE_TO_ONE_NV );
      #endif
      #if defined( GL_MINMAX_FORMAT_EXT )
        ADD_CONST_INT( "GL_MINMAX_FORMAT_EXT", GL_MINMAX_FORMAT_EXT );
      #endif
      #if defined( GL_KTX_buffer_region )
        ADD_CONST_INT( "GL_KTX_buffer_region", GL_KTX_buffer_region );
      #endif
      #if defined( GL_TEXTURE_BINDING_2D_ARRAY_EXT )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_2D_ARRAY_EXT", GL_TEXTURE_BINDING_2D_ARRAY_EXT );
      #endif
      #if defined( GLX_MIPMAP_TEXTURE_ATI )
        ADD_CONST_INT( "GLX_MIPMAP_TEXTURE_ATI", GLX_MIPMAP_TEXTURE_ATI );
      #endif
      #if defined( GL_VERTEX_ARRAY_SIZE )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_SIZE", GL_VERTEX_ARRAY_SIZE );
      #endif
      #if defined( GL_TEXTURE_COORD_ARRAY_COUNT_EXT )
        ADD_CONST_INT( "GL_TEXTURE_COORD_ARRAY_COUNT_EXT", GL_TEXTURE_COORD_ARRAY_COUNT_EXT );
      #endif
      #if defined( GL_MAX_ARRAY_TEXTURE_LAYERS_EXT )
        ADD_CONST_INT( "GL_MAX_ARRAY_TEXTURE_LAYERS_EXT", GL_MAX_ARRAY_TEXTURE_LAYERS_EXT );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB", GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB );
      #endif
      #if defined( GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI )
        ADD_CONST_INT( "GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI", GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI );
      #endif
      #if defined( GL_POST_CONVOLUTION_GREEN_SCALE_EXT )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_GREEN_SCALE_EXT", GL_POST_CONVOLUTION_GREEN_SCALE_EXT );
      #endif
      #if defined( GL_DEBUG_SOURCE_SHADER_COMPILER_ARB )
        ADD_CONST_INT( "GL_DEBUG_SOURCE_SHADER_COMPILER_ARB", GL_DEBUG_SOURCE_SHADER_COMPILER_ARB );
      #endif
      #if defined( GL_STENCIL_BUFFER_BIT )
        ADD_CONST_INT( "GL_STENCIL_BUFFER_BIT", GL_STENCIL_BUFFER_BIT );
      #endif
      #if defined( GL_ALPHA16I_EXT )
        ADD_CONST_INT( "GL_ALPHA16I_EXT", GL_ALPHA16I_EXT );
      #endif
      #if defined( GL_MIRROR_CLAMP_EXT )
        ADD_CONST_INT( "GL_MIRROR_CLAMP_EXT", GL_MIRROR_CLAMP_EXT );
      #endif
      #if defined( GL_MAX_TEXTURE_BUFFER_SIZE_EXT )
        ADD_CONST_INT( "GL_MAX_TEXTURE_BUFFER_SIZE_EXT", GL_MAX_TEXTURE_BUFFER_SIZE_EXT );
      #endif
      #if defined( GL_MODELVIEW5_ARB )
        ADD_CONST_INT( "GL_MODELVIEW5_ARB", GL_MODELVIEW5_ARB );
      #endif
      #if defined( GL_SEPARATE_ATTRIBS_EXT )
        ADD_CONST_INT( "GL_SEPARATE_ATTRIBS_EXT", GL_SEPARATE_ATTRIBS_EXT );
      #endif
      #if defined( GL_GPU_ADDRESS_NV )
        ADD_CONST_INT( "GL_GPU_ADDRESS_NV", GL_GPU_ADDRESS_NV );
      #endif
      #if defined( GL_SRC1_RGB )
        ADD_CONST_INT( "GL_SRC1_RGB", GL_SRC1_RGB );
      #endif
      #if defined( GLX_BAD_VALUE )
        ADD_CONST_INT( "GLX_BAD_VALUE", GLX_BAD_VALUE );
      #endif
      #if defined( GL_QUERY_RESULT_NV )
        ADD_CONST_INT( "GL_QUERY_RESULT_NV", GL_QUERY_RESULT_NV );
      #endif
      #if defined( GL_DEPTH_SCALE )
        ADD_CONST_INT( "GL_DEPTH_SCALE", GL_DEPTH_SCALE );
      #endif
      #if defined( GL_FLOAT_RGBA_MODE_NV )
        ADD_CONST_INT( "GL_FLOAT_RGBA_MODE_NV", GL_FLOAT_RGBA_MODE_NV );
      #endif
      #if defined( GLX_TEXTURE_RGB_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_RGB_ATI", GLX_TEXTURE_RGB_ATI );
      #endif
      #if defined( GL_PACK_ALIGNMENT )
        ADD_CONST_INT( "GL_PACK_ALIGNMENT", GL_PACK_ALIGNMENT );
      #endif
      #if defined( GL_LIGHTING )
        ADD_CONST_INT( "GL_LIGHTING", GL_LIGHTING );
      #endif
      #if defined( GL_OP_ADD_EXT )
        ADD_CONST_INT( "GL_OP_ADD_EXT", GL_OP_ADD_EXT );
      #endif
      #if defined( GL_RGB32UI_EXT )
        ADD_CONST_INT( "GL_RGB32UI_EXT", GL_RGB32UI_EXT );
      #endif
      #if defined( GL_CURRENT_RASTER_DISTANCE )
        ADD_CONST_INT( "GL_CURRENT_RASTER_DISTANCE", GL_CURRENT_RASTER_DISTANCE );
      #endif
      #if defined( GLX_TRUE_COLOR )
        ADD_CONST_INT( "GLX_TRUE_COLOR", GLX_TRUE_COLOR );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB0_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB0_NV", GL_EVAL_VERTEX_ATTRIB0_NV );
      #endif
      #if defined( GL_VERTEX_ARRAY_POINTER )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_POINTER", GL_VERTEX_ARRAY_POINTER );
      #endif
      #if defined( GL_TEXTURE7_ARB )
        ADD_CONST_INT( "GL_TEXTURE7_ARB", GL_TEXTURE7_ARB );
      #endif
      #if defined( GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY )
        ADD_CONST_INT( "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY );
      #endif
      #if defined( GL_MAX_FRAGMENT_INPUT_COMPONENTS )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_INPUT_COMPONENTS", GL_MAX_FRAGMENT_INPUT_COMPONENTS );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD10_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD10_EXT", GL_OUTPUT_TEXTURE_COORD10_EXT );
      #endif
      #if defined( GLEW_EXT_texture_env_dot3 )
        ADD_CONST_INT( "GLEW_EXT_texture_env_dot3", GLEW_EXT_texture_env_dot3 );
      #endif
      #if defined( GL_DRAW_PIXEL_TOKEN )
        ADD_CONST_INT( "GL_DRAW_PIXEL_TOKEN", GL_DRAW_PIXEL_TOKEN );
      #endif
      #if defined( GL_VARIANT_ARRAY_POINTER_EXT )
        ADD_CONST_INT( "GL_VARIANT_ARRAY_POINTER_EXT", GL_VARIANT_ARRAY_POINTER_EXT );
      #endif
      #if defined( GL_INTENSITY4_EXT )
        ADD_CONST_INT( "GL_INTENSITY4_EXT", GL_INTENSITY4_EXT );
      #endif
      #if defined( GL_POLYGON_STIPPLE_BIT )
        ADD_CONST_INT( "GL_POLYGON_STIPPLE_BIT", GL_POLYGON_STIPPLE_BIT );
      #endif
      #if defined( GL_MAX_FRAGMENT_UNIFORM_BLOCKS )
        ADD_CONST_INT( "GL_MAX_FRAGMENT_UNIFORM_BLOCKS", GL_MAX_FRAGMENT_UNIFORM_BLOCKS );
      #endif
      #if defined( GL_RGB8I_EXT )
        ADD_CONST_INT( "GL_RGB8I_EXT", GL_RGB8I_EXT );
      #endif
      #if defined( GL_MAX_PALETTE_MATRICES_ARB )
        ADD_CONST_INT( "GL_MAX_PALETTE_MATRICES_ARB", GL_MAX_PALETTE_MATRICES_ARB );
      #endif
      #if defined( GL_DSDT_MAG_INTENSITY_NV )
        ADD_CONST_INT( "GL_DSDT_MAG_INTENSITY_NV", GL_DSDT_MAG_INTENSITY_NV );
      #endif
      #if defined( GL_OPERAND3_RGB_NV )
        ADD_CONST_INT( "GL_OPERAND3_RGB_NV", GL_OPERAND3_RGB_NV );
      #endif
      #if defined( GL_PROGRAM_ADDRESS_REGISTERS_ARB )
        ADD_CONST_INT( "GL_PROGRAM_ADDRESS_REGISTERS_ARB", GL_PROGRAM_ADDRESS_REGISTERS_ARB );
      #endif
      #if defined( GLEW_KTX_buffer_region )
        ADD_CONST_INT( "GLEW_KTX_buffer_region", GLEW_KTX_buffer_region );
      #endif
      #if defined( GL_COMPRESSED_RGB_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_RGB_ARB", GL_COMPRESSED_RGB_ARB );
      #endif
      #if defined( GL_TEXTURE_1D_STACK_MESAX )
        ADD_CONST_INT( "GL_TEXTURE_1D_STACK_MESAX", GL_TEXTURE_1D_STACK_MESAX );
      #endif
      #if defined( GL_OBJECT_BUFFER_SIZE_ATI )
        ADD_CONST_INT( "GL_OBJECT_BUFFER_SIZE_ATI", GL_OBJECT_BUFFER_SIZE_ATI );
      #endif
      #if defined( GL_TEXTURE_BINDING_RECTANGLE_NV )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_RECTANGLE_NV", GL_TEXTURE_BINDING_RECTANGLE_NV );
      #endif
      #if defined( GL_VERTEX_ATTRIB_ARRAY_NORMALIZED )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED", GL_VERTEX_ATTRIB_ARRAY_NORMALIZED );
      #endif
      #if defined( GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT )
        ADD_CONST_INT( "GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT", GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT );
      #endif
      #if defined( GL_OP_POWER_EXT )
        ADD_CONST_INT( "GL_OP_POWER_EXT", GL_OP_POWER_EXT );
      #endif
      #if defined( GL_DOT_PRODUCT_NV )
        ADD_CONST_INT( "GL_DOT_PRODUCT_NV", GL_DOT_PRODUCT_NV );
      #endif
      #if defined( GL_CUBIC_EXT )
        ADD_CONST_INT( "GL_CUBIC_EXT", GL_CUBIC_EXT );
      #endif
      #if defined( GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT )
        ADD_CONST_INT( "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT", GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT );
      #endif
      #if defined( GL_FOG_COORDINATE )
        ADD_CONST_INT( "GL_FOG_COORDINATE", GL_FOG_COORDINATE );
      #endif
      #if defined( GL_RGB16_EXT )
        ADD_CONST_INT( "GL_RGB16_EXT", GL_RGB16_EXT );
      #endif
      #if defined( GL_CONSTANT_COLOR )
        ADD_CONST_INT( "GL_CONSTANT_COLOR", GL_CONSTANT_COLOR );
      #endif
      #if defined( GL_TEXTURE_INDEX_SIZE_EXT )
        ADD_CONST_INT( "GL_TEXTURE_INDEX_SIZE_EXT", GL_TEXTURE_INDEX_SIZE_EXT );
      #endif
      #if defined( GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX )
        ADD_CONST_INT( "GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX", GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX );
      #endif
      #if defined( GL_ARRAY_ELEMENT_LOCK_COUNT_EXT )
        ADD_CONST_INT( "GL_ARRAY_ELEMENT_LOCK_COUNT_EXT", GL_ARRAY_ELEMENT_LOCK_COUNT_EXT );
      #endif
      #if defined( GL_COLOR_TABLE_GREEN_SIZE_EXT )
        ADD_CONST_INT( "GL_COLOR_TABLE_GREEN_SIZE_EXT", GL_COLOR_TABLE_GREEN_SIZE_EXT );
      #endif
      #if defined( GL_TRIANGLE_STRIP_ADJACENCY_ARB )
        ADD_CONST_INT( "GL_TRIANGLE_STRIP_ADJACENCY_ARB", GL_TRIANGLE_STRIP_ADJACENCY_ARB );
      #endif
      #if defined( GL_LUMINANCE_ALPHA_FLOAT32_ATI )
        ADD_CONST_INT( "GL_LUMINANCE_ALPHA_FLOAT32_ATI", GL_LUMINANCE_ALPHA_FLOAT32_ATI );
      #endif
      #if defined( GL_POST_CONVOLUTION_GREEN_SCALE )
        ADD_CONST_INT( "GL_POST_CONVOLUTION_GREEN_SCALE", GL_POST_CONVOLUTION_GREEN_SCALE );
      #endif
      #if defined( GL_COLOR_ARRAY_BUFFER_BINDING )
        ADD_CONST_INT( "GL_COLOR_ARRAY_BUFFER_BINDING", GL_COLOR_ARRAY_BUFFER_BINDING );
      #endif
      #if defined( GL_TRANSPOSE_COLOR_MATRIX )
        ADD_CONST_INT( "GL_TRANSPOSE_COLOR_MATRIX", GL_TRANSPOSE_COLOR_MATRIX );
      #endif
      #if defined( GLX_MAX_PBUFFER_WIDTH )
        ADD_CONST_INT( "GLX_MAX_PBUFFER_WIDTH", GLX_MAX_PBUFFER_WIDTH );
      #endif
      #if defined( GL_INDEX_ARRAY_BUFFER_BINDING_ARB )
        ADD_CONST_INT( "GL_INDEX_ARRAY_BUFFER_BINDING_ARB", GL_INDEX_ARRAY_BUFFER_BINDING_ARB );
      #endif
      #if defined( GL_COMBINER_INPUT_NV )
        ADD_CONST_INT( "GL_COMBINER_INPUT_NV", GL_COMBINER_INPUT_NV );
      #endif
      #if defined( GLEW_ATIX_texture_env_combine3 )
        ADD_CONST_INT( "GLEW_ATIX_texture_env_combine3", GLEW_ATIX_texture_env_combine3 );
      #endif
      #if defined( GL_SHADER_OPERATION_NV )
        ADD_CONST_INT( "GL_SHADER_OPERATION_NV", GL_SHADER_OPERATION_NV );
      #endif
      #if defined( GL_MIN_LUMINANCE_SGIS )
        ADD_CONST_INT( "GL_MIN_LUMINANCE_SGIS", GL_MIN_LUMINANCE_SGIS );
      #endif
      #if defined( GL_SCREEN_COORDINATES_REND )
        ADD_CONST_INT( "GL_SCREEN_COORDINATES_REND", GL_SCREEN_COORDINATES_REND );
      #endif
      #if defined( GL_FOG_COORDINATE_ARRAY_POINTER )
        ADD_CONST_INT( "GL_FOG_COORDINATE_ARRAY_POINTER", GL_FOG_COORDINATE_ARRAY_POINTER );
      #endif
      #if defined( GL_SHADER_CONSISTENT_NV )
        ADD_CONST_INT( "GL_SHADER_CONSISTENT_NV", GL_SHADER_CONSISTENT_NV );
      #endif
      #if defined( GL_SAMPLES_EXT )
        ADD_CONST_INT( "GL_SAMPLES_EXT", GL_SAMPLES_EXT );
      #endif
      #if defined( GL_EXT_framebuffer_object )
        ADD_CONST_INT( "GL_EXT_framebuffer_object", GL_EXT_framebuffer_object );
      #endif
      #if defined( GL_FLOAT_VEC4_ARB )
        ADD_CONST_INT( "GL_FLOAT_VEC4_ARB", GL_FLOAT_VEC4_ARB );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD12_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD12_EXT", GL_OUTPUT_TEXTURE_COORD12_EXT );
      #endif
      #if defined( GL_CON_3_ATI )
        ADD_CONST_INT( "GL_CON_3_ATI", GL_CON_3_ATI );
      #endif
      #if defined( GL_VERSION )
        ADD_CONST_INT( "GL_VERSION", GL_VERSION );
      #endif
      #if defined( GL_NEGATIVE_ONE_EXT )
        ADD_CONST_INT( "GL_NEGATIVE_ONE_EXT", GL_NEGATIVE_ONE_EXT );
      #endif
      #if defined( GL_ATIX_point_sprites )
        ADD_CONST_INT( "GL_ATIX_point_sprites", GL_ATIX_point_sprites );
      #endif
      #if defined( GL_COLOR_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_COLOR_ARRAY_STRIDE", GL_COLOR_ARRAY_STRIDE );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB6_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB6_NV", GL_EVAL_VERTEX_ATTRIB6_NV );
      #endif
      #if defined( GL_TRIANGLE_FAN )
        ADD_CONST_INT( "GL_TRIANGLE_FAN", GL_TRIANGLE_FAN );
      #endif
      #if defined( GL_GREEN_MIN_CLAMP_INGR )
        ADD_CONST_INT( "GL_GREEN_MIN_CLAMP_INGR", GL_GREEN_MIN_CLAMP_INGR );
      #endif
      #if defined( GL_EVAL_VERTEX_ATTRIB1_NV )
        ADD_CONST_INT( "GL_EVAL_VERTEX_ATTRIB1_NV", GL_EVAL_VERTEX_ATTRIB1_NV );
      #endif
      #if defined( GL_VERTEX_ARRAY_RANGE_POINTER_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ARRAY_RANGE_POINTER_APPLE", GL_VERTEX_ARRAY_RANGE_POINTER_APPLE );
      #endif
      #if defined( GL_MAX_ELEMENTS_INDICES )
        ADD_CONST_INT( "GL_MAX_ELEMENTS_INDICES", GL_MAX_ELEMENTS_INDICES );
      #endif
      #if defined( GL_BUMP_ROT_MATRIX_SIZE_ATI )
        ADD_CONST_INT( "GL_BUMP_ROT_MATRIX_SIZE_ATI", GL_BUMP_ROT_MATRIX_SIZE_ATI );
      #endif
      #if defined( GLX_SAMPLE_BUFFERS_3DFX )
        ADD_CONST_INT( "GLX_SAMPLE_BUFFERS_3DFX", GLX_SAMPLE_BUFFERS_3DFX );
      #endif
      #if defined( GLX_VIDEO_OUT_FIELD_1_NV )
        ADD_CONST_INT( "GLX_VIDEO_OUT_FIELD_1_NV", GLX_VIDEO_OUT_FIELD_1_NV );
      #endif
      #if defined( GL_SCALAR_EXT )
        ADD_CONST_INT( "GL_SCALAR_EXT", GL_SCALAR_EXT );
      #endif
      #if defined( GL_GEOMETRY_VERTICES_OUT )
        ADD_CONST_INT( "GL_GEOMETRY_VERTICES_OUT", GL_GEOMETRY_VERTICES_OUT );
      #endif
      #if defined( GLEW_EXT_packed_pixels )
        ADD_CONST_INT( "GLEW_EXT_packed_pixels", GLEW_EXT_packed_pixels );
      #endif
      #if defined( GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS )
        ADD_CONST_INT( "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS", GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS );
      #endif
      #if defined( GL_RGB8 )
        ADD_CONST_INT( "GL_RGB8", GL_RGB8 );
      #endif
      #if defined( GL_VERTEX_PROGRAM_TWO_SIDE_NV )
        ADD_CONST_INT( "GL_VERTEX_PROGRAM_TWO_SIDE_NV", GL_VERTEX_PROGRAM_TWO_SIDE_NV );
      #endif
      #if defined( GL_MODELVIEW3_ARB )
        ADD_CONST_INT( "GL_MODELVIEW3_ARB", GL_MODELVIEW3_ARB );
      #endif
      #if defined( GL_REDUCE )
        ADD_CONST_INT( "GL_REDUCE", GL_REDUCE );
      #endif
      #if defined( GL_UNIFORM_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_UNIFORM_ARRAY_STRIDE", GL_UNIFORM_ARRAY_STRIDE );
      #endif
      #if defined( GL_TEXTURE_SAMPLES )
        ADD_CONST_INT( "GL_TEXTURE_SAMPLES", GL_TEXTURE_SAMPLES );
      #endif
      #if defined( GL_RGB4 )
        ADD_CONST_INT( "GL_RGB4", GL_RGB4 );
      #endif
      #if defined( GL_RGB5 )
        ADD_CONST_INT( "GL_RGB5", GL_RGB5 );
      #endif
      #if defined( GL_PIXEL_CUBIC_WEIGHT_EXT )
        ADD_CONST_INT( "GL_PIXEL_CUBIC_WEIGHT_EXT", GL_PIXEL_CUBIC_WEIGHT_EXT );
      #endif
      #if defined( GL_3DFX_texture_compression_FXT1 )
        ADD_CONST_INT( "GL_3DFX_texture_compression_FXT1", GL_3DFX_texture_compression_FXT1 );
      #endif
      #if defined( GL_POST_COLOR_MATRIX_GREEN_BIAS )
        ADD_CONST_INT( "GL_POST_COLOR_MATRIX_GREEN_BIAS", GL_POST_COLOR_MATRIX_GREEN_BIAS );
      #endif
      #if defined( GL_VERTEX_ID_NV )
        ADD_CONST_INT( "GL_VERTEX_ID_NV", GL_VERTEX_ID_NV );
      #endif
      #if defined( GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH )
        ADD_CONST_INT( "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH", GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH );
      #endif
      #if defined( GL_SAMPLE_COVERAGE_VALUE )
        ADD_CONST_INT( "GL_SAMPLE_COVERAGE_VALUE", GL_SAMPLE_COVERAGE_VALUE );
      #endif
      #if defined( GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB )
        ADD_CONST_INT( "GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB", GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB );
      #endif
      #if defined( GL_GREEN_BIT_ATI )
        ADD_CONST_INT( "GL_GREEN_BIT_ATI", GL_GREEN_BIT_ATI );
      #endif
      #if defined( GL_EYE_LINE_SGIS )
        ADD_CONST_INT( "GL_EYE_LINE_SGIS", GL_EYE_LINE_SGIS );
      #endif
      #if defined( GL_RENDERBUFFER_RED_SIZE )
        ADD_CONST_INT( "GL_RENDERBUFFER_RED_SIZE", GL_RENDERBUFFER_RED_SIZE );
      #endif
      #if defined( GLEW_EXT_vertex_array_bgra )
        ADD_CONST_INT( "GLEW_EXT_vertex_array_bgra", GLEW_EXT_vertex_array_bgra );
      #endif
      #if defined( GLEW_EXT_texture_lod_bias )
        ADD_CONST_INT( "GLEW_EXT_texture_lod_bias", GLEW_EXT_texture_lod_bias );
      #endif
      #if defined( GL_COMPRESSED_SIGNED_RG_RGTC2 )
        ADD_CONST_INT( "GL_COMPRESSED_SIGNED_RG_RGTC2", GL_COMPRESSED_SIGNED_RG_RGTC2 );
      #endif
      #if defined( GL_MAX_ASYNC_TEX_IMAGE_SGIX )
        ADD_CONST_INT( "GL_MAX_ASYNC_TEX_IMAGE_SGIX", GL_MAX_ASYNC_TEX_IMAGE_SGIX );
      #endif
      #if defined( GL_COLOR_INDEXES )
        ADD_CONST_INT( "GL_COLOR_INDEXES", GL_COLOR_INDEXES );
      #endif
      #if defined( GL_RGBA16_SIGNED_SGIX )
        ADD_CONST_INT( "GL_RGBA16_SIGNED_SGIX", GL_RGBA16_SIGNED_SGIX );
      #endif
      #if defined( GL_INGR_blend_func_separate )
        ADD_CONST_INT( "GL_INGR_blend_func_separate", GL_INGR_blend_func_separate );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT", GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT );
      #endif
      #if defined( GL_OPERAND1_ALPHA )
        ADD_CONST_INT( "GL_OPERAND1_ALPHA", GL_OPERAND1_ALPHA );
      #endif
      #if defined( GL_NEVER )
        ADD_CONST_INT( "GL_NEVER", GL_NEVER );
      #endif
      #if defined( GL_STENCIL_VALUE_MASK )
        ADD_CONST_INT( "GL_STENCIL_VALUE_MASK", GL_STENCIL_VALUE_MASK );
      #endif
      #if defined( GL_BLEND_DST )
        ADD_CONST_INT( "GL_BLEND_DST", GL_BLEND_DST );
      #endif
      #if defined( GL_RENDERBUFFER_ALPHA_SIZE_EXT )
        ADD_CONST_INT( "GL_RENDERBUFFER_ALPHA_SIZE_EXT", GL_RENDERBUFFER_ALPHA_SIZE_EXT );
      #endif
      #if defined( GLEW_EXT_gpu_program_parameters )
        ADD_CONST_INT( "GLEW_EXT_gpu_program_parameters", GLEW_EXT_gpu_program_parameters );
      #endif
      #if defined( GL_STENCIL_BACK_WRITEMASK )
        ADD_CONST_INT( "GL_STENCIL_BACK_WRITEMASK", GL_STENCIL_BACK_WRITEMASK );
      #endif
      #if defined( GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV )
        ADD_CONST_INT( "GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV", GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV );
      #endif
      #if defined( GL_COLOR_INDEX12_EXT )
        ADD_CONST_INT( "GL_COLOR_INDEX12_EXT", GL_COLOR_INDEX12_EXT );
      #endif
      #if defined( GL_EXT_texture_lod_bias )
        ADD_CONST_INT( "GL_EXT_texture_lod_bias", GL_EXT_texture_lod_bias );
      #endif
      #if defined( GL_LOAD )
        ADD_CONST_INT( "GL_LOAD", GL_LOAD );
      #endif
      #if defined( GL_STREAM_COPY_ARB )
        ADD_CONST_INT( "GL_STREAM_COPY_ARB", GL_STREAM_COPY_ARB );
      #endif
      #if defined( GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV )
        ADD_CONST_INT( "GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV", GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV );
      #endif
      #if defined( GL_COLOR_TABLE_RED_SIZE_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_RED_SIZE_SGI", GL_COLOR_TABLE_RED_SIZE_SGI );
      #endif
      #if defined( GL_TEXTURE25_ARB )
        ADD_CONST_INT( "GL_TEXTURE25_ARB", GL_TEXTURE25_ARB );
      #endif
      #if defined( GL_INDEX_ARRAY_STRIDE )
        ADD_CONST_INT( "GL_INDEX_ARRAY_STRIDE", GL_INDEX_ARRAY_STRIDE );
      #endif
      #if defined( GL_COMPRESSED_RGBA_ARB )
        ADD_CONST_INT( "GL_COMPRESSED_RGBA_ARB", GL_COMPRESSED_RGBA_ARB );
      #endif
      #if defined( GL_WRAP_BORDER )
        ADD_CONST_INT( "GL_WRAP_BORDER", GL_WRAP_BORDER );
      #endif
      #if defined( GL_MAP2_VERTEX_4 )
        ADD_CONST_INT( "GL_MAP2_VERTEX_4", GL_MAP2_VERTEX_4 );
      #endif
      #if defined( GL_DEPTH_COMPONENT32 )
        ADD_CONST_INT( "GL_DEPTH_COMPONENT32", GL_DEPTH_COMPONENT32 );
      #endif
      #if defined( GL_RGBA )
        ADD_CONST_INT( "GL_RGBA", GL_RGBA );
      #endif
      #if defined( GL_READ_FRAMEBUFFER )
        ADD_CONST_INT( "GL_READ_FRAMEBUFFER", GL_READ_FRAMEBUFFER );
      #endif
      #if defined( GLX_RGBA )
        ADD_CONST_INT( "GLX_RGBA", GLX_RGBA );
      #endif
      #if defined( GL_EXT_texture_filter_anisotropic )
        ADD_CONST_INT( "GL_EXT_texture_filter_anisotropic", GL_EXT_texture_filter_anisotropic );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT", GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT );
      #endif
      #if defined( GL_MIN_PROGRAM_TEXEL_OFFSET )
        ADD_CONST_INT( "GL_MIN_PROGRAM_TEXEL_OFFSET", GL_MIN_PROGRAM_TEXEL_OFFSET );
      #endif
      #if defined( GL_TEXTURE_CUBE_MAP_ARRAY_ARB )
        ADD_CONST_INT( "GL_TEXTURE_CUBE_MAP_ARRAY_ARB", GL_TEXTURE_CUBE_MAP_ARRAY_ARB );
      #endif
      #if defined( GL_FOG_COORDINATE_EXT )
        ADD_CONST_INT( "GL_FOG_COORDINATE_EXT", GL_FOG_COORDINATE_EXT );
      #endif
      #if defined( GL_MAP2_COLOR_4 )
        ADD_CONST_INT( "GL_MAP2_COLOR_4", GL_MAP2_COLOR_4 );
      #endif
      #if defined( GL_VENDOR )
        ADD_CONST_INT( "GL_VENDOR", GL_VENDOR );
      #endif
      #if defined( GL_NORMAL_ARRAY_EXT )
        ADD_CONST_INT( "GL_NORMAL_ARRAY_EXT", GL_NORMAL_ARRAY_EXT );
      #endif
      #if defined( GL_TEXTURE_2D_ARRAY )
        ADD_CONST_INT( "GL_TEXTURE_2D_ARRAY", GL_TEXTURE_2D_ARRAY );
      #endif
      #if defined( GL_ACCUM_BUFFER_BIT )
        ADD_CONST_INT( "GL_ACCUM_BUFFER_BIT", GL_ACCUM_BUFFER_BIT );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD29_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD29_EXT", GL_OUTPUT_TEXTURE_COORD29_EXT );
      #endif
      #if defined( GL_TEXTURE_BINDING_2D )
        ADD_CONST_INT( "GL_TEXTURE_BINDING_2D", GL_TEXTURE_BINDING_2D );
      #endif
      #if defined( GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT )
        ADD_CONST_INT( "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT", GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT );
      #endif
      #if defined( GL_R8UI )
        ADD_CONST_INT( "GL_R8UI", GL_R8UI );
      #endif
      #if defined( GL_PACK_RESAMPLE_SGIX )
        ADD_CONST_INT( "GL_PACK_RESAMPLE_SGIX", GL_PACK_RESAMPLE_SGIX );
      #endif
      #if defined( GL_LINK_STATUS )
        ADD_CONST_INT( "GL_LINK_STATUS", GL_LINK_STATUS );
      #endif
      #if defined( GL_COMPRESSED_SRGB_ALPHA_EXT )
        ADD_CONST_INT( "GL_COMPRESSED_SRGB_ALPHA_EXT", GL_COMPRESSED_SRGB_ALPHA_EXT );
      #endif
      #if defined( GL_MODELVIEW22_ARB )
        ADD_CONST_INT( "GL_MODELVIEW22_ARB", GL_MODELVIEW22_ARB );
      #endif
      #if defined( GL_INSTRUMENT_BUFFER_POINTER_SGIX )
        ADD_CONST_INT( "GL_INSTRUMENT_BUFFER_POINTER_SGIX", GL_INSTRUMENT_BUFFER_POINTER_SGIX );
      #endif
      #if defined( GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE )
        ADD_CONST_INT( "GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE", GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE );
      #endif
      #if defined( GL_SOURCE0_RGB_EXT )
        ADD_CONST_INT( "GL_SOURCE0_RGB_EXT", GL_SOURCE0_RGB_EXT );
      #endif
      #if defined( GL_DRAW_BUFFER1_ARB )
        ADD_CONST_INT( "GL_DRAW_BUFFER1_ARB", GL_DRAW_BUFFER1_ARB );
      #endif
      #if defined( GL_OUTPUT_TEXTURE_COORD9_EXT )
        ADD_CONST_INT( "GL_OUTPUT_TEXTURE_COORD9_EXT", GL_OUTPUT_TEXTURE_COORD9_EXT );
      #endif
      #if defined( GLX_TEXTURE_CUBE_MAP_NEGATIVE_X_ATI )
        ADD_CONST_INT( "GLX_TEXTURE_CUBE_MAP_NEGATIVE_X_ATI", GLX_TEXTURE_CUBE_MAP_NEGATIVE_X_ATI );
      #endif
      #if defined( GLX_TEXTURE_2D_EXT )
        ADD_CONST_INT( "GLX_TEXTURE_2D_EXT", GLX_TEXTURE_2D_EXT );
      #endif
      #if defined( GL_ACTIVE_TEXTURE_ARB )
        ADD_CONST_INT( "GL_ACTIVE_TEXTURE_ARB", GL_ACTIVE_TEXTURE_ARB );
      #endif
      #if defined( GL_MAX )
        ADD_CONST_INT( "GL_MAX", GL_MAX );
      #endif
      #if defined( GL_PROXY_TEXTURE_2D_ARRAY )
        ADD_CONST_INT( "GL_PROXY_TEXTURE_2D_ARRAY", GL_PROXY_TEXTURE_2D_ARRAY );
      #endif
      #if defined( GL_MAX_GEOMETRY_SHADER_INVOCATIONS )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_SHADER_INVOCATIONS", GL_MAX_GEOMETRY_SHADER_INVOCATIONS );
      #endif
      #if defined( GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI )
        ADD_CONST_INT( "GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI", GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI );
      #endif
      #if defined( GL_COLOR_TABLE_SCALE_SGI )
        ADD_CONST_INT( "GL_COLOR_TABLE_SCALE_SGI", GL_COLOR_TABLE_SCALE_SGI );
      #endif
      #if defined( GL_SEPARABLE_2D_EXT )
        ADD_CONST_INT( "GL_SEPARABLE_2D_EXT", GL_SEPARABLE_2D_EXT );
      #endif
      #if defined( GL_FULL_RANGE_EXT )
        ADD_CONST_INT( "GL_FULL_RANGE_EXT", GL_FULL_RANGE_EXT );
      #endif
      #if defined( GL_SAMPLE_MASK_SGIS )
        ADD_CONST_INT( "GL_SAMPLE_MASK_SGIS", GL_SAMPLE_MASK_SGIS );
      #endif
      #if defined( GL_AUTO_NORMAL )
        ADD_CONST_INT( "GL_AUTO_NORMAL", GL_AUTO_NORMAL );
      #endif
      #if defined( GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS )
        ADD_CONST_INT( "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS", GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS );
      #endif
      #if defined( GLX_EXT_texture_from_pixmap )
        ADD_CONST_INT( "GLX_EXT_texture_from_pixmap", GLX_EXT_texture_from_pixmap );
      #endif
      #if defined( GL_QUERY_BY_REGION_WAIT_NV )
        ADD_CONST_INT( "GL_QUERY_BY_REGION_WAIT_NV", GL_QUERY_BY_REGION_WAIT_NV );
      #endif
      #if defined( GL_VERTEX_WEIGHTING_EXT )
        ADD_CONST_INT( "GL_VERTEX_WEIGHTING_EXT", GL_VERTEX_WEIGHTING_EXT );
      #endif
      #if defined( GL_SAMPLER_1D_SHADOW )
        ADD_CONST_INT( "GL_SAMPLER_1D_SHADOW", GL_SAMPLER_1D_SHADOW );
      #endif
      #if defined( GL_EXT_texture3D )
        ADD_CONST_INT( "GL_EXT_texture3D", GL_EXT_texture3D );
      #endif
      #if defined( GL_SEPARATE_SPECULAR_COLOR )
        ADD_CONST_INT( "GL_SEPARATE_SPECULAR_COLOR", GL_SEPARATE_SPECULAR_COLOR );
      #endif
      #if defined( GL_SAMPLER_2D_SHADOW )
        ADD_CONST_INT( "GL_SAMPLER_2D_SHADOW", GL_SAMPLER_2D_SHADOW );
      #endif
      #if defined( GL_SOURCE1_ALPHA_ARB )
        ADD_CONST_INT( "GL_SOURCE1_ALPHA_ARB", GL_SOURCE1_ALPHA_ARB );
      #endif
      #if defined( GL_TEXTURE_MATRIX )
        ADD_CONST_INT( "GL_TEXTURE_MATRIX", GL_TEXTURE_MATRIX );
      #endif
      #if defined( GL_LUMINANCE12_ALPHA4_EXT )
        ADD_CONST_INT( "GL_LUMINANCE12_ALPHA4_EXT", GL_LUMINANCE12_ALPHA4_EXT );
      #endif
      #if defined( GLX_SAMPLE_BUFFERS )
        ADD_CONST_INT( "GLX_SAMPLE_BUFFERS", GLX_SAMPLE_BUFFERS );
      #endif
      #if defined( GL_RG16F )
        ADD_CONST_INT( "GL_RG16F", GL_RG16F );
      #endif
      #if defined( GLEW_OML_subsample )
        ADD_CONST_INT( "GLEW_OML_subsample", GLEW_OML_subsample );
      #endif
      #if defined( GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL )
        ADD_CONST_INT( "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL );
      #endif
      #if defined( GL_LINES_ADJACENCY_ARB )
        ADD_CONST_INT( "GL_LINES_ADJACENCY_ARB", GL_LINES_ADJACENCY_ARB );
      #endif
      #if defined( GLXEW_3DFX_multisample )
        ADD_CONST_INT( "GLXEW_3DFX_multisample", GLXEW_3DFX_multisample );
      #endif
      #if defined( GL_RG16I )
        ADD_CONST_INT( "GL_RG16I", GL_RG16I );
      #endif
      #if defined( GL_WRITE_ONLY )
        ADD_CONST_INT( "GL_WRITE_ONLY", GL_WRITE_ONLY );
      #endif
      #if defined( GL_TEXTURE_COORD_NV )
        ADD_CONST_INT( "GL_TEXTURE_COORD_NV", GL_TEXTURE_COORD_NV );
      #endif
      #if defined( GLX_PBUFFER_SGIX )
        ADD_CONST_INT( "GLX_PBUFFER_SGIX", GLX_PBUFFER_SGIX );
      #endif
      #if defined( GL_ALPHA32I_EXT )
        ADD_CONST_INT( "GL_ALPHA32I_EXT", GL_ALPHA32I_EXT );
      #endif
      #if defined( GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE )
        ADD_CONST_INT( "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE", GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE );
      #endif
      #if defined( GL_STENCIL_ATTACHMENT )
        ADD_CONST_INT( "GL_STENCIL_ATTACHMENT", GL_STENCIL_ATTACHMENT );
      #endif
      #if defined( GL_MAP1_BINORMAL_EXT )
        ADD_CONST_INT( "GL_MAP1_BINORMAL_EXT", GL_MAP1_BINORMAL_EXT );
      #endif
      #if defined( GL_SAMPLE_COVERAGE )
        ADD_CONST_INT( "GL_SAMPLE_COVERAGE", GL_SAMPLE_COVERAGE );
      #endif
      #if defined( GLEW_EXT_pixel_buffer_object )
        ADD_CONST_INT( "GLEW_EXT_pixel_buffer_object", GLEW_EXT_pixel_buffer_object );
      #endif
      #if defined( GL_TEXTURE_3D_BINDING_EXT )
        ADD_CONST_INT( "GL_TEXTURE_3D_BINDING_EXT", GL_TEXTURE_3D_BINDING_EXT );
      #endif
      #if defined( GL_SHININESS )
        ADD_CONST_INT( "GL_SHININESS", GL_SHININESS );
      #endif
      #if defined( GL_DRAW_FRAMEBUFFER )
        ADD_CONST_INT( "GL_DRAW_FRAMEBUFFER", GL_DRAW_FRAMEBUFFER );
      #endif
      #if defined( GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV )
        ADD_CONST_INT( "GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV", GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV );
      #endif

      ADD_FUNC( Accum, "<Size op,<Scalar value" );
      ADD_FUNC( AlphaFunc, "<Size func,<Scalar ref" );
      ADD_FUNC( AreTexturesResident, "=Boolean,<Size n,<Data textures,<Data residences" );
      ADD_FUNC( ArrayElement, "<Integer i" );
      ADD_FUNC( Begin, "<Size mode" );
      ADD_FUNC( BindTexture, "<Size target,<Size texture" );
      ADD_FUNC( Bitmap, "<Size width,<Size height,<Scalar xorig,<Scalar yorig,<Scalar xmove,<Scalar ymove,<Data bitmap" );
      ADD_FUNC( BlendFunc, "<Size sfactor,<Size dfactor" );
      ADD_FUNC( CallList, "<Size list" );
      ADD_FUNC( CallLists, "<Size n,<Size type,<Data lists" );
      ADD_FUNC( Clear, "<Integer mask" );
      ADD_FUNC( ClearAccum, "<Scalar red,<Scalar green,<Scalar blue,<Scalar alpha" );
      ADD_FUNC( ClearColor, "<Scalar red,<Scalar green,<Scalar blue,<Scalar alpha" );
      ADD_FUNC( ClearDepth, "<Scalar depth" );
      ADD_FUNC( ClearIndex, "<Scalar c" );
      ADD_FUNC( ClearStencil, "<Integer s" );
      ADD_FUNC( ClipPlane, "<Size plane,<Data equation" );
      ADD_FUNC( Color3b, "<Byte red,<Byte green,<Byte blue" );
      ADD_FUNC( Color3bv, "<Data v" );
      ADD_FUNC( Color3d, "<Scalar red,<Scalar green,<Scalar blue" );
      ADD_FUNC( Color3dv, "<Data v" );
      ADD_FUNC( Color3f, "<Scalar red,<Scalar green,<Scalar blue" );
      ADD_FUNC( Color3fv, "<Data v" );
      ADD_FUNC( Color3i, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( Color3iv, "<Data v" );
      ADD_FUNC( Color3s, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( Color3sv, "<Data v" );
      ADD_FUNC( Color3ub, "<Size red,<Size green,<Size blue" );
      ADD_FUNC( Color3ubv, "<Data v" );
      ADD_FUNC( Color3ui, "<Size red,<Size green,<Size blue" );
      ADD_FUNC( Color3uiv, "<Data v" );
      ADD_FUNC( Color3us, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( Color3usv, "<Data v" );
      ADD_FUNC( Color4b, "<Byte red,<Byte green,<Byte blue,<Byte alpha" );
      ADD_FUNC( Color4bv, "<Data v" );
      ADD_FUNC( Color4d, "<Scalar red,<Scalar green,<Scalar blue,<Scalar alpha" );
      ADD_FUNC( Color4dv, "<Data v" );
      ADD_FUNC( Color4f, "<Scalar red,<Scalar green,<Scalar blue,<Scalar alpha" );
      ADD_FUNC( Color4fv, "<Data v" );
      ADD_FUNC( Color4i, "<Integer red,<Integer green,<Integer blue,<Integer alpha" );
      ADD_FUNC( Color4iv, "<Data v" );
      ADD_FUNC( Color4s, "<Integer red,<Integer green,<Integer blue,<Integer alpha" );
      ADD_FUNC( Color4sv, "<Data v" );
      ADD_FUNC( Color4ub, "<Size red,<Size green,<Size blue,<Size alpha" );
      ADD_FUNC( Color4ubv, "<Data v" );
      ADD_FUNC( Color4ui, "<Size red,<Size green,<Size blue,<Size alpha" );
      ADD_FUNC( Color4uiv, "<Data v" );
      ADD_FUNC( Color4us, "<Integer red,<Integer green,<Integer blue,<Integer alpha" );
      ADD_FUNC( Color4usv, "<Data v" );
      ADD_FUNC( ColorMask, "<Boolean red,<Boolean green,<Boolean blue,<Boolean alpha" );
      ADD_FUNC( ColorMaterial, "<Size face,<Size mode" );
      ADD_FUNC( ColorPointer, "<Integer size,<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( CopyPixels, "<Integer x,<Integer y,<Size width,<Size height,<Size type" );
      ADD_FUNC( CopyTexImage1D, "<Size target,<Integer level,<Size internalFormat,<Integer x,<Integer y,<Size width,<Integer border" );
      ADD_FUNC( CopyTexImage2D, "<Size target,<Integer level,<Size internalFormat,<Integer x,<Integer y,<Size width,<Size height,<Integer border" );
      ADD_FUNC( CopyTexSubImage1D, "<Size target,<Integer level,<Integer xoffset,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( CopyTexSubImage2D, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( CullFace, "<Size mode" );
      ADD_FUNC( DeleteLists, "<Size list,<Size range" );
      ADD_FUNC( DeleteTextures, "<Size n,<Data textures" );
      ADD_FUNC( DepthFunc, "<Size func" );
      ADD_FUNC( DepthMask, "<Boolean flag" );
      ADD_FUNC( DepthRange, "<Scalar zNear,<Scalar zFar" );
      ADD_FUNC( Disable, "<Size cap" );
      ADD_FUNC( DisableClientState, "<Size array" );
      ADD_FUNC( DrawArrays, "<Size mode,<Integer first,<Size count" );
      ADD_FUNC( DrawBuffer, "<Size mode" );
      ADD_FUNC( DrawElements, "<Size mode,<Size count,<Size type,<Data indices" );
      ADD_FUNC( DrawPixels, "<Size width,<Size height,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( EdgeFlag, "<Boolean flag" );
      ADD_FUNC( EdgeFlagPointer, "<Size stride,<Data pointer" );
      ADD_FUNC( EdgeFlagv, "<Data flag" );
      ADD_FUNC( Enable, "<Size cap" );
      ADD_FUNC( EnableClientState, "<Size array" );
      ADD_FUNC( End, "" );
      ADD_FUNC( EndList, "" );
      ADD_FUNC( EvalCoord1d, "<Scalar u" );
      ADD_FUNC( EvalCoord1dv, "<Data u" );
      ADD_FUNC( EvalCoord1f, "<Scalar u" );
      ADD_FUNC( EvalCoord1fv, "<Data u" );
      ADD_FUNC( EvalCoord2d, "<Scalar u,<Scalar v" );
      ADD_FUNC( EvalCoord2dv, "<Data u" );
      ADD_FUNC( EvalCoord2f, "<Scalar u,<Scalar v" );
      ADD_FUNC( EvalCoord2fv, "<Data u" );
      ADD_FUNC( EvalMesh1, "<Size mode,<Integer i1,<Integer i2" );
      ADD_FUNC( EvalMesh2, "<Size mode,<Integer i1,<Integer i2,<Integer j1,<Integer j2" );
      ADD_FUNC( EvalPoint1, "<Integer i" );
      ADD_FUNC( EvalPoint2, "<Integer i,<Integer j" );
      ADD_FUNC( FeedbackBuffer, "<Size size,<Size type,<Data buffer" );
      ADD_FUNC( Finish, "" );
      ADD_FUNC( Flush, "" );
      ADD_FUNC( Fogf, "<Size pname,<Scalar param" );
      ADD_FUNC( Fogfv, "<Size pname,<Data params" );
      ADD_FUNC( Fogi, "<Size pname,<Integer param" );
      ADD_FUNC( Fogiv, "<Size pname,<Data params" );
      ADD_FUNC( FrontFace, "<Size mode" );
      ADD_FUNC( Frustum, "<Scalar left,<Scalar right,<Scalar bottom,<Scalar top,<Scalar zNear,<Scalar zFar" );
      ADD_FUNC( GenLists, "=Size,<Size range" );
      ADD_FUNC( GenTextures, "<Size n,<Data textures" );
      ADD_FUNC( GetBooleanv, "<Size pname,<Data params" );
      ADD_FUNC( GetClipPlane, "<Size plane,<Data equation" );
      ADD_FUNC( GetDoublev, "<Size pname,<Data params" );
      ADD_FUNC( GetError, "=Size" );
      ADD_FUNC( GetFloatv, "<Size pname,<Data params" );
      ADD_FUNC( GetIntegerv, "<Size pname,<Data params" );
      ADD_FUNC( GetLightfv, "<Size light,<Size pname,<Data params" );
      ADD_FUNC( GetLightiv, "<Size light,<Size pname,<Data params" );
      ADD_FUNC( GetMapdv, "<Size target,<Size query,<Data v" );
      ADD_FUNC( GetMapfv, "<Size target,<Size query,<Data v" );
      ADD_FUNC( GetMapiv, "<Size target,<Size query,<Data v" );
      ADD_FUNC( GetMaterialfv, "<Size face,<Size pname,<Data params" );
      ADD_FUNC( GetMaterialiv, "<Size face,<Size pname,<Data params" );
      ADD_FUNC( GetPixelMapfv, "<Size map,<Data values" );
      ADD_FUNC( GetPixelMapuiv, "<Size map,<Data values" );
      ADD_FUNC( GetPixelMapusv, "<Size map,<Data values" );
      ADD_FUNC( GetPolygonStipple, "<Data mask" );
      ADD_FUNC( GetString, "=Size,<Size name" );
      ADD_FUNC( GetTexEnvfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetTexEnviv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetTexGendv, "<Size coord,<Size pname,<Data params" );
      ADD_FUNC( GetTexGenfv, "<Size coord,<Size pname,<Data params" );
      ADD_FUNC( GetTexGeniv, "<Size coord,<Size pname,<Data params" );
      ADD_FUNC( GetTexImage, "<Size target,<Integer level,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( GetTexLevelParameterfv, "<Size target,<Integer level,<Size pname,<Data params" );
      ADD_FUNC( GetTexLevelParameteriv, "<Size target,<Integer level,<Size pname,<Data params" );
      ADD_FUNC( GetTexParameterfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetTexParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( Hint, "<Size target,<Size mode" );
      ADD_FUNC( IndexMask, "<Size mask" );
      ADD_FUNC( IndexPointer, "<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( Indexd, "<Scalar c" );
      ADD_FUNC( Indexdv, "<Data c" );
      ADD_FUNC( Indexf, "<Scalar c" );
      ADD_FUNC( Indexfv, "<Data c" );
      ADD_FUNC( Indexi, "<Integer c" );
      ADD_FUNC( Indexiv, "<Data c" );
      ADD_FUNC( Indexs, "<Integer c" );
      ADD_FUNC( Indexsv, "<Data c" );
      ADD_FUNC( Indexub, "<Size c" );
      ADD_FUNC( Indexubv, "<Data c" );
      ADD_FUNC( InitNames, "" );
      ADD_FUNC( InterleavedArrays, "<Size format,<Size stride,<Data pointer" );
      ADD_FUNC( IsEnabled, "=Boolean,<Size cap" );
      ADD_FUNC( IsList, "=Boolean,<Size list" );
      ADD_FUNC( IsTexture, "=Boolean,<Size texture" );
      ADD_FUNC( LightModelf, "<Size pname,<Scalar param" );
      ADD_FUNC( LightModelfv, "<Size pname,<Data params" );
      ADD_FUNC( LightModeli, "<Size pname,<Integer param" );
      ADD_FUNC( LightModeliv, "<Size pname,<Data params" );
      ADD_FUNC( Lightf, "<Size light,<Size pname,<Scalar param" );
      ADD_FUNC( Lightfv, "<Size light,<Size pname,<Data params" );
      ADD_FUNC( Lighti, "<Size light,<Size pname,<Integer param" );
      ADD_FUNC( Lightiv, "<Size light,<Size pname,<Data params" );
      ADD_FUNC( LineStipple, "<Integer factor,<Integer pattern" );
      ADD_FUNC( LineWidth, "<Scalar width" );
      ADD_FUNC( ListBase, "<Size base" );
      ADD_FUNC( LoadIdentity, "" );
      ADD_FUNC( LoadMatrixd, "<Data m" );
      ADD_FUNC( LoadMatrixf, "<Data m" );
      ADD_FUNC( LoadName, "<Size name" );
      ADD_FUNC( LogicOp, "<Size opcode" );
      ADD_FUNC( Map1d, "<Size target,<Scalar u1,<Scalar u2,<Integer stride,<Integer order,<Data points" );
      ADD_FUNC( Map1f, "<Size target,<Scalar u1,<Scalar u2,<Integer stride,<Integer order,<Data points" );
      ADD_FUNC( Map2d, "<Size target,<Scalar u1,<Scalar u2,<Integer ustride,<Integer uorder,<Scalar v1,<Scalar v2,<Integer vstride,<Integer vorder,<Data points" );
      ADD_FUNC( Map2f, "<Size target,<Scalar u1,<Scalar u2,<Integer ustride,<Integer uorder,<Scalar v1,<Scalar v2,<Integer vstride,<Integer vorder,<Data points" );
      ADD_FUNC( MapGrid1d, "<Integer un,<Scalar u1,<Scalar u2" );
      ADD_FUNC( MapGrid1f, "<Integer un,<Scalar u1,<Scalar u2" );
      ADD_FUNC( MapGrid2d, "<Integer un,<Scalar u1,<Scalar u2,<Integer vn,<Scalar v1,<Scalar v2" );
      ADD_FUNC( MapGrid2f, "<Integer un,<Scalar u1,<Scalar u2,<Integer vn,<Scalar v1,<Scalar v2" );
      ADD_FUNC( Materialf, "<Size face,<Size pname,<Scalar param" );
      ADD_FUNC( Materialfv, "<Size face,<Size pname,<Data params" );
      ADD_FUNC( Materiali, "<Size face,<Size pname,<Integer param" );
      ADD_FUNC( Materialiv, "<Size face,<Size pname,<Data params" );
      ADD_FUNC( MatrixMode, "<Size mode" );
      ADD_FUNC( MultMatrixd, "<Data m" );
      ADD_FUNC( MultMatrixf, "<Data m" );
      ADD_FUNC( NewList, "<Size list,<Size mode" );
      ADD_FUNC( Normal3b, "<Byte nx,<Byte ny,<Byte nz" );
      ADD_FUNC( Normal3bv, "<Data v" );
      ADD_FUNC( Normal3d, "<Scalar nx,<Scalar ny,<Scalar nz" );
      ADD_FUNC( Normal3dv, "<Data v" );
      ADD_FUNC( Normal3f, "<Scalar nx,<Scalar ny,<Scalar nz" );
      ADD_FUNC( Normal3fv, "<Data v" );
      ADD_FUNC( Normal3i, "<Integer nx,<Integer ny,<Integer nz" );
      ADD_FUNC( Normal3iv, "<Data v" );
      ADD_FUNC( Normal3s, "<Integer nx,<Integer ny,<Integer nz" );
      ADD_FUNC( Normal3sv, "<Data v" );
      ADD_FUNC( NormalPointer, "<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( Ortho, "<Scalar left,<Scalar right,<Scalar bottom,<Scalar top,<Scalar zNear,<Scalar zFar" );
      ADD_FUNC( PassThrough, "<Scalar token" );
      ADD_FUNC( PixelMapfv, "<Size map,<Size mapsize,<Data values" );
      ADD_FUNC( PixelMapuiv, "<Size map,<Size mapsize,<Data values" );
      ADD_FUNC( PixelMapusv, "<Size map,<Size mapsize,<Data values" );
      ADD_FUNC( PixelStoref, "<Size pname,<Scalar param" );
      ADD_FUNC( PixelStorei, "<Size pname,<Integer param" );
      ADD_FUNC( PixelTransferf, "<Size pname,<Scalar param" );
      ADD_FUNC( PixelTransferi, "<Size pname,<Integer param" );
      ADD_FUNC( PixelZoom, "<Scalar xfactor,<Scalar yfactor" );
      ADD_FUNC( PointSize, "<Scalar size" );
      ADD_FUNC( PolygonMode, "<Size face,<Size mode" );
      ADD_FUNC( PolygonOffset, "<Scalar factor,<Scalar units" );
      ADD_FUNC( PolygonStipple, "<Data mask" );
      ADD_FUNC( PopAttrib, "" );
      ADD_FUNC( PopClientAttrib, "" );
      ADD_FUNC( PopMatrix, "" );
      ADD_FUNC( PopName, "" );
      ADD_FUNC( PrioritizeTextures, "<Size n,<Data textures,<Data priorities" );
      ADD_FUNC( PushAttrib, "<Integer mask" );
      ADD_FUNC( PushClientAttrib, "<Integer mask" );
      ADD_FUNC( PushMatrix, "" );
      ADD_FUNC( PushName, "<Size name" );
      ADD_FUNC( RasterPos2d, "<Scalar x,<Scalar y" );
      ADD_FUNC( RasterPos2dv, "<Data v" );
      ADD_FUNC( RasterPos2f, "<Scalar x,<Scalar y" );
      ADD_FUNC( RasterPos2fv, "<Data v" );
      ADD_FUNC( RasterPos2i, "<Integer x,<Integer y" );
      ADD_FUNC( RasterPos2iv, "<Data v" );
      ADD_FUNC( RasterPos2s, "<Integer x,<Integer y" );
      ADD_FUNC( RasterPos2sv, "<Data v" );
      ADD_FUNC( RasterPos3d, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( RasterPos3dv, "<Data v" );
      ADD_FUNC( RasterPos3f, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( RasterPos3fv, "<Data v" );
      ADD_FUNC( RasterPos3i, "<Integer x,<Integer y,<Integer z" );
      ADD_FUNC( RasterPos3iv, "<Data v" );
      ADD_FUNC( RasterPos3s, "<Integer x,<Integer y,<Integer z" );
      ADD_FUNC( RasterPos3sv, "<Data v" );
      ADD_FUNC( RasterPos4d, "<Scalar x,<Scalar y,<Scalar z,<Scalar w" );
      ADD_FUNC( RasterPos4dv, "<Data v" );
      ADD_FUNC( RasterPos4f, "<Scalar x,<Scalar y,<Scalar z,<Scalar w" );
      ADD_FUNC( RasterPos4fv, "<Data v" );
      ADD_FUNC( RasterPos4i, "<Integer x,<Integer y,<Integer z,<Integer w" );
      ADD_FUNC( RasterPos4iv, "<Data v" );
      ADD_FUNC( RasterPos4s, "<Integer x,<Integer y,<Integer z,<Integer w" );
      ADD_FUNC( RasterPos4sv, "<Data v" );
      ADD_FUNC( ReadBuffer, "<Size mode" );
      ADD_FUNC( ReadPixels, "<Integer x,<Integer y,<Size width,<Size height,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( Rectd, "<Scalar x1,<Scalar y1,<Scalar x2,<Scalar y2" );
      ADD_FUNC( Rectdv, "<Data v1,<Data v2" );
      ADD_FUNC( Rectf, "<Scalar x1,<Scalar y1,<Scalar x2,<Scalar y2" );
      ADD_FUNC( Rectfv, "<Data v1,<Data v2" );
      ADD_FUNC( Recti, "<Integer x1,<Integer y1,<Integer x2,<Integer y2" );
      ADD_FUNC( Rectiv, "<Data v1,<Data v2" );
      ADD_FUNC( Rects, "<Integer x1,<Integer y1,<Integer x2,<Integer y2" );
      ADD_FUNC( Rectsv, "<Data v1,<Data v2" );
      ADD_FUNC( RenderMode, "=Integer,<Size mode" );
      ADD_FUNC( Rotated, "<Scalar angle,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( Rotatef, "<Scalar angle,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( Scaled, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( Scalef, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( Scissor, "<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( SelectBuffer, "<Size size,<Data buffer" );
      ADD_FUNC( ShadeModel, "<Size mode" );
      ADD_FUNC( StencilFunc, "<Size func,<Integer ref,<Size mask" );
      ADD_FUNC( StencilMask, "<Size mask" );
      ADD_FUNC( StencilOp, "<Size fail,<Size zfail,<Size zpass" );
      ADD_FUNC( TexCoord1d, "<Scalar s" );
      ADD_FUNC( TexCoord1dv, "<Data v" );
      ADD_FUNC( TexCoord1f, "<Scalar s" );
      ADD_FUNC( TexCoord1fv, "<Data v" );
      ADD_FUNC( TexCoord1i, "<Integer s" );
      ADD_FUNC( TexCoord1iv, "<Data v" );
      ADD_FUNC( TexCoord1s, "<Integer s" );
      ADD_FUNC( TexCoord1sv, "<Data v" );
      ADD_FUNC( TexCoord2d, "<Scalar s,<Scalar t" );
      ADD_FUNC( TexCoord2dv, "<Data v" );
      ADD_FUNC( TexCoord2f, "<Scalar s,<Scalar t" );
      ADD_FUNC( TexCoord2fv, "<Data v" );
      ADD_FUNC( TexCoord2i, "<Integer s,<Integer t" );
      ADD_FUNC( TexCoord2iv, "<Data v" );
      ADD_FUNC( TexCoord2s, "<Integer s,<Integer t" );
      ADD_FUNC( TexCoord2sv, "<Data v" );
      ADD_FUNC( TexCoord3d, "<Scalar s,<Scalar t,<Scalar r" );
      ADD_FUNC( TexCoord3dv, "<Data v" );
      ADD_FUNC( TexCoord3f, "<Scalar s,<Scalar t,<Scalar r" );
      ADD_FUNC( TexCoord3fv, "<Data v" );
      ADD_FUNC( TexCoord3i, "<Integer s,<Integer t,<Integer r" );
      ADD_FUNC( TexCoord3iv, "<Data v" );
      ADD_FUNC( TexCoord3s, "<Integer s,<Integer t,<Integer r" );
      ADD_FUNC( TexCoord3sv, "<Data v" );
      ADD_FUNC( TexCoord4d, "<Scalar s,<Scalar t,<Scalar r,<Scalar q" );
      ADD_FUNC( TexCoord4dv, "<Data v" );
      ADD_FUNC( TexCoord4f, "<Scalar s,<Scalar t,<Scalar r,<Scalar q" );
      ADD_FUNC( TexCoord4fv, "<Data v" );
      ADD_FUNC( TexCoord4i, "<Integer s,<Integer t,<Integer r,<Integer q" );
      ADD_FUNC( TexCoord4iv, "<Data v" );
      ADD_FUNC( TexCoord4s, "<Integer s,<Integer t,<Integer r,<Integer q" );
      ADD_FUNC( TexCoord4sv, "<Data v" );
      ADD_FUNC( TexCoordPointer, "<Integer size,<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( TexEnvf, "<Size target,<Size pname,<Scalar param" );
      ADD_FUNC( TexEnvfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( TexEnvi, "<Size target,<Size pname,<Integer param" );
      ADD_FUNC( TexEnviv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( TexGend, "<Size coord,<Size pname,<Scalar param" );
      ADD_FUNC( TexGendv, "<Size coord,<Size pname,<Data params" );
      ADD_FUNC( TexGenf, "<Size coord,<Size pname,<Scalar param" );
      ADD_FUNC( TexGenfv, "<Size coord,<Size pname,<Data params" );
      ADD_FUNC( TexGeni, "<Size coord,<Size pname,<Integer param" );
      ADD_FUNC( TexGeniv, "<Size coord,<Size pname,<Data params" );
      ADD_FUNC( TexImage1D, "<Size target,<Integer level,<Integer internalformat,<Size width,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TexImage2D, "<Size target,<Integer level,<Integer internalformat,<Size width,<Size height,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TexParameterf, "<Size target,<Size pname,<Scalar param" );
      ADD_FUNC( TexParameterfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( TexParameteri, "<Size target,<Size pname,<Integer param" );
      ADD_FUNC( TexParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( TexSubImage1D, "<Size target,<Integer level,<Integer xoffset,<Size width,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TexSubImage2D, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Size width,<Size height,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( Translated, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( Translatef, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( Vertex2d, "<Scalar x,<Scalar y" );
      ADD_FUNC( Vertex2dv, "<Data v" );
      ADD_FUNC( Vertex2f, "<Scalar x,<Scalar y" );
      ADD_FUNC( Vertex2fv, "<Data v" );
      ADD_FUNC( Vertex2i, "<Integer x,<Integer y" );
      ADD_FUNC( Vertex2iv, "<Data v" );
      ADD_FUNC( Vertex2s, "<Integer x,<Integer y" );
      ADD_FUNC( Vertex2sv, "<Data v" );
      ADD_FUNC( Vertex3d, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( Vertex3dv, "<Data v" );
      ADD_FUNC( Vertex3f, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( Vertex3fv, "<Data v" );
      ADD_FUNC( Vertex3i, "<Integer x,<Integer y,<Integer z" );
      ADD_FUNC( Vertex3iv, "<Data v" );
      ADD_FUNC( Vertex3s, "<Integer x,<Integer y,<Integer z" );
      ADD_FUNC( Vertex3sv, "<Data v" );
      ADD_FUNC( Vertex4d, "<Scalar x,<Scalar y,<Scalar z,<Scalar w" );
      ADD_FUNC( Vertex4dv, "<Data v" );
      ADD_FUNC( Vertex4f, "<Scalar x,<Scalar y,<Scalar z,<Scalar w" );
      ADD_FUNC( Vertex4fv, "<Data v" );
      ADD_FUNC( Vertex4i, "<Integer x,<Integer y,<Integer z,<Integer w" );
      ADD_FUNC( Vertex4iv, "<Data v" );
      ADD_FUNC( Vertex4s, "<Integer x,<Integer y,<Integer z,<Integer w" );
      ADD_FUNC( Vertex4sv, "<Data v" );
      ADD_FUNC( VertexPointer, "<Integer size,<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( Viewport, "<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( CopyTexSubImage3D, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( DrawRangeElements, "<Size mode,<Size start,<Size end,<Size count,<Size type,<Data indices" );
      ADD_FUNC( TexImage3D, "<Size target,<Integer level,<Integer internalFormat,<Size width,<Size height,<Size depth,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TexSubImage3D, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Size width,<Size height,<Size depth,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( ActiveTexture, "<Size texture" );
      ADD_FUNC( ClientActiveTexture, "<Size texture" );
      ADD_FUNC( CompressedTexImage1D, "<Size target,<Integer level,<Size internalformat,<Size width,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTexImage2D, "<Size target,<Integer level,<Size internalformat,<Size width,<Size height,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTexImage3D, "<Size target,<Integer level,<Size internalformat,<Size width,<Size height,<Size depth,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTexSubImage1D, "<Size target,<Integer level,<Integer xoffset,<Size width,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTexSubImage2D, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Size width,<Size height,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTexSubImage3D, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Size width,<Size height,<Size depth,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( GetCompressedTexImage, "<Size target,<Integer lod,<Data img" );
      ADD_FUNC( MultiTexCoord1d, "<Size target,<Scalar s" );
      ADD_FUNC( MultiTexCoord1dv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord1f, "<Size target,<Scalar s" );
      ADD_FUNC( MultiTexCoord1fv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord1i, "<Size target,<Integer s" );
      ADD_FUNC( MultiTexCoord1iv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord1s, "<Size target,<Integer s" );
      ADD_FUNC( MultiTexCoord1sv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord2d, "<Size target,<Scalar s,<Scalar t" );
      ADD_FUNC( MultiTexCoord2dv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord2f, "<Size target,<Scalar s,<Scalar t" );
      ADD_FUNC( MultiTexCoord2fv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord2i, "<Size target,<Integer s,<Integer t" );
      ADD_FUNC( MultiTexCoord2iv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord2s, "<Size target,<Integer s,<Integer t" );
      ADD_FUNC( MultiTexCoord2sv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord3d, "<Size target,<Scalar s,<Scalar t,<Scalar r" );
      ADD_FUNC( MultiTexCoord3dv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord3f, "<Size target,<Scalar s,<Scalar t,<Scalar r" );
      ADD_FUNC( MultiTexCoord3fv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord3i, "<Size target,<Integer s,<Integer t,<Integer r" );
      ADD_FUNC( MultiTexCoord3iv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord3s, "<Size target,<Integer s,<Integer t,<Integer r" );
      ADD_FUNC( MultiTexCoord3sv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord4d, "<Size target,<Scalar s,<Scalar t,<Scalar r,<Scalar q" );
      ADD_FUNC( MultiTexCoord4dv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord4f, "<Size target,<Scalar s,<Scalar t,<Scalar r,<Scalar q" );
      ADD_FUNC( MultiTexCoord4fv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord4i, "<Size target,<Integer s,<Integer t,<Integer r,<Integer q" );
      ADD_FUNC( MultiTexCoord4iv, "<Size target,<Data v" );
      ADD_FUNC( MultiTexCoord4s, "<Size target,<Integer s,<Integer t,<Integer r,<Integer q" );
      ADD_FUNC( MultiTexCoord4sv, "<Size target,<Data v" );
      ADD_FUNC( SampleCoverage, "<Scalar value,<Boolean invert" );
      ADD_FUNC( BlendColor, "<Scalar red,<Scalar green,<Scalar blue,<Scalar alpha" );
      ADD_FUNC( BlendEquation, "<Size mode" );
      ADD_FUNC( BlendFuncSeparate, "<Size sfactorRGB,<Size dfactorRGB,<Size sfactorAlpha,<Size dfactorAlpha" );
      ADD_FUNC( FogCoordPointer, "<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( FogCoordd, "<Scalar coord" );
      ADD_FUNC( FogCoorddv, "<Data coord" );
      ADD_FUNC( FogCoordf, "<Scalar coord" );
      ADD_FUNC( FogCoordfv, "<Data coord" );
      ADD_FUNC( MultiDrawArrays, "<Size mode,<Data first,<Data count,<Size primcount" );
      ADD_FUNC( PointParameterf, "<Size pname,<Scalar param" );
      ADD_FUNC( PointParameterfv, "<Size pname,<Data params" );
      ADD_FUNC( PointParameteri, "<Size pname,<Integer param" );
      ADD_FUNC( PointParameteriv, "<Size pname,<Data params" );
      ADD_FUNC( SecondaryColor3b, "<Byte red,<Byte green,<Byte blue" );
      ADD_FUNC( SecondaryColor3bv, "<Data v" );
      ADD_FUNC( SecondaryColor3d, "<Scalar red,<Scalar green,<Scalar blue" );
      ADD_FUNC( SecondaryColor3dv, "<Data v" );
      ADD_FUNC( SecondaryColor3f, "<Scalar red,<Scalar green,<Scalar blue" );
      ADD_FUNC( SecondaryColor3fv, "<Data v" );
      ADD_FUNC( SecondaryColor3i, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( SecondaryColor3iv, "<Data v" );
      ADD_FUNC( SecondaryColor3s, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( SecondaryColor3sv, "<Data v" );
      ADD_FUNC( SecondaryColor3ub, "<Size red,<Size green,<Size blue" );
      ADD_FUNC( SecondaryColor3ubv, "<Data v" );
      ADD_FUNC( SecondaryColor3ui, "<Size red,<Size green,<Size blue" );
      ADD_FUNC( SecondaryColor3uiv, "<Data v" );
      ADD_FUNC( SecondaryColor3us, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( SecondaryColor3usv, "<Data v" );
      ADD_FUNC( SecondaryColorPointer, "<Integer size,<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( WindowPos2d, "<Scalar x,<Scalar y" );
      ADD_FUNC( WindowPos2dv, "<Data p" );
      ADD_FUNC( WindowPos2f, "<Scalar x,<Scalar y" );
      ADD_FUNC( WindowPos2fv, "<Data p" );
      ADD_FUNC( WindowPos2i, "<Integer x,<Integer y" );
      ADD_FUNC( WindowPos2iv, "<Data p" );
      ADD_FUNC( WindowPos2s, "<Integer x,<Integer y" );
      ADD_FUNC( WindowPos2sv, "<Data p" );
      ADD_FUNC( WindowPos3d, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( WindowPos3dv, "<Data p" );
      ADD_FUNC( WindowPos3f, "<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( WindowPos3fv, "<Data p" );
      ADD_FUNC( WindowPos3i, "<Integer x,<Integer y,<Integer z" );
      ADD_FUNC( WindowPos3iv, "<Data p" );
      ADD_FUNC( WindowPos3s, "<Integer x,<Integer y,<Integer z" );
      ADD_FUNC( WindowPos3sv, "<Data p" );
      ADD_FUNC( BeginQuery, "<Size target,<Size id" );
      ADD_FUNC( BindBuffer, "<Size target,<Size buffer" );
      ADD_FUNC( BufferData, "<Size target,<Size size,<Data data,<Size usage" );
      ADD_FUNC( BufferSubData, "<Size target,<Integer offset,<Size size,<Data data" );
      ADD_FUNC( DeleteBuffers, "<Size n,<Data buffers" );
      ADD_FUNC( DeleteQueries, "<Size n,<Data ids" );
      ADD_FUNC( EndQuery, "<Size target" );
      ADD_FUNC( GenBuffers, "<Size n,<Data buffers" );
      ADD_FUNC( GenQueries, "<Size n,<Data ids" );
      ADD_FUNC( GetBufferParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetBufferSubData, "<Size target,<Integer offset,<Size size,<Data data" );
      ADD_FUNC( GetQueryObjectiv, "<Size id,<Size pname,<Data params" );
      ADD_FUNC( GetQueryObjectuiv, "<Size id,<Size pname,<Data params" );
      ADD_FUNC( GetQueryiv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( IsBuffer, "=Boolean,<Size buffer" );
      ADD_FUNC( IsQuery, "=Boolean,<Size id" );
      ADD_FUNC( MapBuffer, "<Size target,<Size access" );
      ADD_FUNC( UnmapBuffer, "=Boolean,<Size target" );
      ADD_FUNC( AttachShader, "<Size program,<Size shader" );
      ADD_FUNC( BindAttribLocation, "<Size program,<Size index,<String name" );
      ADD_FUNC( BlendEquationSeparate, "<Size var0,<Size var1" );
      ADD_FUNC( CompileShader, "<Size shader" );
      ADD_FUNC( CreateProgram, "=Size" );
      ADD_FUNC( CreateShader, "=Size,<Size type" );
      ADD_FUNC( DeleteProgram, "<Size program" );
      ADD_FUNC( DeleteShader, "<Size shader" );
      ADD_FUNC( DetachShader, "<Size program,<Size shader" );
      ADD_FUNC( DisableVertexAttribArray, "<Size var0" );
      ADD_FUNC( DrawBuffers, "<Size n,<Data bufs" );
      ADD_FUNC( EnableVertexAttribArray, "<Size var0" );
      ADD_FUNC( GetActiveAttrib, "<Size program,<Size index,<Size maxLength,<Data length,<Data size,<Data type,>String name" );
      ADD_FUNC( GetActiveUniform, "<Size program,<Size index,<Size maxLength,<Data length,<Data size,<Data type,>String name" );
      ADD_FUNC( GetAttachedShaders, "<Size program,<Size maxCount,<Data count,<Data shaders" );
      ADD_FUNC( GetAttribLocation, "=Integer,<Size program,<String name" );
      ADD_FUNC( GetProgramInfoLog, "<Size program,<Size bufSize,<Data length,>String infoLog" );
      ADD_FUNC( GetProgramiv, "<Size program,<Size pname,<Data param" );
      ADD_FUNC( GetShaderInfoLog, "<Size shader,<Size bufSize,<Data length,>String infoLog" );
      ADD_FUNC( GetShaderSource, "<Integer obj,<Size maxLength,<Data length,>String source" );
      ADD_FUNC( GetShaderiv, "<Size shader,<Size pname,<Data param" );
      ADD_FUNC( GetUniformLocation, "=Integer,<Size program,<String name" );
      ADD_FUNC( GetUniformfv, "<Size program,<Integer location,<Data params" );
      ADD_FUNC( GetUniformiv, "<Size program,<Integer location,<Data params" );
      ADD_FUNC( GetVertexAttribPointerv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( GetVertexAttribdv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( GetVertexAttribfv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( GetVertexAttribiv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( IsProgram, "=Boolean,<Size program" );
      ADD_FUNC( IsShader, "=Boolean,<Size shader" );
      ADD_FUNC( LinkProgram, "<Size program" );
      ADD_FUNC( ShaderSource, "<Size shader,<Size count,<String strings,<Data lengths" );
      ADD_FUNC( StencilFuncSeparate, "<Size frontfunc,<Size backfunc,<Integer ref,<Size mask" );
      ADD_FUNC( StencilMaskSeparate, "<Size var0,<Size var1" );
      ADD_FUNC( StencilOpSeparate, "<Size face,<Size sfail,<Size dpfail,<Size dppass" );
      ADD_FUNC( Uniform1f, "<Integer location,<Scalar v0" );
      ADD_FUNC( Uniform1fv, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform1i, "<Integer location,<Integer v0" );
      ADD_FUNC( Uniform1iv, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform2f, "<Integer location,<Scalar v0,<Scalar v1" );
      ADD_FUNC( Uniform2fv, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform2i, "<Integer location,<Integer v0,<Integer v1" );
      ADD_FUNC( Uniform2iv, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform3f, "<Integer location,<Scalar v0,<Scalar v1,<Scalar v2" );
      ADD_FUNC( Uniform3fv, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform3i, "<Integer location,<Integer v0,<Integer v1,<Integer v2" );
      ADD_FUNC( Uniform3iv, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform4f, "<Integer location,<Scalar v0,<Scalar v1,<Scalar v2,<Scalar v3" );
      ADD_FUNC( Uniform4fv, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform4i, "<Integer location,<Integer v0,<Integer v1,<Integer v2,<Integer v3" );
      ADD_FUNC( Uniform4iv, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( UniformMatrix2fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( UniformMatrix3fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( UniformMatrix4fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( UseProgram, "<Size program" );
      ADD_FUNC( ValidateProgram, "<Size program" );
      ADD_FUNC( VertexAttrib1d, "<Size index,<Scalar x" );
      ADD_FUNC( VertexAttrib1dv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib1f, "<Size index,<Scalar x" );
      ADD_FUNC( VertexAttrib1fv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib1s, "<Size index,<Integer x" );
      ADD_FUNC( VertexAttrib1sv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib2d, "<Size index,<Scalar x,<Scalar y" );
      ADD_FUNC( VertexAttrib2dv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib2f, "<Size index,<Scalar x,<Scalar y" );
      ADD_FUNC( VertexAttrib2fv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib2s, "<Size index,<Integer x,<Integer y" );
      ADD_FUNC( VertexAttrib2sv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib3d, "<Size index,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( VertexAttrib3dv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib3f, "<Size index,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( VertexAttrib3fv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib3s, "<Size index,<Integer x,<Integer y,<Integer z" );
      ADD_FUNC( VertexAttrib3sv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4Nbv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4Niv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4Nsv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4Nub, "<Size index,<Size x,<Size y,<Size z,<Size w" );
      ADD_FUNC( VertexAttrib4Nubv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4Nuiv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4Nusv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4bv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4d, "<Size index,<Scalar x,<Scalar y,<Scalar z,<Scalar w" );
      ADD_FUNC( VertexAttrib4dv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4f, "<Size index,<Scalar x,<Scalar y,<Scalar z,<Scalar w" );
      ADD_FUNC( VertexAttrib4fv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4iv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4s, "<Size index,<Integer x,<Integer y,<Integer z,<Integer w" );
      ADD_FUNC( VertexAttrib4sv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4ubv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4uiv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttrib4usv, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribPointer, "<Size index,<Integer size,<Size type,<Boolean normalized,<Size stride,<Data pointer" );
      ADD_FUNC( UniformMatrix2x3fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( UniformMatrix2x4fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( UniformMatrix3x2fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( UniformMatrix3x4fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( UniformMatrix4x2fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( UniformMatrix4x3fv, "<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( BeginConditionalRender, "<Size var0,<Size var1" );
      ADD_FUNC( BeginTransformFeedback, "<Size var0" );
      ADD_FUNC( BindFragDataLocation, "<Size var0,<Size var1,<String var2" );
      ADD_FUNC( ClampColor, "<Size var0,<Size var1" );
      ADD_FUNC( ClearBufferfi, "<Size var0,<Integer var1,<Scalar var2,<Integer var3" );
      ADD_FUNC( ClearBufferfv, "<Size var0,<Integer var1,<Data var2" );
      ADD_FUNC( ClearBufferiv, "<Size var0,<Integer var1,<Data var2" );
      ADD_FUNC( ClearBufferuiv, "<Size var0,<Integer var1,<Data var2" );
      ADD_FUNC( ColorMaski, "<Size var0,<Boolean var1,<Boolean var2,<Boolean var3,<Boolean var4" );
      ADD_FUNC( Disablei, "<Size var0,<Size var1" );
      ADD_FUNC( Enablei, "<Size var0,<Size var1" );
      ADD_FUNC( EndConditionalRender, "" );
      ADD_FUNC( EndTransformFeedback, "" );
      ADD_FUNC( GetBooleani_v, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( GetFragDataLocation, "=Integer,<Size var0,<String var1" );
      ADD_FUNC( GetTexParameterIiv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( GetTexParameterIuiv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( GetTransformFeedbackVarying, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( GetUniformuiv, "<Size var0,<Integer var1,<Data var2" );
      ADD_FUNC( GetVertexAttribIiv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( GetVertexAttribIuiv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( IsEnabledi, "=Boolean,<Size var0,<Size var1" );
      ADD_FUNC( TexParameterIiv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( TexParameterIuiv, "<Size var0,<Size var1,<Data var2" );
      ADD_FUNC( TransformFeedbackVaryings, "<Size var0,<Size var1,<String var2,<Size var3" );
      ADD_FUNC( Uniform1ui, "<Integer var0,<Size var1" );
      ADD_FUNC( Uniform1uiv, "<Integer var0,<Size var1,<Data var2" );
      ADD_FUNC( Uniform2ui, "<Integer var0,<Size var1,<Size var2" );
      ADD_FUNC( Uniform2uiv, "<Integer var0,<Size var1,<Data var2" );
      ADD_FUNC( Uniform3ui, "<Integer var0,<Size var1,<Size var2,<Size var3" );
      ADD_FUNC( Uniform3uiv, "<Integer var0,<Size var1,<Data var2" );
      ADD_FUNC( Uniform4ui, "<Integer var0,<Size var1,<Size var2,<Size var3,<Size var4" );
      ADD_FUNC( Uniform4uiv, "<Integer var0,<Size var1,<Data var2" );
      ADD_FUNC( VertexAttribI1i, "<Size var0,<Integer var1" );
      ADD_FUNC( VertexAttribI1iv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI1ui, "<Size var0,<Size var1" );
      ADD_FUNC( VertexAttribI1uiv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI2i, "<Size var0,<Integer var1,<Integer var2" );
      ADD_FUNC( VertexAttribI2iv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI2ui, "<Size var0,<Size var1,<Size var2" );
      ADD_FUNC( VertexAttribI2uiv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI3i, "<Size var0,<Integer var1,<Integer var2,<Integer var3" );
      ADD_FUNC( VertexAttribI3iv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI3ui, "<Size var0,<Size var1,<Size var2,<Size var3" );
      ADD_FUNC( VertexAttribI3uiv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI4bv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI4i, "<Size var0,<Integer var1,<Integer var2,<Integer var3,<Integer var4" );
      ADD_FUNC( VertexAttribI4iv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI4sv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI4ubv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI4ui, "<Size var0,<Size var1,<Size var2,<Size var3,<Size var4" );
      ADD_FUNC( VertexAttribI4uiv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribI4usv, "<Size var0,<Data var1" );
      ADD_FUNC( VertexAttribIPointer, "<Size var0,<Integer var1,<Size var2,<Size var3,<Data var4" );
      ADD_FUNC( DrawArraysInstanced, "<Size var0,<Integer var1,<Size var2,<Size var3" );
      ADD_FUNC( DrawElementsInstanced, "<Size var0,<Size var1,<Size var2,<Data var3,<Size var4" );
      ADD_FUNC( PrimitiveRestartIndex, "<Size var0" );
      ADD_FUNC( TexBuffer, "<Size var0,<Size var1,<Size var2" );
      ADD_FUNC( FramebufferTexture, "<Size var0,<Size var1,<Size var2,<Integer var3" );
      ADD_FUNC( TbufferMask3DFX, "<Size mask" );
      ADD_FUNC( CopyBufferSubData, "<Size readtarget,<Size writetarget,<Integer readoffset,<Integer writeoffset,<Size size" );
      ADD_FUNC( DrawElementsBaseVertex, "<Size mode,<Size count,<Size type,<Data indices,<Integer basevertex" );
      ADD_FUNC( DrawElementsInstancedBaseVertex, "<Size mode,<Size count,<Size type,<Data indices,<Size primcount,<Integer basevertex" );
      ADD_FUNC( DrawRangeElementsBaseVertex, "<Size mode,<Size start,<Size end,<Size count,<Size type,<Data indices,<Integer basevertex" );
      ADD_FUNC( BindFramebuffer, "<Size target,<Size framebuffer" );
      ADD_FUNC( BindRenderbuffer, "<Size target,<Size renderbuffer" );
      ADD_FUNC( BlitFramebuffer, "<Integer srcX0,<Integer srcY0,<Integer srcX1,<Integer srcY1,<Integer dstX0,<Integer dstY0,<Integer dstX1,<Integer dstY1,<Integer mask,<Size filter" );
      ADD_FUNC( CheckFramebufferStatus, "=Size,<Size target" );
      ADD_FUNC( DeleteFramebuffers, "<Size n,<Data framebuffers" );
      ADD_FUNC( DeleteRenderbuffers, "<Size n,<Data renderbuffers" );
      ADD_FUNC( FramebufferRenderbuffer, "<Size target,<Size attachment,<Size renderbuffertarget,<Size renderbuffer" );
      ADD_FUNC( FramebufferTexture1D, "<Size target,<Size attachment,<Size textarget,<Size texture,<Integer level" );
      ADD_FUNC( FramebufferTexture2D, "<Size target,<Size attachment,<Size textarget,<Size texture,<Integer level" );
      ADD_FUNC( FramebufferTexture3D, "<Size target,<Size attachment,<Size textarget,<Size texture,<Integer level,<Integer layer" );
      ADD_FUNC( FramebufferTextureLayer, "<Size target,<Size attachment,<Size texture,<Integer level,<Integer layer" );
      ADD_FUNC( GenFramebuffers, "<Size n,<Data framebuffers" );
      ADD_FUNC( GenRenderbuffers, "<Size n,<Data renderbuffers" );
      ADD_FUNC( GenerateMipmap, "<Size target" );
      ADD_FUNC( GetFramebufferAttachmentParameteriv, "<Size target,<Size attachment,<Size pname,<Data params" );
      ADD_FUNC( GetRenderbufferParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( IsFramebuffer, "=Boolean,<Size framebuffer" );
      ADD_FUNC( IsRenderbuffer, "=Boolean,<Size renderbuffer" );
      ADD_FUNC( RenderbufferStorage, "<Size target,<Size internalformat,<Size width,<Size height" );
      ADD_FUNC( RenderbufferStorageMultisample, "<Size target,<Size samples,<Size internalformat,<Size width,<Size height" );
      ADD_FUNC( ColorSubTable, "<Size target,<Size start,<Size count,<Size format,<Size type,<Data data" );
      ADD_FUNC( ColorTable, "<Size target,<Size internalformat,<Size width,<Size format,<Size type,<Data table" );
      ADD_FUNC( ColorTableParameterfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( ColorTableParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( ConvolutionFilter1D, "<Size target,<Size internalformat,<Size width,<Size format,<Size type,<Data image" );
      ADD_FUNC( ConvolutionFilter2D, "<Size target,<Size internalformat,<Size width,<Size height,<Size format,<Size type,<Data image" );
      ADD_FUNC( ConvolutionParameterf, "<Size target,<Size pname,<Scalar params" );
      ADD_FUNC( ConvolutionParameterfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( ConvolutionParameteri, "<Size target,<Size pname,<Integer params" );
      ADD_FUNC( ConvolutionParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( CopyColorSubTable, "<Size target,<Size start,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( CopyColorTable, "<Size target,<Size internalformat,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( CopyConvolutionFilter1D, "<Size target,<Size internalformat,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( CopyConvolutionFilter2D, "<Size target,<Size internalformat,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( GetColorTable, "<Size target,<Size format,<Size type,<Data table" );
      ADD_FUNC( GetColorTableParameterfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetColorTableParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetConvolutionFilter, "<Size target,<Size format,<Size type,<Data image" );
      ADD_FUNC( GetConvolutionParameterfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetConvolutionParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetHistogram, "<Size target,<Boolean reset,<Size format,<Size type,<Data values" );
      ADD_FUNC( GetHistogramParameterfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetHistogramParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMinmax, "<Size target,<Boolean reset,<Size format,<Size types,<Data values" );
      ADD_FUNC( GetMinmaxParameterfv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMinmaxParameteriv, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetSeparableFilter, "<Size target,<Size format,<Size type,<Data row,<Data column,<Data span" );
      ADD_FUNC( Histogram, "<Size target,<Size width,<Size internalformat,<Boolean sink" );
      ADD_FUNC( Minmax, "<Size target,<Size internalformat,<Boolean sink" );
      ADD_FUNC( ResetHistogram, "<Size target" );
      ADD_FUNC( ResetMinmax, "<Size target" );
      ADD_FUNC( SeparableFilter2D, "<Size target,<Size internalformat,<Size width,<Size height,<Size format,<Size type,<Data row,<Data column" );
      ADD_FUNC( FlushMappedBufferRange, "<Size target,<Integer offset,<Size length" );
      ADD_FUNC( MapBufferRange, "<Size target,<Integer offset,<Size length,<Integer access" );
      ADD_FUNC( ProvokingVertex, "<Size mode" );
      ADD_FUNC( GetMultisamplefv, "<Size pname,<Size index,<Data val" );
      ADD_FUNC( SampleMaski, "<Size index,<Integer mask" );
      ADD_FUNC( TexImage2DMultisample, "<Size target,<Size samples,<Integer internalformat,<Size width,<Size height,<Boolean fixedsamplelocations" );
      ADD_FUNC( TexImage3DMultisample, "<Size target,<Size samples,<Integer internalformat,<Size width,<Size height,<Size depth,<Boolean fixedsamplelocations" );
      ADD_FUNC( BindBufferBase, "<Size target,<Size index,<Size buffer" );
      ADD_FUNC( BindBufferRange, "<Size target,<Size index,<Size buffer,<Integer offset,<Size size" );
      ADD_FUNC( GetActiveUniformBlockName, "<Size program,<Size uniformBlockIndex,<Size bufSize,<Data length,>String uniformBlockName" );
      ADD_FUNC( GetActiveUniformBlockiv, "<Size program,<Size uniformBlockIndex,<Size pname,<Data params" );
      ADD_FUNC( GetActiveUniformName, "<Size program,<Size uniformIndex,<Size bufSize,<Data length,>String uniformName" );
      ADD_FUNC( GetActiveUniformsiv, "<Size program,<Size uniformCount,<Data uniformIndices,<Size pname,<Data params" );
      ADD_FUNC( GetIntegeri_v, "<Size target,<Size index,<Data data" );
      ADD_FUNC( GetUniformBlockIndex, "=Size,<Size program,<String uniformBlockName" );
      ADD_FUNC( GetUniformIndices, "<Size program,<Size uniformCount,<String uniformNames,<Data uniformIndices" );
      ADD_FUNC( UniformBlockBinding, "<Size program,<Size uniformBlockIndex,<Size uniformBlockBinding" );
      ADD_FUNC( BindVertexArray, "<Size array" );
      ADD_FUNC( DeleteVertexArrays, "<Size n,<Data arrays" );
      ADD_FUNC( GenVertexArrays, "<Size n,<Data arrays" );
      ADD_FUNC( IsVertexArray, "=Boolean,<Size array" );
      ADD_FUNC( GetUniformBufferSizeEXT, "=Integer,<Size program,<Integer location" );
      ADD_FUNC( GetUniformOffsetEXT, "=Integer,<Size program,<Integer location" );
      ADD_FUNC( UniformBufferEXT, "<Size program,<Integer location,<Size buffer" );
      ADD_FUNC( BlendColorEXT, "<Scalar red,<Scalar green,<Scalar blue,<Scalar alpha" );
      ADD_FUNC( BlendEquationSeparateEXT, "<Size modeRGB,<Size modeAlpha" );
      ADD_FUNC( BlendFuncSeparateEXT, "<Size sfactorRGB,<Size dfactorRGB,<Size sfactorAlpha,<Size dfactorAlpha" );
      ADD_FUNC( BlendEquationEXT, "<Size mode" );
      ADD_FUNC( ColorSubTableEXT, "<Size target,<Size start,<Size count,<Size format,<Size type,<Data data" );
      ADD_FUNC( CopyColorSubTableEXT, "<Size target,<Size start,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( LockArraysEXT, "<Integer first,<Size count" );
      ADD_FUNC( UnlockArraysEXT, "" );
      ADD_FUNC( ConvolutionFilter1DEXT, "<Size target,<Size internalformat,<Size width,<Size format,<Size type,<Data image" );
      ADD_FUNC( ConvolutionFilter2DEXT, "<Size target,<Size internalformat,<Size width,<Size height,<Size format,<Size type,<Data image" );
      ADD_FUNC( ConvolutionParameterfEXT, "<Size target,<Size pname,<Scalar param" );
      ADD_FUNC( ConvolutionParameterfvEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( ConvolutionParameteriEXT, "<Size target,<Size pname,<Integer param" );
      ADD_FUNC( ConvolutionParameterivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( CopyConvolutionFilter1DEXT, "<Size target,<Size internalformat,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( CopyConvolutionFilter2DEXT, "<Size target,<Size internalformat,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( GetConvolutionFilterEXT, "<Size target,<Size format,<Size type,<Data image" );
      ADD_FUNC( GetConvolutionParameterfvEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetConvolutionParameterivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetSeparableFilterEXT, "<Size target,<Size format,<Size type,<Data row,<Data column,<Data span" );
      ADD_FUNC( SeparableFilter2DEXT, "<Size target,<Size internalformat,<Size width,<Size height,<Size format,<Size type,<Data row,<Data column" );
      ADD_FUNC( BinormalPointerEXT, "<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( TangentPointerEXT, "<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( CopyTexImage1DEXT, "<Size target,<Integer level,<Size internalformat,<Integer x,<Integer y,<Size width,<Integer border" );
      ADD_FUNC( CopyTexImage2DEXT, "<Size target,<Integer level,<Size internalformat,<Integer x,<Integer y,<Size width,<Size height,<Integer border" );
      ADD_FUNC( CopyTexSubImage1DEXT, "<Size target,<Integer level,<Integer xoffset,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( CopyTexSubImage2DEXT, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( CopyTexSubImage3DEXT, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( CullParameterdvEXT, "<Size pname,<Data params" );
      ADD_FUNC( CullParameterfvEXT, "<Size pname,<Data params" );
      ADD_FUNC( DepthBoundsEXT, "<Scalar zmin,<Scalar zmax" );
      ADD_FUNC( BindMultiTextureEXT, "<Size texunit,<Size target,<Size texture" );
      ADD_FUNC( CheckNamedFramebufferStatusEXT, "=Size,<Size framebuffer,<Size target" );
      ADD_FUNC( ClientAttribDefaultEXT, "<Integer mask" );
      ADD_FUNC( CompressedMultiTexImage1DEXT, "<Size texunit,<Size target,<Integer level,<Size internalformat,<Size width,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedMultiTexImage2DEXT, "<Size texunit,<Size target,<Integer level,<Size internalformat,<Size width,<Size height,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedMultiTexImage3DEXT, "<Size texunit,<Size target,<Integer level,<Size internalformat,<Size width,<Size height,<Size depth,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedMultiTexSubImage1DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Size width,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedMultiTexSubImage2DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Size width,<Size height,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedMultiTexSubImage3DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Size width,<Size height,<Size depth,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTextureImage1DEXT, "<Size texture,<Size target,<Integer level,<Size internalformat,<Size width,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTextureImage2DEXT, "<Size texture,<Size target,<Integer level,<Size internalformat,<Size width,<Size height,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTextureImage3DEXT, "<Size texture,<Size target,<Integer level,<Size internalformat,<Size width,<Size height,<Size depth,<Integer border,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTextureSubImage1DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Size width,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTextureSubImage2DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Size width,<Size height,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( CompressedTextureSubImage3DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Size width,<Size height,<Size depth,<Size format,<Size imageSize,<Data data" );
      ADD_FUNC( CopyMultiTexImage1DEXT, "<Size texunit,<Size target,<Integer level,<Size internalformat,<Integer x,<Integer y,<Size width,<Integer border" );
      ADD_FUNC( CopyMultiTexImage2DEXT, "<Size texunit,<Size target,<Integer level,<Size internalformat,<Integer x,<Integer y,<Size width,<Size height,<Integer border" );
      ADD_FUNC( CopyMultiTexSubImage1DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( CopyMultiTexSubImage2DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( CopyMultiTexSubImage3DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( CopyTextureImage1DEXT, "<Size texture,<Size target,<Integer level,<Size internalformat,<Integer x,<Integer y,<Size width,<Integer border" );
      ADD_FUNC( CopyTextureImage2DEXT, "<Size texture,<Size target,<Integer level,<Size internalformat,<Integer x,<Integer y,<Size width,<Size height,<Integer border" );
      ADD_FUNC( CopyTextureSubImage1DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Integer x,<Integer y,<Size width" );
      ADD_FUNC( CopyTextureSubImage2DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( CopyTextureSubImage3DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( DisableClientStateIndexedEXT, "<Size array,<Size index" );
      ADD_FUNC( DisableClientStateiEXT, "<Size array,<Size index" );
      ADD_FUNC( DisableVertexArrayAttribEXT, "<Size vaobj,<Size index" );
      ADD_FUNC( DisableVertexArrayEXT, "<Size vaobj,<Size array" );
      ADD_FUNC( EnableClientStateIndexedEXT, "<Size array,<Size index" );
      ADD_FUNC( EnableClientStateiEXT, "<Size array,<Size index" );
      ADD_FUNC( EnableVertexArrayAttribEXT, "<Size vaobj,<Size index" );
      ADD_FUNC( EnableVertexArrayEXT, "<Size vaobj,<Size array" );
      ADD_FUNC( FlushMappedNamedBufferRangeEXT, "<Size buffer,<Integer offset,<Size length" );
      ADD_FUNC( FramebufferDrawBufferEXT, "<Size framebuffer,<Size mode" );
      ADD_FUNC( FramebufferDrawBuffersEXT, "<Size framebuffer,<Size n,<Data bufs" );
      ADD_FUNC( FramebufferReadBufferEXT, "<Size framebuffer,<Size mode" );
      ADD_FUNC( GenerateMultiTexMipmapEXT, "<Size texunit,<Size target" );
      ADD_FUNC( GenerateTextureMipmapEXT, "<Size texture,<Size target" );
      ADD_FUNC( GetCompressedMultiTexImageEXT, "<Size texunit,<Size target,<Integer level,<Data img" );
      ADD_FUNC( GetCompressedTextureImageEXT, "<Size texture,<Size target,<Integer level,<Data img" );
      ADD_FUNC( GetDoubleIndexedvEXT, "<Size target,<Size index,<Data params" );
      ADD_FUNC( GetDoublei_vEXT, "<Size pname,<Size index,<Data params" );
      ADD_FUNC( GetFloatIndexedvEXT, "<Size target,<Size index,<Data params" );
      ADD_FUNC( GetFloati_vEXT, "<Size pname,<Size index,<Data params" );
      ADD_FUNC( GetFramebufferParameterivEXT, "<Size framebuffer,<Size pname,<Data param" );
      ADD_FUNC( GetMultiTexEnvfvEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexEnvivEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexGendvEXT, "<Size texunit,<Size coord,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexGenfvEXT, "<Size texunit,<Size coord,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexGenivEXT, "<Size texunit,<Size coord,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexImageEXT, "<Size texunit,<Size target,<Integer level,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( GetMultiTexLevelParameterfvEXT, "<Size texunit,<Size target,<Integer level,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexLevelParameterivEXT, "<Size texunit,<Size target,<Integer level,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexParameterIivEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexParameterIuivEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexParameterfvEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMultiTexParameterivEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetNamedBufferParameterivEXT, "<Size buffer,<Size pname,<Data params" );
      ADD_FUNC( GetNamedBufferSubDataEXT, "<Size buffer,<Integer offset,<Size size,<Data data" );
      ADD_FUNC( GetNamedFramebufferAttachmentParameterivEXT, "<Size framebuffer,<Size attachment,<Size pname,<Data params" );
      ADD_FUNC( GetNamedProgramLocalParameterIivEXT, "<Size program,<Size target,<Size index,<Data params" );
      ADD_FUNC( GetNamedProgramLocalParameterIuivEXT, "<Size program,<Size target,<Size index,<Data params" );
      ADD_FUNC( GetNamedProgramLocalParameterdvEXT, "<Size program,<Size target,<Size index,<Data params" );
      ADD_FUNC( GetNamedProgramLocalParameterfvEXT, "<Size program,<Size target,<Size index,<Data params" );
      ADD_FUNC( GetNamedProgramStringEXT, "<Size program,<Size target,<Size pname,<Data string" );
      ADD_FUNC( GetNamedProgramivEXT, "<Size program,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetNamedRenderbufferParameterivEXT, "<Size renderbuffer,<Size pname,<Data params" );
      ADD_FUNC( GetTextureImageEXT, "<Size texture,<Size target,<Integer level,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( GetTextureLevelParameterfvEXT, "<Size texture,<Size target,<Integer level,<Size pname,<Data params" );
      ADD_FUNC( GetTextureLevelParameterivEXT, "<Size texture,<Size target,<Integer level,<Size pname,<Data params" );
      ADD_FUNC( GetTextureParameterIivEXT, "<Size texture,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetTextureParameterIuivEXT, "<Size texture,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetTextureParameterfvEXT, "<Size texture,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetTextureParameterivEXT, "<Size texture,<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetVertexArrayIntegeri_vEXT, "<Size vaobj,<Size index,<Size pname,<Data param" );
      ADD_FUNC( GetVertexArrayIntegervEXT, "<Size vaobj,<Size pname,<Data param" );
      ADD_FUNC( MapNamedBufferEXT, "<Size buffer,<Size access" );
      ADD_FUNC( MapNamedBufferRangeEXT, "<Size buffer,<Integer offset,<Size length,<Integer access" );
      ADD_FUNC( MatrixFrustumEXT, "<Size matrixMode,<Scalar l,<Scalar r,<Scalar b,<Scalar t,<Scalar n,<Scalar f" );
      ADD_FUNC( MatrixLoadIdentityEXT, "<Size matrixMode" );
      ADD_FUNC( MatrixLoadTransposedEXT, "<Size matrixMode,<Data m" );
      ADD_FUNC( MatrixLoadTransposefEXT, "<Size matrixMode,<Data m" );
      ADD_FUNC( MatrixLoaddEXT, "<Size matrixMode,<Data m" );
      ADD_FUNC( MatrixLoadfEXT, "<Size matrixMode,<Data m" );
      ADD_FUNC( MatrixMultTransposedEXT, "<Size matrixMode,<Data m" );
      ADD_FUNC( MatrixMultTransposefEXT, "<Size matrixMode,<Data m" );
      ADD_FUNC( MatrixMultdEXT, "<Size matrixMode,<Data m" );
      ADD_FUNC( MatrixMultfEXT, "<Size matrixMode,<Data m" );
      ADD_FUNC( MatrixOrthoEXT, "<Size matrixMode,<Scalar l,<Scalar r,<Scalar b,<Scalar t,<Scalar n,<Scalar f" );
      ADD_FUNC( MatrixPopEXT, "<Size matrixMode" );
      ADD_FUNC( MatrixPushEXT, "<Size matrixMode" );
      ADD_FUNC( MatrixRotatedEXT, "<Size matrixMode,<Scalar angle,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( MatrixRotatefEXT, "<Size matrixMode,<Scalar angle,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( MatrixScaledEXT, "<Size matrixMode,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( MatrixScalefEXT, "<Size matrixMode,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( MatrixTranslatedEXT, "<Size matrixMode,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( MatrixTranslatefEXT, "<Size matrixMode,<Scalar x,<Scalar y,<Scalar z" );
      ADD_FUNC( MultiTexBufferEXT, "<Size texunit,<Size target,<Size internalformat,<Size buffer" );
      ADD_FUNC( MultiTexCoordPointerEXT, "<Size texunit,<Integer size,<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( MultiTexEnvfEXT, "<Size texunit,<Size target,<Size pname,<Scalar param" );
      ADD_FUNC( MultiTexEnvfvEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( MultiTexEnviEXT, "<Size texunit,<Size target,<Size pname,<Integer param" );
      ADD_FUNC( MultiTexEnvivEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( MultiTexGendEXT, "<Size texunit,<Size coord,<Size pname,<Scalar param" );
      ADD_FUNC( MultiTexGendvEXT, "<Size texunit,<Size coord,<Size pname,<Data params" );
      ADD_FUNC( MultiTexGenfEXT, "<Size texunit,<Size coord,<Size pname,<Scalar param" );
      ADD_FUNC( MultiTexGenfvEXT, "<Size texunit,<Size coord,<Size pname,<Data params" );
      ADD_FUNC( MultiTexGeniEXT, "<Size texunit,<Size coord,<Size pname,<Integer param" );
      ADD_FUNC( MultiTexGenivEXT, "<Size texunit,<Size coord,<Size pname,<Data params" );
      ADD_FUNC( MultiTexImage1DEXT, "<Size texunit,<Size target,<Integer level,<Integer internalformat,<Size width,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( MultiTexImage2DEXT, "<Size texunit,<Size target,<Integer level,<Integer internalformat,<Size width,<Size height,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( MultiTexImage3DEXT, "<Size texunit,<Size target,<Integer level,<Integer internalformat,<Size width,<Size height,<Size depth,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( MultiTexParameterIivEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( MultiTexParameterIuivEXT, "<Size texunit,<Size target,<Size pname,<Data params" );
      ADD_FUNC( MultiTexParameterfEXT, "<Size texunit,<Size target,<Size pname,<Scalar param" );
      ADD_FUNC( MultiTexParameterfvEXT, "<Size texunit,<Size target,<Size pname,<Data param" );
      ADD_FUNC( MultiTexParameteriEXT, "<Size texunit,<Size target,<Size pname,<Integer param" );
      ADD_FUNC( MultiTexParameterivEXT, "<Size texunit,<Size target,<Size pname,<Data param" );
      ADD_FUNC( MultiTexRenderbufferEXT, "<Size texunit,<Size target,<Size renderbuffer" );
      ADD_FUNC( MultiTexSubImage1DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Size width,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( MultiTexSubImage2DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Size width,<Size height,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( MultiTexSubImage3DEXT, "<Size texunit,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Size width,<Size height,<Size depth,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( NamedBufferDataEXT, "<Size buffer,<Size size,<Data data,<Size usage" );
      ADD_FUNC( NamedBufferSubDataEXT, "<Size buffer,<Integer offset,<Size size,<Data data" );
      ADD_FUNC( NamedCopyBufferSubDataEXT, "<Size readBuffer,<Size writeBuffer,<Integer readOffset,<Integer writeOffset,<Size size" );
      ADD_FUNC( NamedFramebufferRenderbufferEXT, "<Size framebuffer,<Size attachment,<Size renderbuffertarget,<Size renderbuffer" );
      ADD_FUNC( NamedFramebufferTexture1DEXT, "<Size framebuffer,<Size attachment,<Size textarget,<Size texture,<Integer level" );
      ADD_FUNC( NamedFramebufferTexture2DEXT, "<Size framebuffer,<Size attachment,<Size textarget,<Size texture,<Integer level" );
      ADD_FUNC( NamedFramebufferTexture3DEXT, "<Size framebuffer,<Size attachment,<Size textarget,<Size texture,<Integer level,<Integer zoffset" );
      ADD_FUNC( NamedFramebufferTextureEXT, "<Size framebuffer,<Size attachment,<Size texture,<Integer level" );
      ADD_FUNC( NamedFramebufferTextureFaceEXT, "<Size framebuffer,<Size attachment,<Size texture,<Integer level,<Size face" );
      ADD_FUNC( NamedFramebufferTextureLayerEXT, "<Size framebuffer,<Size attachment,<Size texture,<Integer level,<Integer layer" );
      ADD_FUNC( NamedProgramLocalParameter4dEXT, "<Size program,<Size target,<Size index,<Scalar x,<Scalar y,<Scalar z,<Scalar w" );
      ADD_FUNC( NamedProgramLocalParameter4dvEXT, "<Size program,<Size target,<Size index,<Data params" );
      ADD_FUNC( NamedProgramLocalParameter4fEXT, "<Size program,<Size target,<Size index,<Scalar x,<Scalar y,<Scalar z,<Scalar w" );
      ADD_FUNC( NamedProgramLocalParameter4fvEXT, "<Size program,<Size target,<Size index,<Data params" );
      ADD_FUNC( NamedProgramLocalParameterI4iEXT, "<Size program,<Size target,<Size index,<Integer x,<Integer y,<Integer z,<Integer w" );
      ADD_FUNC( NamedProgramLocalParameterI4ivEXT, "<Size program,<Size target,<Size index,<Data params" );
      ADD_FUNC( NamedProgramLocalParameterI4uiEXT, "<Size program,<Size target,<Size index,<Size x,<Size y,<Size z,<Size w" );
      ADD_FUNC( NamedProgramLocalParameterI4uivEXT, "<Size program,<Size target,<Size index,<Data params" );
      ADD_FUNC( NamedProgramLocalParameters4fvEXT, "<Size program,<Size target,<Size index,<Size count,<Data params" );
      ADD_FUNC( NamedProgramLocalParametersI4ivEXT, "<Size program,<Size target,<Size index,<Size count,<Data params" );
      ADD_FUNC( NamedProgramLocalParametersI4uivEXT, "<Size program,<Size target,<Size index,<Size count,<Data params" );
      ADD_FUNC( NamedProgramStringEXT, "<Size program,<Size target,<Size format,<Size len,<Data string" );
      ADD_FUNC( NamedRenderbufferStorageEXT, "<Size renderbuffer,<Size internalformat,<Size width,<Size height" );
      ADD_FUNC( NamedRenderbufferStorageMultisampleCoverageEXT, "<Size renderbuffer,<Size coverageSamples,<Size colorSamples,<Size internalformat,<Size width,<Size height" );
      ADD_FUNC( NamedRenderbufferStorageMultisampleEXT, "<Size renderbuffer,<Size samples,<Size internalformat,<Size width,<Size height" );
      ADD_FUNC( ProgramUniform1fEXT, "<Size program,<Integer location,<Scalar v0" );
      ADD_FUNC( ProgramUniform1fvEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform1iEXT, "<Size program,<Integer location,<Integer v0" );
      ADD_FUNC( ProgramUniform1ivEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform1uiEXT, "<Size program,<Integer location,<Size v0" );
      ADD_FUNC( ProgramUniform1uivEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform2fEXT, "<Size program,<Integer location,<Scalar v0,<Scalar v1" );
      ADD_FUNC( ProgramUniform2fvEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform2iEXT, "<Size program,<Integer location,<Integer v0,<Integer v1" );
      ADD_FUNC( ProgramUniform2ivEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform2uiEXT, "<Size program,<Integer location,<Size v0,<Size v1" );
      ADD_FUNC( ProgramUniform2uivEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform3fEXT, "<Size program,<Integer location,<Scalar v0,<Scalar v1,<Scalar v2" );
      ADD_FUNC( ProgramUniform3fvEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform3iEXT, "<Size program,<Integer location,<Integer v0,<Integer v1,<Integer v2" );
      ADD_FUNC( ProgramUniform3ivEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform3uiEXT, "<Size program,<Integer location,<Size v0,<Size v1,<Size v2" );
      ADD_FUNC( ProgramUniform3uivEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform4fEXT, "<Size program,<Integer location,<Scalar v0,<Scalar v1,<Scalar v2,<Scalar v3" );
      ADD_FUNC( ProgramUniform4fvEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform4iEXT, "<Size program,<Integer location,<Integer v0,<Integer v1,<Integer v2,<Integer v3" );
      ADD_FUNC( ProgramUniform4ivEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniform4uiEXT, "<Size program,<Integer location,<Size v0,<Size v1,<Size v2,<Size v3" );
      ADD_FUNC( ProgramUniform4uivEXT, "<Size program,<Integer location,<Size count,<Data value" );
      ADD_FUNC( ProgramUniformMatrix2fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( ProgramUniformMatrix2x3fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( ProgramUniformMatrix2x4fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( ProgramUniformMatrix3fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( ProgramUniformMatrix3x2fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( ProgramUniformMatrix3x4fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( ProgramUniformMatrix4fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( ProgramUniformMatrix4x2fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( ProgramUniformMatrix4x3fvEXT, "<Size program,<Integer location,<Size count,<Boolean transpose,<Data value" );
      ADD_FUNC( PushClientAttribDefaultEXT, "<Integer mask" );
      ADD_FUNC( TextureBufferEXT, "<Size texture,<Size target,<Size internalformat,<Size buffer" );
      ADD_FUNC( TextureImage1DEXT, "<Size texture,<Size target,<Integer level,<Integer internalformat,<Size width,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TextureImage2DEXT, "<Size texture,<Size target,<Integer level,<Integer internalformat,<Size width,<Size height,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TextureImage3DEXT, "<Size texture,<Size target,<Integer level,<Integer internalformat,<Size width,<Size height,<Size depth,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TextureParameterIivEXT, "<Size texture,<Size target,<Size pname,<Data params" );
      ADD_FUNC( TextureParameterIuivEXT, "<Size texture,<Size target,<Size pname,<Data params" );
      ADD_FUNC( TextureParameterfEXT, "<Size texture,<Size target,<Size pname,<Scalar param" );
      ADD_FUNC( TextureParameterfvEXT, "<Size texture,<Size target,<Size pname,<Data param" );
      ADD_FUNC( TextureParameteriEXT, "<Size texture,<Size target,<Size pname,<Integer param" );
      ADD_FUNC( TextureParameterivEXT, "<Size texture,<Size target,<Size pname,<Data param" );
      ADD_FUNC( TextureRenderbufferEXT, "<Size texture,<Size target,<Size renderbuffer" );
      ADD_FUNC( TextureSubImage1DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Size width,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TextureSubImage2DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Size width,<Size height,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TextureSubImage3DEXT, "<Size texture,<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Size width,<Size height,<Size depth,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( UnmapNamedBufferEXT, "=Boolean,<Size buffer" );
      ADD_FUNC( VertexArrayColorOffsetEXT, "<Size vaobj,<Size buffer,<Integer size,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayEdgeFlagOffsetEXT, "<Size vaobj,<Size buffer,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayFogCoordOffsetEXT, "<Size vaobj,<Size buffer,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayIndexOffsetEXT, "<Size vaobj,<Size buffer,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayMultiTexCoordOffsetEXT, "<Size vaobj,<Size buffer,<Size texunit,<Integer size,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayNormalOffsetEXT, "<Size vaobj,<Size buffer,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArraySecondaryColorOffsetEXT, "<Size vaobj,<Size buffer,<Integer size,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayTexCoordOffsetEXT, "<Size vaobj,<Size buffer,<Integer size,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayVertexAttribIOffsetEXT, "<Size vaobj,<Size buffer,<Size index,<Integer size,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayVertexAttribOffsetEXT, "<Size vaobj,<Size buffer,<Size index,<Integer size,<Size type,<Boolean normalized,<Size stride,<Integer offset" );
      ADD_FUNC( VertexArrayVertexOffsetEXT, "<Size vaobj,<Size buffer,<Integer size,<Size type,<Size stride,<Integer offset" );
      ADD_FUNC( ColorMaskIndexedEXT, "<Size buf,<Boolean r,<Boolean g,<Boolean b,<Boolean a" );
      ADD_FUNC( DisableIndexedEXT, "<Size target,<Size index" );
      ADD_FUNC( EnableIndexedEXT, "<Size target,<Size index" );
      ADD_FUNC( GetBooleanIndexedvEXT, "<Size value,<Size index,<Data data" );
      ADD_FUNC( GetIntegerIndexedvEXT, "<Size value,<Size index,<Data data" );
      ADD_FUNC( IsEnabledIndexedEXT, "=Boolean,<Size target,<Size index" );
      ADD_FUNC( DrawArraysInstancedEXT, "<Size mode,<Integer start,<Size count,<Size primcount" );
      ADD_FUNC( DrawElementsInstancedEXT, "<Size mode,<Size count,<Size type,<Data indices,<Size primcount" );
      ADD_FUNC( DrawRangeElementsEXT, "<Size mode,<Size start,<Size end,<Size count,<Size type,<Data indices" );
      ADD_FUNC( FogCoordPointerEXT, "<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( FogCoorddEXT, "<Scalar coord" );
      ADD_FUNC( FogCoorddvEXT, "<Data coord" );
      ADD_FUNC( FogCoordfEXT, "<Scalar coord" );
      ADD_FUNC( FogCoordfvEXT, "<Data coord" );
      ADD_FUNC( FragmentColorMaterialEXT, "<Size face,<Size mode" );
      ADD_FUNC( FragmentLightModelfEXT, "<Size pname,<Scalar param" );
      ADD_FUNC( FragmentLightModelfvEXT, "<Size pname,<Data params" );
      ADD_FUNC( FragmentLightModeliEXT, "<Size pname,<Integer param" );
      ADD_FUNC( FragmentLightModelivEXT, "<Size pname,<Data params" );
      ADD_FUNC( FragmentLightfEXT, "<Size light,<Size pname,<Scalar param" );
      ADD_FUNC( FragmentLightfvEXT, "<Size light,<Size pname,<Data params" );
      ADD_FUNC( FragmentLightiEXT, "<Size light,<Size pname,<Integer param" );
      ADD_FUNC( FragmentLightivEXT, "<Size light,<Size pname,<Data params" );
      ADD_FUNC( FragmentMaterialfEXT, "<Size face,<Size pname,<Scalar param" );
      ADD_FUNC( FragmentMaterialfvEXT, "<Size face,<Size pname,<Data params" );
      ADD_FUNC( FragmentMaterialiEXT, "<Size face,<Size pname,<Integer param" );
      ADD_FUNC( FragmentMaterialivEXT, "<Size face,<Size pname,<Data params" );
      ADD_FUNC( GetFragmentLightfvEXT, "<Size light,<Size pname,<Data params" );
      ADD_FUNC( GetFragmentLightivEXT, "<Size light,<Size pname,<Data params" );
      ADD_FUNC( GetFragmentMaterialfvEXT, "<Size face,<Size pname,<Data params" );
      ADD_FUNC( GetFragmentMaterialivEXT, "<Size face,<Size pname,<Data params" );
      ADD_FUNC( LightEnviEXT, "<Size pname,<Integer param" );
      ADD_FUNC( BlitFramebufferEXT, "<Integer srcX0,<Integer srcY0,<Integer srcX1,<Integer srcY1,<Integer dstX0,<Integer dstY0,<Integer dstX1,<Integer dstY1,<Integer mask,<Size filter" );
      ADD_FUNC( RenderbufferStorageMultisampleEXT, "<Size target,<Size samples,<Size internalformat,<Size width,<Size height" );
      ADD_FUNC( BindFramebufferEXT, "<Size target,<Size framebuffer" );
      ADD_FUNC( BindRenderbufferEXT, "<Size target,<Size renderbuffer" );
      ADD_FUNC( CheckFramebufferStatusEXT, "=Size,<Size target" );
      ADD_FUNC( DeleteFramebuffersEXT, "<Size n,<Data framebuffers" );
      ADD_FUNC( DeleteRenderbuffersEXT, "<Size n,<Data renderbuffers" );
      ADD_FUNC( FramebufferRenderbufferEXT, "<Size target,<Size attachment,<Size renderbuffertarget,<Size renderbuffer" );
      ADD_FUNC( FramebufferTexture1DEXT, "<Size target,<Size attachment,<Size textarget,<Size texture,<Integer level" );
      ADD_FUNC( FramebufferTexture2DEXT, "<Size target,<Size attachment,<Size textarget,<Size texture,<Integer level" );
      ADD_FUNC( FramebufferTexture3DEXT, "<Size target,<Size attachment,<Size textarget,<Size texture,<Integer level,<Integer zoffset" );
      ADD_FUNC( GenFramebuffersEXT, "<Size n,<Data framebuffers" );
      ADD_FUNC( GenRenderbuffersEXT, "<Size n,<Data renderbuffers" );
      ADD_FUNC( GenerateMipmapEXT, "<Size target" );
      ADD_FUNC( GetFramebufferAttachmentParameterivEXT, "<Size target,<Size attachment,<Size pname,<Data params" );
      ADD_FUNC( GetRenderbufferParameterivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( IsFramebufferEXT, "=Boolean,<Size framebuffer" );
      ADD_FUNC( IsRenderbufferEXT, "=Boolean,<Size renderbuffer" );
      ADD_FUNC( RenderbufferStorageEXT, "<Size target,<Size internalformat,<Size width,<Size height" );
      ADD_FUNC( FramebufferTextureEXT, "<Size target,<Size attachment,<Size texture,<Integer level" );
      ADD_FUNC( FramebufferTextureFaceEXT, "<Size target,<Size attachment,<Size texture,<Integer level,<Size face" );
      ADD_FUNC( FramebufferTextureLayerEXT, "<Size target,<Size attachment,<Size texture,<Integer level,<Integer layer" );
      ADD_FUNC( ProgramParameteriEXT, "<Size program,<Size pname,<Integer value" );
      ADD_FUNC( ProgramEnvParameters4fvEXT, "<Size target,<Size index,<Size count,<Data params" );
      ADD_FUNC( ProgramLocalParameters4fvEXT, "<Size target,<Size index,<Size count,<Data params" );
      ADD_FUNC( BindFragDataLocationEXT, "<Size program,<Size color,<String name" );
      ADD_FUNC( GetFragDataLocationEXT, "=Integer,<Size program,<String name" );
      ADD_FUNC( GetUniformuivEXT, "<Size program,<Integer location,<Data params" );
      ADD_FUNC( GetVertexAttribIivEXT, "<Size index,<Size pname,<Data params" );
      ADD_FUNC( GetVertexAttribIuivEXT, "<Size index,<Size pname,<Data params" );
      ADD_FUNC( Uniform1uiEXT, "<Integer location,<Size v0" );
      ADD_FUNC( Uniform1uivEXT, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform2uiEXT, "<Integer location,<Size v0,<Size v1" );
      ADD_FUNC( Uniform2uivEXT, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform3uiEXT, "<Integer location,<Size v0,<Size v1,<Size v2" );
      ADD_FUNC( Uniform3uivEXT, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( Uniform4uiEXT, "<Integer location,<Size v0,<Size v1,<Size v2,<Size v3" );
      ADD_FUNC( Uniform4uivEXT, "<Integer location,<Size count,<Data value" );
      ADD_FUNC( VertexAttribI1iEXT, "<Size index,<Integer x" );
      ADD_FUNC( VertexAttribI1ivEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI1uiEXT, "<Size index,<Size x" );
      ADD_FUNC( VertexAttribI1uivEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI2iEXT, "<Size index,<Integer x,<Integer y" );
      ADD_FUNC( VertexAttribI2ivEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI2uiEXT, "<Size index,<Size x,<Size y" );
      ADD_FUNC( VertexAttribI2uivEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI3iEXT, "<Size index,<Integer x,<Integer y,<Integer z" );
      ADD_FUNC( VertexAttribI3ivEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI3uiEXT, "<Size index,<Size x,<Size y,<Size z" );
      ADD_FUNC( VertexAttribI3uivEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI4bvEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI4iEXT, "<Size index,<Integer x,<Integer y,<Integer z,<Integer w" );
      ADD_FUNC( VertexAttribI4ivEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI4svEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI4ubvEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI4uiEXT, "<Size index,<Size x,<Size y,<Size z,<Size w" );
      ADD_FUNC( VertexAttribI4uivEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribI4usvEXT, "<Size index,<Data v" );
      ADD_FUNC( VertexAttribIPointerEXT, "<Size index,<Integer size,<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( GetHistogramEXT, "<Size target,<Boolean reset,<Size format,<Size type,<Data values" );
      ADD_FUNC( GetHistogramParameterfvEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetHistogramParameterivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMinmaxEXT, "<Size target,<Boolean reset,<Size format,<Size type,<Data values" );
      ADD_FUNC( GetMinmaxParameterfvEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetMinmaxParameterivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( HistogramEXT, "<Size target,<Size width,<Size internalformat,<Boolean sink" );
      ADD_FUNC( MinmaxEXT, "<Size target,<Size internalformat,<Boolean sink" );
      ADD_FUNC( ResetHistogramEXT, "<Size target" );
      ADD_FUNC( ResetMinmaxEXT, "<Size target" );
      ADD_FUNC( IndexFuncEXT, "<Size func,<Scalar ref" );
      ADD_FUNC( IndexMaterialEXT, "<Size face,<Size mode" );
      ADD_FUNC( ApplyTextureEXT, "<Size mode" );
      ADD_FUNC( TextureLightEXT, "<Size pname" );
      ADD_FUNC( TextureMaterialEXT, "<Size face,<Size mode" );
      ADD_FUNC( MultiDrawArraysEXT, "<Size mode,<Data first,<Data count,<Size primcount" );
      ADD_FUNC( SampleMaskEXT, "<Scalar value,<Boolean invert" );
      ADD_FUNC( SamplePatternEXT, "<Size pattern" );
      ADD_FUNC( ColorTableEXT, "<Size target,<Size internalFormat,<Size width,<Size format,<Size type,<Data data" );
      ADD_FUNC( GetColorTableEXT, "<Size target,<Size format,<Size type,<Data data" );
      ADD_FUNC( GetColorTableParameterfvEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetColorTableParameterivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetPixelTransformParameterfvEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetPixelTransformParameterivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( PixelTransformParameterfEXT, "<Size target,<Size pname,<Scalar param" );
      ADD_FUNC( PixelTransformParameterfvEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( PixelTransformParameteriEXT, "<Size target,<Size pname,<Integer param" );
      ADD_FUNC( PixelTransformParameterivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( PointParameterfEXT, "<Size pname,<Scalar param" );
      ADD_FUNC( PointParameterfvEXT, "<Size pname,<Data params" );
      ADD_FUNC( PolygonOffsetEXT, "<Scalar factor,<Scalar bias" );
      ADD_FUNC( ProvokingVertexEXT, "<Size mode" );
      ADD_FUNC( BeginSceneEXT, "" );
      ADD_FUNC( EndSceneEXT, "" );
      ADD_FUNC( SecondaryColor3bEXT, "<Byte red,<Byte green,<Byte blue" );
      ADD_FUNC( SecondaryColor3bvEXT, "<Data v" );
      ADD_FUNC( SecondaryColor3dEXT, "<Scalar red,<Scalar green,<Scalar blue" );
      ADD_FUNC( SecondaryColor3dvEXT, "<Data v" );
      ADD_FUNC( SecondaryColor3fEXT, "<Scalar red,<Scalar green,<Scalar blue" );
      ADD_FUNC( SecondaryColor3fvEXT, "<Data v" );
      ADD_FUNC( SecondaryColor3iEXT, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( SecondaryColor3ivEXT, "<Data v" );
      ADD_FUNC( SecondaryColor3sEXT, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( SecondaryColor3svEXT, "<Data v" );
      ADD_FUNC( SecondaryColor3ubEXT, "<Size red,<Size green,<Size blue" );
      ADD_FUNC( SecondaryColor3ubvEXT, "<Data v" );
      ADD_FUNC( SecondaryColor3uiEXT, "<Size red,<Size green,<Size blue" );
      ADD_FUNC( SecondaryColor3uivEXT, "<Data v" );
      ADD_FUNC( SecondaryColor3usEXT, "<Integer red,<Integer green,<Integer blue" );
      ADD_FUNC( SecondaryColor3usvEXT, "<Data v" );
      ADD_FUNC( SecondaryColorPointerEXT, "<Integer size,<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( ActiveProgramEXT, "<Size program" );
      ADD_FUNC( CreateShaderProgramEXT, "=Size,<Size type,<String string" );
      ADD_FUNC( UseShaderProgramEXT, "<Size type,<Size program" );
      ADD_FUNC( ActiveStencilFaceEXT, "<Size face" );
      ADD_FUNC( TexSubImage1DEXT, "<Size target,<Integer level,<Integer xoffset,<Size width,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TexSubImage2DEXT, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Size width,<Size height,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TexSubImage3DEXT, "<Size target,<Integer level,<Integer xoffset,<Integer yoffset,<Integer zoffset,<Size width,<Size height,<Size depth,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TexImage3DEXT, "<Size target,<Integer level,<Size internalformat,<Size width,<Size height,<Size depth,<Integer border,<Size format,<Size type,<Data pixels" );
      ADD_FUNC( TexBufferEXT, "<Size target,<Size internalformat,<Size buffer" );
      ADD_FUNC( ClearColorIiEXT, "<Integer red,<Integer green,<Integer blue,<Integer alpha" );
      ADD_FUNC( ClearColorIuiEXT, "<Size red,<Size green,<Size blue,<Size alpha" );
      ADD_FUNC( GetTexParameterIivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( GetTexParameterIuivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( TexParameterIivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( TexParameterIuivEXT, "<Size target,<Size pname,<Data params" );
      ADD_FUNC( AreTexturesResidentEXT, "=Boolean,<Size n,<Data textures,<Data residences" );
      ADD_FUNC( BindTextureEXT, "<Size target,<Size texture" );
      ADD_FUNC( DeleteTexturesEXT, "<Size n,<Data textures" );
      ADD_FUNC( GenTexturesEXT, "<Size n,<Data textures" );
      ADD_FUNC( IsTextureEXT, "=Boolean,<Size texture" );
      ADD_FUNC( PrioritizeTexturesEXT, "<Size n,<Data textures,<Data priorities" );
      ADD_FUNC( TextureNormalEXT, "<Size mode" );
      ADD_FUNC( BeginTransformFeedbackEXT, "<Size primitiveMode" );
      ADD_FUNC( BindBufferBaseEXT, "<Size target,<Size index,<Size buffer" );
      ADD_FUNC( BindBufferOffsetEXT, "<Size target,<Size index,<Size buffer,<Integer offset" );
      ADD_FUNC( BindBufferRangeEXT, "<Size target,<Size index,<Size buffer,<Integer offset,<Size size" );
      ADD_FUNC( EndTransformFeedbackEXT, "" );
      ADD_FUNC( GetTransformFeedbackVaryingEXT, "<Size program,<Size index,<Size bufSize,<Data length,<Data size,<Data type,>String name" );
      ADD_FUNC( TransformFeedbackVaryingsEXT, "<Size program,<Size count,<String varyings,<Size bufferMode" );
      ADD_FUNC( ArrayElementEXT, "<Integer i" );
      ADD_FUNC( ColorPointerEXT, "<Integer size,<Size type,<Size stride,<Size count,<Data pointer" );
      ADD_FUNC( DrawArraysEXT, "<Size mode,<Integer first,<Size count" );
      ADD_FUNC( EdgeFlagPointerEXT, "<Size stride,<Size count,<Data pointer" );
      ADD_FUNC( IndexPointerEXT, "<Size type,<Size stride,<Size count,<Data pointer" );
      ADD_FUNC( NormalPointerEXT, "<Size type,<Size stride,<Size count,<Data pointer" );
      ADD_FUNC( TexCoordPointerEXT, "<Integer size,<Size type,<Size stride,<Size count,<Data pointer" );
      ADD_FUNC( VertexPointerEXT, "<Integer size,<Size type,<Size stride,<Size count,<Data pointer" );
      ADD_FUNC( BeginVertexShaderEXT, "" );
      ADD_FUNC( BindLightParameterEXT, "=Size,<Size light,<Size value" );
      ADD_FUNC( BindMaterialParameterEXT, "=Size,<Size face,<Size value" );
      ADD_FUNC( BindParameterEXT, "=Size,<Size value" );
      ADD_FUNC( BindTexGenParameterEXT, "=Size,<Size unit,<Size coord,<Size value" );
      ADD_FUNC( BindTextureUnitParameterEXT, "=Size,<Size unit,<Size value" );
      ADD_FUNC( BindVertexShaderEXT, "<Size id" );
      ADD_FUNC( DeleteVertexShaderEXT, "<Size id" );
      ADD_FUNC( DisableVariantClientStateEXT, "<Size id" );
      ADD_FUNC( EnableVariantClientStateEXT, "<Size id" );
      ADD_FUNC( EndVertexShaderEXT, "" );
      ADD_FUNC( ExtractComponentEXT, "<Size res,<Size src,<Size num" );
      ADD_FUNC( GenSymbolsEXT, "=Size,<Size dataType,<Size storageType,<Size range,<Size components" );
      ADD_FUNC( GenVertexShadersEXT, "=Size,<Size range" );
      ADD_FUNC( GetInvariantBooleanvEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( GetInvariantFloatvEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( GetInvariantIntegervEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( GetLocalConstantBooleanvEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( GetLocalConstantFloatvEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( GetLocalConstantIntegervEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( GetVariantBooleanvEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( GetVariantFloatvEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( GetVariantIntegervEXT, "<Size id,<Size value,<Data data" );
      ADD_FUNC( InsertComponentEXT, "<Size res,<Size src,<Size num" );
      ADD_FUNC( IsVariantEnabledEXT, "=Boolean,<Size id,<Size cap" );
      ADD_FUNC( SetInvariantEXT, "<Size id,<Size type,<Data addr" );
      ADD_FUNC( SetLocalConstantEXT, "<Size id,<Size type,<Data addr" );
      ADD_FUNC( ShaderOp1EXT, "<Size op,<Size res,<Size arg1" );
      ADD_FUNC( ShaderOp2EXT, "<Size op,<Size res,<Size arg1,<Size arg2" );
      ADD_FUNC( ShaderOp3EXT, "<Size op,<Size res,<Size arg1,<Size arg2,<Size arg3" );
      ADD_FUNC( SwizzleEXT, "<Size res,<Size in,<Size outX,<Size outY,<Size outZ,<Size outW" );
      ADD_FUNC( VariantPointerEXT, "<Size id,<Size type,<Size stride,<Data addr" );
      ADD_FUNC( VariantbvEXT, "<Size id,<Data addr" );
      ADD_FUNC( VariantdvEXT, "<Size id,<Data addr" );
      ADD_FUNC( VariantfvEXT, "<Size id,<Data addr" );
      ADD_FUNC( VariantivEXT, "<Size id,<Data addr" );
      ADD_FUNC( VariantsvEXT, "<Size id,<Data addr" );
      ADD_FUNC( VariantubvEXT, "<Size id,<Data addr" );
      ADD_FUNC( VariantuivEXT, "<Size id,<Data addr" );
      ADD_FUNC( VariantusvEXT, "<Size id,<Data addr" );
      ADD_FUNC( WriteMaskEXT, "<Size res,<Size in,<Size outX,<Size outY,<Size outZ,<Size outW" );
      ADD_FUNC( VertexWeightPointerEXT, "<Integer size,<Size type,<Size stride,<Data pointer" );
      ADD_FUNC( VertexWeightfEXT, "<Scalar weight" );
      ADD_FUNC( VertexWeightfvEXT, "<Data weight" );
      ADD_FUNC( BufferRegionEnabledEXT, "=Size" );
      ADD_FUNC( DeleteBufferRegionEXT, "<Size region" );
      ADD_FUNC( DrawBufferRegionEXT, "<Size region,<Integer x,<Integer y,<Size width,<Size height,<Integer xDest,<Integer yDest" );
      ADD_FUNC( NewBufferRegionEXT, "=Size,<Size region" );
      ADD_FUNC( ReadBufferRegionEXT, "<Size region,<Integer x,<Integer y,<Size width,<Size height" );
      ADD_FUNC( XWaitGL, "" );
      ADD_FUNC( XWaitX, "" );
      ADD_FUNC( xewIsSupported, "=Boolean,<String name" );
      ADD_FUNC( xewGetExtension, "=Boolean,<String name" );
      ADD_FUNC( uBuild1DMipmapLevels, "=Integer,<Size target,<Integer internalFormat,<Size width,<Size format,<Size type,<Integer level,<Integer base,<Integer max,<Data data" );
      ADD_FUNC( uBuild1DMipmaps, "=Integer,<Size target,<Integer internalFormat,<Size width,<Size format,<Size type,<Data data" );
      ADD_FUNC( uBuild2DMipmapLevels, "=Integer,<Size target,<Integer internalFormat,<Size width,<Size height,<Size format,<Size type,<Integer level,<Integer base,<Integer max,<Data data" );
      ADD_FUNC( uBuild2DMipmaps, "=Integer,<Size target,<Integer internalFormat,<Size width,<Size height,<Size format,<Size type,<Data data" );
      ADD_FUNC( uBuild3DMipmapLevels, "=Integer,<Size target,<Integer internalFormat,<Size width,<Size height,<Size depth,<Size format,<Size type,<Integer level,<Integer base,<Integer max,<Data data" );
      ADD_FUNC( uBuild3DMipmaps, "=Integer,<Size target,<Integer internalFormat,<Size width,<Size height,<Size depth,<Size format,<Size type,<Data data" );
      ADD_FUNC( uCheckExtension, "=Boolean,<Data extName,<Data extString" );
      ADD_FUNC( uErrorString, "=Size,<Size error" );
      ADD_FUNC( uGetString, "=Size,<Size name" );
      ADD_FUNC( uLookAt, "<Scalar eyeX,<Scalar eyeY,<Scalar eyeZ,<Scalar centerX,<Scalar centerY,<Scalar centerZ,<Scalar upX,<Scalar upY,<Scalar upZ" );
      ADD_FUNC( uOrtho2D, "<Scalar left,<Scalar right,<Scalar bottom,<Scalar top" );
      ADD_FUNC( uPerspective, "<Scalar fovy,<Scalar aspect,<Scalar zNear,<Scalar zFar" );
      ADD_FUNC( uPickMatrix, "<Scalar x,<Scalar y,<Scalar delX,<Scalar delY,<Data viewport" );
      ADD_FUNC( uProject, "=Integer,<Scalar objX,<Scalar objY,<Scalar objZ,<Data model,<Data proj,<Data view,<Data winX,<Data winY,<Data winZ" );
      ADD_FUNC( uScaleImage, "=Integer,<Size format,<Size wIn,<Size hIn,<Size typeIn,<Data dataIn,<Size wOut,<Size hOut,<Size typeOut,<Data dataOut" );
      ADD_FUNC( uUnProject, "=Integer,<Scalar winX,<Scalar winY,<Scalar winZ,<Data model,<Data proj,<Data view,<Data objX,<Data objY,<Data objZ" );
      ADD_FUNC( uUnProject4, "=Integer,<Scalar winX,<Scalar winY,<Scalar winZ,<Scalar clipW,<Data model,<Data proj,<Data view,<Scalar nearVal,<Scalar farVal,<Data objX,<Data objY,<Data objZ,<Data objW" );
    }
    
    void *llvmResolveExternalFunction( std::string const &name )
    {
      FuncTable::const_iterator   it;
      it = llvmFuncTable.find( name );
      if( it != llvmFuncTable.end() )
        return( it->second );

      return 0;
    }
  };
};
