#
# Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
#

Import( 'extsEnv', 'fabricExtsDistDir', 'buildOS', 'buildArch', 'buildType' )

oglPluginEnv = extsEnv.Clone()

# OpenGL
if buildOS == 'Linux':
  oglPluginEnv.Append( LINKFLAGS = [ '-lGLEW' ] )
  oglPluginEnv.ParseConfig( 'pkg-config --cflags --libs gtk+-2.0' )
  oglPluginEnv.ParseConfig( 'pkg-config --cflags --libs gtkglext-1.0' )
  oglPluginEnv.ParseConfig( 'pkg-config --cflags --libs gdkglext-1.0' )
if buildOS == 'Darwin':
  oglPluginEnv.Append( CPPPATH = ['/opt/local/include'] )
  oglPluginEnv.Append( LIBPATH = ['/opt/local/lib'] )
  oglPluginEnv.Append( LIBS = ['GLEW'] )
  oglPluginEnv.Append( FRAMEWORKS = ['OpenGL'] )
if buildOS == 'Windows':
	Import( 'glewFlags' )
	oglPluginEnv.MergeFlags( glewFlags )

generator = oglPluginEnv.File("generate.py")
template = oglPluginEnv.File("ogl.cpp_template")

oglSource = oglPluginEnv.File("ogl.cpp")
oglManifest = oglPluginEnv.File('FabricOGL.fpm.json')

command = ""
if buildOS == 'Linux':
  command = "python " + generator.abspath
else:
  command = "cd " + generator.pathname() + "; python " + generator.basename()
    
oglPluginEnv.Command(
  [oglSource, oglManifest],
  [generator, template],
  command
  )

oglPlugin = oglPluginEnv.SharedLibrary( 'FabricOGL', oglSource )

installAction = Install( fabricExtsDistDir, [oglPlugin,oglManifest] )
extsEnv.CopyToAppdataIfWindows( installAction )

Alias( 'oglExt', [
  oglPlugin,
  oglManifest,
  installAction
] )
