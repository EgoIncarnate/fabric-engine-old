/*
 *  Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
 */

// include the EDK first, since it provides the OS based defines
#include <Fabric/EDK/EDK.h>
 
#include <GL/glew.h>
#if defined(FABRIC_OS_LINUX)
# undef None
# undef True
# undef False
#elif defined(FABRIC_OS_MACOSX)
#elif defined(FABRIC_OS_NACL)
# include <GLES2/gl2.h>
#elif defined(FABRIC_OS_WINDOWS)
#endif


using namespace Fabric::EDK;

//#define FABRIC_OGL_DEBUG 1

static unsigned int gBracket = 0;
static bool gGlewInitialized = false;
static void _incBracket()
{
  gBracket++;
}
static void _decBracket()
{
  if(gBracket > 0)
    gBracket--;
  else
    throw Exception("Fabric::OGL::_decBracket: Unbalanced bracket.");
}
static void _clearError()
{
  if(!gGlewInitialized){
#ifdef FABRIC_OGL_DEBUG
    printf("glewInit();\n");
#endif
    GLenum error = glewInit();
    if(error != GLEW_OK)
    {
      printf("[Fabric::OGL::glewInit] ERROR: %s\n",(const char*)glewGetErrorString(error));
      throw Exception("[Fabric::OGL::glewInit] ERROR: %s",(const char*)glewGetErrorString(error));
    }
    gGlewInitialized = true;
  }

  // throw away last error
  if(gBracket > 0)
    return;
  glGetError();
}

static char const *glErrorDesc( GLenum glError )
{
  switch ( glError )
  {
    case GL_NO_ERROR: return "GL_NO_ERROR";
    case GL_INVALID_ENUM: return "GL_INVALID_ENUM";
    case GL_INVALID_VALUE: return "GL_INVALID_VALUE";
    case GL_INVALID_OPERATION: return "GL_INVALID_OPERATION";
    case GL_STACK_OVERFLOW: return "GL_STACK_OVERFLOW";
    case GL_STACK_UNDERFLOW: return "GL_STACK_UNDERFLOW";
    case GL_OUT_OF_MEMORY: return "GL_OUT_OF_MEMORY";
    case GL_TABLE_TOO_LARGE: return "GL_TABLE_TOO_LARGE";
    default: return "*** Unknown OpenGL Error ***";
  }
}

static void _checkError(const char * functionName)
{
  if(gBracket >0)
    return;
  GLenum glError = glGetError();
  if(glError != GL_NO_ERROR)
  {
    char buf[1024];
    sprintf( buf, "[Fabric::OGL::%s] ERROR: %s (0x%04X)", functionName, glErrorDesc( glError ), (unsigned)glError );
    printf( "%s\n", buf );
    throw Exception( "%s", buf );
  }
}

####FUNCTIONS####
