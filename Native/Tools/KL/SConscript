#
# Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
#

import os.path
Import( 'coreEnv', 'buildObject', 'buildOS', 'buildArch', 'FABRIC_VERSION', 'distDir', 'generateDistZip' )

klToolPackageName = "FabricEngine-KLTool-"+buildOS+"-"+buildArch+"-"+FABRIC_VERSION
klToolPackageDir = distDir.Dir(klToolPackageName)

klEnv = coreEnv.Clone()

extraObjects = [buildObject]

if buildOS == 'Windows':
    Import( 'getoptFlags' )
    klEnv.MergeFlags( getoptFlags )
    klEnv.Append( LINKFLAGS = [
        '/IMPLIB:${TARGET.dir}/kl_cmd.lib',
        '/STACK:4194304'
    ] )
    klEnv.Append( LIBS = [ 'advapi32' ] )
elif buildOS == 'Linux':
	klEnv.Append( LIBS = [ 'dl' ] )
  # [andrew 20120215] resolve circular linking dependencies in Core
	klEnv[ '_LIBFLAGS' ] = '-Wl,--start-group ' + klEnv['_LIBFLAGS'] + ' -Wl,--end-group'

klBin = klEnv.Program( 'kl', [ Glob('*.cpp'), extraObjects ] )

klToolInstallerFiles = [
  Install(
    klToolPackageDir,
    klEnv.File("README.txt")
  ),
  Install(
    klToolPackageDir,
    klBin
  )
  ]

if buildOS == 'Windows':
  installerEnv = klEnv.Clone()
  generateDistZip( installerEnv )
  installerEnv.Append( DISTZIP_ROOTDIR = klToolPackageDir )
  klToolInstaller = installerEnv.DistZip(
    distDir.File(klToolPackageName+".zip"),
    klToolInstallerFiles
  )
else:
  klToolInstaller = klEnv.Command(
    distDir.File(klToolPackageName+".tar.bz2"),
    klToolInstallerFiles,
    [
      [ "tar", "-C", distDir, "-jcf", "$TARGET", klToolPackageName ]
    ]
  )
Alias( 'klToolInstaller', klToolInstaller )
Export( 'klToolInstaller' )
  
Alias( 'kl', klBin )
