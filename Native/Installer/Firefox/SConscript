#
# Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
#

# Note that the installer with the .xpi extension should be served
# with the MIME type application/x-xpinstall

import os
Import( 'baseEnv', 'buildOS', 'buildArch', 'archDistDir', 'fabricExtsDistDir', 'npapiDistDir', 'installerName', 'generateDistZip' )

firefoxExtensionDir = archDistDir.Dir( 'FirefoxExtension' )

installerFiles = []

installerFiles.append( baseEnv.Command(
  firefoxExtensionDir.File('chrome.manifest'),
  'chrome.manifest',
  [ Copy( '$TARGET', '$SOURCE' ) ]
) )

baseEnv.Template( "install.rdf", "install.rdf."+buildOS+"."+buildArch+".template" )
installerFiles.append( baseEnv.Command(
  firefoxExtensionDir.File('install.rdf'),
  'install.rdf',
  [ Copy( '$TARGET', '$SOURCE' ) ]
) )

for res in ["48", "64"]:
  installerFiles.append( baseEnv.Command(
    firefoxExtensionDir.Dir('content').File('fabric-engine_'+res+'.png'),
    baseEnv.Dir('content').File('fabric-engine_'+res+'.png'),
    [ Copy( '$TARGET', '$SOURCE' ) ]
  ) )

if buildOS == 'Darwin':
  npapiPluginBundleDir = npapiDistDir.Dir( 'Fabric.'+buildArch+'.plugin' )
  pluginDir = firefoxExtensionDir.Dir('plugins').Dir( 'Fabric.'+buildArch+'.plugin' )
  installerFiles.append( baseEnv.Command(
    pluginDir.Dir('Contents').Dir('MacOS').File('FabricNPAPI'),
    npapiPluginBundleDir.Dir('Contents').Dir('MacOS').File('FabricNPAPI'),
    Copy( '$TARGET', '$SOURCE' )
  ) )
  installerFiles.append( baseEnv.Command(
    pluginDir.Dir('Contents').File('Info.plist'),
    npapiPluginBundleDir.Dir('Contents').File('Info.plist'),
    Copy( '$TARGET', '$SOURCE' )
  ) )
if buildOS == 'Linux':
  installerFiles.append( baseEnv.Command(
    firefoxExtensionDir.Dir('plugins').File('libFabricPlugin.so'),
    npapiDistDir.File('libFabricPlugin.so'),
    Copy( '$TARGET', '$SOURCE' )
  ) )
if buildOS == 'Windows':
  installerFiles.append( baseEnv.Command(
    firefoxExtensionDir.Dir('plugins').File('npFabricPlugin.dll'),
    npapiDistDir.File('npFabricPlugin.dll'),
    Copy( '$TARGET', '$SOURCE' )
  ) )

for ext in ['EXR','HDR','OBJ','OGL','PNG','TGA']:
  fpm = 'Fabric' + ext + '.fpm.json'
  if buildOS == 'Linux':
    lib = 'libFabric' + ext + '.so'
  if buildOS == 'Darwin':
    lib = 'libFabric' + ext + '.dylib'
  if buildOS == 'Windows':
    lib = 'Fabric' + ext + '.dll'
  installerFiles.append( baseEnv.Command(
    firefoxExtensionDir.Dir('plugins').File( fpm ),
    fabricExtsDistDir.File( fpm ),
    [
      Copy( '$TARGET', '$SOURCE' )
    ]
  ) )
  installerFiles.append( baseEnv.Command(
    firefoxExtensionDir.Dir('plugins').File( lib ),
    fabricExtsDistDir.File( lib ),
    [
      Copy( '$TARGET', '$SOURCE' )
    ]
  ) )

installerEnv = baseEnv.Clone()
generateDistZip( installerEnv )
installerEnv.Append( DISTZIP_ROOTDIR = firefoxExtensionDir )
installerFile = installerEnv.DistZip(
  archDistDir.File(installerName + ".xpi"),
  installerFiles
)
Alias( 'firefoxInstaller', installerFile )
