; ModuleID = 'kl'

%0 = type { i32, i32, i32, [5 x i8] }
%1 = type { i32, i32, i32, [6 x i8] }
%2 = type { i32, i32, i32, [26 x i8] }
%3 = type { i32, i32, i32, [29 x i8] }
%4 = type { i32, i32, i32, [39 x i8] }
%5 = type { i32, i32, i32, [35 x i8] }
%6 = type { i32, i32, i32, [41 x i8] }
%7 = type { i32, i32, i32, [2 x i8] }
%String = type %StringBits*
%StringBits = type { i32, i32, i32, [0 x i8] }
%cl_device_id_VA = type %cl_device_id_VABits*
%cl_device_id_VABits = type { i32, i32, i32, [0 x i8*] }
%cl_event_VA = type %cl_device_id_VABits*
%cl_event_VABits = type { i32, i32, i32, [0 x i8*] }
%cl_platform_id_VA = type %cl_device_id_VABits*
%cl_platform_id_VABits = type { i32, i32, i32, [0 x i8*] }

@0 = internal constant %0 { i32 -2147483648, i32 5, i32 4, [5 x i8] c"true\00" }
@1 = internal constant %1 { i32 -2147483648, i32 6, i32 5, [6 x i8] c"false\00" }
@__Byte__Adapter = external constant i8*
@2 = internal constant %2 { i32 -2147483648, i32 26, i32 25, [26 x i8] c"KL: Byte division by zero\00" }
@3 = internal constant %2 { i32 -2147483648, i32 26, i32 25, [26 x i8] c"KL: Byte division by zero\00" }
@__Data__Adapter = external constant i8*
@__Integer__Adapter = external constant i8*
@4 = internal constant %3 { i32 -2147483648, i32 29, i32 28, [29 x i8] c"KL: Integer division by zero\00" }
@5 = internal constant %3 { i32 -2147483648, i32 29, i32 28, [29 x i8] c"KL: Integer division by zero\00" }
@__Scalar__Adapter = external constant i8*
@__Size__Adapter = external constant i8*
@6 = internal constant %2 { i32 -2147483648, i32 26, i32 25, [26 x i8] c"KL: Size division by zero\00" }
@7 = internal constant %2 { i32 -2147483648, i32 26, i32 25, [26 x i8] c"KL: Size division by zero\00" }
@__cl_command_queue__Adapter = external constant i8*
@__cl_context__Adapter = external constant i8*
@__cl_device_id__Adapter = external constant i8*
@8 = internal constant %4 { i32 -2147483648, i32 39, i32 38, [39 x i8] c"KL: cl_device_id[] index out-of-bounds\00" }
@__cl_device_id_VA__Adapter = external constant i8*
@9 = internal constant %4 { i32 -2147483648, i32 39, i32 38, [39 x i8] c"KL: cl_device_id[] index out-of-bounds\00" }
@__cl_device_id__DefaultValue = internal constant i8* null
@__cl_event__Adapter = external constant i8*
@10 = internal constant %5 { i32 -2147483648, i32 35, i32 34, [35 x i8] c"KL: cl_event[] index out-of-bounds\00" }
@__cl_event_VA__Adapter = external constant i8*
@11 = internal constant %5 { i32 -2147483648, i32 35, i32 34, [35 x i8] c"KL: cl_event[] index out-of-bounds\00" }
@__cl_event__DefaultValue = internal constant i8* null
@__cl_kernel__Adapter = external constant i8*
@__cl_mem__Adapter = external constant i8*
@__cl_platform_id__Adapter = external constant i8*
@12 = internal constant %6 { i32 -2147483648, i32 41, i32 40, [41 x i8] c"KL: cl_platform_id[] index out-of-bounds\00" }
@__cl_platform_id_VA__Adapter = external constant i8*
@13 = internal constant %6 { i32 -2147483648, i32 41, i32 40, [41 x i8] c"KL: cl_platform_id[] index out-of-bounds\00" }
@__cl_platform_id__DefaultValue = internal constant i8* null
@__cl_program__Adapter = external constant i8*
@14 = internal constant %7 { i32 -2147483648, i32 2, i32 1, [2 x i8] c"#\00" }
@15 = internal constant %7 { i32 -2147483648, i32 2, i32 1, [2 x i8] c"*\00" }
@16 = internal constant %7 { i32 -2147483648, i32 2, i32 1, [2 x i8] c".\00" }
@17 = internal constant %7 { i32 -2147483648, i32 2, i32 1, [2 x i8] c" \00" }

define void @__construct_String__Boolean(%String* nocapture %stringLValue, i1 %booleanRValue) inlinehint {
entry:
  br i1 %booleanRValue, label %true, label %false

true:                                             ; preds = %entry
  call void @__String__Retain(%String bitcast (%0* @0 to %String))
  br label %merge

false:                                            ; preds = %entry
  call void @__String__Retain(%String bitcast (%1* @1 to %String))
  br label %merge

merge:                                            ; preds = %false, %true
  %stringRValue = phi %String [ bitcast (%0* @0 to %String), %true ], [ bitcast (%1* @1 to %String), %false ]
  %0 = load %String* %stringLValue
  store %String %stringRValue, %String* %stringLValue
  call void @__String__Release(%String %0)
  ret void
}

define void @__String__Retain(%String %string) inlinehint {
entry:
  %0 = icmp ne %String %string, null
  br i1 %0, label %addRef, label %done

addRef:                                           ; preds = %entry
  %1 = getelementptr %String %string, i32 0, i32 0
  %2 = call i32 @llvm.atomic.load.add.i32.p0i32(i32* %1, i32 1)
  br label %done

done:                                             ; preds = %addRef, %entry
  ret void
}

define void @__String__Release(%String %string) inlinehint {
entry:
  %0 = icmp ne %String %string, null
  br i1 %0, label %nonNull, label %done

nonNull:                                          ; preds = %entry
  %1 = getelementptr %String %string, i32 0, i32 0
  %2 = call i32 @llvm.atomic.load.sub.i32.p0i32(i32* %1, i32 1)
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %free, label %done

free:                                             ; preds = %nonNull
  %4 = bitcast %String %string to i8*
  call void @free(i8* %4)
  br label %done

done:                                             ; preds = %free, %nonNull, %entry
  ret void
}

define i1 @__operator_BIT_NOT__Boolean(i1 %rValue) inlinehint {
entry:
  %0 = xor i1 %rValue, true
  ret i1 %0
}

define i1 @__operator_BIT_OR__Boolean__Boolean(i1 %lhsRValue, i1 %rhsRValue) inlinehint {
entry:
  %0 = or i1 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_BIT_AND__Boolean__Boolean(i1 %lhsRValue, i1 %rhsRValue) inlinehint {
entry:
  %0 = and i1 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_BIT_XOR__Boolean__Boolean(i1 %lhsRValue, i1 %rhsRValue) inlinehint {
entry:
  %0 = xor i1 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_EQ__Boolean__Boolean(i1 %lhsRValue, i1 %rhsRValue) inlinehint {
entry:
  %0 = icmp eq i1 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_NE__Boolean__Boolean(i1 %lhsRValue, i1 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i1 %lhsRValue, %rhsRValue
  ret i1 %0
}

define void @__construct_Boolean__Byte(i1* nocapture %booleanLValue, i8 %byteRValue) inlinehint {
entry:
  %0 = icmp ne i8 %byteRValue, 0
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_Integer__Byte(i32* nocapture %integerLValue, i8 %byteRValue) inlinehint {
entry:
  %0 = zext i8 %byteRValue to i32
  store i32 %0, i32* %integerLValue
  ret void
}

define void @__construct_Size__Byte(i32* nocapture %sizeLValue, i8 %byteRValue) inlinehint {
entry:
  %0 = zext i8 %byteRValue to i32
  store i32 %0, i32* %sizeLValue
  ret void
}

define void @__construct_Scalar__Byte(float* nocapture %scalarLValue, i8 %byteRValue) inlinehint {
entry:
  %0 = uitofp i8 %byteRValue to float
  store float %0, float* %scalarLValue
  ret void
}

define void @__construct_String__Byte(%String* nocapture %stringLValue, i8 %byteRValue) inlinehint {
entry:
  %byteRValue_tempLValue = alloca i8
  store i8 %byteRValue, i8* %byteRValue_tempLValue
  %0 = call %String @__String__Cast(i8* %byteRValue_tempLValue, i8* bitcast (i8** @__Byte__Adapter to i8*))
  %1 = load %String* %stringLValue
  store %String %0, %String* %stringLValue
  call void @__String__Release(%String %1)
  ret void
}

declare %String @__String__Cast(i8*, i8*)

define i8 @__operator_POS__Byte(i8 %rValue) inlinehint {
entry:
  ret i8 %rValue
}

define i8 @__operator_BIT_NOT__Byte(i8 %rValue) inlinehint {
entry:
  %0 = xor i8 %rValue, -1
  ret i8 %0
}

define i8 @__operator_PRE_INC__Byte(i8* nocapture %lValue) inlinehint {
entry:
  %0 = load i8* %lValue
  %1 = add i8 %0, 1
  store i8 %1, i8* %lValue
  ret i8 %1
}

define i8 @__operator_PRE_DEC__Byte(i8* nocapture %lValue) inlinehint {
entry:
  %0 = load i8* %lValue
  %1 = sub i8 %0, 1
  store i8 %1, i8* %lValue
  ret i8 %1
}

define i8 @__operator_POST_INC__Byte(i8* nocapture %lValue) inlinehint {
entry:
  %0 = load i8* %lValue
  %1 = add i8 %0, 1
  store i8 %1, i8* %lValue
  ret i8 %0
}

define i8 @__operator_POST_DEC__Byte(i8* nocapture %lValue) inlinehint {
entry:
  %0 = load i8* %lValue
  %1 = sub i8 %0, 1
  store i8 %1, i8* %lValue
  ret i8 %0
}

define i8 @__operator_ADD__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = add i8 %lhsRValue, %rhsRValue
  ret i8 %0
}

define i8 @__operator_SUB__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = sub i8 %lhsRValue, %rhsRValue
  ret i8 %0
}

define i8 @__operator_MUL__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = mul i8 %lhsRValue, %rhsRValue
  ret i8 %0
}

define i8 @__operator_DIV__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i8 %rhsRValue, 0
  br i1 %0, label %nonZero, label %zero

nonZero:                                          ; preds = %entry
  %1 = udiv i8 %lhsRValue, %rhsRValue
  ret i8 %1

zero:                                             ; preds = %entry
  call void @__String__Retain(%String bitcast (%2* @2 to %String))
  call void @__String__Report(%String bitcast (%2* @2 to %String))
  ret i8 0
}

define void @__String__Report(%String %string) inlinehint {
entry:
  %0 = icmp ne %String %string, null
  br i1 %0, label %notNull, label %done

notNull:                                          ; preds = %entry
  %1 = getelementptr %String %string, i32 0, i32 3
  %2 = getelementptr [0 x i8]* %1, i32 0, i32 0
  %3 = getelementptr %String %string, i32 0, i32 2
  %4 = load i32* %3
  call void @report(i8* %2, i32 %4)
  br label %done

done:                                             ; preds = %notNull, %entry
  ret void
}

define i8 @__operator_MOD__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i8 %rhsRValue, 0
  br i1 %0, label %nonZero, label %zero

nonZero:                                          ; preds = %entry
  %1 = urem i8 %lhsRValue, %rhsRValue
  ret i8 %1

zero:                                             ; preds = %entry
  call void @__String__Retain(%String bitcast (%2* @3 to %String))
  call void @__String__Report(%String bitcast (%2* @3 to %String))
  ret i8 0
}

define i8 @__operator_BIT_OR__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = or i8 %lhsRValue, %rhsRValue
  ret i8 %0
}

define i8 @__operator_BIT_AND__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = and i8 %lhsRValue, %rhsRValue
  ret i8 %0
}

define i8 @__operator_BIT_XOR__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = xor i8 %lhsRValue, %rhsRValue
  ret i8 %0
}

define i1 @__operator_EQ__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = icmp eq i8 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_NE__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i8 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_GT__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = icmp ugt i8 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_GE__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = icmp uge i8 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_LT__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = icmp ult i8 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_LE__Byte__Byte(i8 %lhsRValue, i8 %rhsRValue) inlinehint {
entry:
  %0 = icmp ule i8 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i32 @__method_dataSize__Byte(i8 %thisRValue) inlinehint {
entry:
  ret i32 1
}

define i8* @__method_data__Byte(i8* nocapture %thisLValue) inlinehint {
entry:
  ret i8* %thisLValue
}

define void @__construct_Boolean__Data(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__Data(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__Data__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__Data(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__Data(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define void @__construct_Boolean__Integer(i1* nocapture %booleanLValue, i32 %integerRValue) inlinehint {
entry:
  %0 = icmp ne i32 %integerRValue, 0
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_Byte__Integer(i8* nocapture %byteLValue, i32 %integerRValue) inlinehint {
entry:
  %0 = trunc i32 %integerRValue to i8
  store i8 %0, i8* %byteLValue
  ret void
}

define void @__construct_Size__Integer(i32* nocapture %sizeLValue, i32 %integerRValue) inlinehint {
entry:
  store i32 %integerRValue, i32* %sizeLValue
  ret void
}

define void @__construct_Scalar__Integer(float* nocapture %scalarLValue, i32 %integerRValue) inlinehint {
entry:
  %0 = sitofp i32 %integerRValue to float
  store float %0, float* %scalarLValue
  ret void
}

define void @__construct_String__Integer(%String* nocapture %stringLValue, i32 %integerRValue) inlinehint {
entry:
  %integerRValue_tempLValue = alloca i32
  store i32 %integerRValue, i32* %integerRValue_tempLValue
  %0 = bitcast i32* %integerRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__Integer__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__operator_POS__Integer(i32 %rValue) inlinehint {
entry:
  ret i32 %rValue
}

define i32 @__operator_NEG__Integer(i32 %rValue) inlinehint {
entry:
  %0 = sub i32 0, %rValue
  ret i32 %0
}

define i32 @__operator_BIT_NOT__Integer(i32 %rValue) inlinehint {
entry:
  %0 = xor i32 %rValue, -1
  ret i32 %0
}

define i32 @__operator_PRE_INC__Integer(i32* nocapture %lValue) inlinehint {
entry:
  %0 = load i32* %lValue
  %1 = add i32 %0, 1
  store i32 %1, i32* %lValue
  ret i32 %1
}

define i32 @__operator_PRE_DEC__Integer(i32* nocapture %lValue) inlinehint {
entry:
  %0 = load i32* %lValue
  %1 = sub i32 %0, 1
  store i32 %1, i32* %lValue
  ret i32 %1
}

define i32 @__operator_POST_INC__Integer(i32* nocapture %lValue) inlinehint {
entry:
  %0 = load i32* %lValue
  %1 = add i32 %0, 1
  store i32 %1, i32* %lValue
  ret i32 %0
}

define i32 @__operator_POST_DEC__Integer(i32* nocapture %lValue) inlinehint {
entry:
  %0 = load i32* %lValue
  %1 = sub i32 %0, 1
  store i32 %1, i32* %lValue
  ret i32 %0
}

define i32 @__operator_ADD__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = add i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_SUB__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = sub i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_MUL__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = mul i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_DIV__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i32 %rhsRValue, 0
  br i1 %0, label %nonZero, label %zero

nonZero:                                          ; preds = %entry
  %1 = sdiv i32 %lhsRValue, %rhsRValue
  ret i32 %1

zero:                                             ; preds = %entry
  call void @__String__Retain(%String bitcast (%3* @4 to %String))
  call void @__String__Report(%String bitcast (%3* @4 to %String))
  ret i32 0
}

define i32 @__operator_MOD__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i32 %rhsRValue, 0
  br i1 %0, label %nonZero, label %zero

nonZero:                                          ; preds = %entry
  %1 = srem i32 %lhsRValue, %rhsRValue
  ret i32 %1

zero:                                             ; preds = %entry
  call void @__String__Retain(%String bitcast (%3* @5 to %String))
  call void @__String__Report(%String bitcast (%3* @5 to %String))
  ret i32 0
}

define i32 @__operator_BIT_OR__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = or i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_BIT_AND__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = and i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_BIT_XOR__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = xor i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i1 @__operator_EQ__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp eq i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_NE__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_GT__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp sgt i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_GE__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp sge i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_LT__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp slt i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_LE__Integer__Integer(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp sle i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i32 @__method_dataSize__Integer(i32 %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__Integer(i32* nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i32* %thisLValue to i8*
  ret i8* %0
}

define void @__construct_Boolean__Scalar(i1* nocapture %booleanLValue, float %scalarRValue) inlinehint {
entry:
  %0 = fcmp one float %scalarRValue, 0.000000e+00
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_Byte__Scalar(i8* nocapture %byteLValue, float %scalarRValue) inlinehint {
entry:
  %0 = fptoui float %scalarRValue to i8
  store i8 %0, i8* %byteLValue
  ret void
}

define void @__construct_Integer__Scalar(i32* nocapture %integerLValue, float %scalarRValue) inlinehint {
entry:
  %0 = fptosi float %scalarRValue to i32
  store i32 %0, i32* %integerLValue
  ret void
}

define void @__construct_Size__Scalar(i32* nocapture %sizeLValue, float %scalarRValue) inlinehint {
entry:
  %0 = fptoui float %scalarRValue to i32
  store i32 %0, i32* %sizeLValue
  ret void
}

define void @__construct_String__Scalar(%String* nocapture %stringLValue, float %scalarRValue) inlinehint {
entry:
  %scalarRValue_tempLValue = alloca float
  store float %scalarRValue, float* %scalarRValue_tempLValue
  %0 = bitcast float* %scalarRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__Scalar__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define float @__operator_POS__Scalar(float %rValue) inlinehint {
entry:
  ret float %rValue
}

define float @__operator_NEG__Scalar(float %rValue) inlinehint {
entry:
  %0 = fsub float -0.000000e+00, %rValue
  ret float %0
}

define float @sin(float %x) inlinehint {
entry:
  %0 = call float @llvm.sin.f32(float %x)
  ret float %0
}

declare float @llvm.sin.f32(float) nounwind readonly

define float @cos(float %x) inlinehint {
entry:
  %0 = call float @llvm.cos.f32(float %x)
  ret float %0
}

declare float @llvm.cos.f32(float) nounwind readonly

declare float @tanf(float) inlinehint

define float @tan(float %x) inlinehint {
entry:
  %0 = call float @tanf(float %x)
  ret float %0
}

declare float @logf(float) inlinehint

define float @log(float %x) inlinehint {
entry:
  %0 = call float @logf(float %x)
  ret float %0
}

declare float @acosf(float) inlinehint

define float @acos(float %x) inlinehint {
entry:
  %0 = call float @acosf(float %x)
  ret float %0
}

declare float @asinf(float) inlinehint

define float @asin(float %x) inlinehint {
entry:
  %0 = call float @asinf(float %x)
  ret float %0
}

declare float @atanf(float) inlinehint

define float @atan(float %x) inlinehint {
entry:
  %0 = call float @atanf(float %x)
  ret float %0
}

declare float @atan2f(float, float) inlinehint

define float @atan2(float %y, float %x) inlinehint {
entry:
  %0 = call float @atan2f(float %y, float %x)
  ret float %0
}

define float @sqrt(float %x) inlinehint {
entry:
  %0 = call float @llvm.sqrt.f32(float %x)
  ret float %0
}

declare float @llvm.sqrt.f32(float) nounwind readonly

define float @abs(float %x) inlinehint {
entry:
  %0 = bitcast float %x to i32
  %1 = and i32 %0, 2147483647
  %2 = bitcast i32 %1 to float
  ret float %2
}

declare float @roundf(float) inlinehint

define float @round(float %x) inlinehint {
entry:
  %0 = call float @roundf(float %x)
  ret float %0
}

declare float @ceilf(float) inlinehint

define float @ceil(float %x) inlinehint {
entry:
  %0 = call float @ceilf(float %x)
  ret float %0
}

declare float @floorf(float) inlinehint

define float @floor(float %x) inlinehint {
entry:
  %0 = call float @floorf(float %x)
  ret float %0
}

define float @pow(float %x, float %y) inlinehint {
entry:
  %0 = call float @llvm.pow.f32(float %x, float %y)
  ret float %0
}

declare float @llvm.pow.f32(float, float) nounwind readonly

define float @__operator_ADD__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fadd float %lhsRValue, %rhsRValue
  ret float %0
}

define float @__operator_SUB__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fsub float %lhsRValue, %rhsRValue
  ret float %0
}

define float @__operator_MUL__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fmul float %lhsRValue, %rhsRValue
  ret float %0
}

define float @__operator_DIV__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fdiv float %lhsRValue, %rhsRValue
  ret float %0
}

define float @__operator_MOD__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = frem float %lhsRValue, %rhsRValue
  ret float %0
}

define i1 @__operator_EQ__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fcmp oeq float %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_NE__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fcmp one float %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_GT__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fcmp ogt float %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_GE__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fcmp oge float %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_LT__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fcmp olt float %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_LE__Scalar__Scalar(float %lhsRValue, float %rhsRValue) inlinehint {
entry:
  %0 = fcmp ole float %lhsRValue, %rhsRValue
  ret i1 %0
}

define i32 @__method_dataSize__Scalar(float %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__Scalar(float* nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast float* %thisLValue to i8*
  ret i8* %0
}

define void @__construct_Boolean__Size(i1* nocapture %booleanLValue, i32 %sizeRValue) inlinehint {
entry:
  %0 = icmp ne i32 %sizeRValue, 0
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_Byte__Size(i8* nocapture %byteLValue, i32 %sizeRValue) inlinehint {
entry:
  %0 = trunc i32 %sizeRValue to i8
  store i8 %0, i8* %byteLValue
  ret void
}

define void @__construct_Integer__Size(i32* nocapture %integerLValue, i32 %sizeRValue) inlinehint {
entry:
  store i32 %sizeRValue, i32* %integerLValue
  ret void
}

define void @__construct_Scalar__Size(float* nocapture %scalarLValue, i32 %sizeRValue) inlinehint {
entry:
  %0 = uitofp i32 %sizeRValue to float
  store float %0, float* %scalarLValue
  ret void
}

define void @__construct_String__Size(%String* nocapture %stringLValue, i32 %sizeRValue) inlinehint {
entry:
  %sizeRValue_tempLValue = alloca i32
  store i32 %sizeRValue, i32* %sizeRValue_tempLValue
  %0 = bitcast i32* %sizeRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__Size__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__operator_POS__Size(i32 %rValue) inlinehint {
entry:
  ret i32 %rValue
}

define i32 @__operator_BIT_NOT__Size(i32 %rValue) inlinehint {
entry:
  %0 = xor i32 %rValue, -1
  ret i32 %0
}

define i32 @__operator_PRE_INC__Size(i32* nocapture %lValue) inlinehint {
entry:
  %0 = load i32* %lValue
  %1 = add i32 %0, 1
  store i32 %1, i32* %lValue
  ret i32 %1
}

define i32 @__operator_PRE_DEC__Size(i32* nocapture %lValue) inlinehint {
entry:
  %0 = load i32* %lValue
  %1 = sub i32 %0, 1
  store i32 %1, i32* %lValue
  ret i32 %1
}

define i32 @__operator_POST_INC__Size(i32* nocapture %lValue) inlinehint {
entry:
  %0 = load i32* %lValue
  %1 = add i32 %0, 1
  store i32 %1, i32* %lValue
  ret i32 %0
}

define i32 @__operator_POST_DEC__Size(i32* nocapture %lValue) inlinehint {
entry:
  %0 = load i32* %lValue
  %1 = sub i32 %0, 1
  store i32 %1, i32* %lValue
  ret i32 %0
}

define i32 @__operator_ADD__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = add i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_SUB__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = sub i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_MUL__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = mul i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_DIV__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i32 %rhsRValue, 0
  br i1 %0, label %nonZero, label %zero

nonZero:                                          ; preds = %entry
  %1 = udiv i32 %lhsRValue, %rhsRValue
  ret i32 %1

zero:                                             ; preds = %entry
  call void @__String__Retain(%String bitcast (%2* @6 to %String))
  call void @__String__Report(%String bitcast (%2* @6 to %String))
  ret i32 0
}

define i32 @__operator_MOD__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i32 %rhsRValue, 0
  br i1 %0, label %nonZero, label %zero

nonZero:                                          ; preds = %entry
  %1 = urem i32 %lhsRValue, %rhsRValue
  ret i32 %1

zero:                                             ; preds = %entry
  call void @__String__Retain(%String bitcast (%2* @7 to %String))
  call void @__String__Report(%String bitcast (%2* @7 to %String))
  ret i32 0
}

define i32 @__operator_BIT_OR__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = or i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_BIT_AND__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = and i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i32 @__operator_BIT_XOR__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = xor i32 %lhsRValue, %rhsRValue
  ret i32 %0
}

define i1 @__operator_EQ__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp eq i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_NE__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ne i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_GT__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ugt i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_GE__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp uge i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_LT__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ult i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i1 @__operator_LE__Size__Size(i32 %lhsRValue, i32 %rhsRValue) inlinehint {
entry:
  %0 = icmp ule i32 %lhsRValue, %rhsRValue
  ret i1 %0
}

define i32 @__method_dataSize__Size(i32 %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__Size(i32* nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i32* %thisLValue to i8*
  ret i8* %0
}

declare void @report(i8*, i32) nounwind inlinehint

declare i32 @llvm.atomic.load.add.i32.p0i32(i32* nocapture, i32) nounwind

declare i32 @llvm.atomic.load.sub.i32.p0i32(i32* nocapture, i32) nounwind

declare void @free(i8*) nounwind

define i32 @__String__Length(%String %string) inlinehint {
entry:
  %0 = icmp eq %String %string, null
  br i1 %0, label %null, label %nonNull

nonNull:                                          ; preds = %entry
  %1 = getelementptr %String %string, i32 0, i32 2
  %2 = load i32* %1
  ret i32 %2

null:                                             ; preds = %entry
  ret i32 0
}

define void @__construct_Boolean__String(i1* nocapture %booleanLValue, %String %stringRValue) inlinehint {
entry:
  %0 = call i32 @__String__Length(%String %stringRValue)
  %1 = icmp ne i32 %0, 0
  store i1 %1, i1* %booleanLValue
  ret void
}

declare void @__String__Append(%String*, %String)

define void @__method_ASSIGN_OP_ADD__String__String(%String* nocapture %lhsLValue, %String %rhsRValue) inlinehint {
entry:
  call void @__String__Append(%String* %lhsLValue, %String %rhsRValue)
  ret void
}

define %String @__operator_ADD__String__String(%String %lhsRValue, %String %rhsRValue) inlinehint {
entry:
  %result = alloca %String
  store %String null, %String* %result
  call void @__String__Retain(%String %lhsRValue)
  %0 = load %String* %result
  store %String %lhsRValue, %String* %result
  call void @__String__Release(%String %0)
  call void @__method_ASSIGN_OP_ADD__String__String(%String* %result, %String %rhsRValue)
  %1 = load %String* %result
  ret %String %1
}

define i32 @__method_length__String(%String %thisRValue) inlinehint {
entry:
  %0 = call i32 @__String__Length(%String %thisRValue)
  ret i32 %0
}

define i32 @__method_dataSize__String(%String %thisRValue) inlinehint {
entry:
  %0 = call i32 @__String__Length(%String %thisRValue)
  %1 = add i32 %0, 1
  ret i32 %1
}

define i8* @__method_data__String(%String %thisRValue) inlinehint {
entry:
  %0 = icmp eq %String %thisRValue, null
  br i1 %0, label %null, label %nonNull

null:                                             ; preds = %entry
  %1 = bitcast %String %thisRValue to i8*
  ret i8* %1

nonNull:                                          ; preds = %entry
  %2 = getelementptr inbounds %String %thisRValue, i32 0, i32 3
  %3 = getelementptr [0 x i8]* %2, i32 0, i32 0
  %4 = getelementptr i8* %3, i32 0
  ret i8* %4
}

define i32 @__method_compare__String__String(%String %lhs, %String %rhs) inlinehint {
entry:
  br label %checkPointers

checkPointers:                                    ; preds = %entry
  %0 = icmp eq %String %lhs, null
  br i1 %0, label %thisIsNull, label %thisIsNotNull

thisIsNull:                                       ; preds = %checkPointers
  %1 = icmp eq %String %rhs, null
  br i1 %1, label %eq, label %lt

thisIsNotNull:                                    ; preds = %checkPointers
  %2 = icmp eq %String %rhs, null
  br i1 %2, label %gt, label %shallow

shallow:                                          ; preds = %thisIsNotNull
  %3 = icmp eq %String %lhs, %rhs
  br i1 %3, label %eq, label %deep

deep:                                             ; preds = %shallow
  %thisLengthPtr = getelementptr inbounds %String %lhs, i32 0, i32 2
  %thisLength = load i32* %thisLengthPtr
  %4 = getelementptr inbounds %String %lhs, i32 0, i32 3
  %thisCStr = getelementptr [0 x i8]* %4, i32 0, i32 0
  %otherLengthPtr = getelementptr inbounds %String %rhs, i32 0, i32 2
  %otherLength = load i32* %otherLengthPtr
  %5 = getelementptr inbounds %String %rhs, i32 0, i32 3
  %otherCStr = getelementptr [0 x i8]* %5, i32 0, i32 0
  %indexPtr = alloca i32
  store i32 0, i32* %indexPtr
  br label %check

check:                                            ; preds = %next, %deep
  %index = load i32* %indexPtr
  br label %checkSelfLength

checkSelfLength:                                  ; preds = %check
  %6 = icmp ult i32 %index, %thisLength
  br i1 %6, label %checkOtherLength, label %verifyOtherLength

verifyOtherLength:                                ; preds = %checkSelfLength
  %7 = icmp ult i32 %index, %otherLength
  br i1 %7, label %lt, label %eq

checkOtherLength:                                 ; preds = %checkSelfLength
  %8 = icmp ult i32 %index, %otherLength
  br i1 %8, label %checkChars, label %gt

checkChars:                                       ; preds = %checkOtherLength
  %thisCharPtr = getelementptr i8* %thisCStr, i32 %index
  %thisChar = load i8* %thisCharPtr
  %otherCharPtr = getelementptr i8* %otherCStr, i32 %index
  %otherChar = load i8* %otherCharPtr
  br label %checkCharsLT

checkCharsLT:                                     ; preds = %checkChars
  %9 = icmp ult i8 %thisChar, %otherChar
  br i1 %9, label %lt, label %checkCharsGT

checkCharsGT:                                     ; preds = %checkCharsLT
  %10 = icmp ugt i8 %thisChar, %otherChar
  br i1 %10, label %gt, label %next

next:                                             ; preds = %checkCharsGT
  %11 = add i32 %index, 1
  store i32 %11, i32* %indexPtr
  br label %check

eq:                                               ; preds = %verifyOtherLength, %shallow, %thisIsNull
  ret i32 0

lt:                                               ; preds = %checkCharsLT, %verifyOtherLength, %thisIsNull
  ret i32 -1

gt:                                               ; preds = %checkCharsGT, %checkOtherLength, %thisIsNotNull
  ret i32 1
}

define i1 @__operator_EQ__String__String(%String %lhsRValue, %String %rhsRValue) inlinehint {
entry:
  %0 = call i32 @__method_compare__String__String(%String %lhsRValue, %String %rhsRValue)
  %1 = icmp eq i32 %0, 0
  ret i1 %1
}

define i1 @__operator_NE__String__String(%String %lhsRValue, %String %rhsRValue) inlinehint {
entry:
  %0 = call i32 @__method_compare__String__String(%String %lhsRValue, %String %rhsRValue)
  %1 = icmp ne i32 %0, 0
  ret i1 %1
}

define i1 @__operator_GT__String__String(%String %lhsRValue, %String %rhsRValue) inlinehint {
entry:
  %0 = call i32 @__method_compare__String__String(%String %lhsRValue, %String %rhsRValue)
  %1 = icmp sgt i32 %0, 0
  ret i1 %1
}

define i1 @__operator_GE__String__String(%String %lhsRValue, %String %rhsRValue) inlinehint {
entry:
  %0 = call i32 @__method_compare__String__String(%String %lhsRValue, %String %rhsRValue)
  %1 = icmp sge i32 %0, 0
  ret i1 %1
}

define i1 @__operator_LT__String__String(%String %lhsRValue, %String %rhsRValue) inlinehint {
entry:
  %0 = call i32 @__method_compare__String__String(%String %lhsRValue, %String %rhsRValue)
  %1 = icmp slt i32 %0, 0
  ret i1 %1
}

define i1 @__operator_LE__String__String(%String %lhsRValue, %String %rhsRValue) inlinehint {
entry:
  %0 = call i32 @__method_compare__String__String(%String %lhsRValue, %String %rhsRValue)
  %1 = icmp sle i32 %0, 0
  ret i1 %1
}

declare void @glActiveTexture(i32) inlinehint

declare void @glAttachShader(i32, i32) inlinehint

declare void @glBegin(i32) inlinehint

declare void @glBindBuffer(i32, i32) inlinehint

declare void @glBindTexture(i32, i32) inlinehint

declare void @glBlendFunc(i32, i32) inlinehint

declare void @glBufferData(i32, i32, i8*, i32) inlinehint

declare void @glBufferSubData(i32, i32, i32, i8*) inlinehint

declare void @glClear(i32) inlinehint

declare void @glClearColor(float, float, float, float) inlinehint

declare void @glColor3f(float, float, float) inlinehint

declare void @glColor4f(float, float, float, float) inlinehint

declare void @glColorMask(i1, i1, i1, i1) inlinehint

declare void @glCompileShader(i32) inlinehint

declare i32 @glCreateProgram() inlinehint

declare i32 @glCreateShader(i32) inlinehint

declare void @glCullFace(i32) inlinehint

declare void @glDeleteBuffers(i32, i8*) inlinehint

declare void @glDeleteProgram(i32) inlinehint

declare void @glDeleteShader(i32) inlinehint

declare void @glDeleteTextures(i32, i8*) inlinehint

declare void @glDepthFunc(i32) inlinehint

declare void @glDepthMask(i1) inlinehint

declare void @glDisable(i32) inlinehint

declare void @glDisableClientState(i32) inlinehint

declare void @glReadBuffer(i32) inlinehint

declare void @glDrawBuffer(i32) inlinehint

declare void @glDrawArrays(i32, i32, i32) inlinehint

declare void @glDrawElements(i32, i32, i32, i8*) inlinehint

declare void @glEnable(i32) inlinehint

declare void @glEnableClientState(i32) inlinehint

declare void @glEnableVertexAttribArray(i32) inlinehint

declare void @glEnd() inlinehint

declare void @glFinish() inlinehint

declare void @glFlush() inlinehint

declare void @glGenBuffers(i32, i8*) inlinehint

declare void @glGenTextures(i32, i8*) inlinehint

declare void @glGetActiveAttrib(i32, i32, i32* nocapture, i32* nocapture, %String* nocapture) inlinehint

declare void @glGetActiveUniform(i32, i32, i32* nocapture, i32* nocapture, %String* nocapture) inlinehint

declare i32 @glGetAttribLocation(i32, %String) inlinehint

declare void @glGetIntegerv(i32, i8*) inlinehint

declare void @glGetProgramInfoLog(i32, i32, i32* nocapture, %String* nocapture) inlinehint

declare void @glGetProgramiv(i32, i32, i32* nocapture) inlinehint

declare void @glGetShaderInfoLog(i32, i32, i32* nocapture, %String* nocapture) inlinehint

declare void @glGetShaderiv(i32, i32, i32* nocapture) inlinehint

declare void @glGetTexLevelParameterfv(i32, i32, i32, i8*) inlinehint

declare void @glGetTexLevelParameteriv(i32, i32, i32, i8*) inlinehint

declare void @glGetTexParameterfv(i32, i32, i8*) inlinehint

declare void @glGetTexParameteriv(i32, i32, i8*) inlinehint

declare i32 @glGetUniformLocation(i32, %String) inlinehint

declare void @glLineStipple(i32, i32) inlinehint

declare void @glLineWidth(float) inlinehint

declare void @glLinkProgram(i32) inlinehint

declare void @glLoadMatrix(i8*) inlinehint

declare void @glMatrixMode(i32) inlinehint

declare void @glPixelStorei(i32, i32) inlinehint

declare void @glPointParameterf(i32, float) inlinehint

declare void @glPointParameteri(i32, i32) inlinehint

declare void @glPointParameterfv(i32, i8*) inlinehint

declare void @glPointParameteriv(i32, i8*) inlinehint

declare void @glPointSize(float) inlinehint

declare void @glPolygonMode(i32, i32) inlinehint

declare void @glPopAttrib() inlinehint

declare void @glPushAttrib(i32) inlinehint

declare void @glShaderSource(i32, i32, %String, i32* nocapture) inlinehint

declare void @glTexEnvf(i32, i32, float) inlinehint

declare void @glTexEnvfv(i32, i32, i8*) inlinehint

declare void @glTexEnvi(i32, i32, i32) inlinehint

declare void @glTexEnviv(i32, i32, i8*) inlinehint

declare void @glTexCoord2f(float, float) inlinehint

declare void @glTexImage1D(i32, i32, i32, i32, i32, i32, i32, i8*) inlinehint

declare void @glTexImage2D(i32, i32, i32, i32, i32, i32, i32, i32, i8*) inlinehint

declare void @glTexParameteri(i32, i32, i32) inlinehint

declare void @glTexParameterf(i32, i32, float) inlinehint

declare void @glTexParameterfv(i32, i32, i8*) inlinehint

declare void @glUniform1i(i32, i32) inlinehint

declare void @glUniform1f(i32, float) inlinehint

declare void @glUniform2f(i32, float, float) inlinehint

declare void @glUniform3f(i32, float, float, float) inlinehint

declare void @glUniform4f(i32, float, float, float, float) inlinehint

declare void @glUniformMatrix3fv(i32, i32, i1, i8*) inlinehint

declare void @glUniformMatrix4fv(i32, i32, i1, i8*) inlinehint

declare void @glUseProgram(i32) inlinehint

declare void @glVertex3f(float, float, float) inlinehint

declare void @glVertexAttribPointer(i32, i32, i32, i1, i32, i8*) inlinehint

declare void @glVertexPointer(i32, i32, i32, i8*) inlinehint

declare void @glViewport(i32, i32, i32, i32) inlinehint

declare void @glBindFramebufferEXT(i32, i32) inlinehint

declare void @glBindRenderbufferEXT(i32, i32) inlinehint

declare i32 @glCheckFramebufferStatusEXT(i32) inlinehint

declare void @glDeleteFramebuffersEXT(i32, i8*) inlinehint

declare void @glDeleteRenderbuffersEXT(i32, i8*) inlinehint

declare void @glFramebufferRenderbufferEXT(i32, i32, i32, i32) inlinehint

declare void @glFramebufferTexture1DEXT(i32, i32, i32, i32, i32) inlinehint

declare void @glFramebufferTexture2DEXT(i32, i32, i32, i32, i32) inlinehint

declare void @glFramebufferTexture3DEXT(i32, i32, i32, i32, i32, i32) inlinehint

declare void @glGenFramebuffersEXT(i32, i8*) inlinehint

declare void @glGenRenderbuffersEXT(i32, i8*) inlinehint

declare void @glGenerateMipmapEXT(i32) inlinehint

declare void @glGetFramebufferAttachmentParameterivEXT(i32, i32, i32, i8*) inlinehint

declare void @glGetRenderbufferParameterivEXT(i32, i32, i8*) inlinehint

declare i1 @glIsFramebufferEXT(i32) inlinehint

declare i1 @glIsRenderbufferEXT(i32) inlinehint

declare void @glRenderbufferStorageEXT(i32, i32, i32, i32) inlinehint

declare void @glFramebufferTextureEXT(i32, i32, i32, i32) inlinehint

declare void @glFramebufferTextureFaceEXT(i32, i32, i32, i32, i32) inlinehint

declare void @glFramebufferTextureLayerEXT(i32, i32, i32, i32, i32) inlinehint

declare void @glProgramParameteriEXT(i32, i32, i32) inlinehint

declare i32 @clGetPlatformIDs(i32, %cl_device_id_VA* nocapture) inlinehint

declare i32 @clGetDeviceIDs(i8*, i32, %cl_device_id_VA* nocapture) inlinehint

declare i8* @clCreateContext(%cl_device_id_VA, i32* nocapture) inlinehint

declare i8* @clCreateCommandQueue(i8*, i8*, i32, i32* nocapture) inlinehint

declare i8* @clCreateProgramWithSource(i8*, %String, i32* nocapture) inlinehint

declare i32 @clBuildProgram(i8*, %cl_device_id_VA, %String) inlinehint

declare i8* @clCreateKernel(i8*, %String, i32* nocapture) inlinehint

declare i8* @clCreateBuffer(i8*, i32, i32, i8*, i32* nocapture) inlinehint

declare i32 @clReleaseMemObject(i8*) inlinehint

declare i32 @clEnqueueReadBuffer(i8*, i8*, i1, i32, i32, i8*, %cl_device_id_VA, i8** nocapture) inlinehint

declare i32 @clEnqueueWriteBuffer(i8*, i8*, i1, i32, i32, i8*, %cl_device_id_VA, i8** nocapture) inlinehint

declare i32 @clSetKernelArg(i8*, i32, i32, i8*) inlinehint

declare i32 @clGetKernelWorkGroupInfo(i8*, i8*, i32, i32, i8*, i8*) inlinehint

declare i32 @clEnqueueNDRangeKernel(i8*, i8*, i32, i8*, i8*, i8*, %cl_device_id_VA, i8** nocapture) inlinehint

declare i32 @clFinish(i8*) inlinehint

declare i32 @clGetProgramBuildInfoi(i8*, i8*, i32, i32* nocapture) inlinehint

declare i32 @clGetProgramBuildInfoStr(i8*, i8*, i32, %String* nocapture) inlinehint

define void @__construct_Boolean__cl_command_queue(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_command_queue(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_command_queue__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__cl_command_queue(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__cl_command_queue(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define void @__construct_Boolean__cl_context(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_context(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_context__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__cl_context(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__cl_context(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define void @__construct_Boolean__cl_device_id(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_device_id(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_device_id__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__cl_device_id(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__cl_device_id(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define void @__cl_device_id_VA__Retain(%cl_device_id_VA %array) inlinehint {
entry:
  %0 = icmp ne %cl_device_id_VA %array, null
  br i1 %0, label %nonNull, label %done

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 0
  %2 = call i32 @llvm.atomic.load.add.i32.p0i32(i32* %1, i32 1)
  br label %done

done:                                             ; preds = %nonNull, %entry
  ret void
}

define void @__cl_device_id_VA__Release(%cl_device_id_VA %array) inlinehint {
entry:
  %index = alloca i32
  %0 = icmp ne %cl_device_id_VA %array, null
  br i1 %0, label %nonNull, label %done

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 0
  %2 = call i32 @llvm.atomic.load.sub.i32.p0i32(i32* %1, i32 1)
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %free, label %done

free:                                             ; preds = %nonNull
  %4 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %5 = load i32* %4
  %6 = getelementptr %cl_device_id_VA %array, i32 0, i32 3
  %7 = getelementptr [0 x i8*]* %6, i32 0, i32 0
  store i32 0, i32* %index
  br label %loopCheck

loopCheck:                                        ; preds = %loopExec, %free
  %8 = load i32* %index
  %9 = icmp eq i32 %8, %5
  br i1 %9, label %loopDone, label %loopExec

loopExec:                                         ; preds = %loopCheck
  %10 = load i32* %index
  %11 = getelementptr i8** %7, i32 %10
  %12 = load i8** %11
  %13 = add i32 %10, 1
  store i32 %13, i32* %index
  br label %loopCheck

loopDone:                                         ; preds = %loopCheck
  %14 = bitcast %cl_device_id_VA %array to i8*
  call void @free(i8* %14)
  br label %done

done:                                             ; preds = %loopDone, %nonNull, %entry
  ret void
}

define i32 @__cl_device_id_VA__Size(%cl_device_id_VA %array) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %array, null
  br i1 %0, label %null, label %nonNull

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %2 = load i32* %1
  ret i32 %2

null:                                             ; preds = %entry
  ret i32 0
}

define i8* @__cl_device_id_VA__ConstIndex(%cl_device_id_VA %array, i32 %index) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %array, null
  br i1 %0, label %outOfRange, label %notNull

notNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %2 = load i32* %1
  %3 = icmp ult i32 %index, %2
  br i1 %3, label %inRange, label %outOfRange

inRange:                                          ; preds = %notNull
  %4 = getelementptr %cl_device_id_VA %array, i32 0, i32 3
  %5 = getelementptr [0 x i8*]* %4, i32 0, i32 0
  %6 = getelementptr i8** %5, i32 %index
  %7 = load i8** %6
  ret i8* %7

outOfRange:                                       ; preds = %notNull, %entry
  call void @__String__Retain(%String bitcast (%4* @8 to %String))
  call void @__String__Report(%String bitcast (%4* @8 to %String))
  ret i8* null
}

define i8** @__cl_device_id_VA__NonConstIndex(%cl_device_id_VA* nocapture %array, i32 %index) inlinehint {
entry:
  %0 = load %cl_device_id_VA* %array
  %1 = icmp eq %cl_device_id_VA %0, null
  br i1 %1, label %outOfRange, label %notNull

notNull:                                          ; preds = %entry
  %2 = getelementptr %cl_device_id_VA %0, i32 0, i32 2
  %3 = load i32* %2
  %4 = icmp ult i32 %index, %3
  br i1 %4, label %inRange, label %outOfRange

inRange:                                          ; preds = %notNull
  %5 = getelementptr inbounds %cl_device_id_VA %0, i32 0, i32 0
  %6 = load i32* %5
  %7 = icmp ugt i32 %6, 1
  br i1 %7, label %nonUnique, label %unique

outOfRange:                                       ; preds = %notNull, %entry
  call void @__String__Retain(%String bitcast (%4* @9 to %String))
  call void @__String__Report(%String bitcast (%4* @9 to %String))
  ret i8** @__cl_device_id__DefaultValue

nonUnique:                                        ; preds = %inRange
  call void @__cl_device_id_VA__Split(i8* bitcast (i8** @__cl_device_id_VA__Adapter to i8*), %cl_device_id_VA* %array)
  br label %unique

unique:                                           ; preds = %nonUnique, %inRange
  %8 = load %cl_device_id_VA* %array
  %9 = getelementptr inbounds %cl_device_id_VA %8, i32 0, i32 3
  %10 = getelementptr [0 x i8*]* %9, i32 0, i32 0
  %11 = getelementptr i8** %10, i32 %index
  ret i8** %11
}

declare void @__cl_device_id_VA__Split(i8*, %cl_device_id_VA*)

define void @__construct_Boolean__cl_device_id_VA(i1* nocapture %booleanLValue, %cl_device_id_VA %arrayRValue) inlinehint {
entry:
  %0 = call i32 @__cl_device_id_VA__Size(%cl_device_id_VA %arrayRValue)
  %1 = icmp ne i32 %0, 0
  store i1 %1, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_device_id_VA(%String* nocapture %stringLValue, %cl_device_id_VA %arrayRValue) inlinehint {
entry:
  %arrayRValue_tempLValue = alloca %cl_device_id_VA
  store %cl_device_id_VA %arrayRValue, %cl_device_id_VA* %arrayRValue_tempLValue
  %0 = bitcast %cl_device_id_VA* %arrayRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_device_id_VA__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

declare void @__cl_device_id_VA__Append(i8*, %cl_device_id_VA*, %cl_device_id_VA)

define void @__method_ASSIGN_OP_ADD__cl_device_id_VA__cl_device_id_VA(%cl_device_id_VA* nocapture %lhsLValue, %cl_device_id_VA %rhsRValue) inlinehint {
entry:
  call void @__cl_device_id_VA__Append(i8* bitcast (i8** @__cl_device_id_VA__Adapter to i8*), %cl_device_id_VA* %lhsLValue, %cl_device_id_VA %rhsRValue)
  ret void
}

define %cl_device_id_VA @__operator_ADD__cl_device_id_VA__cl_device_id_VA(%cl_device_id_VA %lhsRValue, %cl_device_id_VA %rhsRValue) inlinehint {
entry:
  %result = alloca %cl_device_id_VA
  store %cl_device_id_VA null, %cl_device_id_VA* %result
  call void @__cl_device_id_VA__Retain(%cl_device_id_VA %lhsRValue)
  %0 = load %cl_device_id_VA* %result
  store %cl_device_id_VA %lhsRValue, %cl_device_id_VA* %result
  call void @__cl_device_id_VA__Release(%cl_device_id_VA %0)
  call void @__method_ASSIGN_OP_ADD__cl_device_id_VA__cl_device_id_VA(%cl_device_id_VA* %result, %cl_device_id_VA %rhsRValue)
  %1 = load %cl_device_id_VA* %result
  ret %cl_device_id_VA %1
}

define %cl_device_id_VA* @__method_push__cl_device_id_VA__cl_device_id(%cl_device_id_VA* nocapture %thisLValue, i8* %memberRValue) inlinehint {
entry:
  %memberRValue_tempLValue = alloca i8*
  store i8* %memberRValue, i8** %memberRValue_tempLValue
  call void @__cl_device_id_VA__Push(i8* bitcast (i8** @__cl_device_id_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i8** %memberRValue_tempLValue)
  ret %cl_device_id_VA* %thisLValue
}

declare void @__cl_device_id_VA__Push(i8* nocapture, %cl_device_id_VA* nocapture, i8** nocapture) nounwind inlinehint

define i8* @__method_pop__cl_device_id_VA(%cl_device_id_VA* nocapture %thisLValue) inlinehint {
entry:
  %result = alloca i8*
  store i8* null, i8** %result
  call void @__cl_device_id_VA__Pop(i8* bitcast (i8** @__cl_device_id_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i8** %result)
  %0 = load i8** %result
  ret i8* %0
}

declare void @__cl_device_id_VA__Pop(i8* nocapture, %cl_device_id_VA* nocapture, i8** nocapture) nounwind inlinehint

define %cl_device_id_VA* @__method_resize__cl_device_id_VA__Size(%cl_device_id_VA* nocapture %thisLValue, i32 %newSizeRValue) inlinehint {
entry:
  call void @__cl_device_id_VA__Resize(i8* bitcast (i8** @__cl_device_id_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i32 %newSizeRValue)
  ret %cl_device_id_VA* %thisLValue
}

declare void @__cl_device_id_VA__Resize(i8*, %cl_device_id_VA*, i32) nounwind inlinehint

define %cl_device_id_VA* @__method_resize__cl_device_id_VA__Integer(%cl_device_id_VA* nocapture %thisLValue, i32 %integerRValue) inlinehint {
entry:
  %castToSize = alloca i32
  call void @__construct_Size__Integer(i32* %castToSize, i32 %integerRValue)
  %0 = load i32* %castToSize
  call void @__cl_device_id_VA__Resize(i8* bitcast (i8** @__cl_device_id_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i32 %0)
  ret %cl_device_id_VA* %thisLValue
}

define i32 @__method_size__cl_device_id_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = call i32 @__cl_device_id_VA__Size(%cl_device_id_VA %thisRValue)
  ret i32 %0
}

define i32 @__method_dataSize__cl_device_id_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = call i32 @__cl_device_id_VA__Size(%cl_device_id_VA %thisRValue)
  %1 = mul i32 %0, 4
  ret i32 %1
}

define i8* @__method_data__cl_device_id_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %thisRValue, null
  br i1 %0, label %null, label %nonNull

null:                                             ; preds = %entry
  %1 = bitcast %cl_device_id_VA %thisRValue to i8*
  ret i8* %1

nonNull:                                          ; preds = %entry
  %2 = getelementptr inbounds %cl_device_id_VA %thisRValue, i32 0, i32 3
  %3 = getelementptr [0 x i8*]* %2, i32 0, i32 0
  %4 = getelementptr i8** %3, i32 0
  %5 = bitcast i8** %4 to i8*
  ret i8* %5
}

define void @__construct_Boolean__cl_event(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_event(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_event__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__cl_event(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__cl_event(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define void @__cl_event_VA__Retain(%cl_device_id_VA %array) inlinehint {
entry:
  %0 = icmp ne %cl_device_id_VA %array, null
  br i1 %0, label %nonNull, label %done

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 0
  %2 = call i32 @llvm.atomic.load.add.i32.p0i32(i32* %1, i32 1)
  br label %done

done:                                             ; preds = %nonNull, %entry
  ret void
}

define void @__cl_event_VA__Release(%cl_device_id_VA %array) inlinehint {
entry:
  %index = alloca i32
  %0 = icmp ne %cl_device_id_VA %array, null
  br i1 %0, label %nonNull, label %done

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 0
  %2 = call i32 @llvm.atomic.load.sub.i32.p0i32(i32* %1, i32 1)
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %free, label %done

free:                                             ; preds = %nonNull
  %4 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %5 = load i32* %4
  %6 = getelementptr %cl_device_id_VA %array, i32 0, i32 3
  %7 = getelementptr [0 x i8*]* %6, i32 0, i32 0
  store i32 0, i32* %index
  br label %loopCheck

loopCheck:                                        ; preds = %loopExec, %free
  %8 = load i32* %index
  %9 = icmp eq i32 %8, %5
  br i1 %9, label %loopDone, label %loopExec

loopExec:                                         ; preds = %loopCheck
  %10 = load i32* %index
  %11 = getelementptr i8** %7, i32 %10
  %12 = load i8** %11
  %13 = add i32 %10, 1
  store i32 %13, i32* %index
  br label %loopCheck

loopDone:                                         ; preds = %loopCheck
  %14 = bitcast %cl_device_id_VA %array to i8*
  call void @free(i8* %14)
  br label %done

done:                                             ; preds = %loopDone, %nonNull, %entry
  ret void
}

define i32 @__cl_event_VA__Size(%cl_device_id_VA %array) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %array, null
  br i1 %0, label %null, label %nonNull

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %2 = load i32* %1
  ret i32 %2

null:                                             ; preds = %entry
  ret i32 0
}

define i8* @__cl_event_VA__ConstIndex(%cl_device_id_VA %array, i32 %index) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %array, null
  br i1 %0, label %outOfRange, label %notNull

notNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %2 = load i32* %1
  %3 = icmp ult i32 %index, %2
  br i1 %3, label %inRange, label %outOfRange

inRange:                                          ; preds = %notNull
  %4 = getelementptr %cl_device_id_VA %array, i32 0, i32 3
  %5 = getelementptr [0 x i8*]* %4, i32 0, i32 0
  %6 = getelementptr i8** %5, i32 %index
  %7 = load i8** %6
  ret i8* %7

outOfRange:                                       ; preds = %notNull, %entry
  call void @__String__Retain(%String bitcast (%5* @10 to %String))
  call void @__String__Report(%String bitcast (%5* @10 to %String))
  ret i8* null
}

define i8** @__cl_event_VA__NonConstIndex(%cl_device_id_VA* nocapture %array, i32 %index) inlinehint {
entry:
  %0 = load %cl_device_id_VA* %array
  %1 = icmp eq %cl_device_id_VA %0, null
  br i1 %1, label %outOfRange, label %notNull

notNull:                                          ; preds = %entry
  %2 = getelementptr %cl_device_id_VA %0, i32 0, i32 2
  %3 = load i32* %2
  %4 = icmp ult i32 %index, %3
  br i1 %4, label %inRange, label %outOfRange

inRange:                                          ; preds = %notNull
  %5 = getelementptr inbounds %cl_device_id_VA %0, i32 0, i32 0
  %6 = load i32* %5
  %7 = icmp ugt i32 %6, 1
  br i1 %7, label %nonUnique, label %unique

outOfRange:                                       ; preds = %notNull, %entry
  call void @__String__Retain(%String bitcast (%5* @11 to %String))
  call void @__String__Report(%String bitcast (%5* @11 to %String))
  ret i8** @__cl_event__DefaultValue

nonUnique:                                        ; preds = %inRange
  call void @__cl_event_VA__Split(i8* bitcast (i8** @__cl_event_VA__Adapter to i8*), %cl_device_id_VA* %array)
  br label %unique

unique:                                           ; preds = %nonUnique, %inRange
  %8 = load %cl_device_id_VA* %array
  %9 = getelementptr inbounds %cl_device_id_VA %8, i32 0, i32 3
  %10 = getelementptr [0 x i8*]* %9, i32 0, i32 0
  %11 = getelementptr i8** %10, i32 %index
  ret i8** %11
}

declare void @__cl_event_VA__Split(i8*, %cl_device_id_VA*)

define void @__construct_Boolean__cl_event_VA(i1* nocapture %booleanLValue, %cl_device_id_VA %arrayRValue) inlinehint {
entry:
  %0 = call i32 @__cl_event_VA__Size(%cl_device_id_VA %arrayRValue)
  %1 = icmp ne i32 %0, 0
  store i1 %1, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_event_VA(%String* nocapture %stringLValue, %cl_device_id_VA %arrayRValue) inlinehint {
entry:
  %arrayRValue_tempLValue = alloca %cl_device_id_VA
  store %cl_device_id_VA %arrayRValue, %cl_device_id_VA* %arrayRValue_tempLValue
  %0 = bitcast %cl_device_id_VA* %arrayRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_event_VA__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

declare void @__cl_event_VA__Append(i8*, %cl_device_id_VA*, %cl_device_id_VA)

define void @__method_ASSIGN_OP_ADD__cl_event_VA__cl_event_VA(%cl_device_id_VA* nocapture %lhsLValue, %cl_device_id_VA %rhsRValue) inlinehint {
entry:
  call void @__cl_event_VA__Append(i8* bitcast (i8** @__cl_event_VA__Adapter to i8*), %cl_device_id_VA* %lhsLValue, %cl_device_id_VA %rhsRValue)
  ret void
}

define %cl_device_id_VA @__operator_ADD__cl_event_VA__cl_event_VA(%cl_device_id_VA %lhsRValue, %cl_device_id_VA %rhsRValue) inlinehint {
entry:
  %result = alloca %cl_device_id_VA
  store %cl_device_id_VA null, %cl_device_id_VA* %result
  call void @__cl_event_VA__Retain(%cl_device_id_VA %lhsRValue)
  %0 = load %cl_device_id_VA* %result
  store %cl_device_id_VA %lhsRValue, %cl_device_id_VA* %result
  call void @__cl_event_VA__Release(%cl_device_id_VA %0)
  call void @__method_ASSIGN_OP_ADD__cl_event_VA__cl_event_VA(%cl_device_id_VA* %result, %cl_device_id_VA %rhsRValue)
  %1 = load %cl_device_id_VA* %result
  ret %cl_device_id_VA %1
}

define %cl_device_id_VA* @__method_push__cl_event_VA__cl_event(%cl_device_id_VA* nocapture %thisLValue, i8* %memberRValue) inlinehint {
entry:
  %memberRValue_tempLValue = alloca i8*
  store i8* %memberRValue, i8** %memberRValue_tempLValue
  call void @__cl_event_VA__Push(i8* bitcast (i8** @__cl_event_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i8** %memberRValue_tempLValue)
  ret %cl_device_id_VA* %thisLValue
}

declare void @__cl_event_VA__Push(i8* nocapture, %cl_device_id_VA* nocapture, i8** nocapture) nounwind inlinehint

define i8* @__method_pop__cl_event_VA(%cl_device_id_VA* nocapture %thisLValue) inlinehint {
entry:
  %result = alloca i8*
  store i8* null, i8** %result
  call void @__cl_event_VA__Pop(i8* bitcast (i8** @__cl_event_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i8** %result)
  %0 = load i8** %result
  ret i8* %0
}

declare void @__cl_event_VA__Pop(i8* nocapture, %cl_device_id_VA* nocapture, i8** nocapture) nounwind inlinehint

define %cl_device_id_VA* @__method_resize__cl_event_VA__Size(%cl_device_id_VA* nocapture %thisLValue, i32 %newSizeRValue) inlinehint {
entry:
  call void @__cl_event_VA__Resize(i8* bitcast (i8** @__cl_event_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i32 %newSizeRValue)
  ret %cl_device_id_VA* %thisLValue
}

declare void @__cl_event_VA__Resize(i8*, %cl_device_id_VA*, i32) nounwind inlinehint

define %cl_device_id_VA* @__method_resize__cl_event_VA__Integer(%cl_device_id_VA* nocapture %thisLValue, i32 %integerRValue) inlinehint {
entry:
  %castToSize = alloca i32
  call void @__construct_Size__Integer(i32* %castToSize, i32 %integerRValue)
  %0 = load i32* %castToSize
  call void @__cl_event_VA__Resize(i8* bitcast (i8** @__cl_event_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i32 %0)
  ret %cl_device_id_VA* %thisLValue
}

define i32 @__method_size__cl_event_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = call i32 @__cl_event_VA__Size(%cl_device_id_VA %thisRValue)
  ret i32 %0
}

define i32 @__method_dataSize__cl_event_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = call i32 @__cl_event_VA__Size(%cl_device_id_VA %thisRValue)
  %1 = mul i32 %0, 4
  ret i32 %1
}

define i8* @__method_data__cl_event_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %thisRValue, null
  br i1 %0, label %null, label %nonNull

null:                                             ; preds = %entry
  %1 = bitcast %cl_device_id_VA %thisRValue to i8*
  ret i8* %1

nonNull:                                          ; preds = %entry
  %2 = getelementptr inbounds %cl_device_id_VA %thisRValue, i32 0, i32 3
  %3 = getelementptr [0 x i8*]* %2, i32 0, i32 0
  %4 = getelementptr i8** %3, i32 0
  %5 = bitcast i8** %4 to i8*
  ret i8* %5
}

define void @__construct_Boolean__cl_kernel(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_kernel(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_kernel__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__cl_kernel(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__cl_kernel(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define void @__construct_Boolean__cl_mem(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_mem(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_mem__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__cl_mem(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__cl_mem(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define void @__construct_Boolean__cl_platform_id(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_platform_id(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_platform_id__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__cl_platform_id(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__cl_platform_id(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define void @__cl_platform_id_VA__Retain(%cl_device_id_VA %array) inlinehint {
entry:
  %0 = icmp ne %cl_device_id_VA %array, null
  br i1 %0, label %nonNull, label %done

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 0
  %2 = call i32 @llvm.atomic.load.add.i32.p0i32(i32* %1, i32 1)
  br label %done

done:                                             ; preds = %nonNull, %entry
  ret void
}

define void @__cl_platform_id_VA__Release(%cl_device_id_VA %array) inlinehint {
entry:
  %index = alloca i32
  %0 = icmp ne %cl_device_id_VA %array, null
  br i1 %0, label %nonNull, label %done

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 0
  %2 = call i32 @llvm.atomic.load.sub.i32.p0i32(i32* %1, i32 1)
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %free, label %done

free:                                             ; preds = %nonNull
  %4 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %5 = load i32* %4
  %6 = getelementptr %cl_device_id_VA %array, i32 0, i32 3
  %7 = getelementptr [0 x i8*]* %6, i32 0, i32 0
  store i32 0, i32* %index
  br label %loopCheck

loopCheck:                                        ; preds = %loopExec, %free
  %8 = load i32* %index
  %9 = icmp eq i32 %8, %5
  br i1 %9, label %loopDone, label %loopExec

loopExec:                                         ; preds = %loopCheck
  %10 = load i32* %index
  %11 = getelementptr i8** %7, i32 %10
  %12 = load i8** %11
  %13 = add i32 %10, 1
  store i32 %13, i32* %index
  br label %loopCheck

loopDone:                                         ; preds = %loopCheck
  %14 = bitcast %cl_device_id_VA %array to i8*
  call void @free(i8* %14)
  br label %done

done:                                             ; preds = %loopDone, %nonNull, %entry
  ret void
}

define i32 @__cl_platform_id_VA__Size(%cl_device_id_VA %array) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %array, null
  br i1 %0, label %null, label %nonNull

nonNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %2 = load i32* %1
  ret i32 %2

null:                                             ; preds = %entry
  ret i32 0
}

define i8* @__cl_platform_id_VA__ConstIndex(%cl_device_id_VA %array, i32 %index) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %array, null
  br i1 %0, label %outOfRange, label %notNull

notNull:                                          ; preds = %entry
  %1 = getelementptr %cl_device_id_VA %array, i32 0, i32 2
  %2 = load i32* %1
  %3 = icmp ult i32 %index, %2
  br i1 %3, label %inRange, label %outOfRange

inRange:                                          ; preds = %notNull
  %4 = getelementptr %cl_device_id_VA %array, i32 0, i32 3
  %5 = getelementptr [0 x i8*]* %4, i32 0, i32 0
  %6 = getelementptr i8** %5, i32 %index
  %7 = load i8** %6
  ret i8* %7

outOfRange:                                       ; preds = %notNull, %entry
  call void @__String__Retain(%String bitcast (%6* @12 to %String))
  call void @__String__Report(%String bitcast (%6* @12 to %String))
  ret i8* null
}

define i8** @__cl_platform_id_VA__NonConstIndex(%cl_device_id_VA* nocapture %array, i32 %index) inlinehint {
entry:
  %0 = load %cl_device_id_VA* %array
  %1 = icmp eq %cl_device_id_VA %0, null
  br i1 %1, label %outOfRange, label %notNull

notNull:                                          ; preds = %entry
  %2 = getelementptr %cl_device_id_VA %0, i32 0, i32 2
  %3 = load i32* %2
  %4 = icmp ult i32 %index, %3
  br i1 %4, label %inRange, label %outOfRange

inRange:                                          ; preds = %notNull
  %5 = getelementptr inbounds %cl_device_id_VA %0, i32 0, i32 0
  %6 = load i32* %5
  %7 = icmp ugt i32 %6, 1
  br i1 %7, label %nonUnique, label %unique

outOfRange:                                       ; preds = %notNull, %entry
  call void @__String__Retain(%String bitcast (%6* @13 to %String))
  call void @__String__Report(%String bitcast (%6* @13 to %String))
  ret i8** @__cl_platform_id__DefaultValue

nonUnique:                                        ; preds = %inRange
  call void @__cl_platform_id_VA__Split(i8* bitcast (i8** @__cl_platform_id_VA__Adapter to i8*), %cl_device_id_VA* %array)
  br label %unique

unique:                                           ; preds = %nonUnique, %inRange
  %8 = load %cl_device_id_VA* %array
  %9 = getelementptr inbounds %cl_device_id_VA %8, i32 0, i32 3
  %10 = getelementptr [0 x i8*]* %9, i32 0, i32 0
  %11 = getelementptr i8** %10, i32 %index
  ret i8** %11
}

declare void @__cl_platform_id_VA__Split(i8*, %cl_device_id_VA*)

define void @__construct_Boolean__cl_platform_id_VA(i1* nocapture %booleanLValue, %cl_device_id_VA %arrayRValue) inlinehint {
entry:
  %0 = call i32 @__cl_platform_id_VA__Size(%cl_device_id_VA %arrayRValue)
  %1 = icmp ne i32 %0, 0
  store i1 %1, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_platform_id_VA(%String* nocapture %stringLValue, %cl_device_id_VA %arrayRValue) inlinehint {
entry:
  %arrayRValue_tempLValue = alloca %cl_device_id_VA
  store %cl_device_id_VA %arrayRValue, %cl_device_id_VA* %arrayRValue_tempLValue
  %0 = bitcast %cl_device_id_VA* %arrayRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_platform_id_VA__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

declare void @__cl_platform_id_VA__Append(i8*, %cl_device_id_VA*, %cl_device_id_VA)

define void @__method_ASSIGN_OP_ADD__cl_platform_id_VA__cl_platform_id_VA(%cl_device_id_VA* nocapture %lhsLValue, %cl_device_id_VA %rhsRValue) inlinehint {
entry:
  call void @__cl_platform_id_VA__Append(i8* bitcast (i8** @__cl_platform_id_VA__Adapter to i8*), %cl_device_id_VA* %lhsLValue, %cl_device_id_VA %rhsRValue)
  ret void
}

define %cl_device_id_VA @__operator_ADD__cl_platform_id_VA__cl_platform_id_VA(%cl_device_id_VA %lhsRValue, %cl_device_id_VA %rhsRValue) inlinehint {
entry:
  %result = alloca %cl_device_id_VA
  store %cl_device_id_VA null, %cl_device_id_VA* %result
  call void @__cl_platform_id_VA__Retain(%cl_device_id_VA %lhsRValue)
  %0 = load %cl_device_id_VA* %result
  store %cl_device_id_VA %lhsRValue, %cl_device_id_VA* %result
  call void @__cl_platform_id_VA__Release(%cl_device_id_VA %0)
  call void @__method_ASSIGN_OP_ADD__cl_platform_id_VA__cl_platform_id_VA(%cl_device_id_VA* %result, %cl_device_id_VA %rhsRValue)
  %1 = load %cl_device_id_VA* %result
  ret %cl_device_id_VA %1
}

define %cl_device_id_VA* @__method_push__cl_platform_id_VA__cl_platform_id(%cl_device_id_VA* nocapture %thisLValue, i8* %memberRValue) inlinehint {
entry:
  %memberRValue_tempLValue = alloca i8*
  store i8* %memberRValue, i8** %memberRValue_tempLValue
  call void @__cl_platform_id_VA__Push(i8* bitcast (i8** @__cl_platform_id_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i8** %memberRValue_tempLValue)
  ret %cl_device_id_VA* %thisLValue
}

declare void @__cl_platform_id_VA__Push(i8* nocapture, %cl_device_id_VA* nocapture, i8** nocapture) nounwind inlinehint

define i8* @__method_pop__cl_platform_id_VA(%cl_device_id_VA* nocapture %thisLValue) inlinehint {
entry:
  %result = alloca i8*
  store i8* null, i8** %result
  call void @__cl_platform_id_VA__Pop(i8* bitcast (i8** @__cl_platform_id_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i8** %result)
  %0 = load i8** %result
  ret i8* %0
}

declare void @__cl_platform_id_VA__Pop(i8* nocapture, %cl_device_id_VA* nocapture, i8** nocapture) nounwind inlinehint

define %cl_device_id_VA* @__method_resize__cl_platform_id_VA__Size(%cl_device_id_VA* nocapture %thisLValue, i32 %newSizeRValue) inlinehint {
entry:
  call void @__cl_platform_id_VA__Resize(i8* bitcast (i8** @__cl_platform_id_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i32 %newSizeRValue)
  ret %cl_device_id_VA* %thisLValue
}

declare void @__cl_platform_id_VA__Resize(i8*, %cl_device_id_VA*, i32) nounwind inlinehint

define %cl_device_id_VA* @__method_resize__cl_platform_id_VA__Integer(%cl_device_id_VA* nocapture %thisLValue, i32 %integerRValue) inlinehint {
entry:
  %castToSize = alloca i32
  call void @__construct_Size__Integer(i32* %castToSize, i32 %integerRValue)
  %0 = load i32* %castToSize
  call void @__cl_platform_id_VA__Resize(i8* bitcast (i8** @__cl_platform_id_VA__Adapter to i8*), %cl_device_id_VA* %thisLValue, i32 %0)
  ret %cl_device_id_VA* %thisLValue
}

define i32 @__method_size__cl_platform_id_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = call i32 @__cl_platform_id_VA__Size(%cl_device_id_VA %thisRValue)
  ret i32 %0
}

define i32 @__method_dataSize__cl_platform_id_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = call i32 @__cl_platform_id_VA__Size(%cl_device_id_VA %thisRValue)
  %1 = mul i32 %0, 4
  ret i32 %1
}

define i8* @__method_data__cl_platform_id_VA(%cl_device_id_VA %thisRValue) inlinehint {
entry:
  %0 = icmp eq %cl_device_id_VA %thisRValue, null
  br i1 %0, label %null, label %nonNull

null:                                             ; preds = %entry
  %1 = bitcast %cl_device_id_VA %thisRValue to i8*
  ret i8* %1

nonNull:                                          ; preds = %entry
  %2 = getelementptr inbounds %cl_device_id_VA %thisRValue, i32 0, i32 3
  %3 = getelementptr [0 x i8*]* %2, i32 0, i32 0
  %4 = getelementptr i8** %3, i32 0
  %5 = bitcast i8** %4 to i8*
  ret i8* %5
}

define void @__construct_Boolean__cl_program(i1* nocapture %booleanLValue, i8* %opaqueRValue) inlinehint {
entry:
  %0 = icmp ne i8* %opaqueRValue, null
  store i1 %0, i1* %booleanLValue
  ret void
}

define void @__construct_String__cl_program(%String* nocapture %stringLValue, i8* %opaqueRValue) inlinehint {
entry:
  %opaqueRValue_tempLValue = alloca i8*
  store i8* %opaqueRValue, i8** %opaqueRValue_tempLValue
  %0 = bitcast i8** %opaqueRValue_tempLValue to i8*
  %1 = call %String @__String__Cast(i8* %0, i8* bitcast (i8** @__cl_program__Adapter to i8*))
  %2 = load %String* %stringLValue
  store %String %1, %String* %stringLValue
  call void @__String__Release(%String %2)
  ret void
}

define i32 @__method_dataSize__cl_program(i8* %thisRValue) inlinehint {
entry:
  ret i32 4
}

define i8* @__method_data__cl_program(i8** nocapture %thisLValue) inlinehint {
entry:
  %0 = bitcast i8** %thisLValue to i8*
  ret i8* %0
}

define i8 @computeDwell(float %x, float %y) inlinehint {
entry:
  %z_re = alloca float
  %z_im = alloca float
  %count = alloca i8
  %castToByte = alloca i8
  %castToByte1 = alloca i8
  %castToInteger = alloca i32
  %new_z_re = alloca float
  store float %x, float* %z_re
  store float %y, float* %z_im
  call void @__construct_Byte__Integer(i8* %castToByte, i32 0)
  %0 = load i8* %castToByte
  store i8 %0, i8* %count
  call void @__construct_Byte__Integer(i8* %castToByte1, i32 0)
  %1 = load i8* %castToByte1
  store i8 %1, i8* %count
  br label %loopCheckPreCond

loopCheckPreCond:                                 ; preds = %loopCheckPostCond, %entry
  %2 = load i8* %count
  call void @__construct_Integer__Byte(i32* %castToInteger, i8 %2)
  %3 = load i32* %castToInteger
  %4 = call i1 @__operator_LT__Integer__Integer(i32 %3, i32 255)
  br i1 %4, label %loopBody, label %loopEnd

loopBody:                                         ; preds = %loopCheckPreCond
  %5 = load float* %z_re
  %6 = load float* %z_re
  %7 = call float @__operator_MUL__Scalar__Scalar(float %5, float %6)
  %8 = load float* %z_im
  %9 = load float* %z_im
  %10 = call float @__operator_MUL__Scalar__Scalar(float %8, float %9)
  %11 = call float @__operator_ADD__Scalar__Scalar(float %7, float %10)
  %12 = call i1 @__operator_GE__Scalar__Scalar(float %11, float 4.000000e+00)
  br i1 %12, label %cond_true, label %cond_false

loopStep:                                         ; preds = %cond_done
  %13 = call i8 @__operator_PRE_INC__Byte(i8* %count)
  br label %loopCheckPostCond

loopCheckPostCond:                                ; preds = %loopStep
  br i1 true, label %loopCheckPreCond, label %loopEnd

loopEnd:                                          ; preds = %loopCheckPostCond, %cond_true, %loopCheckPreCond
  %14 = load i8* %count
  %15 = load float* %z_re
  %16 = load float* %z_im
  %17 = load i8* %count
  ret i8 %14

cond_true:                                        ; preds = %loopBody
  br label %loopEnd

cond_false:                                       ; preds = %loopBody
  br label %cond_done

cond_done:                                        ; preds = %cond_false
  %18 = load float* %z_re
  %19 = load float* %z_re
  %20 = call float @__operator_MUL__Scalar__Scalar(float %18, float %19)
  %21 = load float* %z_im
  %22 = load float* %z_im
  %23 = call float @__operator_MUL__Scalar__Scalar(float %21, float %22)
  %24 = call float @__operator_SUB__Scalar__Scalar(float %20, float %23)
  %25 = call float @__operator_ADD__Scalar__Scalar(float %24, float %x)
  store float %25, float* %new_z_re
  %26 = load float* %z_re
  %27 = call float @__operator_MUL__Scalar__Scalar(float 2.000000e+00, float %26)
  %28 = load float* %z_im
  %29 = call float @__operator_MUL__Scalar__Scalar(float %27, float %28)
  %30 = call float @__operator_ADD__Scalar__Scalar(float %29, float %y)
  store float %30, float* %z_im
  %31 = load float* %new_z_re
  store float %31, float* %z_re
  %32 = load float* %new_z_re
  br label %loopStep
}

define void @entry() inlinehint {
entry:
  %row = alloca i32
  %y = alloca float
  %castToScalar = alloca float
  %rowString = alloca %String
  %col = alloca i32
  %x = alloca float
  %castToScalar6 = alloca float
  %dwell = alloca i8
  %castToInteger = alloca i32
  %castToBoolean = alloca i1
  %castToInteger9 = alloca i32
  %castToBoolean10 = alloca i1
  %castToInteger14 = alloca i32
  %castToBoolean15 = alloca i1
  store i32 0, i32* %row
  br label %loopCheckPreCond

loopCheckPreCond:                                 ; preds = %loopCheckPostCond, %entry
  %0 = load i32* %row
  %1 = call i1 @__operator_LE__Integer__Integer(i32 %0, i32 40)
  br i1 %1, label %loopBody, label %loopEnd

loopBody:                                         ; preds = %loopCheckPreCond
  %2 = load i32* %row
  call void @__construct_Scalar__Integer(float* %castToScalar, i32 %2)
  %3 = load float* %castToScalar
  %4 = call float @__operator_MUL__Scalar__Scalar(float 4.000000e+00, float %3)
  %5 = call float @__operator_DIV__Scalar__Scalar(float %4, float 4.000000e+01)
  %6 = call float @__operator_SUB__Scalar__Scalar(float %5, float 2.000000e+00)
  store float %6, float* %y
  store %String null, %String* %rowString
  store i32 0, i32* %col
  br label %loopCheckPreCond1

loopStep:                                         ; preds = %loopEnd5
  %7 = call i32 @__operator_PRE_INC__Integer(i32* %row)
  br label %loopCheckPostCond

loopCheckPostCond:                                ; preds = %loopStep
  br i1 true, label %loopCheckPreCond, label %loopEnd

loopEnd:                                          ; preds = %loopCheckPostCond, %loopCheckPreCond
  %8 = load i32* %row
  ret void

loopCheckPreCond1:                                ; preds = %loopCheckPostCond4, %loopBody
  %9 = load i32* %col
  %10 = call i1 @__operator_LE__Integer__Integer(i32 %9, i32 78)
  br i1 %10, label %loopBody2, label %loopEnd5

loopBody2:                                        ; preds = %loopCheckPreCond1
  %11 = load i32* %col
  call void @__construct_Scalar__Integer(float* %castToScalar6, i32 %11)
  %12 = load float* %castToScalar6
  %13 = call float @__operator_MUL__Scalar__Scalar(float 4.000000e+00, float %12)
  %14 = call float @__operator_DIV__Scalar__Scalar(float %13, float 7.800000e+01)
  %15 = call float @__operator_SUB__Scalar__Scalar(float %14, float 2.000000e+00)
  store float %15, float* %x
  %16 = load float* %x
  %17 = load float* %y
  %18 = call i8 @computeDwell(float %16, float %17)
  store i8 %18, i8* %dwell
  %19 = load i8* %dwell
  call void @__construct_Integer__Byte(i32* %castToInteger, i8 %19)
  %20 = load i32* %castToInteger
  %21 = call i32 @__operator_BIT_AND__Integer__Integer(i32 %20, i32 192)
  call void @__construct_Boolean__Integer(i1* %castToBoolean, i32 %21)
  %22 = load i1* %castToBoolean
  br i1 %22, label %cond_true, label %cond_false

loopStep3:                                        ; preds = %cond_done
  %23 = call i32 @__operator_PRE_INC__Integer(i32* %col)
  br label %loopCheckPostCond4

loopCheckPostCond4:                               ; preds = %loopStep3
  br i1 true, label %loopCheckPreCond1, label %loopEnd5

loopEnd5:                                         ; preds = %loopCheckPostCond4, %loopCheckPreCond1
  %24 = load %String* %rowString
  call void @__String__Retain(%String %24)
  call void @__String__Report(%String %24)
  call void @__String__Release(%String %24)
  %25 = load float* %y
  %26 = load %String* %rowString
  call void @__String__Release(%String %26)
  %27 = load i32* %col
  br label %loopStep

cond_true:                                        ; preds = %loopBody2
  call void @__String__Retain(%String bitcast (%7* @14 to %String))
  call void @__method_ASSIGN_OP_ADD__String__String(%String* %rowString, %String bitcast (%7* @14 to %String))
  call void @__String__Release(%String bitcast (%7* @14 to %String))
  br label %cond_done

cond_false:                                       ; preds = %loopBody2
  %28 = load i8* %dwell
  call void @__construct_Integer__Byte(i32* %castToInteger9, i8 %28)
  %29 = load i32* %castToInteger9
  %30 = call i32 @__operator_BIT_AND__Integer__Integer(i32 %29, i32 48)
  call void @__construct_Boolean__Integer(i1* %castToBoolean10, i32 %30)
  %31 = load i1* %castToBoolean10
  br i1 %31, label %cond_true7, label %cond_false8

cond_done:                                        ; preds = %cond_done11, %cond_true
  %32 = load float* %x
  %33 = load i8* %dwell
  br label %loopStep3

cond_true7:                                       ; preds = %cond_false
  call void @__String__Retain(%String bitcast (%7* @15 to %String))
  call void @__method_ASSIGN_OP_ADD__String__String(%String* %rowString, %String bitcast (%7* @15 to %String))
  call void @__String__Release(%String bitcast (%7* @15 to %String))
  br label %cond_done11

cond_false8:                                      ; preds = %cond_false
  %34 = load i8* %dwell
  call void @__construct_Integer__Byte(i32* %castToInteger14, i8 %34)
  %35 = load i32* %castToInteger14
  %36 = call i32 @__operator_BIT_AND__Integer__Integer(i32 %35, i32 12)
  call void @__construct_Boolean__Integer(i1* %castToBoolean15, i32 %36)
  %37 = load i1* %castToBoolean15
  br i1 %37, label %cond_true12, label %cond_false13

cond_done11:                                      ; preds = %cond_done16, %cond_true7
  br label %cond_done

cond_true12:                                      ; preds = %cond_false8
  call void @__String__Retain(%String bitcast (%7* @16 to %String))
  call void @__method_ASSIGN_OP_ADD__String__String(%String* %rowString, %String bitcast (%7* @16 to %String))
  call void @__String__Release(%String bitcast (%7* @16 to %String))
  br label %cond_done16

cond_false13:                                     ; preds = %cond_false8
  call void @__String__Retain(%String bitcast (%7* @17 to %String))
  call void @__method_ASSIGN_OP_ADD__String__String(%String* %rowString, %String bitcast (%7* @17 to %String))
  call void @__String__Release(%String bitcast (%7* @17 to %String))
  br label %cond_done16

cond_done16:                                      ; preds = %cond_false13, %cond_true12
  br label %cond_done11
}
