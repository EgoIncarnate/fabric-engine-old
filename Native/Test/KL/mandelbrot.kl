/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

struct Complex32 {
  Scalar re;
  Scalar im;
};

function Complex32(Scalar re, Scalar im) {
  this.re = re;
  this.im = im;
}

function Complex32 +(Complex32 lhs, Complex32 rhs) {
  return Complex32(lhs.re + rhs.re, lhs.im + rhs.im);
}

function Complex32 *(Complex32 lhs, Complex32 rhs) {
  return Complex32(lhs.re*rhs.re-lhs.im*rhs.im, lhs.re*rhs.im + lhs.im*rhs.re);
}

function Scalar Complex32.normSq() {
  return this.re*this.re + this.im*this.im;
}

function Byte computeDwell(Complex32 c) {
  Complex32 z = c;
  Size count;
  for (count = 0; count < 255; ++count) {
    if (z.normSq > 4)
      break;
    z = z*z + c;
  }
  return count;
}

operator entry()
{
  Complex32 z;
  for (Size row=9; row<=31; ++row) {
    z.im = 4.0 * row / 40.0 - 2.0;
    String rowString;
    for (Size col=0; col<=78; ++col) {
      z.re = 4.0 * col / 78.0 - 2.0;
      Byte dwell = computeDwell(z);
      if (dwell & 192)
        rowString += "#";
      else if (dwell & 48)
        rowString += "*";
      else if (dwell & 12)
        rowString += ".";
      else
        rowString += " ";
    }
    report rowString;
  }
}
