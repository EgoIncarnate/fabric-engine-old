import os, re
Import('env')

docbookEnv = env.Clone()

try:
	docbookRoot = os.environ['SHORT_ATTENTION_SPAN_DOCBOOK_PATH']
except:
	print "Missing environment variable SHORT_ATTENTION_SPAN_DOCBOOK_PATH"
	sys.exit(1)

docbookSchema = os.path.join(docbookRoot, 'xsl', 'docbookxi.rng')

saxonClassJars = [
	docbookRoot + "/jars/xercesImpl-2.7.1.jar",
  docbookRoot + "/xsl/extensions/saxon65.jar",
  docbookRoot + "/jars/saxon.jar",
  docbookRoot + "/jars/xslthl-2.0.1.jar"
	]
saxonClassPath = os.pathsep.join(saxonClassJars)

highlighterConfigPath = "file:///" + docbookRoot + "/xsl/highlighting/xslthl-config.xml"

foClassJars = [
  docbookRoot + "/fop/avalon-framework-4.2.0.jar",
  docbookRoot + "/jars/batik-all-1.7.jar",
  docbookRoot + "/jars/commons-io-1.3.1.jar",
  docbookRoot + "/jars/commons-logging-1.0.4.jar",
  docbookRoot + "/jars/fop-hyph.jar",
  docbookRoot + "/jars/fop.jar",
  docbookRoot + "/jars/serializer-2.7.0.jar",
  docbookRoot + "/jars/xalan-2.7.0.jar",
  docbookRoot + "/jars/xercesImpl-2.7.1.jar",
  docbookRoot + "/jars/xml-apis-1.3.04.jar",
  docbookRoot + "/jars/xmlgraphics-commons-1.4.jar"
  ]
foClassPath = os.pathsep.join(foClassJars)

w3cEntities = docbookEnv.File('w3centities-f.ent')

def Docbook(env, inputDocbookXML):
	inputBasename = re.sub('\.docbook\.xml$', '', inputDocbookXML)
	outputPDFs = []
	env.Depends(inputDocbookXML, w3cEntities)
	pdfXSL = env.Dir('xsl').File('pdf.xsl')
	pdfFO = env.Command(
		inputBasename + ".pdf.fo",
		[inputDocbookXML, pdfXSL],
		[[
			'java', '-Xss1024K', '-Xmx512m',
			'-cp', saxonClassPath,
	 		'-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl',
	    '-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl',
	    '-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration',
	    '-Dxslthl.config=' + highlighterConfigPath,
			'com.icl.saxon.StyleSheet',
			'-o', '$TARGET',
			'$SOURCES',
			'use.extensions=1'
			]]
		)
	env.AddPreAction(
		pdfFO,
		[[
			'java',
			'-jar',
			'-Xmx512m',
			'-Xss1024K',
			'-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration',
			docbookRoot + '/jars/jing.jar',
			docbookSchema,
			"$SOURCE"
			]]
		)
	foXML = env.Dir('xsl').File('fo.xml')
	notePNG = env.Dir('images').File('note.png')
	warningPNG = env.Dir('images').File('warning.png')
	outputPDFs.append(env.Command(
		inputBasename + ".pdf",
		[pdfFO, foXML, notePNG, warningPNG],
		[[
			'java', '-Xmx512m', '-Xss1024K',
			'-cp', foClassPath,
			'org.apache.fop.cli.Main',
			'-fo', '$SOURCE',
			'-pdf', '$TARGET'
			]]
		))
	return outputPDFs
AddMethod(docbookEnv, Docbook)

klpgPDF = Alias('klpgPDF', docbookEnv.Docbook('FabricEngine-KLProgrammingGuide.docbook.xml'))
iopgPDF = Alias('iopgPDF', docbookEnv.Docbook('FabricEngine-IOProgrammingGuide.docbook.xml'))
jssgPDF = Alias('jssgPDF', docbookEnv.Docbook('FabricEngine-JSSceneGraphProgrammingGuide.docbook.xml'))
extsPDF = Alias('extsPDF', docbookEnv.Docbook('FabricEngine-ExtensionReference.docbook.xml'))
Alias('guides', [klpgPDF, iopgPDF, jssgPDF, extsPDF])