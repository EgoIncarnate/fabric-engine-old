//
// Copyright 2010-2011 Fabric Technologies Inc. All rights reserved.
//

use FabricFILESTREAM;
use FabricFileStream;

operator openFileStreamForWriting(
  io String handle,
  io FabricFileStream stream,
  io String dataNames[],
  io Size seekOffsetsLocation,
  io Size seekOffsets[]
){
  report "openFileStream";
  stream.open(handle,"w");
  report "dataNames:"+dataNames;
  
  if(stream.isValid() && dataNames.size() > 0) {
    seekOffsets.resize(dataNames.size());
    stream.writeStringArray(dataNames);
    seekOffsetsLocation = stream.getSeek();
    // Write an array of 0 so that we have
    // allocated the space for the TOC later
    for(Size i=0;i<dataNames.size();i++) {
      stream.writeSize(0);
    }
  }
}

operator openFileStreamForReading(
  io FabricResource resource,
  io FabricFileStream stream,
  io String dataNames[],
  io Size seekOffsets[]
){
  report "openFileStream";
  report "dataExternalLocation:"+resource.dataExternalLocation;
  
  if(!stream.isValid()) {
    stream.open(resource.dataExternalLocation,"r");
    if(stream.isValid()) {
      stream.readStringArray(dataNames);
  report "dataNames:" + dataNames;
      seekOffsets.resize(dataNames.size);
      Size offset;
      for(Size i=0;i<dataNames.size();i++) {
        stream.readSize(offset);
        seekOffsets[i] = offset;
      }
  report "seekOffsets:" + seekOffsets;
    }
  }
}


operator closeFileStream(
  io String handle,
  io FabricFileStream stream,
  io Size seekOffsetsLocation,
  io Size seekOffsets[]
){
  report "closeFileStream";
    report "seekOffsets:"+seekOffsets;
  // Now we write the TOC. Each integer specifies the seek offset
  // of the data for the indexed data member. 
  stream.setSeek(seekOffsetsLocation);
  stream.writeData(seekOffsets.data(),seekOffsets.dataSize());
  stream.close();
  
  
  FabricFileStream stream2;
  stream2.open(handle,"r");
  if(stream2.isValid()) {
    String dataNames2[];
    Size seekOffsets2[];
    report "Stream Size:"+stream2.getSize();
    stream2.readStringArray(dataNames2);
    seekOffsets2.resize(dataNames2.size);
    Size offset;
    for(Size i=0;i<dataNames2.size();i++) {
      stream2.readSize(offset);
      seekOffsets2[i] = offset;
    }
    stream2.close();
    
    report dataNames2;
    report seekOffsets2;
  }
}



operator readTOCFromStream(
  io FabricResource resource,
  io String dataNames[],
  io Size seekOffsets[]
){
  report "readTOCFromStream";
  FabricFileStream stream;
  stream.open(resource.dataExternalLocation,"r");
  if(stream.isValid()) {
    report "Stream Size:"+stream.getSize();
    stream.readStringArray(dataNames);
    seekOffsets.resize(dataNames.size);
    Size offset;
    for(Size i=0;i<dataNames.size();i++) {
      stream.readSize(offset);
      seekOffsets[i] = offset;
    }
    stream.close();
    
    report dataNames;
    report seekOffsets;
  }
}


